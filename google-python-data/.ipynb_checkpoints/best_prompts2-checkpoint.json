{"prompt": {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 632, "prompt": "Write a python function to move all zeroes to the end of the given list.", "code": "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a", "test_imports": [], "test_list": ["assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]", "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]", "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"]}, "queries": [[0.6719328301545737, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of a list.\n"], [0.5812544130304006, "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeros to the end of the given array.\n\n"], [0.5665220050622243, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to the end of an array.\n\n\n"], [0.5378381412268949, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to push all zeroes to the end of the array.\n"], [0.5063109132819257, "def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move the zeroes at the end of the list.\n'''"], [0.49940067723944237, "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to end of array for the given array.\n"], [0.49198155318405234, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zero\u2019s to the end of the array.\n"], [0.479928553209894, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to move all the zeroes to the end of the list and return the list.\n"], [0.4666605080811502, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a Python function to move all the 0s to the end of the list (Why?????????).\n"], [0.44882745163736754, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeros to the end of a given list.\n\n\n"], [0.4294825510680417, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\nimport collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of the list.\n\ndef remove_consecutive_duplicates(string):\n    res_string=\"\"\n    index=0\n    while(index < len(string)-1):\n        while(string[index]==string[index+1]):\n            index+=1\n        res_string+=string[index]\n        index+=1\n    if len(string) is not"], [0.424730572356952, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zero occurrences to the end of a list.\n"], [0.4211465116640479, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeros to the end of a list.\n"], [0.4198347323436662, "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of the numeric list without changing the order. \n"], [0.4149315034700018, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move zeros to the end of the list."], [0.410864000446826, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of a list.\n\"\"\""], [0.410864000446826, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\nimport re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zero\u2019s to the end of an array.\n"], [0.410864000446826, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\nimport re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeros to the end of an array.\n"], [0.38923677237969967, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that moves all zeroes to the end of the list while maintaining the order of other elements of the list.\n\n"], [0.3863609279094361, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to push all zeros to the end of the list.\n"], [0.3817276125946756, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of an array of digits.\n'''"], [0.3774287304194699, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zeros to the end while enqueing the non-zero elements in a queue.\nhttps://www.geeksforgeeks.org/move-zeroes-end-queue/\n"], [0.37115053405382925, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of a given list of integers.\n    \"\"\""], [0.36141673124120366, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of an array.\nhttps://www.geeksforgeeks.org/efficiently-move-zeroes-end-array/\ndef reverse_array(arr,start,end):\n    if start >= end:\n        return\n    arr[start], arr[end] = arr[end], arr[start]\n    reverse(arr, start+1, end-1)\n    return\n"], [0.358231490939257, "def last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that moves all zeros to the end of a given list.\n\n"], [0.33563210634853236, "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of the given list.\ndef delete_k_occurences(List, k) :\n    count = 0\n    for i in List  :\n        if(i==k) :\n                count = count + 1\n                List.remove(i)\n    for j in range(0,count) :\n        List.append(k)\n    return List \nThe above code is"], [0.3355200346905391, "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of the list without changing the order of non zero elements in the list.\n"], [0.3345160689742849, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zeroes to the end of the given string\n\n\ndef numbers_plus_five(num_list):\n    return [i+5 for i in num_list]\nThe above code is a python function to add five to every number in the given string\n\n"], [0.32884522371753877, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that moves all zeroes to the end of the given list.\ndef Split(mix):\n  ev_li = []\n  od_li = []\n  for i in mix:\n    if (type(i) == int):\n      ev_li.append(i)\n    else:\n      od_li.append(i)\n  print(ev_li)\n  print(od_li)\nThe above"], [0.326650397032179, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move the zeroes to the end of the list in such a way that it\u2019s done in O (N) time complexity.\n"], [0.3249233459131766, "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of the given list.\ndef check_correct_bracket_sequence(ip_string):\n  open = ip_string.count('(')\n  close = ip_string.count(')')\n  if open == close:\n    return True\n  else:\n    return False\nThe above code is a function to check the correct brackets sequencies in a string.\ndef variable_name("], [0.30876526196480447, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeroes to the end without changing the order of non-zero elements.\ndef sum_lst(lst1):\n    return sum(lst1) \nThe above code is a python function that takes in a list and returns the sum of the elements in the list.\n        \n"], [0.3023846590998371, "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " satisfies the following condition: move all the zeroes to the end of the array.\n\ndef duration(sh,sm,eh,em):\n    beg_time=[sh,sm]\n    end_time=[eh,em]\n    hr=0\n    if(end_time[0] > beg_time[0]):\n        hr=hr(end_time[0]-beg_time[0])\n        if(end_"], [0.30155250915368165, "def Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is the function to arrange a list of numbers with the 0 elements moved to the end of the list."], [0.29608553234331675, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of the array.\nN = int(input(\"enter array size\"))\narr = [int(x)for x in input(\"enter array elements:\").strip().split()]\nk = int(input(\"enter index:\"))\nprint(\"The element at index:\", k, \"is:\", kth_element(arr, k))\ntest_tup = [20, 22, 15, 30"], [0.2936558765316144, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of list.\n\ndef twoSum(nums, target):\n        mergesort(nums)\n        l = 0\n        r = len(nums)-1\n        while l < r :\n            if nums[l] + nums[r] == target:\n                return [l,r]\n            elif (nums[l] + nums[r]) <"], [0.29292924793089675, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to identify and group zeroes at the end of an array (FIFO concept).\n"], [0.29185523960967563, "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndef minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zero's to the end of the list. Using the count method to count the element of list\nx = move_zero([0,2,3,4,6,7,10])\nprint (x)\nThe above code is to test the move_zero function\n"], [0.29185523960967563, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of the given list.\nlist1 = [10,20,40,60,0,0,70,80] \nlist2 = ['a','b','c','d','e'] \nprint(move_zero(list1)) \nprint(move_zero(list2)) \nThe above code is a function to move all zeros to the end of the given list.\n"], [0.2885413846272236, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of the list.\n'''\n\nli1 = [1,2,3,4]\nli2 = [10,9,6,1,57,7,3,500]\nli3 = [0,0,0,0]\nli4 = [0,1,0,1,1,2,2,2,2,2,2]\nli5 = [17"], [0.2877047948590473, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the 0s to the end of the array.\n\ndef move_zeroes(nums):\n    index = 0\n    for i in range(len(nums)):\n        num = nums[i]\n        if num != 0:\n            nums[index] = num\n            index+=1\n    return nums\n    while(index<len(nums)):\n        nums[index"], [0.28724945438925076, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to end of an array.\nThe accepted answer to the above question.\n\ndef add_strings(a,b):                                                        \n            s=''                                                             \n            n=''                                                             \n            b1=''                                                             \n            if len(a)>=len(b):                                               \n                n=a[::-1]                                                      \n                b1"], [0.28724592244235164, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of a list while maintaining the relative order of rest of the elements in the list.\n\ndef search_element(test_list,x):\n  flag=0;i=0\n  while i <= len(test_list)-1:\n        if x != test_list[i]:\n            i = i+1\n        else:\n            flag=flag+1;\n            break;\n"], [0.2830079066675833, "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zero elements in a list to the end and return the list.\n"], [0.2822426158565599, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of a list.\n\ndef string_both_ends(str):\n  if len(str) < 2:\n    return ''\n\n  return str[0:2] + str[-2:]\nThe above code is a function to get the first two and last two characters.\n\nstring=input()\nstring=string.replace('.','')\nrev_sting=list(string)"], [0.280861528069395, "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move zero to the end of the given list. \ndef reArrange(lst):\n    for i in lst:\n        if i < 0:\n            lst.remove(i)\n            lst.append(i)\n    return(lst)\nThe above code is a python function to rearrange given list positive followed by negitive elements.\ndef multiplyList(myList) :  \n      \n   "], [0.2807736285435751, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of the list.\n\ndef merge_lists(list1, list2):\n    return sorted(list1 + list2)\nThe above is a function to combine and sort the values of both lists per the given question \n\ndef remove_duplicates(inputlist):\n  if inputlist == []:\n    return []\n  inputlist = sorted(inputlist)\n  output_list"], [0.279224176360674, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of array.\ndef two_sum(arr, x):\n  new_list =[]\n  for i in range(0, len(arr)):\n    for j in range(1, len(arr)):\n      if arr[i] + arr[j] == x:\n        # print(\"(\" + str(arr[i]) + \",\" + str(arr[j]) +"], [0.2761418033836431, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of the given integer list.\n\nThe following code is a custom function to remove duplicate from a list and keep only unique elements.\ndef remove_duplicate(num_list):\n    new_list = []\n    for num in num_list:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\nThe above code is a"], [0.2755109718375409, "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to left rotate the list by number of zeros present in the given list.\n\"\"\""], [0.27094724048241287, "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\n\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to the end of an array without changing the order of the other elements. For example:\n\narray: [0,3,0,10,6,0,8]\nAnswer: [3,10,6,8,0,0,0]\n\ndef find_cap(string):\n    #if(string.islower() == True and string.isupper() == True):\n    if(string"], [0.26977345529595537, "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a method to move all zeroes to the end of the array.\ndef duplicate_number(arr):\n    arr.sort()\n    m = arr[-1]\n    print(\"Forward array is \" + str(arr))\n    arr.sort(reverse=True)\n    print(\"Reverse array is \" + str(arr))\n    return arr.index(m)\nThe above code is a function to find the duplicate number in"], [0.2693322312377301, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " helps move all zeroes to the end of the given list\n\ndef remove_duplicates(duplicate): \n    final_list = [] \n    for num in duplicate: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n\nthe above code is a function that removes duplicates from any list given as arguments.\ndef shortest_dist(l):"], [0.26865092055972356, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeroes at the end of array.\ndef move_all_zeroes(arr):\n    count = len(arr)\n    arr = [i for i in arr if i != 0]\n    return arr + [0]*(count - len(arr))\nThe above code is a python function to push all zeroes to the end of array.\ndef sum_square_difference(mylist):\n"], [0.2672455307984421, "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python program to shift all zeroes to the end of the list.\n\nimport collections  \ndef countFreq(arr, n):  \n  \n    mp = collections.Counter(arr)  \n    freq = collections.OrderedDict(sorted(mp.items()))  \n      \n    for (key, values) in freq.items():  \n        print(key, end = \" \")  \n    print"], [0.26637345446047417, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that moves all zeroes to the end of the list without changing positions of other sorted elements.\ndef merge(arr1, arr2):\n\tmerged= []\n\twhile (arr1 and arr2):\n\t\tif int(arr1[0]) > int(arr2[0]):\n\t\t\tmerged.append(arr2[0])\n\t\t\tarr2 = arr2[1:]\n\t\t"], [0.26549084363255443, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " will move all the zeroes to the end of the list.\n\ndef number_plate(state_code ,reg_no):\n a = 'KA'\n state_code = 0\n reg_no = 0 \n    return new_list\n  #new_list.extend(a)\n  #new_list.extend(state_code)\n  #new_list.extend(reg_no)\n    return new_"], [0.2649421621824509, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeroes to end of an array.\ndef remove_duplicates(string):\n    res = '' \n    temp = set() \n    for i in range(len(string)): \n\n    if i == 0: \n        res += string[i] \n        temp.add(string[i]) \n\n    elif string[i] not in temp: \n        res += string["], [0.2641317847722821, "def nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " contains a function to move all zeros to end of list without changing the order of the remaining elements.\n"], [0.2606080316426086, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of a list.\n\n\n\n# Type Conversion\nThe second exercise focuses on data types.\n\nfrom fractions import Fraction  \ndef mixed_numeral(vulgar):\n    try:\n        if not vulgar.denominator:  # if the denominator is 0 (an integer, no decimal)\n            return str(vulgar.numerator)\n\n        integer = vulgar.n"], [0.2590784445437127, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to end of a list.  \nhttps://www.geeksforgeeks.org/move-zeroes-end-list/\ndef greatest_secoccur(str):\n  d = {}\n  for x in str.replace(\"\",\" \").split(\" \"):\n    d[x]=d.get(x,0)+1\n  count = max(d.values())  \n  return [i"], [0.25836341340742813, "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeroes to the end of the given array.\ndef countInversions(arr):\n        global inv_count\n        inv_count = 0\n        def mergeSort(arr):\n                global inv_count\n                if len(arr) >1: \n                        mid = len(arr)//2 #Finding the mid of the array \n                        L = arr[:mid] # Dividing the array elements  "], [0.25719464257336, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeroes to the beginning of a given array.\ndef find_triplet(arr, n): \n      \n    # iterate over all elements \n    for i in range(0, n-2): \n      \n        # iterate over elements from i+1 to n-1 \n        for j in range(i + 1, n-1):  \n              \n            # find sum of current "], [0.25686324409195593, "def nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves all the zeroes to the end of the given list by balancing the non-zero numbers.\ndef reverse(A,l,r):\n if(l>=r):\n  return\n reverse(A,l,r-1)\n A[l],A[r]=A[r],A[l]\n The above code is a function to reverse an array.\ndef merge_sort(A):\n if len(A) == 1:"], [0.2565107756154334, "def toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " has a function that returns a list by moving all zeros to the end of a given list."], [0.25581643581955277, "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes at the end of the list.\ndef numbers_in_lists(string):\n    main_list = []\n    for dummy_i in xrange(len(string)):\n        if dummy_i == len(string)-1:\n            break\n        if string[dummy_i].isdigit():\n            temp_list = []\n            while string[dummy_i].isdigit():"], [0.25385561704663756, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of a list of integers.\ndef concatenate(list_string):\n    result = \"\"\n    for elements in list_string:\n        result = result + str(elements)\n    return result\n\n\ndef sample_names(name_list):\n    return len(''.join(str(name_list)))\nThe above code is a function to sum the length of the names of a given"], [0.25241519155311776, "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to move zero at the end of the list.\n    \"\"\""], [0.24991676444482186, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of a list without changing the relative order of other elements.\n\ndef convert_list(list):\n    return tuple(list)\nThe above code is a function to convert a list of tuples into a tuple of lists.\n\nimport re\ndef find_brins_num(string):\n  expression = re.compile(r'\\bB\\d\\W\\d')\n  return"], [0.24991676444482186, "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of an array without changing the order of non zero elements.\ndef removeDuplicates(arr):\n\n    arr.sort()\n    i = 0\n    while i < len(arr) - 1:\n        if (arr[i] == arr[i + 1]):\n            del arr[i]\n        else:\n            i += 1\n\n    return len(arr)\nThe above code"], [0.24967868889247924, "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of a given list of numbers in a single line.\n\ndef display_ladder(steps):\n\n\n  for i in range(steps):\n    print(\"| |\")\n    print(\"***\")\n  print(\"| |\")\nThe above code is a function to print the steps before you reach the ladder.\n\ndef find_duplicates(list1):\n  seen_value = set"], [0.2494189256282655, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of a list.\n\n\nWhat is the main difference between a tuple and a\nlist\n\n  list is mutable and a tuple is immutable.\n\n  list of commands:\ndef list_manipulation(given_list, command, location, value=None):\n  if command == \"remove\":\n    if location == \"beginning\" :\n      return (given_list.pop(0), given"], [0.24689065797485843, "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to the end of array without changing the order of non zero elements. https://www.geeksforgeeks.org/move-zeroes-end-array/\n\n# Explanation of ids() fucntion\n# \n# Solution\ndef ques7(thelist):\n    new_list = []\n    for ele in thelist:\n        if(type(ele) == int):\n           "], [0.24664267964317696, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to end of a list.\ndef arrange(lst, rem):\n  return rem.join(i for i in lst)\nThe above code is a function to arrange string based on the characters.\"\"\"\""], [0.2427862269572639, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to the end of a given list(array).\ndef pairs_of_twos(numbers):\n    pairs = []\n    for i in range(len(numbers)-1):\n        if numbers[i] == 2 and numbers[i+1] == 2:\n            pairs.append((numbers[i], numbers[i+1]))\n    return pairs\nThe above code is a python function"], [0.2427862269572639, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to the end of a given array.\n\n# ---\n# Commands:\n# \u2022\tcmdOpenCommandPrompt\n# \n# \u2022\tcmdPythonPrompt\n# \n# \u2022\tcmdWinPythonPrompt\n# \n# \u2022\tcmdCommandPromptAnaconda\n# \n# \u2022\tcmdOpenPowerShellPrompt\n# \n# \u2022\tcmdPyCharmPrompt\n#"], [0.24263678121759452, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that move all zeroes to the end of an input list.\ndef remove_duplicate(lnum):\n  ln = len(lnum)\n  res = [lnum[0]]\n  for i in range(ln-1):\n    if lnum[i+1] != lnum[i]:\n      res.append(lnum[i+1])\n  return res\nThe above code is a function"], [0.24263258121327136, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to the end of a given list.\ndef fibonacci(n):  \n   if n <= 1:  \n       return n  \n   else:  \n       return(fibonacci(n-1) + fibonacci(n-2))  \nnterms = int(input(\"How many terms? \"))    \nThe above code is a recursive Python program to find the Fibonacci sequence."], [0.2417143781371415, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a two-line function to move all zeroes to end of the list.\n\ndef sum_pairs(input_list,to_sum:int):\n    seen = set()\n    for i in input_list:\n        residual = to_sum - i\n        print(residual)\n        print (val)\n        if residual in seen:\n            return [residual, i]\n        seen.add(i)"], [0.24084214763416437, "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zero's to the end of the given input list.\ndef removeDuplicate( li ): # same as teacher's result\n    newli=[]\n    seen = set()\n    for item in li:\n        if item not in seen:\n            seen.add( item )\n            newli.append(item)\n    return newli\nThe above function is an implementation to remove duplicate items from a list/t"], [0.24012777794458123, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the instances of zero to the end of the list.\ndef get_fuel_burned(m,a):\n    return (m * (2*a +(a)*(a))) // 2\nThe above code is an approach to find the fuel within weight of fuel + the weight of fuel added to the weight of payload.\n"], [0.23887062922918778, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to the end of an array and return the result.\ndef array_input(num):\n    sum1=0\n    for i in range(num):\n        list1 = [float(x) for x in input(\"\").split(\" \")]\n        list1.sort()\n        sum1=sum1+sum(list1[1:])\n    return sum1\nThe above code is a python function"], [0.23878040686313196, "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function which takes list of Floating point numbers and returns the list after moving all the 0's to the end of the list.\n\n# Q.4[[0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4], [10,20,30,40,50,60], [1,2,3,4,5], [10,20,30,40"], [0.23723081406642482, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function which returns a list after moving all zeros to the end of a list.\n\n'''"], [0.23719146037022865, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to end of a list.\ndef isValid_Sudoku(board):\n    for i in range(0,9):\n        for j in range(0,9):\n            if board[i][j]!='.' and (board[i][j] not in board[i][:j]  and board[i][j] not in board[i][j+1:]):\n                    k"], [0.2366038042209604, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of a given list. the function takes the given list as the argument and returns a list where the zeroes are moved to the end while maintaining the order of the non zero elements.\ndef str_rev(strng):\n    return \"\".join([strng[i] for i in range(len(strng)-1,-1,-1)])\nThis Python code is a function to recursively"], [0.23541095439151385, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the beginning of the list without changing the order of other elements.\n\ndef addition_of_matrices(mat1, mat2):\n    if (len(mat1) != len(mat2)) or (len(mat1[0]) != len(mat2[0])):\n        return -1\n    result = []\n    for i in range(len(mat1)):\n        a ="], [0.23523451845669036, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is function to move all the zeros to the end of a list.\ndef find_k_largest_smallest(nums, k):\n    nums_1 = nums[0:k]\n    nums_2 = nums[k:len(nums)]\n    nums_1 = sorted(nums_1,reverse=True)\n    nums_2 = sorted(nums_2)\n    res = num"], [0.23513094770893522, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to the end of a list.\ndef can_form_palindrome(s):\n    count = 0\n    freq = {} \n    for i in s: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    odd = 0\n    for k in freq:  \n        if(fre"], [0.23508686292248643, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros at the end of the list and retain the order of the list.\n\ndef reverse(n):\n    return int(str(n)[::-1])\nThe above code is a python function to get the reverse value of the given number.\n\ndef check_prime(n):\n    if n>1:\n        for i in range(2,n):\n            if(n%i==0):\n"], [0.23128234440643983, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of a list\nnum_list = [0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]\nprint(move_zero(num_list))\ndef move_zero(arr):\n    count = 0\n    for i in range(len(arr)):\n        if (arr[i] != 0):"], [0.23081565567049955, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zeros to the end of the list without changing the order of other elements.\n\ndef delete_dup(l): \n  newlist = [] \n  for i in l:\n    if i not in newlist: newlist.append(i) \n  return newlist\nThe above code is a python function to delete duplicate elements from list.\n\ndef contiguous_sum(input_list):\n "], [0.2294805815310684, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of an array, moving all the other elements ahead of the zeroes in the new position.\n\ndef sort_012(arr):\n    low = 0\n    mid = 0\n    high = len(arr) - 1 #H\n    while mid <= high:\n        if arr[mid] == 0:\n            # swapping the values from mid to low\n            arr[low], arr[mid"], [0.2292815635202498, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that moves all the zeros to the end of the given list num_list=[a]\ndef remove(x):\n    digits= [0,1,2,3,4,5,6,7,8,9]\n    z=x\n    for i in x:\n        if i not in digits:\n            z.remove(i)\n    print(z)\n    return\n\nThe above code is a python"], [0.2285271558166332, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of list. This function returns None if a zero is present in the list.\n\ndef even(n):\n    if n%2==0:\n        return True\nThe above code is a python function to check whether a number is even or not. The function should return true if n is even and false if n is not even.\n\ndef reverse(arr, i, j):\n    global s\n"], [0.2282748309842839, "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to end of a list of numbers.\n\ndef same_string(A,n):\n    same_string=[]\n    for i in range(n):\n        for j in range(i+1,n):\n            if A[i] == A[j]:\n                same_string.append(A[i])\n    #return list(set(same_string))\n    for i in range"], [0.22782331804577538, "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zero\u2019s to end of a list.\ndef dict(n):\n    num = []\n    for i in range(1,n+1):\n         if i%2==0:\n            num.append(i)\n    test_dict = dict.fromkeys(num)\n    print(\"numbers between 1 and %s which is/are even :\"%(n),(test_dict))"], [0.22659123115960603, "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\ndef split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeroes in a list to their correct and respective positions.\n\n\n# Directory\ndef directory(path, indentation):\n  print(indentation + path.name)\n  for names in sorted(path.iterdir()):\n    if names.is_dir():\n      directory(names, indentation + '\\t')\n    else:\n      print(indentation + '\\t' + names."], [0.2264252794292561, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that moves all zeroes in a given list to the end of the list.\ndef even(lst):\n    return [i for i in lst if i%2==0]\nThe above code is a python function to check even in the given list.\ndef next_square(n):\n\n    if (int(n**0.5))**2==n:\n        return int((n**0.5)+1)"], [0.22523882573088658, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move the zeroes to the end of the list.\ndef square(num):\n    return num ** 2\nmy_nums = [1,2,3,4,5]\n\nmap(square,my_nums) #This directly maps the function square() to my_nums list\nlist(map(square,my_nums)) #Explicitly converting the map function output to list.\nother_nums"], [0.2239663845572623, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to end of array.\ndef merge_dictionary(dict1, dict2):\n    return(dict2.update(dict1))\nThe above code returns new dictionary concatenating dictionaries.\ndef is_isogram(i_string):\n    if type(i_string) != str:\n        return(False)\n\n    i_string = i_string.lower()\n    for char in i"], [0.22385962802035123, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeros to the end of the array, and retaining the relative ordering of the remaining elements of the array.\n\ndef enclosed(worda, wordb):\n  u=len(worda)\n  l=len(wordb)\n  for i in  range(l, 1, -1):\n    if(worda==wordb[l-i:u] or   worda[u-i:l"], [0.2234832139647575, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zero\u2019s in the given list to the end of the list.\n# to insert empty string between all characters\ndef sql_quote(inp):\n    return \"'\" + inp + \"'\" if inp.replace('.', '').replace('-', '').isnumeric() else inp\n\nIn case the output of the input string has , symbol in it, \nthe result is messed up."], [0.22275918673884018, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeroes to the end of the array.\ndef form_array(num_list):\n    new_arr = []\n    for i in num_list:\n        if len(new_arr) == 0 or new_arr[-1] != i:\n            new_arr.append(i)\n    return new_arr\nThe above code is a function to create the same array from the given array with all"], [0.2217185576594903, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeroes to the end of the list.\n\ndef pattern(n):\n  k = 2 * n - 2\n  x = 0\n  for i in range(0,n):\n    x += 1\n    for j in range(0,k):\n      print(end=\" \")\n    k = k - 1\n    for j in range(0, i+1):\n      print(x,"], [0.22167607445905546, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zeros towards the end of the array.\n\ndef find_diagonal_directions(d):\n  r = c = 0\n  l = []\n  while r < d.shape[0]:\n    l.append((r, c))\n    r += 1\n    c += 1\n  while c >= 1:\n    l.append((r, c))\n    c -= 1\n    if r"], [0.2210818811358389, "import re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to end of a list.\n\nside=lambda l:[(sum(l[:i-1])+sum(l[i-1:i+1])) if i%2 else sum(l[:i-1]) for i in range(1,len(l)+1)]\n\nThe above code is a function that returns the best score when rooks are placed on any of the n(l)"], [0.22008206237543604, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that accepts a list of integers as an argument and moves all the zero values to the end of the list and returns the new list.\n    \n"], [0.21999190818567924, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zero's to the end of the list.\ndef get_subsets(main_set):\n    temp = []\n    res = [[]]\n    for i in range(len(main_set)):\n        for j in range(len(res)):\n            temp.append(res[j] + [main_set[i]])\n        res += temp\n        temp = []\n    return res\nThe"], [0.21989992422952284, "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zeros to the end of the list. If a non-zero element is encountered, it is added to another list and is deleted from the list.\n\ndef remove_ele(arr, key) : \n    curr = s = 0\n    l = len(arr) - 1\n    for s in range(l+1) : \n        if (arr[s] == key) : \n            continue"], [0.21988865655974832, "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to end of array.\n\ndef sortArry(arr, n): \n\ttemp = [0] * (256) \n\tcurr = [0] * (n) \n\tfor i in range(0, n): \n\t\ttemp[ord(str(arr[i]))] += 1\n  \n\tfor i in range(1, 256): \n\t\ttemp["], [0.21981371707942685, "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " swaps the zero's to the end of the list.\nMoves all zeroes to the end of an array.\ndef findPairs(arr,x):\n    a = set()\n    for i in arr:\n           for j in range(i+1,len(arr)):\n                 if (arr[i] + arr[j]) % x == 0:\n                   if arr[i] not in a: a.add((arr["], [0.21809871851394894, "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zeroes end of the list.\n\ndef find_more_zeros(number): \n      \n    # bit representation of \n    # given number val \n    val = (int)(bin(number)[2:]) \n      \n    # counting the zeros \n    count = 0\n      \n    # calculating the count of  \n    # zeros in bit representation \n    # of a"], [0.21686709608211124, "def rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the back of the given array.\ndef reverse_words(str):\n    words = str.split(\" \")\n    string = [i[::-1] for i in words]\n    aaa = \" \".join(string)\n    return aaa\nThe above code is a function to reverse each word in the given string.\ndef two_sum(num_list, target):\n    for i"], [0.21618884406697267, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is the function to move all zeros present in the list to their end, moving all zeros to the end of array preserve the relative order of elements\nWrite: Functions from previous questions\n"], [0.21590433574597365, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeroes to the end of the list.\n\ndef hash_key(dictionary, search_key):\n    return search_key in dictionary\nWe can query a key in a dictionary by using the in keyword.\n\ndef indices_for_two_strings(array, substring):\n    return sorted((array.index(x)+1) for x in array if substring in x)\nThe above code is a"], [0.21375349535217528, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the back of a list while maintaining the order of other elements in the list.\n\ndef __init__(self, capacity):\n  self.n = capacity\n  self.head = self.tail = 0\n  self.queue = [None]*self.n\ndef enqueue(self, data):\n  if (self.head == ((self.tail + 1) % self.n)):\n"], [0.21316237731806295, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zero's to the end of the given input list.\ndef mergelist(list1, list2):\n    return sorted(frozenset(list1+list2))\nThe above code is used to merge 2 given lists and sort them.\n\ndef compthTuple(*args):\n  return [i for i in args if type(i) == tuple]\nThe above code is fn to compthTuple"], [0.21310111063115386, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of the list.\ndef unique_list(l):\n  total_length=len(l)\n  y=[]\n  for i in l:\n    if i not in y:\n      y.append(i)\n  return [y,total_length]     \nThe above code is a program to remove duplicate elements in the list.\n  \ndef shuffle_num(num_list):"], [0.21300804835938308, "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all t zero number towards the end of the list\n\ndef merge_lists(list1, list2):\n    merged_data = tuple(zip(list1, list2))\n\n    return merged_data\nThe above python function combines two list of tuples, converts them to tuples and returns a tuple of tuples\n\ndef add_key_to_list(list1, list2 ):\n    for i in list1"], [0.21007616336960858, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\ndef flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes at the end of the list.\ndef binary_conversion(number):\n    base = number%10\n    temp_num = number//10\n    rem = []\n    while temp_num > 0:\n        rem.append(temp_num)\n        temp_num = temp_num//10\n    converted =  str(converted)\nThe above code is a function to convert any given number into"], [0.2093349785527974, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the 0's to the end of a given list.\nclass Solution: \n  \n    # Returns index of x in arr if present, else -1 \n    def binarySearch (self, arr, l, r, x):  \n  \n        # Check base case \n        if r >= l: \n  \n            mid = l + (r - l) // 2\n            if arr[mid] == x"], [0.20886593560396202, "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros present in given array to the end.\ndef makingAnagrams(s1, s2):\n    LIST1 = list(s1)\n    LIST2 = list(s2)\n    DELETE = [LIST1.remove(i) for i in set(LIST1) if(i not in set(LIST2))]\n    DROP = [LIST2.remove(i) for i in"], [0.20774452465238705, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the 0's to the end of array.\n\ndef duplicate(arr):\n  visited = {}\n  duplicate = []\n  for element in arr:\n    if element in visited:\n      duplicate.append(element)\n      continue\n    visited[element] = True\n  return duplicate\nThe above code is a python function to find out dupliacte elements in an array.\n\ndef closest_zero(arr):"], [0.2072878704748696, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python program to move all the zero\u2019s to the end of the given list by using the above list syntax passed as the argument in the function used:\n\ndef is_prime(n):\n    if (n==1):\n        return False\n    elif (n==2):\n        return True;\n    else:\n        for x in range(2,n):\n            if(n % x==0):\n                return False\n"], [0.20573296866598134, "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move the zeroes to the end of the list.\n\ndef move_zero(arr):\n    l = [0 for i in range(arr.count(0))]\n    x = [i for i in arr if i != 0]\n    return x+ l\nfor _ in range(int(input())):\n n = int(input())\n print(move_zero([int(i) for i in input().split"], [0.20557473548167646, "def armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to the end of an array without using the inbuilt method.\n\"\"\"\nfrom collections import Counter\nfrom collections import OrderedDict\nfrom operator import itemgetter\nfrom collections import defaultdict\nfrom datetime import datetime\nfrom math import sqrt\nfrom statistics import mean\nfrom statistics import median\nfrom statistics import pstdev\nfrom statistics import pvariance\nfrom statistics import stdev\nfrom statistics import variance\n"], [0.20552510669794563, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zero's to the end of the given input list.\ndef cubesum(n): \n    return sum([int(i)**3 for i in str(n)])\nThe above code is a function to sum the squares of the digits of a given given integer 'n'.\ngenerate_str = lambda s, sub_str : ''.join([(i + sub_str).capitalize() for i in str("], [0.2054845668531377, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move zeros to the back of the list.\ndef move_zero(num_list):\n    a = 0\n    for i in range(len(num_list)):\n          for j in range(len(num_list) - 1):\n              if (num_list[j] > num_list[j+1]):\n                  b = num_list[j+1]\n                  num_list[j"], [0.20402221468114753, "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zero's to the end of the list.\n    \nfrom math import sqrt\ndef Super_Prime(n):\n    flag = 0\n    if n < 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0 :\n        return False\n    \n    for i in range(3 ,n , 2):\n        if i % 2 == 0 or i % 3 == 0 :\n"], [0.2038751236194828, "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\n\ndef is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeroes to the end of an array.\ndef rotate_left(mat):  \n    size = len(mat)    \n    rotated = {}   \n    for i in range(size):\n        temp = []\n        for j in range(size):\n            temp.append(mat[size - j - 1][i])  \n        rotated[i]=temp\n\n    return rotated\nThe above code is a function"], [0.20380411971385223, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of a list without changing the order of other elements.\n\na=pd.DataFrame([[20,30,40],[01,20,30],[14,25,36],[89,79,68]])\n#displays the table\na.describe()\n#calculates the central tendency of variables.\na.cov()\n#prints the covariance matrix.\na.corr"], [0.20288506336687928, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeroes to the end in a given tuple.\ndef remove_digit(phrase):\n  return ''.join(c for c in phrase if not c.isdigit())\nThe above code is a python function to remove the digits from the given string.\nN/A\ndef duplicate_item(test_list):\n  return list(set(i for i in test_list if test_list.count(i"], [0.20238157636694773, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\nimport re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to end of a list in Python.\ndef move_zeropython(list1):\n    a = [0 for i in range(list1.count(0))]\n    list1 = [i for i in list1 if i != 0]\n    return list1 + a\ndef product_Str(string):\n    a=string[0]\n    b=string[1]\n    c=a"], [0.2017216277679384, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to end of a given list. \n\nimport random\ndef guess(x):\n    x = random.randrange(100) + 1 \n    y=raw_input(\"Guess a number between 1 to 100 : \")\n    y = int(y)\n    while(True):\n        if (y == x):\n            print(\"You have won !!\")\n            return\n        if ("], [0.20132443809694117, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeroes to the end of a list.\ndef move_zeroes(arr):\n    for n in arr:\n        if n == 0:\n            arr.append(n)\n            arr.remove(n)\narr.sort()\nreturn(arr)\nThe above code is a function to move all the zeroes in the list to the end.\n#ALAP\nold_list = ['a',"], [0.20087255057523135, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros towards the end of the array.\nYou are given a string S. Your task is to swap cases. In other words, convert all lowercase letters to uppercase letters and vice versa.\n\nFor Example:\n\nWww.HackerRank.com \u2192 wWW.hACKERrANK.COM\nPythonist 2 \u2192 pYTHONIST 2\nInput Format\nA single line containing a string .\n\n"], [0.20006678227405106, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is python program to move zeroes to the end of an array. It returns the modified array.\n\ndef remove_element(lst, n):\n    for index in range(len(lst)):\n        if n in lst:\n            lst.remove(n)\n        else:\n            break\n    return lst\n\nThe above code is a python function to remove the repeated occurences of an item in a list.\n"], [0.19992337422950435, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is python program to move all zeros to end of an array. https://www.geeksforgeeks.org/move-zeroes-end-array/\n"], [0.19936237706512522, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to end of array.\nvoid selectionSort(int arr[], int n)  \n{  \n   int i, j, min_idx;  \n   for (i = 0; i < n-1; i++)      \n   {  \n       min_idx = i;  \n       for (j = i+1; j < n; j++)  \n           if (arr[j]"], [0.19894621455309172, "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeroes in a given list to the end of the list.\ndef move_zero(arr):\n    l = [0 for i in range(arr.count(0))]\n    arr=[i for i in arr if i!=0]+l\n    return arr\nThis uses list comprehension to generate the list with zeroes moved to their positions.\n\narr=[0,1,9,8,4,"], [0.19821214979183846, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeroes toward the end of the array.\n\n###### Search in a row wise and column wise sorted matrix #####\n# Python3 program to search an element \n# in row wise and column wise sorted matrix \nR = 4\nC = 4;\n\n# Searches the element x in mat[][] \ndef search(mat, n, x):\n    i = 0\n\n    # Will loop until a pair"], [0.19773275244759242, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zeroes to left side in an list.\ndef move_zero_verbose(num_list):\n    a=[]\n    for x in num_list:\n        if x != 0:\n            a.append(x)\n    for x in num_list:\n        if x == 0:\n            a.append(x)\n    return a\nThe above code is another method of moving all the"], [0.19702888356518639, "def find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " given a list of integers containing 0's and non-zero numbers, which moves the trailing zeroes to the end of the array\ndef min_and_max(lst):\n    min = lst[0]\n    for i in range(len(lst)):\n        if (lst[i]<min):\n            min = lst[i]\n    max = lst[0]\n    for i in range(len("], [0.1969400633669834, "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to seperate all zeroes to the end of a list.\n\nn, m = map(int,input().split())\nS = input().split() [:n]\nT = input().split() [:m]\nx = 0\nfor i in S:\n    if i in T:\n        print('YES')\n        x = x+1\n        break\nif (x ==0 ):\n    print('NO')"], [0.19671522478675751, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to move all the zero's of a given array to the end of the array by reorganizing the array.\n\ndef swap_case(s):\n    sen=''\n    for c in s:\n        if c.isupper():\n            sen= sen+c.lower()\n        else:\n            sen= sen+c.upper()\n    return(sen)\nif __name__ == '__main__':\n    pass\n\nThe"], [0.19638672721102807, "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zero digits in a given number to the end of the list whle maintaining \nthe order of other digits.\n\ndef check_prime(number):\n    if number == 1 or number == 2 or number == 3: return True\n    if number % 2 == 0 : return False\n    for i in range(3 , int(number**0.5) + 1 , 2):\n        if number % i == 0 : return"], [0.19614587215962292, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zero to the end of list having no inversion.\ndef a(x,y,z): \n    if (x == y or y == z or x==z): \n        return True\n    else: \n        return False\nThe above code is a python function to find if one of three given number are equal to one another, returns True otherwise False.\ndef b(x,y,z): \n   "], [0.19576380530477827, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\ndef multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of the list, while maintaining the order of non-zero elements in the list.\n\n\n\n# Find the values at common keys in a pair of dictionaries\ndef return_shared_keys(dict1,dict2):\n    shared_keys =[]\n    for key in dict1:\n        if key in dict2: \n            shared_keys.append(key)\n    return shared_keys\n"], [0.19574063068886258, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to the end of a list without changing the order of the other elements.\n\ndef list_sum(num_list):\n    sum_num = 0\n    for i in num_list:\n        sum_num += i\n    return sum_num\nThe above code is a python function to find the sum of all the numbers in a list.\n\n### Arrays\n\n# Find the longest continuous run\n\n"], [0.19537838237945054, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zero element to the end of the array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    num_list.clear()\n    num_list.extend(x + a)\n    return num_list\nThe above code is a function to clear the"], [0.19438365780815567, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python code to move all zeroes to end of an array.\ndef arrange(list1):\n    list_len = len(list1)\n    odd_list = []\n    even_list = []\n    for item in list1:\n        if item % 2 == 0:\n            even_list.append(item)\n        else:\n            odd_list.append(item)\n    \n    odd_list.sort("], [0.19320609024070326, "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move the zeros to the end of the list in-place. \ndef each_list_max(list1):\n  max_of_each = []\n  max_ = list1[0]\n  for a in list1:\n    if a > max_:\n      max_ = a\n    max_of_each.append(max_)    \n  return max_of_each\nThe above code is a"], [0.19309309442637418, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function for 'move_zero' to move all the zeroes at the right end of a list using list comprehension.\n"], [0.19293436893912713, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to move all zeros to end of a list.\n'''"], [0.1928312554392715, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of a given list. The function should not use in built functions like the sort or the array.\ndef sort(num_list):\n    for i in range(len(num_list)-1,0,-1):\n        for j in range(i):\n            if num_list[j]>num_list[j+1]:\n                temp = num_list[j]\n                num_"], [0.19279456605862186, "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to push all the zeros to the end of the list.\n\nimport subprocess\ndef subprocess_cmd(dr,cmd):\n    process = subprocess.Popen(cmd, cwd=dr, stdout=subprocess.PIPE, shell=True)\n    proc_stdout = process.communicate()[0].strip()\n    return (proc_stdout)\nThe above code is a function to achieve simple"], [0.19263747935030454, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to sort a list numerically and including zero within the list by pushing zero in right part of list.\n\n"], [0.19252204232581283, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeros to the end of a list\ndef check(number):\n  num = []\n  num.append(number)\n  lst = num[::-1]\n  if lst == num:\n    return \"true\"\n  else:\n    return \"false\"\nThis function check the given value is a palindrome or not.\n\n\n"], [0.19252204232581283, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of a given list.\n\nimport unicodedata \ndef remove_accents(a):\n    x = {} \n    for i, j in enumerate(a):\n        x[i] = unicodedata.normalize('NFKD', j).encode('ASCII', 'ignore')\n    return (x[i] for i in x)\nThe above code returns a string"], [0.19188415543164694, "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function which takes in a list, finds the number of zeroes and adds the zeroes to the end of the list. It then sorts the numbers in descending order\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n     \n\n     \n    \n\n# Part 2 Complete this section\ndef capitalize(string1):\n    new_string = string1.split(\" \")\n    new_string ="], [0.19103434214519252, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that removes all instances of '0' by moving them to the end of the given list and returns the new list.\n\nlist = [7, 3, 5, 6, 2, 4, 1, 0]\nprint(\"Original list: \",list)\nprint(\"List after moving all zeros to end: \",move_zero(list))\n[7, 3, 5, 6, 2, 4, 1, 0]\n['7',"], [0.19095916673258204, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\nimport cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zero present in the list to the front of the list.\ndef remove_duplicate(nums):\n    return list(set(nums))\nThe above code is a python function to remove all duplicates from a given list.\ndef odd_values(list):\n    odd = []\n    for i in range(len(list)):\n        if i % 2 == 1:\n            odd.append("], [0.1908788082766773, "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of a list.\ndef squares(num_list):\n    temp = []\n    for i in num_list:\n        new_elem = i*i\n        temp.append(new_elem)\n    return temp\nThe above code is a function to list squares of the given numbers in a list.\ndef zero_matrix(param,l1):\n    l2 = [i"], [0.19087845729192252, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zero\u2019s to the end of the list.\ndef cube_finder(n):\n    return {i: i*i*i for i in range(1, n+1)}\nThe above code is a function to generate a dictionary with the cube of numbers from 1-n.\ndef vowels_count(text):\n  count = 0\n  for i in range(len(text)):\n    if text"], [0.19076912981433344, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zeros to the end of the list without a without altering the order of the other elements.\n\nThe important point to note here is when we do a lst = c(1,2,6,2,6,8,6,3,6) we get a new list object. It is worth commenting here how python handles memory. In machine learning however, there are large chunks of data for us to work with. So we"], [0.19042246925799428, "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\n\ndef interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all trailing 0's to the end of the array.\ndef is_unique_string(my_string):\n    for i in my_string:\n        if my_string.count(i) > 1:\n            return 0\n        else:\n            return 1\nThe above code is a function to determine if all characters in a string are unique (1 or 0).\n\u0415\u0441\u043b\u0438 \u044f \u043f\u0440\u0430\u0432\u0438"], [0.19037687999010655, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of list while maintaining the order of other elements\ndef list_to_string(s):\n    # initialize an empty string\n    str1 = \"\"     \n    # traverse in the string\n    for ele in s:   \n        str1+ele     \n    str1=str1.replace(\"[\", \"{\").replace(\"]\",\"}\").replace(\"(\",\"{\").replace(\")\",\"}\")"], [0.18983596819632662, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\ndef issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all the zeros at the beginning of a list.\n\ndef rev_vowels(text):\n\n    vowels = \"aeiou\"\n    string = list(text)\n    i = 0\n    j = len(text) - 1\n    while i < j:\n        if string[i].lower() not in vowels:\n            i += 1\n        elif string[j].lower() not in"], [0.18965893342485388, "def is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all 0's to end of a given list of integers.\n\ndef remove_vowel(msg):\n    vowels = 'aeiou'\n    for i in vowels:\n        msg=msg.replace(i,'')\n    return msg\nThe above code is a python function to remove all the vowels in a given string.\n\ndef unique_sort(lst):\n\treturn sorted(x for x"], [0.1883602205236267, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a method to move all the zeroes to the end of given list, hence making all the non-zero numbers together.\n\ndef max_equal_neighbour(num_list) :\n    n = len(num_list)\n    f = 0\n    k = []\n    for i in range(1, n-1) :\n        if (num_list[i] == num_list[i-1] == num_"], [0.1881878109645354, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to the end of list without extra space.\ndef highest_Power_of_3(n): \n    i = 0\n    while n % 3 == 0: \n        n /= 3\n        i += 1\n    if n != 1: \n        return -1\n    return i\nThe above code is a python function to find the highest power of 3 that is less than or equal to n.\n"], [0.1878234491967966, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeroes at the end of array.\n\nThere are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.\n\nIf the product of these four fractions is given in its lowest common terms, find the value of the denominator.\n    \n    \ndef factorial(n):\n    if n == 1 or n == 0:"], [0.1869095065003862, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of list of given input.\n\nclass py_solution:\n    def next_palin(self, str):\n\n\t\ty = palin(str)\nl = list(str)\nl.remove(l[y])\nl.insert((y+1) , l[y])\nreturn ''.join(l)\nThe above code is a python class which has a function to find"], [0.1868008407802082, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves all zeros to the end of the list and returns the new list.\n\nThe above code follows a complex logic but the main objective was to change the order of the items in a list .\n"], [0.1861527166210101, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves all zeroes to the end of a given list.\ndef count_char(str):\n    return collections.Counter(str)\nThe above code returns the number of each character in the given string. The result is returned as a dictionary str.\ndef string_both_ends(str):\n    if len(str) < 2:\n        return ''\n\n    return str[0:2] + str[-2:]\nThe above code returns the"], [0.18584122112988954, "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeros to the end of the list without any changes in the order.    \n#solution for Question 1\ndef find_odd(numbers):\n  a=list(numbers[0:7:1])\n  b=list(numbers[11:18:1])\n  #I tried creating the list of few of the columns but couldnt make the slicing work for all the columns. So I just considered the"], [0.1858177786366134, "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\n\ndef Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function which takes a list of integers and moves all the zeros to the end while maintaining the order of other elements.\n"], [0.1857260390675281, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to move all zeros to the end of the given list without changing the relative order of other elements. Assuming num_list is a set length, but not necessarily equal.\n\ndef missing_element(test_tuple):\n  return (x for x in range(n) if x not in test_tuple) \nThe above code is to find missing elements in the given tuple.\n"], [0.18519905712339388, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function which moves all the zeros to the end of the list.\n\ndef duplicate(num_list):\n    freq = {} \n    duplicate_list = [] \n    for i in num_list: \n         if i in freq: \n             freq[i] += 1\n         else: \n             freq[i] = 1\n    for key, value in freq.items():\n        if value"], [0.18502237773198627, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to end of list.\ndef remove_given_element(newList, x) :\n    out_list = []\n    for i in newList :\n        if i != x :\n            out_list.append(i)\n    return out_list\nThe above code is a function for removing given element from list.\ndef trailingZeros(n):\n    count = 0\n    i = 1\n"], [0.18443136891242445, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to end of an array.\n\ndef find_unique(arr):\n    temp = set()\n    for i in arr:\n        if i in temp:\n            temp.discard(i)\n        else:\n            temp.add(i)\n    return temp.pop()\nThe above code is a function to find the unique number in an array where every other element appears three times."], [0.18441842338080813, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves all the zeroes to the start of the list.\n'''"], [0.18441105908367186, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros in a list towards right end, not moving any non-zero number.\n\ndef CommonDenominator(fract):\n  if len(fract) == 1:\n    return fract\n  result_n, remain_n, result_d, remain_d = 1, 0, 1, 0\n  for f in fract:\n    tn,td = f[0], f[1]\n   "], [0.18428808035521269, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " a function to move all zeros to the end of a given list.\ndef is_palindrome(string):\n  left_pos = 0\n  right_pos = len(string) - 1\n\n  while right_pos >= left_pos:\n    if not string[left_pos] == string[right_pos]:\n      return False\n    left_pos += 1\n    right_pos -= 1\n  return True\nThe above code is"], [0.1839455665554388, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python one line code to move all zeroes in the given list to the end without changing the order of other numbers.\n\ndef find_duplicate(num_list):\n\tfor i, a in enumerate(num_list):\n\t\tif num_list[abs(a)-1] < 0:\n\t\t\treturn abs(a)\n\t\t\tnum_list[i] = -a\n\t\t\t\n\t"], [0.1827434604678833, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves all the zeroes to the end of the list without changing the order. For example, the list [3, 2, 0, 1, 0] becomes [1, 2, 3, 0, 0].\n\ndef findPair(lst, K):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i"], [0.1826164697445028, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros present in the array\nx*(x+1)*(x+2)*(x+3)...formula\n\nSum(n) = n*(n+1)/2\nThe above code is a python function to find the formula regarding the sum of n values and value equivalent to product of n natural numbers.\ndef GCD(a,b):\n    while(b != 0):\n        result = b\n"], [0.18177918607743632, "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of a list in order to create the max number from the given list of numbers.\n\nk = int(input())\ns = input()\nn=1\nx = int(s)\na = []\nwhile(True):\n    m = int(s[n:])\n    prod=m\n    a.append(int(s[n:]))\n    print(a)\n    while"], [0.18088131603722063, "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to move all the zeroes to the end of the list.\n#functions in python\ndef add_five(input_list):\n    return [num + 5 for num in input_list]\nThe above code adds a value 5 to every element in a list.\n\n\ndef squared(input_list):\n    return [num * num for num in input_list]\nThe above code is to square every element in a list.\n\ndef"], [0.1801670724126212, "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeros to the end of the list\ndef find_duplicate(arr1):\n\th = sum(arr1)\n\tn = len(arr1) - 1\n\treturn (n * (n + 1) // 2 - h)\nThe above code is a function to find the duplicate number in the list.\ndef func(array, n):\n\ts = array[:]\n\tc = 0\n"], [0.1801670724126212, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of the list.\ndef move_zero(num_list):\n  a = [i for i in num_list if i != 0]\n  b = [0 for i in range(num_list.count(0))]\n  return a + b\nThe above code is a function to move all zeros to the end of the list.\n\ndef reverse(data):\n\tif len("], [0.17995211817521892, "def list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeros to the end of a list.\ndef rot_left(nums, rot):\n    \"\"\"rotates list to left by n elements\"\"\"\n    rotations = rot % len(nums)\n    return nums[rotations:] + nums[:rotations]\nThe above code is a function to rotate a list by n elements.\"\"\"\n"], [0.17986211962587997, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " takes in a list of integers and moves all zeros in the list to the end of the list and returns the new list. Empty list does not count as zero.\n\n\nTimeComplexity - O(n) Space Complexity - O(1)"], [0.179586060013878, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to end of list.\nq = [(2,5,6),(7,4),(8,1)]\n\nprint (count_List(q))\n\nThe above given question is one of the question in hackerrank platform of given list containing tuple of lists.\n\nThe input format is defined according the Hackerrank platform. \n\nIt is given in the form of a tuple and the output should be"], [0.17958270944110685, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\ndef flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of the array.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a function to move all zeros to the end of the array.\n\ndef find_missing(list1, list"], [0.17883095033660093, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zero digits to the end of a list by maintaining the relative order of the other digits.\n\nimport re\ndef remove_duplicates(text2):\n  return re.sub(r'(.)\\1+', r'\\1', text2)\nThe above code is a function to remove duplicate characters from the given string.\ndef first_large(list1, k):\n    list1.sort()\n    val"], [0.177858896626049, "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to the end in-place.To be used in-place all elements must be of same type.\n\ndef find_duplicate(arr1):\n n = len(arr1)\n res = 0\n for i in range(n):\n    res = res ^ arr1[i]\n return res\nThe above code is a python function to find a duplicate number.To be used in-place all elements must"], [0.17752318464754213, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\nfrom copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that moves the zeroes to the end of the list.\ndef combined_pattern1(l1, l2):\n    l11 = combine(l1, l2)\n    l21 = combine(l2, l1)\n    if l11 == l21:\n    \treturn True\n    else:\n    \treturn False\nThe above code is a function that checks if the two lists have the same pattern.\ndef different"], [0.17743116463905148, "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function using list comprehension in python to move all the zeroes to the end of an integer list. Moving of zeroes at the required position is done with the help of count() method.\n\ndef check_sublist(l, s):\n    if (s == []):\n        return(True)\n    elif (l== []):\n        return(False)\n    elif (s[0] == l [0]):\n"], [0.17692887893180173, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a script to move the all the zeroes to the end of the list while maintaining the relative order of the other integers. Its an interactive solution to the given problem statement\n\ndef front_back(str):\n  mid = str[1:-1]\n  str1 = str[-1:]\n  str2 = str[:1]\n  res = str2 + mid + str1\n  return res\nThe above code is a function to take"], [0.17630733031400198, "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes at last of the list.\n\nimport itertools \ndef rSubset(arr, r):   \n    return list(itertools.combinations(arr,r))\nThe above code is a function to find all subsets of R in the array.\n\ndef PatternCount(text,pattern):\n     count = 0\n     text_size = len(text)\n     pattern_size = len"], [0.17624305911228885, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of a list of integers\ndef add(a, b): \n return a + b\nother = dict({'a' : 5, 'b' : 3, 'c' : 12})\nx = add(**other)\nThe above code is a calculator to calculate sum.\n"], [0.17545173213636264, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves all zeroes to the end of a given list of numbers.\n\ndef test(got, expected, pts):\n  score = 0;\n  if got == expected:\n    print(\" OK \", end=\" \")\n    score = pts\n  else:\n    print (\" XX \", end=\" \")\n  print(\"Got: \",got, \"Expected: \",expected)\n  return score\n\n\n# Provided main() calls the above functions with"], [0.17480106941325957, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros at the end of list.\ndef bubblesort(list1):\n    n = len(list1) \n    for i in range(0, n): \n        for j in range(0, n-i-1): \n            if list1[j] > list1[j+1] : \n                list1[j], list1[j+1] = list1[j+1"], [0.1745666163208092, "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\n\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is moves all zeroes to the end.\n\ndef find_missing(lst1):\n return [x for x in range(lst1[0], lst1[-1]+1) if x not in lst1]\nThe above code is a python function to find the missing numbers in a list.\n\ndef long_words(n, str):\n word_len = []\n txt = str.split(\" \")\n for"], [0.1726856298782682, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is used to move all the zero in an inputted list to the end of the list maintaining the order of the inputted list.\n\ndef patternHistogram(inputword):\n    x = ''\n    for i in inputword:\n        m = (bin(ord(i))[2:])\n        x = x + m.replace('1', '#').replace('0',' ') + '  '\n    print(x)\nThe above"], [0.17254008299405316, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that moves all 0s to the end of the list with respect to the original order of the items.\n\nInput_string = (input(\"Enter the characters\"))\nvowel=['a','e','i','o','u']\nvowel_appear=0\nfor i in vowel:\n    vowel_appear+= Input_string.count(i)\nprint(\"No of times vowels appeared is: \",vowel_"], [0.17154304250802566, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros present at the end of the list.\n\ndef sumint(x):\n    return sum(int(d) for d in str(x))\nThe above code is a function to compute the sum of int digits of a given number.\n\ndef add_dic(d1, d2):\n    res = d1.copy()\n    res.update(d2)\n    return res\nThe above code"], [0.17089185635020382, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeros to the end in the given list.\n\nimport pandas as pd\n\ndef pandas_warmup():\n    names = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']\n   dr =  [True, False, False, False, True, True, True]\n   cpc = [809, 731, 588, 18, 200"], [0.1708738524204296, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of a list.\ndef find_type(tup):\n    li, result = [], []\n\n    for element in tup:\n        if type(element) not in li: li.append(type(element))\n    for i in li:\n        result.append((i, tup.count(i)))\n    return result\nThe above code is a function to find the unique data types"], [0.17023669019114532, "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\n\ndef combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that moves all zeroes to end of a given list.\nThe RunestoneCompetition class\nSimulation of competition Experiment\n\nwould you like some \n\"\"\""], [0.17020242462025514, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to place all the zeros at the end of the list where we have [0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]\n\ndef bubble_sort(num_list):\n    for i, num in enumerate(num_list):\n        try:\n            if num_list[i+1] < num:\n                num_list"], [0.16956578917655335, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python solution to move all zeros to the end of a given array.\ndef find_duplicates(arr1, arr2):\n    result_arr = []\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    if n1 >= n2:\n      large_arr = arr1\n      small_arr = arr2\n    else:\n      large_arr = arr2\n     "], [0.1688280247612221, "def jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zero's to the end of a list. https://www.geeksforgeeks.org/move-zeroes-end-list/  0, 1, 0, 3, 12, 0, 1, 3, 1, 1 in output 0, 1, 1, 3, 12, 1, 3, 1, 1, 0.\ndef matrix(n):\n    return [[1 if j == i else 0 for j in range"], [0.16872632391228615, "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of a list.\n\ndef common_member(l1, l2):\n    return(list(set(l1) & set(l2)))\nIn the above code, one of the inputs is a list which sorts both provided lists. Thus, searching for common elements of lists becomes easier.\n\ndef make_len(strings, length):\n    fix = [''] * max(0, ("], [0.1686321573417507, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeroes to the end of a given list of numbers leaving the other numbers in their original order.\n\ndef min_max(l):\n  minval = min(l)\n  maxval = max(l)\n  tup = (minval, maxval)\n  return tup\nThe above code is a function to return a tuple containing both the minimum and the maximum values in a given list along with their positions"], [0.16804853574687373, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes to end of an array.\ndef squares(arr):\n  return sorted([a**2 for a in arr])\nThe above code is a function to find squares of a sorted array of numbers. The time and space complexity is O(n^2).\n\ndef squares(arr):\n  n = len(arr)\n  arr_sq = [0] * n\n  i = 0\n  j = n"], [0.16771376976238794, "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move the zeroes at the end of a given list. User collection module.\nFind missing elements in second list.\nfrom collections import Counter \ndef find_missing(lst): \n  return [i for i in range(lst[0], lst[-1]+1)  \n                               if i not in lst] \nThe above code is a python function to find the missing number from two lists which are"], [0.16753638084197436, "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function which moves all zeroes to end of a list.\n\nnum_list = [0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]\nprint(move_zero(num_list))\n\nThe code above prints the list after moving all zeros to end.\ndef moving_zeroes(list):\n    count = list.count("], [0.16733267662429333, "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that place all the zero in the end of the list.\n    \n    \ndef reverse_list(data):\n data.sort(reverse=True)\n return data\nThe above code is a function that returns a reversed list of the given list. \n    \nimport random\ndef random_array():\n    random.seed(1)\n    my_array = [random.randint(1, 100) for _ in range(10)]"], [0.1661751072202095, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that takes a list of numbers and move all the zeros to the end while maintaining the order of the other numbers.\n'''"], [0.16610638949582587, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to rearrange the list with zeros at the end of the list.\nThe below code calculates the complement of a given binary number.\n\ndef binary_conversion(binaryNum):\n  lst = []\n  for i in range(0, 32):\n    lst.append(int(binaryNum[i]))\n  sum = 0\n  for i in range(0, 32):\n    power = 2 ** (31"], [0.16583925945271333, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a code for pushing the zeros to the end of a list.\n\ndef is_number_balanced(n):\n    parts=list(str(n))\n    sum1=0\n    sum2=0\n    for i in range (0,int(len(parts)/2)):\n        sum1+=int(parts[i])\n        \n    for i in range (int(len(parts)/2),len(parts)):"], [0.16556374780730607, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function in Python to move all the zeros to the end of the list using lists. \ndef dictlist(keys,values):\n    {d.setdefault(key,[]).append(value) for key, value in zip(keys,values)}\n    return d\nThe above code is used to make a consisting of  keys and values converted as lists from two different lists in Python.\ndef rev_given_string(s):\n    return reverse"], [0.16496884469806397, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeros to the end of a given array\ndef move_zeros_to_left(a):\n    j=0\n    for i in a:\n        if i != 0:\n            a[j] = i\n            j += 1\n    while j < len(a):\n        a[j]=0\n        j += 1\n    return a\nThe above code is a function that move all zero to"], [0.1642039461285312, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is python function which reorders the elements of list by moving all zeroes to the end. \ndef even_digits(a):\n    list = []  \n    for i in str(a):\n        if int(i) % 2 == 0:\n            list.append(i)\n    return list\nThe above code is a python function to print only even numbers of the given string.(If a given string contains other than integers it will print the"], [0.16352907111236764, "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeroes to the end of a list whilst maintaining the order of other elements.\n\"\"\"\"\"\"\"\nRate this Challenge\nRate this Challenge\nRate this Challenge\nRate this Challenge\nSHARE\nChallenges\n\n\nCreate a function that takes two numbers as arguments and return either a sum or a product of these numbers dependeing on the call.\"\"\"\ndef SumorProduct(number1, number2): \n    return number1 + number"], [0.16314675787130523, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zero\u2019s to the end of a list.\n #Counting the frequency of each character present in a string\nstr = \"sonofatiger\"\nres = {}\nfor keys in str:\n if keys in res:\n  res[keys] +=1\n else:\n  res[keys] = 1\nprint (\"count of all charactersis :\\n \"+  str(res))\n\n#17. K"], [0.16314675787130523, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zero values to the end of a given list while maintaining the same order of other elements.\n\ndef swap(s1, s2):    \n  return s2, s1\nThe above code is a simple helper function to swap two strings.\n\ndef sort_list(test_list, char2):\n  test_list.sort(key=lambda ele: ele.lower())\n  res = [i for i in"], [0.16297368036122348, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\ndef string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to place all the zero values at the end of the list.\n\ndef list(li1):\n    li1.sort()\n    print(li1)\n    li1.sort(reverse=1)\nThe above code is used to reverse a list in ascending order and descending order respectively.\n\n"], [0.16182980640988903, "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is the function to move all the zeroes at the end of a given numbers in list.\ndef count_occurence(str, word): \n    freq = {} \n    str_list = str.split() \n    for i in str_list: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    if word in fre"], [0.16155664068386352, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python program to move all zeroes at the end of the array.\ndef smallest(arr,n):\n    min = arr[0]\n    for i in range(1, n):\n        if arr[i] < min:\n            min = arr[i]\n        return min\nThe above code is a python program to find the smallest element in an array.\n\ni = 4\nd = 4.0\ns = 'H"], [0.16155664068386352, "def add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of a given list.\n\nnew_tuple = lambda x, y, m: (x if x > y else y, m if (m > y and m > x) else y if y > x else x)\n\ndef next_palindrome(n):\n    n = n+1\n    while not is_palindrome(num):\n        n += 1\n    return n\n"], [0.1615412287385986, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function move all zeroes to end of array using one-line list comprehension.\nThe time complexity of Code is O((N).\ndef multiply(num1, num2):\n  sign = -1 if(num1[0] < 0) ^ (num2[0] < 0) else 1\n  num1[0], num2[0] = abs(num1[0]), abs(num2[0])\n  result"], [0.16083625689325265, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to place all the zero values at the end of the array.\ndef bubble_sort(nlist):\n    for passnum in range(len(nlist)-1,0,-1):\n        for i in range(passnum):\n            if nlist[i]>nlist[i+1]:\n                temp = nlist[i]\n                nlist[i] = nlist[i+1]\n                nlist["], [0.16052881746299852, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move zero to end of the list. https://www.geeksforgeeks.org/python-move-zeroes-end-list/\ndef reverse(lst):\n    return [ele for ele in reversed(lst)]\nThe above code is a function to reverse the list. https://www.geeksforgeeks.org/python-reverse-list-in-groups-of-given-size/\n    def reverse(l"], [0.16026488455449459, "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros in the given list to the end in the same order. \nimport os\nimport textwrap\ndef execute_commands(lines):\n  for line in lines:\n    handle_command(line)\ndef handle_command(string):\n  command, *args = string.split()\n  if command != \"print\":\n    comm = \"global %s\" % \",\".join(args) \n   "], [0.15975799051644457, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\ndef dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to create a list whose all zeros are moved to the end of the list such that time complexity remains O(n) and space complexity remains O(1).\n\nfrom collections import OrderedDict\ndef arrange_money(num_list):\n    money_dict = OrderedDict()\n    for i in num_list:\n        if i in money_dict:\n            money_dict[i] += 1\n        else:\n"], [0.15880265262771665, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeroes at the end of  a given list.\nfrom collections import Counter\ndef rearrange_digits(input_list):\n    \"\"\"\n    Rearrange Array Elements so as to form two number such that their sum is maximum.\n\n    Args:\n       input_list(list): Input List\n    Returns:\n       (int),(int): Two maximum sums\n    \"\"\"\n    sorted_list = [0"], [0.1587756741193038, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a basic code to move all zeroes to end of a list without using any other data structure.\ndef Max_sum_subarray_of_size_k(arr, k): \n  \n    # we define two \"pointers\" as \"start\" and \"end\". \n    # We also define iterator \n    \n  s = 0\n  e = s+k-1\n  m = 0\n  ms = 0\n  while"], [0.1586665412969919, "def maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)\nThe above code is Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is The input is an integer array . you need to move all zeros in the array to the end of the array.\ndef missing_positive(nums):\n    if max(nums) <= 0:\n        return 1\n    if len(nums) == 1:\n        return 2 if nums[0] == 1 else 1\n\n    l, r = 0, len(nums) - 1\n    while l < r:\n        mid"], [0.15826303370684833, "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to move all zeros to end of a list without changing given positions of other elements.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeros to end of a list without changing given positions of other"], [0.15763904961792602, "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to end in a list.\ndef check_anagram(data1, data2):\n    if(sorted(data1)== sorted(data2)):\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    data1 = \"anagram\"\n    data2 = \"nagaram\"\n    print(check_anagram(data1,"], [0.15757397627705352, "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the 0's in a list to the starting or the end of the list\nCode for custom range function in python for a given range.\n\ndef custom_range(min_val, max_val,step):\n    counter = min_val\n    while counter <= max_val:\n        yield counter\n        counter += step\nInput : min_val = 1, max_val = 10, step = 3\nOutput : 1 4"], [0.1565512394269258, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of a given python list.\ndef move_all(num_list):\n    a = [0 for i in range(len(num_list))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a function to move all zeros to the end of a given python list.\n            \nimport itertools\np ="], [0.15644389465550612, "def is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " takes in a list of numbers and manipulates its contents by moving all zeros to the end of the list.\ndef duplicate(num_list):\n    dup_list = []\n    for i in num_list:\n        if num_list.count(i) > 1:\n            if i not in dup_list:\n                dup_list.append(i)\n    return sorted(dup_list)\nThe above program returns a list of"], [0.15633885196044264, "def even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", ", a python function that selects all element except zero from a given list and appends zeros at the end.\n"], [0.15431603878115083, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros in the given input list to the end. Note that only zeros.\n\n\ndef move_zero2(num_list):\n  temp = [0 for i in range(num_list.count(0))]\n  for i in range(len(temp)):\n    num_list.remove(0)\n  num_list += temp\n\nThe above code moves all the zeros to the end but the"], [0.1539678141509673, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to move all the zero elements to the end of the list\nThe below code is to find the range of an array and to print the elements in that range.\ndef range_of_array(arr1):\n    min = max = arr1[0]\n    for x in arr1:\n        if(min > x):\n            min = x\n        if(max < x):\n            max = x\n    return str(min)+\" \"+"], [0.15312577453472, "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function which returns a python list with number of zeroes in given list according to the length of the given list by moving all zeroes to end of the list.\n\n#include <stdio.h>\n#include <string.h>\nint sum_of_integers(char *arr) {\n    int len = strlen(arr), i = 0, sum = 0;\n    for (i = 0; i < len"], [0.15301629749984588, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to print the input array with all zeroes shifted to last.\n\ndef left_rotate(arr, n): \n    if n < 0: \n        return\n    else: \n        for i in range(0,n): \n            left_rotate_once(arr) \n  \ndef left_rotate_once(arr): \n    temp = arr[0] \n    for i in"], [0.1530005676348322, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", "s is a function to move all the zero\u2019s to the end of the array given.\nIt first makes a array of zeroes from the count if zeroes and then fill the array indexes with some other number but keeping the order of numbers in the same way as list. \nThe above code will take a list as a input and output the same as the following line of code.\nlist(filter(lambda x: x != 0, num_list)) +"], [0.15283416518948217, "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to move all zeros to the end of a list without converting the data into another form.\n\ndef count_array(a, diff):\n    som_d = {}\n    for i in range(len(a)):\n        for j in range(1, diff+1):\n            k = a[i] - j\n            if som_d.get(k) is None:\n                som_d[a[i]] = 1"], [0.15256861258004542, "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the o's to the right of the array by changing them to z's.\n tup = [(),('ram','15','8'),(),('laxman', 'sita'),  \n                ('krishna', 'akbar', '45'), ('',''),()] \n                \nThe above (parentheses) () denotes a tuple in list with elements.\n\ntup = collections.OrderedDict(tup"], [0.15203558149600085, "def largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to move all zeroes on the right.\ndef tower_of_hanoi(disks):\n\tdef towers_hanoi(poles, start_pos, end_pos):\n\t\tif disks <= 0:\n\t\t\traise Exception(\"Number of disks should be greater than 0\")\n\t\tif disks == 1:\n\t\t\tpoles[end_pos].append(poles[start_pos].pop())\n"], [0.1519764961400906, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move the zeros to the end of a list.\ndef print_square(size):\n  print_rectangle(size, size)\n  \ndef print_rectangle(width, height):\n  for _ in range(1, width + 1):\n    print('*' * width)\n  for _ in range(1, height - 1):\n    print('*' + ' ' * (width - 2) + '"], [0.15196470373894405, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeros in a list for the given input list of numbers to the end of that list.\n\ndef smallest_positive(in_list):\n    # TODO: Define a control structure that finds the smallest positive\n    # number in in_list and returns the correct smallest number.\n    min = None\n    for num in in_list:\n        if num > 0:\n            if not min or num < min:"], [0.15188280663081974, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to move zeros in the list to the end of the list.\ndef multiply(num_list): \n\tresult = 1 \n\tfor ele in num_list: \n\t\tif ele or ele == 0: \n\t\t\tresult = result * ele \n\n\treturn result \nThe above code is to multiply the elements in list.\ndef duplicate_count(word):                             # Question 1\n    k = set()                                "], [0.15069157431508992, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a program to move zeroes in the list. Sometimes we find an array with zeroes at the end of the array, now the aim is to move zero to the begining of the array.\n\nlst = [0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]\nprint(move_zero(lst))\n\nThe above code with a given"], [0.14990174437204706, "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function for moving all zeros at the beginning of the list.\n\"\"\""], [0.1480562254977454, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is use to sort the array and add zeros to the end of the list.\n\ndef count_hi(str):\n    return str.count('hi')\nThe code counts the number of times 'hi' appears in a string.\n\ndef cat_dog(str):\n    return str.count('cat') == str.count('dog')\nThe code checks if the cat and dog count of the string is equal.\n\ndef count_code("], [0.147205904808388, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that returns the argument with all zeroes moved to the end of the list.\n\ndef sort_list_last(tuples):\n    return sorted(tuples, key=last)\n\n\nYou are given a text of N lines. The text contains && and || symbols.\nThese symbols are the boolean operators. \nYour task is to modify those symbols to the following:\n\n    && \u2192 and\n    || \u2192 or\nBoth && and ||"], [0.146898270739792, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to push all zeros to the end of array.\n\n'''\n\n# Question 3\n#Create golf method\ndef golf(x):\n while len(x)>1:\n  z=[]\n  y=min(x)\n  for s in range(len(x)):\n   if x[s]!=y:\n    z.append(x[s])\n  x=z\n return x\nx=[2"], [0.14680412042314953, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zeros to the end of a list.\n\ndef insert_lists(list1, list2):\nreturn ([[list1[i], list2[i]] for i in range(len(list1))])\nThe above code is a function that takes two lists. It then takes the first list and adds the list items to a new list by taking at each item. Then the second list is taken and the same is done."], [0.1465736420993067, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is one way to move zeros to the end of or in a given list.\ndef uni_char(string):\n    return len(set(string)) == len(string)\n\nfrom collections import Counter\ndef uni_char2(string):\n    return len(Counter(string)) == len(string)\n\nfrom threading import Lock\nfrom functools import wraps\n\ndef singleton(cls):\n    instance = None\n"], [0.14628856481805438, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that extracts all the non-zero elements from the given list to return the list of elements retained in original list with all the elements with value zero moved to the end of the list.\ndef move_element_to_end(array, num):\n    start, end = 0, len(array) - 1\n    while start < end:\n        if array[end] == num:\n              end -= 1\n        if array[start] == num"], [0.14621507573559633, "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeroes at the end of a list with numbers in ascending order.\n\ndef separate(num_list):\n  positives = [n for n in num_list if n > 0]\n  negatives = [n for n in num_list if n < 0]\n  return positives, negatives \nThe above code is a function to separate a list of numbers into two lists containing positive and negative numbers in the same order.\n\n"], [0.14613790885498382, "def sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move the zeroes to end of the list.\n\ndef count(list):\n    dict1 = {}\n    list1 = [] \n    for i in list:\n        dict1[i] = dict1.get(i, 0) + 1\n    for k,v in dict1.items():\n        if v==1:\n            list1.append(k)\n    return list1\nThe above code is"], [0.14439465835447277, "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\n\ndef number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zero's to end of an array in Python.\ndef printRepeating(arr, size): \n\tprint(\"The repeating elements are: \"); \n\tfor i in range(0, size): \n\t\tfor j in range(i + 1, size): \n\t\t\tif arr[i] == arr[j]: \n\t\t\t\tprint(arr[j],end=\" \"); \nThe"], [0.14421756554272874, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", "  is a python function which takes a list and moves all the zeros to the end of the list while maintaining the relative order of items in the list.\n\ndef find_case(str):\n  \n  newstr = str.swapcase()\n  return newstr\nThe above code is a python function which takes a string and returns the string with the case of all letters swapped: lower letter will be uppercased and uppercase letters will be lowerc"], [0.14326441844461715, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that takes in a list of numbers and returns a list, where, all the zero entries are moved to the end of the list. \nNote, this solution has to be written in the same line as the problem statement demands. \nHINT: without using list comprehensions, try to use the append() function.\n \ndef substring_copy(str, n):\n    flen=2\n    if flen>len(str):\n"], [0.14249886271893883, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a Python function to move all zeros present in the list to the end.\ndef multiply(num1, num2):\n    sign = -1 if(num1[0] < 0 ^ num2[0] < 0) else 1\n    num1[0], num2[0] = abs(num1[0]), abs(num2[0])\n    result = [0] * (len(num1) + len(num2"], [0.1420348838766946, "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python program to move all the zero's to the end of a given array.\n\ndef missing_char(word):\n    answer = [item[0:i] + item[i + 1:] for item in word for i in range(len(item))]\n    print(answer)\nThe above code will complete the sentence \"The ___ is afraid of Yulia\" where all of the blank spaces are replaced with underscores \"_\"\ndef early_bird"], [0.1415865093081511, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is python code to move all the 0s of a list to the end of it while maintaining the relative order of the non zero elements.\ndef find_average(list_num):\n  '''\n      This code is to return average value of list of integers,\n      where in list_num contains all the integers.\n      \n      >>> find_average([1, 2, 3, 4, 5])\n      3\n      \n  '''\n  return"], [0.14106997545219785, "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that takes a list of integers and moves all zeros to the end.\n"], [0.14088028737644798, "def even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end of a list.\nYou are given an integer N followed by N email addresses. Your task is to print a list containing only valid email addresses in lexicographical order.\n\nValid email addresses must follow these rules:\n\nIt must have the username@websitename.extension format type.\nThe username can only contain letters, digits, dashes and underscores.\nThe website name can only have letters and digits"], [0.1407435664649832, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function move all zero in the list to the end.\ndef selfDividingNumbers(left,right):\n    l=[]\n    for i in range(left,right+1):\n        a=str(i)\n        m=len(a)\n        k=[]\n        for j in a:\n            b=int(j)\n            if b==0 or i%b!=0:\n                break\n           "], [0.14069213655719565, "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to seperate all 0s at the end of the list\n\ndef remove_consecutive(tup):\n    tup = iter(tup)\n    try:\n        prev = next(tup)\n        while True:\n            current = next(tup)\n            if prev != current:\n                yield prev\n                prev = current\n            else:\n                prev = current\n    except StopIteration:\n        yield"], [0.14069213655719565, "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros in list to the end.\ntest_list = [10, 0, 4, 5, 19, 0, 2, 5, 0]\nprint(move_zero(test_list))\nThe above code applies to the sample list above.\n\ndef dholder_listd(length, sample_list=False, min=1, max=100):\n  if sample_list == False: sample_list=[]"], [0.14069213655719565, "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to end of array without changing positions of other elements.\n\nimport re\ndef rem_little_Symbols(str1): \n    str2 = \"\"\n    for i in range(len(str1)):\n        if not ((ord(str1[i]) >= 33 and ord(str1[i]) <= 47) or (ord(str1[i]) >= 58 and ord(str1[i"], [0.14059428903069596, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to end of a given list.\nThe lists are printed after each of the first five list assignments are executed, as follows:\nThe following operations that assign numbers to the same list.\na = [1,2,3]\na = [4]+a[1:]\na = a[0:1] + [5] + a[2:]\n\nAll number lists:\n\n[4, 5, 3]"], [0.13991684116359288, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the occurance of zero at the rightmost side of given list.\ndef insertionSort(arr):\n   \n    for i in range (1, len(arr)):\n\n        \n        key = arr[i]\n\n        \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j+1] = arr[j] \n            j -= 1\n        arr"], [0.13949979941964136, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that moves the zeroes to the end.\ndef up_low(s):\n    d={\"upper\":0, \"lower\":0}\n    for i in s:\n        if i.isupper():\n            d[\"upper\"]+=1\n        elif i.islower():\n            d[\"lower\"]+=1\n        else:\n             pass\n    print(d)\nThe above code is a python function that returns"], [0.1394776992737149, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \nThe above code is a function to determine if the sum of the divisors of two integers are the same.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves all the zeros to the end of a list.\n\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nmove_zero([1,2,5,0,-8,0])\ndef merge_string(x, y):\n    for a, b"], [0.13910538763529523, "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\n\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to end of a given list.\n\ndef get_square(n):\n    return {i: i*i for i in range(1,n+1)} \nprint(get_square(5))\nThe above code is a function to create a dictionary of squares of numbers from 1 to given number in the format: x:x*x.\n\nfrom collections import Counter\n\ndef compare_lists(x,"], [0.1386521772492474, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to shift all zeros to the end of a list.\ndef merge_intervals(arr):\n    arr = sorted(arr, key = lambda x: x[0]) \n    merged = [] \n    s = -10000\n    max = -100000\n    for i in range(len(arr)): \n        a = arr[i] \n        if a[0] > max: \n            if i !="], [0.13856067406267913, "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " segregates the zeros at the end of the list.\ndef twoSum(self, nums: List[int], target: int):\n    val_map = {}\n    for ii, vv in enumerate(nums):\n        if vv in val_map:\n            return [val_map[vv], ii ]\n        val_map[target - vv] = ii\n\n"], [0.13849606068806802, "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\n\ndef max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that moves all 0s to the end of a given list without changing the order of elements in the list.\ndef reverse_array(arr, start, end):\n    while start < end:\n        arr[start],arr[end] = arr[end],arr[start]\n        start += 1\n        end -= 1\nThe above code is a function to reverse the array.\nGiven an array A with n objects colored Red, White or"], [0.1378207366819379, "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros present in the list to end of the list.\n\ndef Polygon_Perimeter(a, b, N):\n    perimeter = 2 * a + 2 * b\n    area = ((()) / 2) * b\n    if (area == N):\n        return perimeter\n    elif (area < N):\n        return ((a + b) * 2 * (N // a))\n    else:\n        return"], [0.13769991170661008, "def list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to a new list.\n\ndef sum_digits(num):\n    return sum(to_digits(num))\n\ndef to_digits(num):\n    return [int(x) for x in str(num)]\nThis snippet shows a recursive way to solve the problem using sum_digits and to_digits methods.\n\ndef square_digits(num): return int(''.join("], [0.13755789034842905, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move 0s in the given list.\n6-Dictionaries \ndef count_freq(data):\n    x_list = data.split(' ')\n    x_list.sort()\n    dic = {}\n    current_count = 0\n    current_word = \"\"\n    for word in x_list:\n        if current_word != word:\n            dic[word] = current_count\n           "], [0.13740222915988673, "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that creates a list where the zero's are pushed to the end.\n"], [0.13708082985990325, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\nimport re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to push all zeros to the end of array by moving them to the start of array. Similar cases could be:\n\ndef move_zeroes_v2(num_list):\n    return sorted(num_list, key=lambda x: x == 0)\ndef delete_given_element(arr,k):\n    count = arr.count(k)\n    pos = 0\n    while count != 0:\n        idx ="], [0.1367604158415179, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\ndef find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to arrange all non-zero integers of a list to the left of the list and the 0's to its right.\ndef count_Triplets(arr, n): \n    triplet_count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            for k in range(j + 1, n): \n                if (arr[i] + arr[j]"], [0.13658930868734045, "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move zero at the end of the list. This is an elegant solution suggested by\none of the viewers.\n\nThe below code is a function to print even numbers in a given range of numbers\ndef even_printer(numbers):\n    enum = []\n    for num in numbers:\n        if num % 2 == 0:\n            enum.append(num)\n    return enum\n\nprint(even_printer([1, 2"], [0.13633829800812944, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " will give a list by moving all zero to the end of the list\n\ndef removeDuplicate( li ):\n    newli=[]\n    seen = set()\n    for item in li:\n        if item not in seen:\n            seen.add( item )\n            newli.append(item)\n\n    return newli\nThe above implementation uses a set data structure. Although we have used a list in the implementation, set can be used here if"], [0.13609063872669327, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is The below code moves all zeros to the end of it while maintaining the order of the other elements.\n\ndef sum13(nums):\n  count = 0\n  for i in range(len(nums)):\n    if nums[i] == 13:\n        if nums[i+1:]:\n            nums[i+1:] = [x-nums[i] for x in nums[i+1:"], [0.13600969985356684, "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function which segrigates the Zero's and Non-Zero's.\n"], [0.1357093962959761, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function. input to it a list of numbers, it will portion out the set of zeroes to output a reordered list.\n"], [0.1354059660882112, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros at the right end of an Array without mutating the original Array.\ns = \"i'm constantly buying new vinylf albums but not really listening to them - in 2009\"\nw=s.split(\"m\")\nl=[]\nfor i in w:\n    l.append((len(i), i))\nk=sorted(l)\nfor j in k:\n    print(j[0][1"], [0.13535087954358743, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros in a list to the end.\n\n\ndef check_subset(sub, main):\n    return set(sub).issubset(set(main))\nThe above code checks whether the first set is a subset of the 2nd. Given 2 arrays A, B, check if A is a subset of B.\n\n\ndef sorted_two_sum(list_array, target):\n    a = sorted(list_array"], [0.13533127092843802, "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndef check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end ofthe array in order to move all zeros in the array to its end.\n'''\n\n#Given an input string, reverse all words preserving the order at which the words appear in the sentence and the position of the last word preceding the rev word.\n#Soln approach: using.pop function\ndef reverse_word_order(str1):str1[::-1]:\n\tlstSTR="], [0.1345798321627817, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves all zeroes to end of list and maintains the respective order of other numbers in the list.\n\n#************PE Built-Ins***********************\nclass Interpreter():\n    def __init__(self):\n        self.stack=[]\n    def LOAD_VALUE(self,number):\n        self.stack.append(number)\n    def PRINT_ANSWER(self):\n        answer = self.stack.pop()\n       "], [0.13445896562193607, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move the zero values to the end, keeping the order of the other values unchanged.\n  def twoSum(nums,target):\n    x=dict()\n    for i in range(len(nums)):\n        if(target-nums[i] in x):\n          return (x[target-nums[i]],i)\n        x[nums[i]]=i\n  \nGiven an array of"], [0.13426972525493178, "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to end in a given input list.\ndef front_back(word):\n    return word[::-1] if len(word) > 1 else word\nThe above code is a function to reverse each word in our given string 'word'.\ndef swap(num_list, a, b):\n    num_list[a],num_list[b] = num_list[b],num_list[a]"], [0.13424028939387864, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros in the list to the end.\nwith open(\u201ckk.txt\u201d) as f:   \n    data = f.readlines()   \n    sample = open(\"new.txt\", \"a\")   \n    for line in data:     \n        words = line.split(\"\\t\") # split the line by tab space     \n        words.pop() # pop the last element which is \\n     \n"], [0.13424028939387864, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to move the zero at the end of the list. The cost involved is O(length of the number_list)\nprint(list(map(lambda x : 20 - x, list(map(lambda y : y , list(filter(lambda x: x%2 == 1, [int(input())])))))))\nThe above code is to reverse the order of the list \n"], [0.13413188712485596, "def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function which output a new list consisting of integers that are not '0' from the given list along with the number of '0's at the end of the list.\nHint\nX = [4,3,4,4,0,4,3,3]\nY = [2,1,2,2,2] 2 occurs twice, hence the second occurrence is changed to 0\n\n"], [0.13413188712485596, "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\n\ndef check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to push all the zeros to the end of array.\n\ndef push_zero_to_end(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != 0 :\n            arr[count], arr[i] = arr[i], arr[count]\n            count +=1\n    return arr\nThe above code is a function to push all the"], [0.13399584294857153, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zero from the list to the ptherside of the list making the number of zero even.\n\ndef largest_k(lst, k):\n    cnt = 0\n    for i in lst:\n        if i >= 0:\n            cnt += 1\n            \n    if len(lst) < k or k > cnt:\n        return -1\n    lst.sort()\n    max_"], [0.13379377414938876, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to end of an array.\ndef remove_duplicates(n_list):\n    return list(set(n_list))\nThe above code is a function to remove all duplicates from a list of numbers.\ndef compute_square(lst):\n  \n  return [i**2 for i in lst]\nThe above code is a function to compute the squares of all elements in a given list.\n"], [0.13317820336306535, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move the zeros to the end of list.\ndef square(num_list):\n  return [ i ** 2 for i in num_list ]\nThe above code is a function that squares the elements of list.\ndef square(num_tuple):\n  resp = ()\n  for b in num_tuple:\n    a = b ** 2\n    resp = resp + (a,) \n  return resp\nThe above code"], [0.13310740658715497, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is  a python function which shifts all the non zero elements to the left side of the list and append all the zero elements at the end of the list.\ndef multiples(num):\n  for i in range(1,num):\n    if i%3==0:\n      print(i)\nThe above code is a python function which prints the multiples of 3 between 1 and the number entered by the user.\ndef reverser(string):\n "], [0.1327464290540795, "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\n\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to shift all the zeros of a list to the end of it.\n2)  from SearchEngines.utils import pre_process\n\n  text1 = \"dell inspiron\"\n  print(text1)\n  text = pre_process(text1, ' ')\n  print(text1)\nThe above code convert a string to lowercase and remove punctuation, remove extra\nspaces. It also removes whitespaces."], [0.13142295478671942, "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\n\ndef find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to end of array.\n\ndef cool_sort(l):\n    return [i for i, _ in sorted(l, key=lambda x: x[1])]\nThe above code is a function to sort the given list according to the second element of inner lists. This uses sorting and lamda function to achieve the requirement.\n'''\n\n# data block\nnum_list = [5, 2, 0,"], [0.13140889016060495, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to push all zeros to the end of list.\ndef reverse(nums):\n    return nums[::-1]\nThe above code is a function to reverse a given list of numbers.\nimport collections \ndef common(li1, li2): \n\treturn (list(set(li1) & set(li2))) \nThe above code is a function to check common elements between two lists.\ndef swap_case"], [0.13137251806698536, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is the function that moves all the zero to the end of list.\ndef square(x):\n    return x**2\n\nsquare(2)\n#The lambda points to an object when you assign it to a variable.\n# lambdas are mostly used with the map(), filter(), zip(), and reduce() functions.\nmylist1 = [5,10,15,20,25]\nmylist2 = [6,7,8,9]"], [0.13091495324225905, "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that takes in a list containing zeros as well and moves all zeros to end of the list. \n\ndef move_zeroes(self, nums):\n    lastNonZero = 0\n    #  find the last non-zero element\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            lastNonZero = i\n    #  move all elements after the last non"], [0.13080971886211012, "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that takes in a list of numbers, moves all the zeros to the end and reurns the modified list.\nclass Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\ndef inorderTraversal(root):\n  current = root\n  stack = []\n  print(\"Inorder: \")\n  while"], [0.1306195459966621, "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move list of zeroes in the beginning of the list.\n\ndef put_column(square_matrix):\n    return [[row[i] for row in square_matrix] for i in range(len(square_matrix[0]))]\nThe above code is a function to transpose a matrix.\n\nm = [[1,2,3,4],[21,22,23,24],[31,32,"], [0.1302276413358548, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros in a list to the end, while maintaining the order of the non-zero elements.\nPair Sum in List\n\ndef pair_sum(num_list, target):\n    index_list = []\n    index1 = 0\n    for i in num_list:    \n        index2 = 0\n        for j in num_list:            \n           if i + j == target and index1 != index2:"], [0.129301156972787, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to remove all occurences of 0 in the input\n"], [0.12898683344501002, "def count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move the all zero towards right side of the list. https://www.geeksforgeeks.org/move-zeroes-end-list/\ndef segregate(arr):\n    #dictionary to save the \n    #indices for positive \n    #and negative numbers \n    pos, neg = {}, {} \n    #print(arr)\n    #Traverse the array and save \n    #indices to"], [0.1288064735242749, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to append zeroes after the list, if any is present.\ndef reverse_words(text):\n    return ' '.join(x[::-1] for x in text.split(' '))\n\nThe above code is a python function that reverses the words in the given text.\n\ndef sum_floats(nums):\n    return sum(x for x in nums if type(x) == float)\n\n"], [0.1283804291814865, "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a program to rearrange elements of a list by moving all the zero\u2019s to the end while containg the list in the same order.\nCode\n\ndef number_plate():\n  import random\n  list = [\"P\",\"No.\",\"BB\",\":\",\"HP\",\"KK\",\"up\",\"00\",\"AA\",\"FF\",\"uu\",\"11\",\"pp\",\"44\",\"LL\",\"44\",\"00\",\"BB\",\"P\",\"00\",\"Nnnnn\",\"00\",\"UUU\",\""], [0.12712813692986036, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that takes a list and moves all zeros to the end while maintaining the relative order of the elements.\n\ndef sortArrays(a, greaterVal):\n    newA = [greaterVal for x in a]\n    b = []\n    for i in a:\n        if i == greaterVal:\n            b.append(i)\n    for i in range(len(newA)):\n        desiredIndex = i\n"], [0.12709813566893077, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\nfrom copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move zero to the last places by the sequence of numbers.\nfrom collections import Counter  \ndef rearrange_digits(input_list):\n  if len(input_list) <= 1:\n  \treturn input_list\n  else:\n  \tcount = Counter(input_list)   \n  \tmax_val = max(count.keys())   \n  \tmax_count = count[max_val]    \n  "], [0.12674889080414628, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that takes an array of integers and moves all of the zeros to the end of the array and returns the new array.\nThis solves the problem by replacing all the zeros with a place-holding element.\n\ndef move_zero(num_list):\n    return [i for i in num_list if i != 0] + [i for i in num_list if i == 0]\nThe above code is a function that takes an array of"], [0.12631665458682736, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves the zero at the end of the num_list.\n\ndef move_zero(arr): \n    i, l = -1, len(arr)\n    while i < l-1  :   #Assume i < arr_size\n        #if element at index i is 0:\n            #increment i\n        #else: swap arr[i] with arr[last_zero_index+1]\n        \n        if arr["], [0.12498993733534312, "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to the end in Python.\ndef filter_list(l):\n  return list(filter(None, l))\nThe above code is a function to remove null objects from list in Python.\n\n2.1 How would you design the data structures for a very large social network (Facebook, LinkedIn, Twitter, etc)? Describe how you would design an algorithm to show the connection, or path, between two people (e.g"], [0.12485777552238081, "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function which moves all the zeros to the end of a list without changing the order of non-zero elements.\ndef flask():\n    length = 50000000\nSolution\nfor i in range(15):\n    flask()\n\nprint(\"This code runs in {} seconds on avg.\".format(timeit.timeit(\"flask()\",\nsetup=\"from __main__ import flask\", number=15)/15))\nWatch my solution on YouTube here."], [0.12464907117200098, "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move the zeroes with the other elements in the given list.\n\ndef context_check(s):\n  if(s.find(\"ab\") == -1 and s.find(\"cd\") == -1):\n    return False\n  else:\n    return True\nThe above code is a function to check whether various subsets assigned in the code are present in the given string snippet or not.\n"], [0.12416579527750034, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to segrigate the non-zero values at the beginning of a list-\nnum_list = [1,2,0,1,5,0,0,1,9]\nprint move_zero(num_list)\nThe above code is sorting a list of numbers by eliminating the zeroes fromt the beginnig of the list and placing them at the end of the list .\nimport exceptions as e\na = raw_input"], [0.124025433804027, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\ndef Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that takes any sort of list of integers and moves all the zeros to the end while maintaining the relative order of the zeros and non zeros in the list.\ndef first_dup(arr):\n    dups = []\n    [dups.append(n) for n in arr if n in arr[arr.index(n)+1:]]\n    \n    if dups != [] or dups is None:\n        return"], [0.12400975582759423, "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python program that takes a list and moves all zero to end.\n"], [0.12364271134931307, "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros to end of a list.\n\nIn case of string the above code can be written as:\n\ndef move_zero(string):\n  a = [i for i in string if i != \"0\"]\n  return '0' * string.count('0') + \"\".join(a)\nThe above code is a function to move all zeros to end of a string.\n\nnumbers = [1,"], [0.12314581631590646, "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is the function to move 0\u2019s at right end of array.\ndef create_bin(input1):\n    res = []\n    k = 0\n    while(input1):\n        res.append(input1 % 2)\n        input1 = int(input1 / 2)\n    while(len(res)!=8):\n        res.append(0) \n    return res\n\ndef convert(input): \n    input"], [0.12285591250209624, "def Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move zeros to end of list.\n\ndef sum67(nums):\n  count=0\n  j=0\n  for i in nums:\n      if i%2==0:\n          count+=i\n      j+=1\n      if j<len(nums):\n          i=nums[j]\n  return count\nThe above code is a function that sums the female numbers alternatively from a list.\n"], [0.12224758593532782, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves all the zeros to the end of a list of numbers.\ndef duplicate(l):\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i]==l[j]:\n                return True\n    return False\nThe above code return True if there is atleast one element in the list is repeated.i.e., when we get two identical elements one"], [0.12217055702639447, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to rearrange positive and negative numbers in a list using a list comprehension.\nnum = [-1, 1, 0, 0, -2, 3,0,-9]\n#move_zero(num)\n-2*a+b <= 0\n-5 -(a-7) <= 0\n3*x1 + 4*x2 + 4*x4 >=6bits\n-6 * x4 +4*x1 -2"], [0.12193763629053844, "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to push all zeros to the end of an array uf integers.\ndef string_both_ends(str):\n  if len(str) < 2:\n    return ''\n\n  return str[0:2] + str[-2:]\nThe above code is a function that returns a copy of  a string, concatenation of first 2 and last 2 chars of the said string, if the string length is less than 2 it returns two"], [0.1219127154808116, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move zeroes at the beginning of a list.\n\ndef word_count(phrase):\n    word = string_to_list(phrase)\n    word_count = []\n    for i in word: \n        word_count.append(word.count(i))\n    return word, word_count\nThe above code is a function that counts occurence of words in the given string.\n\ndef finder(l"], [0.12163294292940191, "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that can take a list of numbers and move all the occurrences of zero to the end while keeping the ordering of the remaining elements same.\n\nHi,\n\nPlease note below code\ndef move_zero(num_list):\n  a = [0 for i in range(num_list.count(0))]\n  x = [i for i in num_list if i != 0]\n    return x + a\nabove code is right"], [0.12107985368690878, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move the zeroes on the left side of the list without changing the order of other elements.\ndef around_az(test_str):\n  if test_str.count('a') == 0 or test_str.count('z') == 0:\n    c = False\n  elif test_str[test_str.find('z')+1 :].find('a') == -1 and test_str[:test_"], [0.12051430410877723, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that moves all zeros to the end of a given list, while preserving the relative order of the other elements.\nlambda Function\n\nx = lambda a,b : a * b\nprint(x(5, 6))\nThe above code is lambda function that multiplies two numbers and returns the product.\ndef returnFunc():\n    return lambda x: x*x\nret = returnFunc()\nprint(ret(5))\nThe above"], [0.12050435648971788, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zero elements in the end.\ndef add_odd_even(arr):\n    odd_sum = 0\n    even_sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return [even_sum, odd_sum]\nThe above code is a function to calculate sum of odd elements and sum of even"], [0.11982297260163174, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function in-place that moves all zeroes to end of a given array (list).\n\n# Get a list as input from user and print it in reverse.\nnum = eval(input('Enter a number :'))\ntemp = []\nwhile num :\n    t = (num% 10)\n    temp.append(t)\n    num = num // 10\nfor j in range(len(temp)-1 , -1 , -"], [0.1194221146613512, "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\n\ndef count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that takes in a list of integers and moves all zeros to the end without changing the order of the other elements.\ndef find_all_index(a, items): \n    return [i for i, x in enumerate(a) if x in items]\nThe above code is a pure Python function to traverse a list and return the index of items in the list.\nimport copy\ndef add(A, B, m, n):"], [0.11930355933064016, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a simple pythonic logic to move all the 0's in a given list to the end in a single traversal.\n\ndef get_appended_list(list1 , list2 , input_number):\n\tlist2 = [sub[:input_number] for sub in list2]\n\treturn [ sub + list1 for sub in list2]\nThe above code gives all the lists which have the given n number appended to all the elements of"], [0.1192451550198637, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to push all zeros to end of list.\ndef insert_end(string):\n    sub_str = string[-2:]\n    return sub_str * 4\nThe above code is a function to print last two characters of the given string three times.\ndef check_upper_lower(string):\n    upper = 0;\n    lower = 0;\n    for i in range(len(string)):\n        if ord(string"], [0.11920956613400548, "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move zero at last of the list. https://www.geeksforgeeks.org/can-you-help-me-remove-the-zeroes-at-the-end-of-this-array/\nprint(\"Enter any Number : \")\nnum = int(input())\n\nif num <= 17:\n    if num == - 1  or  num == 0 :\n        print(\"Integer is neither Positive nor Negative\")\n"], [0.1191238743766108, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to segregate zeros and non-zero numbers.\ndef prime(num):\n    for i in range(1,int(num**0.5)+1):\n        if num % i==0:\n            break\n    else:\n        return num\nThe above code is a python function to print first 500 prime numbers.\ndef fib(num):\n            if num == 0:\n                        return 0\n            if num == 1:"], [0.11897950485886331, "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to push all the zeros to end of a list.\n\ndef pivot_place(pivot,num_list):\n    start = 0\n    end = len(num_list) -1\n    pivot1 = num_list[pivot]\n    print(pivot1)\n    while (start<end):\n        print(pivot1, num_list)\n        if num_list[start] < pivot1:"], [0.1188747957517038, "def split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move the zeros at the end of the list. A number is said to be a palindrome if it is equal to its reverse. An integer without a fractional part is called a whole number. \n# Python program to check if the number provided by the user is an Armstrong number or not\n\n# take input from the user\nnum = int(input(\"Enter a number: \"))\n\n# initialize sum\nsum = 0\n\n#"], [0.11809130874750336, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " removes all the trailing zeroes at the end of the list.\nIn Python, it can be done as follows:\n    l = [0, 4, 2, 0, 0, 5, 0, 8, 4, 0, 7]\n    print(l)               # [0, 4, 2, 0, 0, 5, 0, 8, 4, 0, 7]\n    l = [i for i in l if i]\n    print"], [0.11788105355028095, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function to arrange the given input in a list without any zeroes and return via a list having zeroes at the end.\n\nFollowing is an unusual find in a list. A list of numbers could hold the value of days i.e 24,7,366 etc which is a very unusual case. To get the actual days count , you will add 1 to them.\n\ndef find_unusual_days(input):\n    output_value ="], [0.11774508625450923, "def find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\n\ndef max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that moves all zeros present in the list to the end maintaining the order of other elements.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return (x+a)\n\nThe above code is a python function that moves all zeros present in the list to the"], [0.11763370843891982, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all the zero within a list, leaving any other elements at its same place.\n##Smallest Number\ndef find_small(arr):\n    x = sorted(arr)\n    return x[0]\nThe above code is a function that finds the smallest element in a list through returning the first element of a sorted array.\n\ndef smallestNumber(num):\n    return min(map(int, num.split()))\nThe above"], [0.11729407503180136, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move the zeroes at the end of an array of integers. It actually moves only those whose first occurrence is at the last.\n\ndef characters(word):\n n_none = word.count(None)\n n_lower = sum(1 for c in word if c.islower())\n n_upper = sum(1 for c in word if c.isupper())\n n_digits = sum(1 for c in word if"], [0.11714498651216108, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a The above code is a function that returns a list where the list of num_list elements is obtained by inserting 0 at the end of the list.\ndef minion_game(string):\n    vowels = \"AEIOU\"\n    strl = len(string)\n    kevin = sum(strl - i for i in range(strl) if s[i] in vowels)\n    stuart = strl * (strl +"], [0.11700383297297898, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " will put __0s__ at the end of list '''"], [0.11666619862030064, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that moves all the zeros towards the left in the given list.\ndef bubble_sort(num_list):\n    if len(num_list) == 1:\n        return num_list\n    swaps = 0\n    for i in range (0, len(num_list)-1):\n        if num_list[i]>num_list[i+1]:\n            num = num_list[i]\n            num_"], [0.11665050127784302, "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move zero at the right end of a list of numbers.\nimport zipfile\nfrom zipfile import *\nfrom time import time\nfrom time import *\nCreateZip = time()\nzip_object = ZipFile('project.zip', 'w', ZIP_DEFLATED)\nfor_project = ['FlexiTimer2.py','FlexiTimer Documentation.html','FlexiTimer Registration.htm','Register.py','install."], [0.11665050127784302, "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move Zeros to end of list by converting zeros to empty array.\ndef toggle(widget):   \n    if widget.config('activeforeground')[-1] == 'red':\n        widget.config(foreground = 'black',activeforeground= 'black')\n    else:\n        widget.config(foreground = 'red',activeforeground= 'red')\nThe above code is a function to toggle colors of a"], [0.11613141266144308, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that returns a given list of numbers with every zero in the list moved to the end.\n\ndef even_after_odd(ip_list): \n    even_list = []  \n    #list of even numbers\n    \n    for num in ip_list:  \n  \n        if num % 2 == 0:   \n        \n            even_list.append(num)  \n  \n    for num in ip_list:"], [0.11581458448681399, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to place all the zero elements at the end of a list.\ndef find_even_index(arr):\n  for i,x in enumerate(arr):\n    if sum(arr[0:i]) == sum(arr[i+1:len(arr)]):\n      return i\n  return -1\nThe above code is a function that given an array must find an index N where the sum of elements from index 0 \nto"], [0.1156749378873324, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move all zeros in front of all non-zero elements in an array.\ndef search():\n    l1 = [2, 3, 6, 8, 9, 12, 14, 15, 17, 18, 21, 23, 25, 26, 27, 28, 29, 30, 31]\n    found = False\n    for ele in l1:\n        if ele == 17:\n            print (ele)\n            found = True"], [0.11557915653219565, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that takes in a list of integers and moves all the zeros to the end while maintaining the relative order of the other numbers.\n\nnames = ['zero', 'one', 'two']\n[(i, len(i)) for i in names]\nOutput:\n[('zero', 4), ('one', 3), ('two', 3)]\n\nThe above example is Python list comprehension, where we have a list names, which contains 3 strings and"], [0.11518438904638609, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to push all zeros to end of array.\n\nnums=list(input())\nfor i in range(0,len(nums),2):\n    nums[i],nums[i+1]=nums[i+1],nums[i]\nprint(nums)\nThe above code is a function to swap the n/2 th elements in an array.\n\na=[10,20,40,60"], [0.11504524648656585, "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " shows how a list can be extended by appending one list onto the other. The append() has ben used the clear() has been used to eliminate the full list of zeroes at the end of the list.\n \nimport math \ndef rot_90(matrix):\n    return [[row[i] for row in matrix][::-1] for i in range(0, len(matrix))]\nIf there was a mirror image of the image"], [0.11500701259936538, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function which takes a list and then moves all the zeros to end of the list.\n\ndef multiply(numbers):  \n      total = 1\n      for x in numbers:\n          total *= x  \n      return total  \nThe above code is a Python function to multiply all a list of numbers\n\n# Given file and folder paths to a small and large group(respectively) of images, write a small computer vision script that checks if"], [0.11471490971679514, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to move all the zeros in the list to the end.\n\ndef remove_consecutive_duplicates(dsa):\n    new_dsa = dsa[0]\n    for i in dsa[1:]:\n        if i != new_dsa[-1]:\n            new_dsa = new_dsa+i\n    return new_dsa\nThe above code is to remove all the consecutive duplicates in"], [0.11410754582394966, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move the zero in a list.\ndef missing_number(num_list):\n    return sum(range(num_list[0], num_list[-1]+1)) - sum(num_list)\nThe above code is a function to find a missing number.\ndef group(List, size):\n    return [List[i:i+size] for i in range(0,len(List), size)]\nThe above"], [0.11406958737832626, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to push all the zeros to the end of an array.\nA single number is of integer type data type.\nfinally, \nYou can create a copy of elements or use lists() or list() and temp.copy() or temp.copy().\nC.sort() == List.sort()\nThis is called operator overloading. The left and right hand objects have to be from the same class. \nThis does not allow you to compare objects"], [0.11384202196420978, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that takes in an array and returns the same array but all zeroes are moved to the end.\n\n\nimport collections\ndef is_Palindrome(s):\n\n    return [i for i,_ in collections.Counter(s).most_common()] == [i for i,_ in collections.Counter(s[::-1]).most_com\n\nThe above code is a python function which takes in a given string and returns True"], [0.1135395847683966, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that moves all zeroes to end of list.\nIn the function, we have a list comprehension for creating a list with 0 count i.e a. \nNext, we are retrieving all elements of the list which are not equal to 0 ie is x. \nFinally we are adding the elements of x and a ie final output we will get is a list with all 0's at the end.\n\n# Using Lambda Function\nWe can use"], [0.1132376553935773, "def split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move zeros on a list to the end.\ndef bubblesort(List):\n    for i in range(len(List)):\n        for j in range(len(List) - 1 - i):\n            if List[j] > List[j+1]:\n                List[j], List[j+1] = List[j+1], List[j]\n    return List\nI have used python list comprehension in this"], [0.11323211829558474, "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move 1 zero in the list.\ndef add_even_odd(even1, odd1):\n    sum = 0\n    for i in range(len(even1)):\n        sum = sum + even1[i] + odd1[i]\n        i=i+1\n    y=[i for i in sum]\n    coc,lis=0,[]\n    for j in range(len(y)):\n"], [0.11320771304467096, "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function which moves all zeros to the back of the list(without changing the order or the non-zero elements).\ndef binary(n):  \n    if(n > 1):  \n        binary(n//2)  \n    print(n % 2,end = '') \nThe above code is a python function which finds the binary equivalent of positive integers.\nimport re   \nregex = '^[123][120][xs0"], [0.11296021101667382, "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that takes a list of positive and negative numbers, reorders them with all the zeros on the right of the list and returns the final list.\n\ndef median(nums1, nums2):\n    m1, m2 = len(nums1)//2, len(nums2)//2\n    if len(nums1) == 1 and len(nums2) == 1:  \n        return (max"], [0.11296021101667382, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move zero values to end of a list.\n\ndef number_plate(pattern,char,length):\n    '''\n    Number Plate DAF\n    Receives: Pattern, Character and Length\n    Returns number plates.\n    Example Input: \"KL 10 AA\", \"K\"; 10\n    Exmaple Output: [\"KL 10 AA\", \"KL 11 AA\", \"KL 12 AA\", \"KL 13 AA\", \""], [0.11270766067483382, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move zeros to end of a list.\n\ndef unique_sort(list1):\n    list1.sort()\n    uniqueList = [] \n    for element in list1: \n    \tif element not in uniqueList: \n    \t\tuniqueList.append(element) \n    return uniqueList \nThe above code is a function to remove the duplicates from a list and return a unique sorted list with ascending order"], [0.11270766067483382, "def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to move all zeros to end of array.\n\ndef compute_power():\n    n = (2**x for x in range(100))\n    power=[]\n    for i in n:\n        power.append(i)\n    return power\n print(list(power))The above code is to calculate the power of given number.\nreturn [2**x for x in range(10)];\nThe above code is to calculate the power"], [0.11252738506602002, "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python program to copy all the non-zero element from one array to other array (initially non-empty and one by one delete the existing elements and put new element(non zero) present in another array after previous existing element being copied\ndef convert_list(a): \n    mapping = map(str, a)  \n    return (list(mapping)) \nThe above function is a python function to convert a list of integers into a list of strings"], [0.11128701894734273, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a script to place the zero at the end of a given list.\ndef conv_sec(n):\n    m = n // 60\n    rem = n % 60\n    return ' '.join([str(m), str(rem)]) if rem != 0 else ' '.join([str(m), str(rem)])\nThe above piece of code provides a conversion of the time in seconds to minutes and minutes.\ndef display_lst(n):"], [0.11117868219142044, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to segregate all zeros to right side of the list.\ndef create_list(n):\n    list = []\n    for i in range(1,n+1):\n        list.append(i)\n    return list\nThe above code is a function to create a list till n.\n"], [0.11114818449869611, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", "s are a function to move zero items to end of a given list while maintaining the relative order of non-zero elements in this list.\n\ndef common(l1,l2):\n    result = [i for i, j in zip(l1, l2) if i == j]\n    return result \n    \nThe above codes are a function toprint out common elements between two given list.\n\ndef least3(l1, l2, l"], [0.11080226162168849, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " returns a list item in the same order but with the placement of the zeros correct. Faster than 8% of python 3 submissions.\n\n'''"], [0.10782160865691726, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\ndef max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function which accepts an array of integers and moves all zeros to end using inline variables.\nl = []\nuser = int(input(\"enter the no of numbers in list: \"))\nfor item in range(user):\n    l.append(int(input(\"Enter number \"+str(item+1)+\": \")))\n\n\ndef insertionSort(arr):\n    count = 0\n    \n    for i in range(1,len(arr"], [0.10776851951128819, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to restructure given list after moving all the zeros to the end.\ndef shuffle(a,b):\n    m,n = len(a),len(b)\n    ans = []\n    i = j = 0\n    while (i<m and j<n):\n        if a[i]>b[j]:\n            ans.append(b[j])\n            j += 1\n        else:\n            ans."], [0.1077170303517099, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a way to move all zeros in a list to the end.\ndef uni_sort(list1, list2):\n\treturn sorted(list(set(list1 + list2)))\nThe above code is a function that combines two lists of sorted integers and returns a sorted list with unique integers with the smallest integers in the beginning.\ndef find_duplicates(num_list):\n\td = {}\n\n\tfor x in num_list:"], [0.10738049808262977, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to to shift the zeros to end.\n\n\n\npip install urllib\n#\n\nimport urllib as url\nurl.urlopen(\"https://www.youtube.com/watch?v=x4npFQpo-2Q\")\nop = url.urlopen(\"https://www.youtube.com/watch?v=x4npFQpo-2Q\")\noutput = op.read()#here op"], [0.10733258164219855, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function return an array with all the zero values at the end of the array, leaving \\\n    non zero values in its original order.\n\ndef return_day(num):\n    return days[num]\nThe above code is a function that takes a number representing the day of the week and returns the corresponding \\\n     day of the week (1 is Sunday, 2 is Monday, \u2026, 7 is Saturday).\n\ndef decrypt(codes = [[1,"], [0.10706303802929971, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move zero values and maintain the order of numbers in list.\ndef mini(l):\n    l.sort()\n    return l[ 0 ]\nThe above code is a function to find the smallest number in list.\ndef sub_lists(list1): \n    sublist = [[]] \n    for i in range(len(list1) + 1): \n        for j in range(i + 1, len(list1"], [0.10680032895333263, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python program to move all zeros present in the list to its right side.\n\ndef to_chars(s):\n    s = s.lower()\n    ans = ''\n    for c in s:\n        if ('a' <= c <= 'z') or ('0' <= c <= '9'):\n            ans = ans + c\n    return ans\n\n\ndef is_palindrome(s):\n    s = to_"], [0.10644965964699632, "def multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that takes a list of numbers and returns the list with 0s at the end and non zero elements on the beginning in the order they appear in the list.\n"], [0.10599945283079128, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move zeros in list to right side.\nOn Using Recursion:\ndef max_of_three(a,b,c):\n  if b >= a and b >= c:\n    return b\n  elif a >= b and a >= c:\n    return a\n\n## Function to return the LCM of two numbers:\ndef lcm(a,b):\n  lcm_list.append(a)\n "], [0.1058814283038683, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\ndef check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to shift all the non-zero numbers to the left-side of the tuple.\n\nll = [1,9,8,4,0,0,2,7,0,6,0] \nmove_zero(ll)\nThe above code prints\n[1, 9, 8, 4, 2, 7, 6, 0, 0, 0, 0]\nGiven an array arr[] of size N where every element is in range"], [0.10586138932640829, "def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\n\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that sorts the list into non-zero elements and number of zeros\n\n"], [0.10558611944776874, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to move zero in a list.\ndef binary_search(lst,left,right,x): \n    while len(lst)+left > right and right >= 0 and left<= len(lst): \n        mid = left + (right - left)/2 \n        if lst[mid] == x: \n            return mid \n        elif lst[mid] < x: \n            left = mid"], [0.10474929234485772, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is returning the number array by moving all the zeroes to the end.\n#Same as above function but in one line\n\ndef move_zero(arr): \n    z = [i for i in arr if i != 0] \n    return z+[0]*(len(arr)-len(z))\nThe above code contains list comprehension, code corresponding to the given question\nA string containing lowercase English letters is given. \nThe string"], [0.10461645021630771, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that takes in a list of numbers and moves the zeroes in the list to the end without changing the position of non-zero numbers.\n\ndef zero_constant_timer(raise_tock):\n    count = 0\n    while(count <= raise_tock):\n        count += 1\n        print('Hello')\nThe above code prints 'Hello' infinitely every second.\n\"\"\"\nfor i in range(3):\n    print"], [0.1041311417385297, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a Python function that modifies the list, num_list by moving all the zero\u2019s to the end while preserving the order of other elements in the list.\n\ndef find_prime(num1):\n    primes = [] \n    for j in range(2, num1 + 1): \n        is_prime = True\n        i = 2\n        while i * i <= int(j): \n              if j % i == 0"], [0.10287629487564084, "import heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that removes zeros from a given list and puts it at the end of it.\n\ndef maximize(a, b, c):\n    return a if a > b and a > c else b if b > c else c\nThe  above code is a function that returns the biggest number\n'''"], [0.10223170682384347, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to check whether the given string starts and ends with the same character or not.\ndef sortData(num_list):\n    n = len(num_list)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if (num_list[j] >= num_list[j+1]):\n                num_list[j], num_list[j+1] ="], [0.10158603108858359, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that moves all zeroes in an array to its end and returns the result.\n\ndef square_root(L):\n  for i in L:\n    yield i*i\nThe above code is a generator function to create an iterator to generate the square of numbers in an array.\n\ndef square_cube_list(L):\n  new_L=[(i**2,i**3) for i in L]\n  return new"], [0.1014878977509605, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to push all zeros to right end of array.\ndef print_pattern(n):\n    for i in range(1, n + 1):\n        print(''.join(map(str, [i]*i)))\nThe above code is a function to print the following pattern when n is 5.\n\n12345\n1234\n123\n12\n1\ndef get_min_max(input1):\n    user_list ="], [0.10111253241167266, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function for moving all zeros of a given integer list to the end.\n\nfrom calendar import month\ndef get_quarter(month_num):\n    cond_month_converter = {'1': \"January-March\", '2': \"April-June\", '3': \"July-September\", '4': \"October-December\"}\n    for key in cond_month_converter:\n    \n    \n    x = cond_"], [0.10107106655011486, "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is move_zero(N), moving all zero to the end.\n\nimport re \ndef my_validate_email(email):\n    pattern=\"^[0-9a-zA-Z][_0-9a-zA-Z-]*[@](gmail.com|yahoo.com)$\"\n    if re.match(pattern, email):\n        return True\n    return False\nThe above code is to validate whether"], [0.09987613227301965, "def second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is another python function to rearrange the elements in a list so that the zero's are defocused and rest of all elements are organized.\ndef element_count(num_list):\n    count = 0\n    for i, j in collections.Counter(num_list).items() :\n         if i < 1 :\n            count += j\n            \n    return count\nThe above code is to count the number of elements that would be equal to negative one or zero"], [0.09983983802835314, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves zeroes in a given list to the front of the list.\n\ndef sort_list_num(lst):\n    return sorted(lst, key=int)      \nThe above code sorts a list of numbers. Here key function int is used such that alphnumeric order cannot be followed.\ndef list_sort(x):\n    odd = []\n    even = []\n    chars = []\n    if type(x) == int"], [0.09983983802835314, "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a Python function that takes in a list of integers and moves all the zeros to the end.\n\ndef square():\n    for i in range(1,int(input())+1):\n        print(i*i)\nThe above code is a python code which takes input from the user and displays squares for all numbers inputted.\n\n#Input\nl = [1,2,3,4]\nprint(sum(l))\nThe given"], [0.09962224067951468, "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to create a list, where the elements are sum of elements of the two lists. \n    new_list = [a[i] + b[i] for i in range(len(a))]\ndef min(*args, **kwargs):\n    key = kwargs.get(\"key\", lambda x: x)\n    return sorted(args, key=key)[0]\n\n\ndef max(*args, **kwargs):\n"], [0.09949163619433707, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\nimport re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that moves the zeros in a given list to the end.\n\ndef find_anagrams(words): \n    anagrams = {}\n    for word in words:\n        alpha_word = ''.join(sorted(word.lower()))\n        if alpha_word not in anagrams:\n            anagrams[alpha_word] = [word]\n        else:\n            anagrams[alpha_word"], [0.09934591529553109, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that takes list as  parameter and moves all zero to end of list.\n\ndef bubble(nums):\n    l = len(nums) - 1\n    for i, num in enumerate(nums):\n        \n        try:\n            if nums[i+1] < nums[i]:\n                temp = nums[i]\n                nums[i] = nums[i+1]\n                num"], [0.09866837118096128, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to segregate the zeroes.\n\ndef mov_avg(list,N):\n    mov_avg = []\n    for i, x in enumerate(list,1):\n        if i == 1:\n            mov_avg.append(x)\n        elif i < N:\n            mov_avg.append(round(((x + sum(list[:i]))/i),2))\n"], [0.09866428518717314, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function which will move all the zeros in a list to the end.\n\n\nTime Complexity of O(n**2).\n\n\nTime Complexity of O(n*logn) by using Sorting algorithm.\nTo sort list of lists by the last element in each list\ns.sorted(key = lambda x: x[-1])\n\ndef selectionSort(list):\n    for i in range(len(list)-1, 0"], [0.09844945141244792, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " returns 'num_list' after moving all the zero\u2019s to the back of the array In one state; you are given with an integer array/list containing 'n' elements. You have to modify the array/list in the following way:\n\nMove all zeros that are present to end of the array/list.\nYou need to preserve the ordering of non-zero elements in the array/list and the initial positions of zeros.\nThe complexity should be"], [0.09805406275700107, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that seggregates zeroes from the given list of numbers.\n\ndef rep_string(strings):\n    strlen = len(strings)\n    result = []\n    for a in range(strlen):\n        for i in range(a,strlen):\n            result.append(strings[a: i+1])\n    return result\nThe above code is a function to print substrings starting with respective index of a given"], [0.0980253623459427, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to segregate the 0 from a following list of numbers.\ndef smallest_num(nums):\n    return sorted(list(set(nums)))[-2]\nThe above function is used to return the second smallest number in the given set.\ndef factorial(n):\n    if n < 2:\n        return 1\n    else:\n        return n * factorial(n-1)\nThe above code is a recursive function"], [0.09786989107443851, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function that takes in a list of integers, checks how many zeros are present and creates\nan output list consisting of all of  non zero integers and the numbers of zeros required to make it a list of 10 integers. \ndef print_Triplets(a,b):\n lst=[]\n for i in a:\n  for j in b:\n    if i>j:\n       if i==2*j :\n          lst"], [0.0977522735015835, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is the function to reverse the elements of a list.\n\ndef swap_unique_keys_values(dic):\n res = {}\n for k, v in dic.items():\n    if v in res:\n        res[v].append(k)\n    else:\n        res[v]= [k]\n return res\nThe above code is the function to reverse keys and values of a dictionary.\ndef unique_values(dict):\n   "], [0.09774486649401017, "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function which takes the list of numbers as an argument and returns the list after moving all zeroes towards right.\n\ndef find_common(a, b): \n  a_set = set(a) \n  b_set = set(b) \n  if (a_set & b_set): \n    print(a_set & b_set) \n  else: \n    print(\"No common elements\") "], [0.09658385003435457, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " takes a list that contain zeroes and non-zero elements as input and returns a list of non-zero elements prepended by all zeroes.\n"], [0.09650755815804085, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to remove all instances of zero in a given list and move them to end.\ndef two300(lis):\n  a =set(map(lambda x: x%2==0,lis))\n  b=set(range(min(lis),max(lis)))\n  return list(a^b)\nThe above code is a function that takes a list of numbers and returns the elements which are neither even or divisible by 2.\nimport"], [0.09633291931023996, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that takes a list of numbers and moves all the zeroes of the list to the end.\ndef Sum2Num(intNumList, num):\n  Result = sum(intNumList)\n  if (Result == num):\n    return True\n  else:\n    return False\n\nThe above code is a function that checks if two numbers of a list sum up to a target value\ndef get_sorted(a, b, c"], [0.09600360219220418, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)\nThe above code is Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to segregate the zero's from the list and re-assign the same sorted list to the original list with zero's at last.\n\ndef countSwaps(a):\n    count = 0\n    while True:\n        swapped = False\n        for i in range(0, len(a) - 1):\n            if (a[i] > a[i+1]):\n                a[i], a[i+1]"], [0.09570639481778836, "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " slices the list by checking the each non zero elements along with the count of zeros in the list. Then returns a sum of two lists. https://www.geeksforgeeks.org/move-zeroes-end-list/\n"], [0.09560575039450339, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves all the zeroes in the list to the end.\n\ndef remove_duplicates(input):\n  result = []\n  for x in input: \n    if x not in result: \n      result.append(x) \n  return result\nThe above code removes the duplicates in a list.\ndef dict_mul(myDict): \n    resultDict = dict() \n    for key, val in"], [0.09554834033879976, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that moves all zeros in the input list to the back of the list (without changing the relative order of the non-zero elements and in a single line of code).\ndef get_products_of_all_ints_except_at_index(arr):\n    length = len(arr)\n    final = [1] * len(arr)\n    for i in range(len(arr)):\n        z = 1\n        for j"], [0.09536899205577916, "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " will return the given list after moving all the 0s to the end.\ndef rearrange_digits(input_list):\n    \"\"\"\n    Rearrange Array Elements so as to form two number such that their sum is maximum.\n\n    Args:\n       input_list(list): Input List\n    Returns:\n       (int),(int): Two maximum sums\n    \"\"\"\n\n    num1, num2 = None, None\n    sorted_list ="], [0.09517544177250681, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to append zeros after existing numbers in the list.\n\ndef shuffle(listik):\n  from random import choice\n  a = []\n  for i in range (1,100):\n    a.append(choice(listik))\n  return a\nThe above code is a function to randomize the existing list of numbers.\n\ndef remove_dupl(dupl):\n    final_list = [] \n    for num in"], [0.09516248254319153, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to remove all occurrences of a \u2018zero\u2019 from a list of numbers. In other words implement a function that truncates all zeros that appear in the given list num_list. The function returns the resulting list as well as any comments on the efficiency of your solution.\n\n#2\ndef count_digits(num):\n    count=0\n    while num>0:\n        num=num//10\n        count+=1\n   "], [0.09475986729323202, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a Python function that takes in an array, num_list, of numbers and returns the array of numbers with every\n zero elements of the array moved to the back of the array.\n\ndef Bubble_sort(number_list):\n sum_array=0\n n=len(number_list)\n for i in range(n):\n  for j in range(0, n-i-1):\n   if number_list[j] < number_"], [0.0946779398962578, "def second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that takes a list and moves all zeros to the end, leaving the other numbers in the same order.\n\ndef uniq(lst):\n    uniq_list = []\n    uniq_set = set()\n    for item in lst:\n        if item not in uniq_set:\n            uniq_list.append(item)\n            uniq_set.add(item)\n    print(uniq_"], [0.09436126928908459, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python program which moves all the zeros to end of array using signle traversal.\n\ndef move_zero(num_list): \n    a = [0 for i in num_list if i == 0] \n    x = [i for i in num_list if i != 0] \n    return a + x\nThe above code is a python program which moves all the zeros to end of array using signle traversal.\n"], [0.09415127045725653, "def prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that takes a list of numbers and moves all zeros to the end, maintaining the order of the other elements.\n\ndef maximum_length(list1):\n    b = [] \n    for i in list1:\n        c = len(i)\n        b.append(c)\n    return max(b)\nThe above code is a  that takes a list and returns the length of the longest string in the list.\n\ndef"], [0.09387769388173027, "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to reorder array such that 0's appear on the right.\nimport pandas as pd\n# random pandas dataframe\nnp.random.seed(24)\ndf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\ndf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))"], [0.09372945962044402, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function move_zero() which returns the list of elements after \nmoving all zeros to the end.\ndef find_second_largest(num_list):\n    largest = 0;\n    second_largest = 0;\n    for item in num_list:\n        if item > largest:\n            second_largest = largest\n            largest = item\n        elif item > second_largest:\n            second_largest = item\n    return second"], [0.09361211459436061, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is used to move the zeros in a list to the end.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    x.extend(a)\n    print(x)\n    return x\nThe above code is used to move the zeros in a list to the end.\n"], [0.09359817707382218, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a functions that returns a new list with all the zero's removed while maintaining the order of the smaller elements.\ndef togglestr(input_str):\n    x = list(input_str)\n    y = []\n    for i in x:\n        if x.index(i)%2==0:\n            y.append(i.lower())\n        else:\n            y.append(i.upper())\n            \n    return"], [0.09339538712994028, "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function called 'move_zero' which moves all the zeros in an array[list] to the back of the array while maintaining the relative order of the other elements. E.g., [1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0] will become [1, 9, 8, 4, 2, 7, 6, 0, 0, 0, 0].\n\nPart 2: Turtle-Recursion\n"], [0.09327786274919436, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python program to rearranges positive and negative numbers in an array using lambda\n\ndef add_binary(a,b):\n    a=bin(a)[2:]\n    b=bin(b)[2:]\n    print(a,b)\n    if len(a)>len(b):\n            b = b.zfill(len(a))\n    elif len(a)<len(b):\n            a = a."], [0.09308058976016656, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves all the zeros to the end.\nj = \"Hello DS project\"\nfor i in j.split():\n    i.lower() == i or i.upper() == i\n    if i.lower() == i or i.upper() == i:\n        print(i)\nYour text here....\n"], [0.09305876299019306, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python function which places all the non-zero elements in a list of numbers in their original order and substitues the zero in their original order, i.e. all repeating zero all at once.\n\nDocumentation\t\nThe following are some key frequently asked questions which are often tackled by other similar online Q&A forums\t\n4. Do pros usually submit their code in code-writing sites like stack overflow.\t\n\tThe best way to demonstrate your knowledge is by"], [0.09274408592556381, "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is is a Python function which moves all zeros to end of array\ndef swap_array(arr, n):\nprint(\"before n \", n)\n  for i in range(n-1,0,-1):\n    key = arr[i]\n    \n    j = i-1\n    while j >=0 and key < arr[j] :\n      arr[j+1] = arr[j]\n      j -= 1\n    arr"], [0.09262178445489981, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that takes a list and  moves all the zeros to the end, leaving the other elements in the same relative order. The function returns the resulting the list.\n\ndef sort_list(list1, list2):\n  sorted_list = [f for f in list1 if f in list2]\n  return sorted_list\nThe above code is to sort the given lists based on the first list and return that sorted list. \n\ndef"], [0.09161281707773475, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " appends the list \u2018x+a\u2019 after removing all zeroes from it.\ndef Sort_Tuple(tup):  \n  \n    # getting length of list of tuples \n    lst = len(tup)  \n    for i in range(0, lst):  \n        print(tup[i])  \n  \n    for i in range(0, lst):  \n        for j in range"], [0.09156294021041946, "import re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is The given an array of the numbers. assigned a new array whose number of zeros is equal to the quantity of zeros in array and the rest of elements are zeros.\n\ndef Fibonacci(n):\n    a=0\n    b=1\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:"], [0.09100787099124732, "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function which adds a zero at the beginning of the list if any number 0 is present.\ndef get_unique_digit_list(n):\n    res = 0\n    for i in range(1,n*n+1):\n        i = str(i)\n        for j in i:\n            res += int(j)\n    return res\n       \nget_unique_digit_list(100)\ndef str_addition("], [0.09071534759671988, "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python code that is intended to take some given non-empty array of numbers A(with N>=0) and returns a version array A' where all the non-zero elements of A have been moved to the left side of A' and all zeros have been moved to the right side of A'.\n\"\"\"\ntest38= \"\"\"\nMatrix multiplication; \nHere, I only need to consider both misplacement & transcription errors.\nThe overall time will be"], [0.09070148105124567, "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that claculates the sum of a list of multiples of 3 or 5 and moves the multiples of 3 to the front of the list and multiples of 5 to the middle of the list.\n\ndef cut_cake(parts):\n\ttry:\n\t\treturn 1/parts\n\texcept Exception:\n\t\treturn \"Can't divide by zero\"\nThe above code is an attempt to create a function that divides one by an inputted integer"], [0.09064435434844716, "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python program that removes all zero from the given list then add a extra element in list 'a'.\ndef find_keys_in_dict(d1, d2):\n   same = False\n   keys = d1.keys()\n   for key in keys:\n     if key in d2.keys():\n        same = True\n        break;\n   return same\nThe above code is a function that runs two times, first time checks d1"], [0.09059145199201835, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " should remove all the zeroes increasing the value in the list.\nlst = [\"a\", 0, 0, \"b\", None, \"c\", \"d\", 0, 1, False, 0, 1, 0, 3, [], 0, 1, 8, 8, 8, 0, 8]\n \nmove_zero(lst)\nA DNA strand consisting of the 4 nucleotide bases is usually represented with a string of letters: A,T"], [0.09059145199201835, "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is function that gets list as an input [1, 0, 2, 0, 5, 0] and returns [5, 1, 2, 0, 0, 0] by delete 0 and move it to right hand side of the list.\nfrom itertools import groupby\ndef max_consecutive(nums):\n    return max([len(list(g)) for k, g in groupby(nums)])\nThe above code has a long"], [0.0905269549189636, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that moves all zeros in a given list to the right by one.\ndef reverse(String):\n  return String[::-1]\nThe above code is a function that reverses a string\ndef generate_sentences(subjects,verbs,objects):\n  sentence_list=[\"{} {} {}\".format(i,j,k) for i in subjects for j in verbs for k in objects]\n  return sentence_list\n"], [0.09021349396844157, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function which removes all the duplicate values from a python  and then returns the removed duplicates\n\n\ns = [15, 8, 17, 9, 31, 10, 16, 9]\nr = [i - min(s) for i in s]\nprint(r)\nThe above code is a program to pre-process the data of frequency of words appeared in a paragraph\n\ndef is_empty(list1):\n a=all(not d"], [0.09021349396844157, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function taking a list of integers, rearranges it such that all non-zero integers are at the beginning of the list,\nreturning the new list.\ndef last_first(tuple_list):\n    return [element[1] for element in tuple_list], [element[0]k for element in tuple_list]\nThe above code, given a list of tuples, sorts the list using the second element of the tuple for sorting, and"], [0.0898817511545755, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " adds zeros in the beginning of the list to make all elements divisible by 5.\n\ndef work_hours():\n  n = int(input('enter the number of employees: '))\n  emp_work_hours, res_emp_work_hours, all_emps = {}, {}, []\n  for i in range(0, n):\n      inp_name = input('please enter the name: ')\n      inp"], [0.08968021596231712, "def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to split a list into two lists either by moving zeros to left side or moving nonzeros to right side.\n\ndef reverser_string(test_string):  \n  if(test_string == None):\n    print(\"null\")\n  if(len(test_string) == 0):\n    print(\"Empty String\")\n  temp1 = []\n  test_string = ''.join(test_string)\n \n"], [0.0888535043286827, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that shifts all the non-zero numbers to the left and returns the numbers in the list.\n\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nThe above code is a function that returns the maximum number in a list.\n\ndef swap_case(string:str):\n    r=string."], [0.08822292185421153, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves the zeros to end in a given array.\ndef binS(A,l,h,k): \n    if l>h: \n        return -1\n    mid = int((l + h)/2) \n    if A[mid] == k: \n        return mid \n    elif A[mid] > k: \n        return binS(A, l, mid-1, k) \n    else"], [0.08820833684299528, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function moveZeros() which takes a list and puts all non zero elements in a list, and returns the list.\ndef largestSequence(a,n): \n    print(a)\n    res = 0\n    for i in a:\n        for j in i:\n            print(j)\n            if j > res:\n                res = j\n    print(res)\n    return res\nThe above code is a function to find"], [0.08820833684299528, "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " collects the zeros from the given array and atlast adds the remaining values in the output array. A bid array can be made for the purpose\nThis is submitted to check out the language used for the task descriptions. I am new to python and would be extending my skills in the different languages.\n"], [0.08801095798791009, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves all zeros in a list to the end.\ndef check_string(name):\n\n    visited = set()\n    res1 = False\n    res2 = False\n\n    for e in name:\n        if d.get(e,0) == 0:\n            if e in visited:\n                res1 = True\n            else:\n                visited.add(e)\n\n    d1 = {'upper': 0, 'lower': 0}"], [0.08766149323225354, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to remove zeroes from an array.\n"], [0.08745200290121356, "def Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " has a function that places all zeros as far back to the list as possible.\n#8\nl1 = [1,2,4,5]\nl2 = [2,4,6,8]\nl4 = ([c for c in l1 for d in l2 if c==d])\nl3 = [e for e in l1+l2 if e not in l4]\nl3# returns [1,5,3"], [0.08745200290121356, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a Python function that takes in a list of integers with 0 as one of the integer  and returns the list of integers  from the original  list except the 0th element. \ndef cherry_pick(l1,l2):\n    l4=[]\n    for item1 in l1:\n        for item2 in l2:\n            l4.append([item1,item2])\n    return l4\nThe above single-liner Python"], [0.08739435988441797, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to seperate out the zeros and place the zeros at last.\n\ndef Armstrong_num(num):\n    sum=0\n    temp=num\n    while temp > 0: \n           digit = temp % 10\n           sum += digit ** 6\n           temp //= 10\n    if num == sum:\n       return num\nThe above code is a function to find Armstrong numbers in selected range.\n\ndef seperate_odd_"], [0.08652467273000865, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " iterates over a list using for loop to find the count of zeroes in the list and print the list \nthat contains non-zero numbers.\n\n\n\"\"\"\n\"\"\"\n\ndef split_name(fullname):\n    firstname = \"\"\n    lastname = \"\"\n    space = fullname.find(' ')\n    \n    firstname = fullname[0:space]\n    lastname = fullname[space +1:]\n    \n"], [0.08577259546021063, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that sorts out the zero module in an array.\ndef mae(actual,predicted):\n    y,ycap = numpy.array(actual),numpy.array(predicted)\n    return numpy.abs(y-ycap).mean()\nThe above code calculates the mean absolute error.\nimport numpy\ndef rme(actual,predicted):\n    y,ycap = numpy.array(actual),n"], [0.08562222398442376, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that takes in an array of integers and sorts them in-place so that all the non-zero elements are before all the zeroes.\ndef binary_search(a, n, search):\n    \n    while True:\n        pos = a[len(a)//2]\n        \n        if n == search:\n            return a.index(n)\n        \n        if n > search:\n            n = n[:len"], [0.08441671339318567, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a python program for list manipulations as below:\n\ta. move zero\n\tb. Sum lists\n\tc. merging lists\n\td. remove nth occurance of given string\n\te. occurance of given sub string\n\tf. element in array less than 5\n\tg. printing dictionaries of an object\n\th. Converting a list into Dictionary (without using zip method)\nimport itertools,operator\ndef sortList("], [0.0844007434195675, "import re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that orients a list so that all its nonzero elements appear to its left and all of its zero elements appear to its right. It returns a list\n\ndef equality_identity(lst):\n  integer = []\n  integer1 = []\n  lst.append(Node(None))\n  iteration = lst\n  while (iteration.val != None):\n    integer.append(iteration.val)\n    iteration ="], [0.08413188680230096, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function to retrun number separated into 2 list with 0.\ndef duplicate_number(arr):\n    current_sum = 0\n    expected_sum = 0\n    for num in arr:\n        current_sum += num\n    for i in range(len(arr) - 1):\n        expected_sum += i\n    return current_sum - expected_sum\nThe above code is a function to retrun duplicated number.\n\ndef first"], [0.08379891777298111, "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is the function to return an array by moving all zeros to the end.\n\n\n! How to create templates in Django?\ntemplates in django are enclosed in blocks. The block should be clearly defined inside template as in below example. This coding procedure is useful to decrease reduntant code. I\n\n! How to create templates in Django?\nIn Django we create django.html files for tags and give the tags specified for each block in the code. The first"], [0.08367058773353993, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\nimport cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is to arrange the list so that first occurance of 0 is the last elements in the list.\nimport pdb; pdb.set_trace()\nfor i in range(1, 5):  \n  for j in range(i):    \n     print('* ', end=\"\")  \n  print('') \nfor i in range(5,0,-1):\n    for j in range(i):\n       print('* ', end=\""], [0.08367058773353993, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a program to exchange all instances where 0 appears in a list with a blank spaces.\ndef replaced_string(s=\"Test: The Life Pursuit\"):\n  new_s=s.replace(\" \",\"*\")\n  return new_s\nThe above code is a program to exchange all instances of blank spaces with \"*\" characters.\ndef future_value(pv,r,n):\n    fv=(pv)*math.pow"], [0.08356565493101564, "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\n\ndef catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function which moves zero to end.\ndef number_plate():\n    import random\n    s = 'KA'\n    a = random.randint(10, 99)\n    b = ''.join(random.choice('0123456789') for i in range(2))\n    c = ''.join(random.choice('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') for i"], [0.08288972514468644, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a program to put all 0s on right side of a list.\ndef duplicate(numbers):\n    duplicate_list =[]\n    for number in numbers:\n        if number not in duplicate_list:\n            duplicate_list.append(number)\n            \nreturn duplicate_list\nThe above code finds duplicate elements from a list and keeps them in order.\n\ndef table(number1, number2): \nnum=range(0,36"], [0.08265421815509631, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that removes the zeros from a given list lst,and returns the result without zeros.\nnums = [2, 7, 11, 15]\ntarget = 9\nThe above code is a sample to test the two functions.\ndef twoSum(nums, target)\n  d = {}\n  l = []\n  for i in range(len(nums)):\n      temp = target - nums[i]\n     "], [0.08252301452243646, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a one line code that creates and returns a new list with the order of zero\u2019s and non zero\u2019s unchanged but the zero\u2019s appear first.\n\nimport numpy as np\nx=np.eye(3)\nprint (x)\nThe above function generates Identity matrix of order 3.\n\nimport numpy as np\nx=np.diag([1,2,3,4,5])\nprint(x)\n"], [0.08191866197503324, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " returns the list with zeroes at the end.\ndef checkout():\n    pr = int(input(\"Enter total no. of items:\"))\n    for i in range(1, pr+1):\n            p = int(input(\"Enter price for item no. {}:\".format(i)))\n        \n    ch = 0\n    ch += prev_ch\n    cust_cash = int(input(\"Enter cash with customer:\"))\n    \n   "], [0.08191260430221396, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function which can separate integer list in which 0 is present into two segments one of them will consit of 0 and another with other integers.\n\ndef get_num(self, question):\n        while True:\n            try: \n                number = int(input(question))\n            except ValueError:\n                pass\n            else:\n                return number\nThe above code is a function to get only integer input and avoiding exceptions.\n\ndef filter_"], [0.08153469542739665, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is that it can remove all zeros in the list and add them again but at the back.\n\nimport itertools\ndef pair_wise_per(l):\n    a =  list(itertools.permutations(l))\n    s= []\n    for i in range(len(a)):\n        s.append(list(a[i]))\n    return s \nThe above code lets us see all the 2-perm"], [0.08119336241347726, "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " takes in a list of numbers and returns the list with all the zeros at the end.\n\ndef reverse_list(num_list):\n    b = len(num_list)\n    y = [num_list[i - 1] for i in range(b, 0, -1)]\n    return y\nThe above code takes in a list and returns the list reversed\n\ndef make_bold(fn):\n    def wrapped():\n        return"], [0.08066569782323385, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " produces the list with zeroes at the end.\ndef get_sum_arith(num_list):\n    add = []\n    produc = []\n    current_sum = 0\n    product = 1\n    for i in range(0, len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if (num_list[j] - num_list[i]) >"], [0.08060035483702262, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function which takes a list and moves the zeros at the end.\n\ndef integer_pairs(num_list):\n    return [(x,y) for x in range(len(num_list)) for y in range(len(num_list)) if (num_list[x] * num_list[y]) % 2 == 0 and x < y]\nThe above code is a function which will take a list and return a list of"], [0.08049179280066843, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that takes in a list of positive integers and moves all the zeros in such a list to its right end. The function does not change any number order in place. \n\n\n\nCode for Algorithm for encryption is wriiten below. The two keys are enterd and the message is continuously entered in the code near the code from the first row. \nimport numpy as np\nimport time\n\nkeyslist=list()\nkey=input(\""], [0.08049179280066843, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that takes as input a list of numbers. The function returns another list making all zeros appear in the front and in the remaining numbers the element that is at the i-th position in the original list will appear at the (i+1)-th position in the new list.\ndef reverse_list(list_):\n    return list_[-1::-1]\nThe above code is a function that takes as input a list and returns another list having"], [0.08031955920381394, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " moves the zeros at the last of list by using temporary empty array and store the numbers in that list in second part of temporary array and then merge both to list.\ndef Move_zeros_back(arr,n):  \n    index = 0 \n    for i in range(n): \n        if arr[i] != 0:            \n            arr[index] = arr[i]             \n            index += 1    \n    while index < n"], [0.07882278864301259, "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a solution which takes a list of numbers as an argument, finds the number of zeros and an creates a new list and adds zeros to this list.\n\ndef fizz_string(n):\n    answer = [' ' for x in range(n)]\n    for y in range (1,n + 1):\n        if y % 15 == 0:\n            answer[y - 1] = \"FizzBuzz\"\n        elif y % 5"], [0.07872373625383179, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " makes a list of a certain length, populates it with \"0\"s, then makes a list of all numbers in the inputted list that are not zero and returns both lists together.\ndef sort1(word):\n    list1 = []\n    for i in word:\n        list1.append(i)\n    list2 = []\n    while len(list1) > 0:\n        a = min(list1)\n        list1."], [0.07859126257157543, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function that segregates zeros and non zero elements, list1=[0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]\n\ndef numbers(n1, n2):\n    for i in range(n1,n2):\n        if i % 5 == 0 and i % 7 == 0:\n            print(i,end=' ')\nThe"], [0.07796176825848006, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " in Python 3 computes the resultant list after appending the zero'th positions from 0.\n\nclass Solution(object):\n  def remove_digit(self,n):\n    n = str(n)\n    for d in n:\n      if n.count(d) == 1:\n        return int(n.replace(d,''))\nThe above code is an String OPerator to select the string having unique digits.\n"], [0.07688641287913299, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " rearranges lists with the move zero operation.\ndef min_platforms(arrival, departure):\n    arrival.sort()\n    departure.sort()\n    platform_required = 1\n    output = 1\n    i = 1\n    j = 0\n    while (i < len(arrival) and j < len(arrival)):\n        if arrival[i] < departure[j]:\n            result.append(('arrival', arrival["], [0.07469524602078957, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " returns a list except 0 by maintaining a space optimized solution\nimport collections\ndef findCeil(arr,key):\n    indeces = collections.defaultdict(list)\n    for i,v in enumerate(arr):\n        indeces[v].append(i)\n    last_seen = 0\n    for k in sorted(indeces.keys()):\n        if k<key: last_seen=max(last_seen,ind"], [0.07465631084635793, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is There are three numbers. The first number contains the ordinary numbers The second number contains the zeros The third number contains the indexes. The need is to leave the array in the same order as the zeros goes first, then the one numbering, and then the index numbering. The function should make that.\ndef is_prime(num):\n    return 2 in [num, 2**num % num]\nThis code returns True if the number is prime\ndef init(width"], [0.04524977913181121, "def jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code", " is a function for sorting for python"]]}
