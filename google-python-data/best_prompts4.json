{"prompt": {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 262, "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.", "code": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]", "test_imports": [], "test_list": ["assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])", "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])", "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"]}, "queries": [[0.45303533260832946, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two parts where the length of the first part of the list is given as input parameter.\ndef callable_example(previously_defined_list) :\n    previously_defined_list.append(2)\ndef main () : \n    a = [10,20,30,40]\n    callable_example(a)\n    print (a)\nmain()\nReferences\nhttps://docs.python"], [0.3822646541172458, "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits the given list into two parts where the length of 1st list is the given length and the 2nd is rest.\ndef split_by_average(list1):\n    return list1[:sum(list1)//len(list1)],sum(list1)//len(list1),list1[sum(list1)//len(list1):]\nThe above code splits the given list into 3 sublists given that the first/main"], [0.36519881789381803, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function which accepts a list and a number as arguments and splits the list into two parts where\nthe length of the first part of the list is equal to the number. If the number is not present in the list, then return the\nsame list.\ndef find_match(list1):\n  list2 = [i for i in list1 for j in list1 if sorted(i)==sorted(j) and i!=j]\n  return"], [0.3399439325692863, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes in a list and an integer L and splits the list into two list A and B and returns list A and list B.\n\n\n# <br>\n# <br>\n# <br>\n# <b>3. Jump Search</b><br>\n# Simple Solution is to get the length of the array and then iterate through the array with a jump interval that jumps by some distinct number. Ex: If length of the array is 10"], [0.3289557484411036, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes in a list and an integer and splits the list into two parts of the given length.\ndef combo(list):\n    combo_list = []\n    n = len(list)\n    for k in range(1 << n):\n        combo_list.append(list[k])\n    return combo_list\nThe above code is a function that takes in a one-dimensional array with elements between 0 and N-1, or any"], [0.32563539710849443, "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function which takes in a list and an integer and splits the list into two parts\nimport statistics \ndef pair_with_smallest_sum(arr,arr_size):\n    result = []\n    mymin = min(arr)\n    for i in range(0,arr_size):\n        for j in range(i+1,arr_size):\n            currsum = arr[i] + arr[j]\n            if"], [0.29992939223854403, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a fucntion that takes in a list and an integer L, and splits the list into two lists while preserving the relative order.\n\nList index returns the position of the specified value\ntime complexity of finding an element in a list is O(n)\n\ndef spiral_order(matrix):\n  if not matrix:\n    return []\n  row_border = len(matrix)\n  column_border = len(matrix[0])"], [0.2804062764666879, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a given list into two parts where the length of the first part is given by a given integer .\n def join_lists(L1, L2): \n    x=list(set(L1 + L2)) \n    return x \nThe above code is a python function to add two tuples, if a given value is common to both the tuples, it will appear only once in the resultant tuple.\ndef stack_"], [0.26963975527243905, "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list, list1, into two parts.  the length of the first part is the integer L and the second part contains the remainder, if it is nonempty.\n"], [0.26894964665871657, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function which takes a list and an integer as a parameter and splits the list into two parts where one is of size \u2018L\u2019 and other is of size \u2018N-L\u2019. Here \u2018N\u2019 is the length of the list.\n\n'''\n# Python program to calculate Catalan Numbers \n  \n# Catalan Number \ndef catalan(n): \n    if (n == 0 or n == 1): \n       "], [0.263530453776321, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes in a list splits it into two parts with specified sizes.\nfrom itertools import chain, zip_longest\ndef chain_and_repeat(repeat_tup, initial_list):\n    tup = zip_longest(*initial_list)\n    return chain.from_iterable(repeat(repeat_tup, tup))\nThe above code is a function that zips the given lists together and zip the zipped"], [0.2626605075692956, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function splits the given list into two parts based on a given condition.\n\ndef add_list_elements_to_tuple(list1, tuple1):\n  res = tuple((list1).append(tuple1))\n  return (res) \nThe above code is a function to add the elements of a list to a tuple.\n\ndef zeroth_index_element_of_list(list1):\n  res ="], [0.2598479164059634, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two parts with the first containing the first L element of the list and the rest elements in the second part of the list.\n"], [0.2581137715888929, "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list into two parts where the first part contains more items than the other part.\nimport collections\ndef get_dict_from_list(list1): \n    d = collections.defaultdict(int) \n    for i in range(len(list1)): \n        d[list1[i]] +=1\n    return d\nThe above code is a function to build dictionary from a given list of elements with their"], [0.257335217986892, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits the given list into two parts with reference to the given index value L. If L=1, then the parts are list[0:1] and list[1:].\n\ndef string_to_binary(string1):\n  temp_list = []\n  for character in list(string1):\n    bin_rep = str(int(bin(ord(character)),2))\n    while len(bin_rep) < 8"], [0.2556413565743987, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function which splits the given list into two lists where (if the list is L-length) the last element of one list is the first element of the other list.\ndef twin_prime(n):\n\tflag=0\n\tif (n>2 and n%2 ==0):\n\t\tfor i in range(3,int(n**0.5+1),2):\n\t\t\tif n%i == 0:\n\t\t"], [0.2501207343485342, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes in a list of integers and the list length.Split the list by the given length into a tuple of two element.\n\n\ndef list_overlap(a, b):\n  common_elements = set(a) & set(b) \n  return common_elements\nThis code is a function that takes in two lists and returns the common elements of that particular list.\ndef common_elements(a,b):\n   "], [0.24565773966741897, "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes in list and length and returns the divided lists into 2 halves.\nWe can interchange the first half with the second half and vice versa\ndef divide_in_three(list3,L):\n    list3[L//2: 3*L//3: 1], list3[:L//3: 1], list3[3*(L//3)::]\n\nThe above code is a function that divides the given list into three parts"], [0.2451520218742011, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function in Python to split a given array into two parts where the length of the first part of the array does not differ by more than 1 with the length of the second part of array.\n\nWhy we should use decorators?\nWe should use decorators because they are a great helper, which makes our work easier. So, applying decorators, we use Python as a DSL(Domain Specific Language) and not as a regular programming language. \nWhat happens if we"], [0.23967045717782343, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes in a list with a specific portion of the list we want to put in a separate list.\n\nclass CountFromBy:\n    def __init__(self, v: int=0, i: int=1) -> None:\n        self.val = v\n        self.incr = i\n       \n    def increase(self) -> None:\n        self.val += self.incr\n        \n    def __re"], [0.23951382307223268, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which takes a list and an integer as input argument and splits the list by locating the desired index. Notice that the index is a valid index within the list and is not out of bound.\n'''"], [0.23535410670686865, "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function which takes a list and an integer number as the arguments and returns two parts where the first contains the first L numbers and the second half contains the remaining numbers.\n\ndef permutations(upper_limit,lower_limit,l_pos_same,u_pos_same,nested,test_str):\n#test_str = \"ABC\"\n  Upper = 0\n  Lower = 0\n  Upper = len([1 for part1 in range"], [0.23094704907541452, "def min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function, which takes a list and a number, and returns the first part of the list smaller than the number and the second part is larger than the number.\ndef selected_sort(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1,len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index"], [0.22850124406396516, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts i.e The method takes in a list and a index point L, to split the list L is used.\n\n\n"], [0.22728277546261258, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits the given list into two lists , one consisting of first L elements and other with rest of the elements.\n\nclass Company:   \n    employee = dict()  \n  \n    def addEmployee(self, name, salary):  \n           Company.employee[name] = salary  \n  \ncompany = Company()  \n  \ncompany.addEmployee(\"Sam\", 2000)  \ncompany.addEmployee(\"Bob\", 4000)  \n  "], [0.22728277546261258, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list into two parts a,b and return a,b.\ndef is_in_list(list1, L, R):\n    for i in range(len(list1)):\n        list2 = list1[i]\n        if len(list2) != L:\n            return False\n        \n        for index in range(len(list2)):\n            if list2[index] >= R["], [0.22596986257394616, "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two parts with the first part as the k specified length and the other part of the given list.\n\ndef del_consecutive_duplicates(list1):\n    del list1[-1:-len(list1)-1:2]\nThe above code is a function to delete all consecutive  duplicates in a list till the last duplicate and\nchange the longest length of the returned list to 1. In short"], [0.2258798693928263, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split the given list into two parts of (L) elements each where one is greater than the other if length of the list exceeds 2*L.\ndef rectify_list(list1):\n    return list(set(list1))\nThe above code is a function to rectify a given list.\ndef find_Largest_And_Smallest(list1):\n    largest = max(list1)\n    smallest = min"], [0.2239386659496857, "def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits the list into two parts each where the split of the given number is done.\nCreating a list by taking the given number.\ndef concatenate_sublists(subers):\n   return l1\nsplitting each list into two lists.\n"], [0.2228897634071053, "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split list into two parts in alternate fashion and return as tuple.\ndef split_into_groups(list1, K):\n  res = []\n  while list1:\n      res.append(list1[:K])\n      list1 = list1[K:]\n  return res\nThe above code is a function to split the given list into N parts where N is the length of the list.\nprint(split_into_groups"], [0.21721207358057712, "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split list in two parts where the length of first part should be equal to given L.\ndef trp(l1):\n    rev=l1[::-1]\n    if(l1==rev):\n        return 1\n    else:\n        return 0\nThe above code is a function to find a string is palindrom or not\ndef trim_char(string):\n  trimmed_string=re.compile(r"], [0.2169268088435455, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to lan to split the given list into 2 equal parts.\n\ndef squares_between( a, b):\n  return ((a+b)*(abs(a-b)+1))/2\nThe above code is a function that takes two integers, a and b and returns the square (2D space) of all the points between a and b."], [0.21349444344473323, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list into two lists as per the length supplied.\ndef find_average(list1):\n    return sum(list1)/len(list1)\nThe above code is a function that takes in a list of numbers and finds their mean. \n import datetime \n!IDLE, if the date and time settings are correct, output should be the date and time of when you run it, otherwise it will show the date and time of"], [0.21143311343195054, "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list into two parts, given length of the first part.    \n    \n    \n# sequence of operartion 1\nimport numpy as np\ndef minmax_ofwindow(arr,window):\n    n = len(arr)\n    arrmax = [max(arr[i:i+window]) for i in range(len(arr)-window+1)]\n    arrmin = [min(arr[i:i"], [0.2113643274492313, "def count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split the given list into two parts according to the given list.\n\n\ndef string_pattern(word):\n    word=word.lower()\n    front=word[0::2]\n    back=word[1::2]\n    new_word=back[::-1] + front[::-1]\n    return new_word\nThe above function is a python function to create a string according to the word given.\n"], [0.20768733795818406, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list in two parts where \u2018L\u2019 denotes the length of the first part list1[:L]\ndef maxChunksToSorted(arr) : \n    ans = 0\n    curr = 0\n    i = 0\n    while i < len(arr) : \n        curr = curr + arr[i]  \n        ans = ans + 1      \n        i = i + 1\n"], [0.2069314092514692, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a given list such that the first part of the list contains equal no.of elements and the second part contains equal no.of elements.\n\n\n\"\"\"\nmain_list=[0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1]\nl=len(main_list)\nk=0;count=0;flag=0;result=0;\nfor i in main"], [0.2063973842222422, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\nfrom collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes in a list of tuples, a number L, and removes all tuples of length more than L. The function returns two lists: one of the tuples of length less than or equal to L, which is located at the front of the list, and one of the tuples of length greater than L, which is located at the end of the list.\n"], [0.20559032897121396, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function that takes in a list of integers(list1) and an integer(L) as arguments and splits both in two parts, list2=list1[:L] and list3=list1[L:].\ndef my_function(text, number): return text\n    1print(my_function(\"hello\", 2))\nThe above code is a python function that takes in two arguments text and number. 0 = 1\n\ndef return_"], [0.20485676763987437, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list into two parts with respect to the given maximum length L(in that part).\n \ndef get_price(inp_str):\n    t=0\n    for i in range(0,inp_str.count(':')):\n      a,b= map(str,inp_str[(t+1):].split(':',1))\n      price=a+':'+b\n"], [0.20467341544303638, "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function that splits a givenlist into 2 parts using python code and returns a list of two lists.\n\ndef histogram(list):\n    for x in list:\n        print( '@' * x)\nThe above code is a python function that takes in a list of positive Integer numbers and prints the histogram out for it. https://www.w3resource.com/python-exercises/basic/python-basic-1-ex"], [0.20461035756000137, "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function split the given list into two parts, where the length of each of the part is euqal and longer than L. Return the two names, wehre the first is the first half of the given list, and the second is the second half.\ndef find_item_locate(list1, item):\n    ret = []\n    i = 0\n    while i <= len(list1):\n        if item in list1:\n"], [0.20441439023843466, "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " can split a list of integers in two sublists of equa size, such that the sum of two parts are the same. If a list of different sizes is given, it will return a None object.\n\nThe above code is a python function that takes in a list of integers and an integer L, and finds if the given list can be split into two sorted parts, where sum of two parts are both L. \n"], [0.20397402288966132, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a given list into two parts as per a given integer value L.\ndef get_all_subset(some_list):\n    subset = [[]]\n    for i in range(len(some_list)):\n      temp = [[some_list[i]]+j for j in subset if some_list[i] >= min(j)]\n      for k in temp:\n        subset.append(k)\n    ind"], [0.2037910843222585, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\nimport math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list into two parts / parts having different indices of the first part different from those in the second part.\nlist1=[1,2,3,4,5,6,7,8,9,10]\nsplit_two_parts(list1,3)\n\n"], [0.20335554303644932, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to separate a given list into two parts.\ndef intersect_two_sorted_lists(list1, list2):\n    return ([i for i in list1 if i in list2])\nThe above code is a function that takes in two sorted lists and returns their intersection.\nsys.argv[1] = csv file to read\nsys.argv[2] = csv file to output to\nsys.argv[3"], [0.20299080338562844, "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\n\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list into two parts and return them.\n\n\n\ns='sdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsd'\ncount=len(s)\n\noddCount = mod(count, 2)\nevenCount = count -1\nif oddCount:\n  print(s[len(s) // 2])\nelse:\n  print (s[(count // 2)-"], [0.19928076707202283, "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list into two parts based on given value of the given list\nclasses = [('V', 1), ('VI', 1), ('V', 2), ('VI', 2), ('VI', 3), ('VII', 1)]\nnew_class = []\nindex = 0\nwhile index < len(classes):\n    students = classes[index][1]\n    new_class.append(classes[index][0])\n    while students"], [0.19643887979614927, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list into two parts such that the sum of two parts are equal.\ndef split_three_parts(list1, L1, L2):\n    return list1[:L1], list1[L1:L2], list1[L2:]\nThe above code is a function to split thee given list into three parts such that the sum of three parts are equal.\ndef winner_for_election(votes):\n"], [0.19614815417580592, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits the given list into two parts, first(items before cut) and second(items after cut)\ndef main():\n    list1 = [1, 1, 2, 3, 4, 4, 5, 1]\n    print split_two_parts(list1, 3) \n    \nif __name__ == \"__main__\":\n    main()\nThe above code uses the function defined above to split a list into first and the second parts\n"], [0.1951880793103239, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list into two parts stated by the Args.\n\n\ndef odd_numbers(n):\n    [x for x in range(n) if x%2!=0]\nThe above code is a function to Lists all the digits in a given list.  \ndef Generator(num1):\n    for i in (1,200):\n        for j in num1:\n            yield i+j\nThe above code"], [0.19407415779353596, "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two parts accoring to the first calculation.\ndef program1(x):\n    eq = \"{:.4e}\".format(math.log1p(x) - math.sin(x)) \n    res = eq.replace('e', 'E')\n    return (res)\nThe above code is a function which converts and returns a 'e' to an 'E' in a string using in built"], [0.1933942941167084, "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list into two with given length. Let L = 3 , output the list\n\"\"\"\n\ndef add_lists(test_list, test_tup):\n    return tuple(list(test_tup) + test_list)\n\n\ndef min_k(test_list, K):\n    return sorted(test_list, key=lambda x: x[1])[:K]\n\n\ndef split_two_"], [0.19173291856681934, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " returns a tuple containing the two lists splitted provided the first list and the length of the first part.\n\nlist1 = make_list(input())\nfor i in range (0,len(list1)-1):\n    for j in range (i+1, min(i+4,len(list1))):\n        print(i, j)\nThe above code creates a list of \u2018n\u2019 natural numbers and prints the index range of"], [0.19002976187203283, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts according to L, \nif L is less than length of list, the first part should have length L.\n\nfrom itertools import permutations\n\ndef get_all_permutations(lst):\n    if lst:\n        for element in lst:\n            for permuted_elements in \\\n            get_all_permutations(list(set(lst).difference({element"], [0.18933765347005446, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to separate the elements of a list into two parts. The sum of the lengths of the sublists should,if possible,be equal to the length of the original list.\nQ2\nsplit_two_parts([10,20,30,40,50],3)\nsplit_two_parts([10,20,30,40,50,60,70,80,90],4)\nsplit_two_parts([10,20,30"], [0.18869809209458313, "from itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " snippet is a function that takes an entire list and divides the list where the first list has L number of elements. The function returns the divided lists.\nTo remove teh Duplicate values\ndef remove_duplicates(list_d):\n    return set(list_d)\nThe above code snippet is a function that takes a list and returns the list without duplicates. \ndef remove_duplicate_words(str_d):\n    x=str"], [0.18701466172152625, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two parts and return them separately.\n\ndef quadratic_equation(a, b, c):\n    if a == 0:\n        return -c/b\n    x1 = (-b+((b**2 - 4*a*c) ** 0.5)) / (2*a)\n    x2 = (-b-((b**2 - 4*a*c) ** 0.5"], [0.18685108605974388, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function that takes in a list list1 and a number L and returns two lists in a tuple with L elements in the first list \ndef replace_first(tuples):\n    a, b, *c = tuples #assigning first and last items to a, c respectively, and all other items will go to b\n    return a, c, b \nThe above is a python function that assigns the first and second elements of a tuple to a"], [0.18678424436751617, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that needs parameters as a list and a length. It will split the list into two parts by assigning them to two items as a list that is returned.\n"], [0.18635433852501826, "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\n\ndef union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts of length L and (N-L) respectively, where N is the length of the initial list.\n\n'''"], [0.18629490123642872, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function takes in a list and length of required list as argument and returns two list first part and second part\ndef ReLu(x):\n    d = (x>0)*1;\n    return d*x;\nThe above code is a python function calculate the Activation function ReLu.\ndef add(num1,num2):\n    return num1+num2\nFind out the area of the rectangle with width 20cm and height 15cm"], [0.18584369207700832, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits the given list in two parts of same length if the length of the list is even.\n\ndef find_distance(initial,final,dist_seq,current_pos=0,sequence_seq=1,least_dist=50000,least_seq=50000, distance=0,current_dist=0,sequence=0):\n    current_pos=(current_pos//2)^(current_pos%2)\n    current"], [0.1856806393152271, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function taking a list and a positive integer L, splits the list into two parts of L and L-length by removing the Lth element from the list.\nfrom collections import defaultdict\nfrom collections import deque\ndef max_frequency_word(words):\n    freq_dict = defaultdict(deque)\n    max_freq = 0\n\n    for word in words:\n        freq_dict[word].append(len(fre"], [0.18543884416160894, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts where one part of the list has length=L and other part has length = len(list) - L.\nCode Explanation:\n\nThe main code present inside the else condition.\nlist1[:L] selects a sublist of list1 starting from index 0 and ending at index L-1.\nafter that other part is concatenated with this using the '+' operator which itself gives a new list which"], [0.18527349205262972, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to divide a given list into two parts of length L and n-L respectively. If n is odd, we'll consider one more element from the beginning in the first part, i.e. remainder = 1.\n\ndef fibonacci(n, fib_series = [0 , 1]):\n    if n <= len(fib_series):\n        return fib_series[:n]\n    else:\n        fib_series.append"], [0.18326591693074215, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\nimport sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list into two smaller lists.\n import sys\n def tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list))\nThe above code is a function to find the size in bytes of the given tuple.\ndef split_two_parts(list1, L):\n return (list1[:L], list1[L:])\nThe above code is a function to split the given"], [0.18320516743006326, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a given list into two parts based on given threshold.\n\ndef split_odd_even(list1): \n    odd_list = []\n    even_list = []\n    for list2 in list1:\n        if (list2 % 2 != 0): \n            odd_list.append(list2)\n        else:  \n            even_list.append(list2) \n    print(\"odd list"], [0.181626051535941, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two parts of the same length (if possible). Both list parts have to be of the same length as the input list. The function should return the split list.\ndef find_number_of_pairs(list1, list2):\n    result = list()\n    for i in range(len(list1)):\n       for j in list2:\n          if list1[i] == j//3:"], [0.1814740919732129, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list into two parts based on the given integer L.\ndef sum_sqr_avg_list(list1):\n    sum_sqr = sum(list1)\n    sqr_list = list(map(lambda x : x * x, list1))\n    avg_sqr = sum_sqr / 5\n    return sum_sqr, avg_sqr, sqr_list\nThe above code"], [0.18140405684550592, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts, where the length of the two lists are equal.\ndef remove_one_element(listval):\n    return([e for e in listval if not isinstance(e, str)])\nThe above code is a function to remove an element that is a string form a given list.\nOne possible Python program to find the sum of all integers in a list.\n\ndef total(listitems):\n  sum"], [0.1810573510425387, "import re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list into two lists evenly based on L th index.\n\ndef find_unique_values(normal_list, l1):\n    return list(set(normal_list)-set(l1))\nThe above code is a function to find the unique values in the given listL.\n'''\n\n\"\"\"\nOutput:\n\n[01:20:01] [Server thread/INFO]: Fouseyo logged in with entity"], [0.18077592341344292, "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\n\ndef check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to divide the given list into two by counting elements.\ndef factors(n):\n    list1 = []\n    list2 = []\n    for i in range(1, n + 1):\n        if not (n % i):\n            list1.append(i)\n    for j in list1:\n        if(list1[-1] == list1[-2]):\n            list2.append(j)\n"], [0.18042618883270828, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two parts  given L index.\ndef search_in_list(lst, item):\n    try:\n        lst.index(item)\n    except:\n        return False\n    return True\nThe above code is a function to find a given item in a given list. If the item is not present in the list return false.\n\ndef pushZerosToEnd(arr, n): \n   "], [0.1796486639061946, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python code to split the given list into two parts.\ndef Group_Sum(numlist, L, sum):      \n  if L == 0:\n    if sum!=0:return False\n    else:return True  \n  else:\n    return Group_Sum(numlist, L-1, sum-numlist[L-1]) or Group_Sum(numlist, L-1, sum) \nThe above code is a"], [0.17932105625257236, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to find split the given list into two parts specified by the L index.\ndef remove_n_digits(time_string, N):\n    no_numbers = \"\"\n    for i in range (0, len(time_string)):\n        if i == 2 or i == 5:\n            no_numbers = no_numbers + \":\"\n        elif i == 0 or i == 1 or i == 3 or i"], [0.17794466501670625, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " implements a python function to split a given list into two different lists based on the length of the list.\ndef rec_pow(num,n):\n   if n==1:\n       return num\n   else:\n       return num * rec_pow(num, n-1)\nThe code above is a python function to compute both direct and indirect powers of a number using recursion.\ndef count_letter(input_str,input_chr"], [0.1759703179645683, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\ndef combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two parts. The length of first split is given by the L.\ndef split_last_part(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function to split a given list into two parts. The length of the first split is given by the L.\n\ndef get_permutatuions(list1):\n    list2 = []\n   "], [0.17552987771885778, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes a list and the length of 2 lists as the parameters, then splits the list into two parts.\nfrom datetime import date\nfrom datetime import time\nfrom datetime import datetime\nfrom datetime import timedelta\nimport calendar\nfrom time import process_time \n\nfrom datetime import date\nfrom datetime import time\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom dateutil.relativedelta import"], [0.17529265477163922, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits the list into two parts based on the index value mentioned.   \ndef count_overlapping(text, sub_text):\n    count=0\n    \n    mat=''.join(['1' if (text[x:x+len(sub_text)] == sub_text) else '0' for x in range(len(text)-len(sub_text)+1)])\n    \n    if '111' in"], [0.17524336873194146, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is an implementation to split a given list in two parts where the first part consists of items from first to the partition point, and the second part consists of all the other items in the list.\n\ndef find_longest_word(list1): \n  \n    word_len = [] \n    for n in list1: \n        word_len.append((len(n), n))\n    word_len.sort()    \n    return word"], [0.17522105774176852, "import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes a list and max_index as inputs. The function should return two lists, one on the left and one on the right of the max_index.\n\ndef sum_in_list(list1): \n    l1 = []\n    l2 = []    \n    for key, value in list1.items(): \n        l1.append(key)\n        l2.append(value)\n         \n    print("], [0.17503131321650703, "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits the list into two parts from position L.\ndef swap_two_indices(alist, i, j):\n    \"\"\"\n        replace a[i] with a[j] and vice versa.\n        - modifies alist\n        - None-type is returned\n    \"\"\"\n    alist[j], alist[i] = alist[i], alist[j]\n\n\nalist = range(10)\nsw"], [0.1748569397315581, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits an input list into two parts based on the given size\n\ndef check_in(data1, dictionary):\n    return [key for (key, value) in dictionary.items() if value == data1]\nThe above function is a function to parse  a list based on a given dictionary of elements.\n\n"], [0.17364045236341433, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function that takes in the last index value of a given list list1 and returns the first list from 0 to L-1 and second list from L to the end\n#To print the sum of all following subset sums\n\n\n# <h1>Question 1</h1><h3>\n# gIVEN TESTCASES:\n# <pre>\n# t_cases=3\n# n_wgt=[10, 20, 30,"], [0.17314844476850588, "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two parts where difference between length of both the lists is at-most 1.\ndef odd_occur(arr):   \n    result = 0   \n    for element in arr:        \n        result = result ^ element         \n    return result \nThe above code is a python function to find the element whose occurance is odd on the list.\n"], [0.1729136085039362, "def cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts. The parts will be split by having the wanted length L at the end of the first and the beginning of the second parts.\n\ndef has_sublists(testList):\n    arr=np.asarray(testList)\n    d = arr.shape[1] \n    arr_len= arr.shape[0]\n    result=False\n    for i in range(arr_len-1"], [0.17287321376049292, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts of length L and the remaining length respectively.\n\ndef remove_null_strings(ist):\n    x = []  \n    for element in list1: \n        if element:  x.append(element) \n    \n    return(x)    \n The above function removes the null strings in the list.\ndef consecutive_combo(lst1, lst2):\n    lst1"], [0.17250685897902102, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list into two parts according to the desired split value.\ndef Concat(*args, sep ='/'):\n    return sep.join(args)\nThis code concatenates the given string in front and end of the required word.\n\ndef display(m1,m2,m3):\n    return m1/m2-m3\nThe function \"display\" takes 3 arguments, returns the answer to m1/m2-m3"], [0.17218798283367226, "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\n\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list into two lists depending on the given value of L.\ndef check_complete_board(ar):\n  ar.remove(0)\n  ar.remove(1)\n  ar.remove(2)\n  random.shuffle(ar)\n  if ar[:6] == [0,0,0,1,1,1,2,2,2] or ar[:6] == [1"], [0.1706837315181749, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to divide a given list into two parts of L length each.\n\nimport copy as copy\nclass A:\n   def __init__(self, pqr):\n      self.pqr=pqr\n   def mys(a,b,c):\n      print(a,b,c) \nobject1=A(1,2,3)\nobject2=copy.copy(object1)\nobject"], [0.17053355721190774, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two parts as we want.\ndef awesome_sort(mens): \n  courses = [\"AWS\", \"Azure\", \"DevOps\", \"DSA\", \"IOT\"]\n  mens_courses_dict = {\"Abhishek\": set(mens), \"Shweta\": set(courses), \"Vivek\": set([\"IOT\", \"AWS\"]), \"Neha\": set"], [0.17006707079232877, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function which splits a two dimensional list into two separate lists based on the first index(L). If the given input is a list of list of integers, seperate lists from the largest list are given out.\n"], [0.1698720228386002, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list in two parts where the first part has length equal to that of given constrain.\n\ndef flatten_lists(lists):\n       return [item for sublist in lists for item in sublist]\nThe above code is a function to flatten a list of lists.\n    \n    \ndef reflect_x(matrix):\n    if not isinstance(matrix, list):\n        return \"Input is not a list"], [0.16977746485298087, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a given list in two parts.\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist2 = []\nsplit_two_parts(list1, 5)\nThe above code is a python function to split a given list in two parts where the size of the first part is given and two.\nList = [0, 1, 0, 3, 12]\nList"], [0.1696921789843126, "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function that takes a list of numbers L numbers as input and splits the list in two parts of L/2 size. If L is odd, the extra element should go in the first list.\n\ndef insert_at_first(list1, x):\n  list1.insert(0, x)\n  return list1\nThe above function is used to insert 'x' at the beginning of the list 'list1'\n\ndef print_list"], [0.16939579914753247, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list into two equal halfs.\n\n##END ANSWER##\n\n# <font color='red'> D. </font> Elementwise sum of the two list\n# \n# \n# $$\\begin{bmatrix}\n# 7 & 8 & 9 \\\\  \n# 2 & 99 & 6\n# \\end{bmatrix}\n# +\n# \\begin{bmatrix}\n# 10"], [0.169238184310546, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into 2 parts.\nfrom statistics import mean \nfrom functools import reduce\nimport operator\ndef multiply_list(list1):\n    return reduce(operator.mul, list1, 1)\nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\nfrom statistics import mean \nfrom functools import reduce\nimport operator\ndef subtract_list(list1"], [0.16882345178229552, "def Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is python function that splits a list into two parts of L length\n\ndef write_to(filename, data_list):\n    Data_File = open(filename, \"w\")\n  \n    for data in data_list:\n        Data_File.write(data)\n        \n    Data_File.close()\nThe above code is python function to write contents of a list to a file in a name 'filename'\n\nFile = open(\"Hello"], [0.16818625025423503, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts with respected to the given condition part1 more than L times.\ndef list_to_dictionary(list1, keyn):\n    new_dict = {}\n    for item in list1:\n        key = item[keyn]\n        if (new_dict.get(key)):\n            new_dict[key].append(item)\n        else:\n            new_dict[key]"], [0.16798789914079026, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts with respect to an element 'L' from the given list.\n\"\"\"\n\nimport math\n\ndef find_tuples(list1,k):\n  return [x for x in list1 if all(els%k == 0 for els in x)]\n\n\nrob = find_tuples([(1,2),(2,4,5),(7,3),(4,5)],2"], [0.16781252087971318, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two given the length of first list, left to right and strings in reverse.\ndef get_rows_diff(mat1, mat2):\n    return [i for i in list(x - y for x, y in zip(mat1, mat2)) if i]\n"], [0.1665190752017468, "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes two arguments and split the first list into two parts according to the second parameter which is also the index based parameter.\nsince python index are zero based\nIf there are two parts, then return both parts.\nOtherwise, return None.\n\ndef get_vowel(str):\n    vowels = \"aeiouAEIOU\"\n    for i in vowels:\n        if i in str:\n            return i\n    return"], [0.16587686669284146, "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes as input a list of numbers list1 and int L. The function returns as a tuple two lists. The first list is all the elements of indexes from 0 to L-1. The second list is all the elements of indexes from L to the end.\n"], [0.1656857310706804, "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function which splits the 2nd part of the list into the 2nd half of the list and returns two lists having they 2nd half of the origional list.\ndef sum_sq_even(n):\n  n = n//2\n  sse = n*(n+1)*(2*n+1)//6\n  return sse\nThe above code is a function to find the sum of squares of all even numbers upto n."], [0.16481726565566213, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a given list into 2 halves based on the length of the list.\n\nlist_result = []\ndef split_two_parts(lst):\n    if(len(lst)%2 == 0):\n        mid = len(lst)/2\n        l = [lst[i] for i in range(0, int(mid))]\n        r = [lst[i] for i in range("], [0.16468979185494206, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\nNO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts with respect to the given size of first part.\n\"\"\"\n\n\nh,v=map(int,input().split())\nhList=list(map(int,input().split()))\nvList=list(map(int,input().split()))\nhSum=0\nfor i in hList:\n    hSum+=i;\nvSum=0\nfor j in vList:\n   "], [0.16429684718640583, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a funtion to split the given list into two parts.\n\n\"\"\"\n\ndef remove_duplicates(dup_list):\n    return list(set(dup_list))\n\n# solution 6\ndef del_repeated_char(string):\n    new_str = \"\"\n    new_str = string[0]\n    for ch in string[1:]:\n        if ch == new_str[-1]:\n           "], [0.16427159645129624, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\nimport re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list and gives 2 lists.\ndef split_two_parts(tuple1, L):\n    return tuple1[0:L], tuple1[L:]\nThe above code prints the two lists obtained after splitting a tuple into two parts with L elements in each.\ndef sample(n):\n  for i in n-1:\n    for j in i+1:\n      print(j)\nsample([1,2"], [0.16342049812090703, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two parts by a given value.\nimport csv\ndef csv_list(data):\n    with open(data, mode ='r') as file:\n        csv_reader = csv.reader(file, delimiter = \",\")\n        for row in csv_reader:\n            print (row)\nThe above code is a function to read a csv file much elegantly.\nThe"], [0.16320963387721582, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts of lengths L1 and L2  respectively. Effectively, L1+L2= len(list1).\n\nimport itertools\ndef list_powerset(list1):\n    L= []\n    for i in range(len(list1)+1):        \n        #loop through all possible combinations of length i of list1\n        result = list(itertools.combinations(list1"], [0.1630363049746158, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that is used to split a list into two lists of desired length from both ends of the array.\ndef is_equilibrium(list1) : \n    for i in range(len(list1)) : \n        a = list1[0:i+1] \n        b = list1[i+1:len(list1)]\n        if sum(a) == sum(b) : \n            return True\n   "], [0.16209867417918938, "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \nThe above code is a function to determine if the sum of the divisors of two integers are the same.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a given list in half.\ndef row_sum_odd_numbers(n): \n  nth_row=n*n\n  return sum(range((n**2-n+1),nth_row+1,2))\nThe above code is a function that returns the sum of the row of odd numbers in a given natural number.\ndef letter_changes(string):\n  changed_string=''\n "], [0.16140975787023648, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the elements of the give list into two parts based on the specified length.\ndef create_tuple_of_sum(list_1):\n  import collections\n  sum_to_index = collections.defaultdict(list)\n  N = len(list_1)\n  for i in range(0, N):\n    sum = list_1[i]\n    sum_to_index[sum].append(i)"], [0.1611286749563081, "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that segments a given list into two sets according to the given \"L\" argument.\n\nimport re\ndef text_match_four(text):\n        patterns = '\\\\b[6-9][0-9]{9}$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has a ten digit phone number.\n\ndef to_camel_case(word):"], [0.16103384464280093, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two sublists, list1 is divided into two parts where L is the index.\n\ndef swap_columns(m, i, j):\n    for k in range(len(m)):\n        m[k][i], m[k][j] = m[k][j], m[k,i]\nThe above code is a python function to swap the two columns of the matrix, where m is"], [0.1607700934784251, "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list into two parts when given another list as a criterion. The first list returns the number of 0s you want.\ndef same_index(list1, list2):\n  return [i for i, x in enumerate(list1) if x in list2]\nThe above code is a function that returns the index or indices of elements in a first list that correspond to the elments in a second list. \n  \ndef"], [0.1604067165215063, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a given list into two parts at particular index position.\nmath.floor\nThe floor() method returns the largest integer less than or equal to a given number. If the given number is already an integer, floor() method returns the same number.\n\n>>> math.floor(23.6)\n23\n>>> math.floor(31.4)\n31\nThe above example shows that 31.4 becomes 31 and 23.6 becomes 23 because"], [0.16036219243138614, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts when all the list elements belongs to the same class.\ndef matrices(Names,C):\n    Matrix = [0]*len(Names)\n    for i in range(len(C)):\n        L=[]\n        n=0\n        while n<len(C[i]):\n            L.append([0]*len(C[i]))\n            n=n+1"], [0.16031810242181221, "import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a given list into two lists and stack each of the given lists one over the other. This process is repeated for the given list and it is given the size for which the list is split into two.\n\n\narr= [0, 1, 0, 0, 1, 0, 1, 1, 1, 1]\nc = 0\nfor i in range(len(arr)):\n    if (arr[i] == 1):\n"], [0.15982399556915403, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts and return the two lists.\ndef evaluate_profit_transaction(arr, B_arr):\n    profit = 0\n    while True:\n        l=[]\n        c=[]\n        co=0\n##        print (len(arr))\n        for i in range(len(arr)):\n##            print (i)\n            if arr[co]>0:\n                c.append"], [0.15921210878613798, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " will split the given list into two parts.\n\ndef Sift_Down(L, k, n):\n    item = L[k]\n    while 2*k+1 < n:\n        child = 2*k+1\n        if child+1 < n and L[child] < L[child+1] :\n            child += 1\n        if child < n and item < L[child]:\n            L[k] = L["], [0.15780655916613706, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts for a particular index.\nInput_list = [23, 45, 39, 56, 52, 30]\nprint(\"Input unsorted list : {}\".format(Input_list))\n# Using External Sorting and External Search\nSorted_input_list = external_sort(Input_list)\nN = len(Sorted_input_list)\nL = list_enumerate_list(Sorted"], [0.15737682522074584, "import sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function, it takes a list and integer L as inputs. Returns two lists one containing the first L items and other containing remaining items.\ndef min_of_three_lists(list1, list2, list3):\n    list_min=zip(list1,list2,list3)\n    return list(map(min,list_min))\nThe above code is a function which takes the shortest the values in a given list of three lists."], [0.15731662196269375, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which splits a list into two parts by having the max size L as given input.\ndef sort_len_first(str1):\n return ' '.join(sorted(str1.split(), key = len))\nThe above code is a python function which takes a string and returns the string with it's words in a sorted list based on it's length.\ndef decimal(words):\n reads = read.split()\nfor i in reads:"], [0.157112629083508, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts based on the lengh of the first list.\ndef compare_lists(li1, li2):\n    return li_1, li2\nThe above code is a function to compare two lists and return the common items from both lists.\n \ndef is_empty_list(list1):\n    return list1 == []\nThe above code is a function to check if a list is empty.\n \n"], [0.1570310565238357, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits the list into two sublists based on given int L.\ndef sort_list(list1, list2):\n    list1.append(list2)\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            tmp = 0\n            if list1[i] > list1[j]:\n                tmp = list1[i]\n               "], [0.15661021672806807, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function that splits a list into two parts on the basis of provided length.\nimport heapq  \nheap = [5, 7, 9, 1, 3]  \ncnt = 0\nfor i in range (0,len(heap)):\n    cnt = cnt +1\n    print (heapq.heappop(heap))\nif cnt == len(heap):\n    heapq.heap"], [0.15652650526912198, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function which splits the list into two equal parts if one split is less than number 'L'. Else, it returns two parts split whichever is possible.\n\ndef test_oddnum(test_list):\n  for odd in test_list:\n    if odd % 2 == 0:\n      print odd\n  return\nThe above code is a function which returns all the numbers in a list and avoid displaying the even numbers.\n\ndef test_boolean("], [0.15577040930456182, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function which sorts the given list in ascending order and splits the list in 2 parts of equal size.\ndef prints_all_permutations(s) :\n    if len(s) == 0 :\n        print('')\n        return \n    prints_all_permutations(s[1:])\n    if len(s) > 1:        \n        for j in range(1, len(s)) : \n            k = get"], [0.15569266649701072, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is the python function to split a list into two parts of lengths L and list1-L.\ndef is_vowel(char):\n    all_vowels = 'aeiou'\n    return char in all_vowels\nThe above code is a python function that checks if a given character is a vowel or not.\nfrom itertools import permutations\n\ndef allPermutations(str): \n    permList = permutations"], [0.15524078274839773, "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to find splitting the given list into size L and size N-L, along with the portions of list.\n\ndef generate_wakuras(word):\n    mapping = {}\n    for i in range(len(word)):\n        mapping[word[i].lower()] = word.count(word[i])\n\n    word = word.upper() + \":\"\n    res=[]\n    print (mapping)\n   "], [0.15485395942417332, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list into two different list in the given L point.\nwhich returns corresponding index.\ndef string_both_ends(str):\n if len(str) < 2:\n    return ''\n\n return str[0:2] + str[-2:]\nThe above code is a function that returns the both ends of a string.\nlist=[1,2,3]\nElement = 1\nfor i in list:\n    print("], [0.15479425486995402, "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list into 2 parts.\ndef powers(l):\n    for num in l:\n      if(num==1):\n        return 1\n      else:\n        return num*powers(num-1)\nThe above code is a function to calculate the power of number.\ndef convert_currency(amountfrom,rate,amountto):\n  convert=amountfrom*rate\n  amount=(convert-amountfrom)\n"], [0.15476931355523957, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list  into two parts with specified length.\ndef working_hours():\n     starthr='08:00'\n     startmin='00'\n   endhr='18:00'\n    endmin='00'\n    time=function(time())\n   currenttime=time()\n     if starthr < currenttime:\n        return True\n        return False\nThe above code is a function to check whether a work"], [0.15430084861562784, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a utility function to split the given list into two lists according to no. of elements.\n\n#-----------------------------------------------CODE---------------------------------------------------------------------------\ndef countRotations(arr, low, high): \n    # This condition is needed to \n    # handle the case when array \n    # is not rotated at all \n    if(high < low): \n        return 0\n  \n    # If there is only one  \n    # element left \n"], [0.15373017520412033, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split one list into two parts, the length of two lists are passed in the function parameter.\nFor example, if the list passed is [10,20,30,40,50,60], then the function will return [[10, 20, 30], [50, 60]].\ndef convert_dict_items(ndict):\n    xd = {}\n    for k,v in ndict.items():\n        xd.update({"], [0.15317523375470554, "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts and also return two lists.\nimport re\ndef check_valid_string(str1):\n  return re.match(r\"^[a-z][a-z0-9_]*$\", str1) is not None\nThe above code is a function to check if the given string is in format <small letter><(0-9 OR _ OR small letters)>\ndef group_list("], [0.15311055145471933, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " will split a list into two parts of length L assuming that L<len(list1).\ndef maxProductThree(list1):\n    \n    \ndef max_of_three(a, b, c):\n    if a > b and a > c:\n        print( f'{a} is greatest.' )\n    elif b > a and b > c:\n        print( f'{b} is greatest.' )\n    else:"], [0.1529564185933148, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts of length L and remaining length. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-25.php\nimport random\ndef func(*foo2):\n    print( foo2 )\n\nfunc(0, 1, 2, 3, 'a', 'b')\n\n-------------------------\n\ndef"], [0.1528510997252806, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " snippet is a snippet of code that splits a list into two parts.\n\ndef find_sub_array(a, n):  \n    if (len(a) == 1):\n        return a\n    if (a[0]<=len(a)):\n        return sorted(a,reverse =True)\n    else: \n        return a[1:]\nThe above code snippet is a function that returns the sub-array whose maximum value is"], [0.15263649623330552, "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function which splits a given list into 2 parts of lenght \"L\".\ndef create_list2d(column_number, row_number, value=None):\n    return [[value]*column_number for i in range(row_number)]\nThe above code is a function that returns  2d lists with columns mentioned in argument as list2d[0][0] as None.\ndef find_nearest_smaller_elem"], [0.15262847910841248, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two parts, in the form of the left and right list.\n\ndef order_diff_mean(data, dist): \n    return np.mean(np.arange(len(data)) / (len(data) - 1) * np.abs(data - np.mean(dist)))\nThe above code is a function to order the differences of samples to the mean of a given sample in the same situation,"], [0.15244027039068536, "import re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes a tuple and value and splits the tuple into two parts.\n\ndef sort_func(x):\n    return (x[1], x[-1])\nThe above code is a function that combines the functionalities of sort and sorted.\n\nSo, again, the above code is a function that returns the difference between the price and the cost of a return run, if it is positive.\n\n\n\n\nNote \u2013 Do not copy these jokes."], [0.15116618729878564, "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\n\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list into two parts given a list L.\n\nimport itertools\ndef split_two_lists(list1, list2): \n    return zip(*zip(list1, list2)) \n    print(len(list2)) \nfor i in range(0, len(list1)):\n    print(list1[i],list2[i])\n \nThe above code splits two lists into pairs when there are not"], [0.1511171003820425, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list into two parts and returns two lists which are split from the original list based on a fixed length.\n\nlambda func\n-Syntax: lambda arguments : expression\n-lambda is considered to be an anonymous or nameless function as it is not defined with any name. lambda functions in Python are mostly used along with built-in functions like: Filter, Map, Reduce.\n\nFilter\nThe Filter() function in Python takes in a function and a"], [0.1508386326279397, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\nimport collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts, each one containing L elements where L is the length of entire list.\ndef print_nth_item(list1, n):\n return list1[n]\nThe above code is a function to print the nth element of the list.\ndef concatenate_list(list1):\n if len(list1) == 0:\n  return []\n else:\n  list_new= list1"], [0.15002528025183226, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two list.\n\ndef get_timespan_(text2):\n  lines = text2.splitlines()\n  timespan_lst = []\n  for item in lines:\n    int_hold = 0\n    text1 = re.sub(r'\\s+', '', item)\n    for i in text1:\n      if (i >= '0' and i <= '9'):"], [0.14985687844144469, "def min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts of specified lengths.\n\ndef recursive_algorithm(array):\n    print('python')\n    return list(range(100))\nThe above code is recursion function for a given problem/task.\n\ndef int_decoded(data):\n    encoded_data = str(data)\n    return int(encoded_data[0]) - 1\nThe above code is a function for saving the data"], [0.14945303002103744, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that returns the two lists containing the first and the last two elements of the given list L in this order.\n\ndef sum_digits(num):\n    r = 0\n    while num:\n        r, num = r + num % 10, num // 10\n    return r\nThe above is a function that returns the sum of the digits of the given number.\n\ndef count_numbers_letters(str1):\n    return len"], [0.14925384748032117, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into posible two parts.\n\ndef check_sum(a,b,numbers):\n  return sum(numbers)==a*b\nThe above code is a function to check whether two numbers can be added to make the sum of the list equal to a multiple of the first given number.\n\ndef third_of_sum(list1):\n  return sum(list1)//3\nThe above code is a"], [0.14898168292190817, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\nimport re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to divide a list into two parts based on the second parameter, starting from the first part. \nimport re\ndef text_match(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns,  text):\n        return True\n    else:\n        return False\nThe above code is a function to check if a string consists of two words seperated by the"], [0.14865335174151684, "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split the given list into 2 parts with L parts in the first part.\n\ndef replace_key(d, old_key, new_key): \n    d[new_key] = d.pop(old_key) \n    return d \nThe above code is a python function to replace a key of dictionary with another key.\n\ndef mod_three(m): \n    i = 0  \n    my_"], [0.14851960555493254, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts according the length,i.efirst L elements will in fist\nlist and remaining elements will be in second list.\ndef flatten_list(numbers):\n    for x in numbers:\n        if isinstance(x, list):\n            for x in flatten_list(x):\n                yield x\n        else:\n            yield x\nThe above code is a function to take a nested list and flatt"], [0.14813098876244038, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to divide a given list into two lists of equal size .\ndef find_duplicate(list3):\n    count_list=[]\n    for values in range(len(list3)):\n        count_list.append(0)\n    for values in range(len(list3)):\n        if list3[values] in count_list:\n            count_list.append(1)\n        else:\n            count"], [0.14785214058107157, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to divide a list into two parts with L elements Left and rest of any element as right\ndef sum1(L):\n    s = 0.0\n    for i in range(len(L)):\n        s += L[i]\n    return s\nThe above code is a function to add all the elements of a given list into a sum.\ndef max_index(L, i = None, j = None):\n    def take"], [0.1478178067531349, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list into two parts with the specified length L.\ndef manipulate_generator(func, iterations):\n    generator, generator2 = func()\n    l = []\n    \n    for _ in range(iterations):\n        l.append(next(generator))\n        l = l[-2:]\n        \n    for _ in range(iterations):\n        next(generator2)\n    \n    \n    return l\nThe"], [0.1473877437106489, "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list of size n in two parts of size L and n-L.\n\ndef find_dup_char(name, n): \n      \n # Search for length of name  \n    for i in range(n): \n          \n    # Search/traverse to the end of the list  \n         for j in range(i + 1, n):  \n      \n          # If we find character match  \n         "], [0.14732266805282832, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " contains a function that splits the list into two parts according to given requirement.\n\"\"\"\n\"\"\"\nPython classes.\n\nGrid class is defined that defines two 2D array and also operations of respective 2D array.\nBar experiment class implements bar with different gravity set as well as collision effects.\n\"\"\"\ndef is_not_prime(n):\n    result = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n"], [0.14731765890863413, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which is used to split a list into two parts according to a given value ie. \u201cL\u201d. The given value split\u2019s the list into two parts \u2013 Left and right; where left contains N-L elements and right contains the remaining elements.\ndef two_sum_count(arr, x):\n    list1 = [arr[i]+arr[j]+x for i in range(0,len(arr)) for j in"], [0.14658347040862305, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list into two lists according to the value of L.\n\nimport re\ndef date_time(time):\n    k = time.replace('/', ' ').replace(':', ' ').split()\n    x = {}\n    if k[0] in x:\n        k[0] = '01'\n        x['01'] == 1\n    else:\n        h = [int(i) for i"], [0.14648347941002896, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list1 in to two parts based on the condition that the sum of the elements in the first part is L.\n\ndef count_positives_sum_negatives(arr):\n  if(len(arr) == 0):\n    return []\n  c = 0\n  sum = 0\n  for i in range(len(arr)):\n    if(arr[i]>0):\n      c=c+1"], [0.14588867655506205, "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split given list to two parts where one part\n# Remove given element from a given list\ndef rem_dupl_ele(list1): # These functions take in a list value as unique parameter\n    '''list1st = str(input(\"Enter the names\"))\n    list1 = list1st.split(' ')\n    lst2 = str(input(\"Enter the name\")) # Taking the value for the second list\n    list"], [0.14557638190976913, "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes a list as an input and outputs two lists seperated at value L.\ndef remove_and_print_middle(arr, l, m, h): \n    del(arr[m])\n    m = m - 1\n    print(arr[int((l + h)/2)])\nThe above code removes element at position m and prints element at m-1.\ndef number_of_words(doc_str):"], [0.14541189791398035, "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list into two parts with length L on the left and rest.\n\n\n# Q8\nclass SingletonObject(object):\n  class __SingletonObject():\n      def __init__(self): \n          # As __init__() is a private constructor, it will not be visible in the class.\n          # Even __new__() method is private,\n          unique = [] \n          count = 0\n      # the __str__()"], [0.14503197397930345, "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is function that splits a list in two parts where all the first element goes to first list and all last elements go to second list.  Exchanges First Element and Last Element of List I've implemented above as well, here's the link to that code.\n\nprint(split_two_parts(arr, n-1))\nprint(split_two_parts(arr, n-2))\nprint(split_two_parts(arr, n-3))\n"], [0.14449727148097008, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that divides the list into two list based on the size of other list.\ndef Merge_List(list1, list2):\n    return sorted(list1 + list2)\nThe above code is a function to merge two list without any duplicates.\n\ndef multiple_merger(*args):\n    return sorted(set().union(*args), key=abs)\nThe above code is a function to print the absolute value of the numbers given by"], [0.14444905564058738, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to take the first part and second part of the given list.\ndef find_positive(list1):\n    return [i for i in list1 if i > 0]\nThe above code is a python function to find the positive numbers in the given list list1.\ndef square(list1):\n    return [i**2 for i in list1]\nThe above code is a function to square the number in a list.\ndef conc"], [0.14415748860405225, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two parts of L length.\n\ndef linearSearch(arr, )\n    for i in range(n): \n        if (arr[i] == ele): \n            return i \n    return -1\nThe above code is a python function to find the index of the element if present and return -1 if non is present.\n\ndef my_sort(arr):\n    return sorted(arr, reverse"], [0.14353509381071347, "def new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to split a list into 2 parts of given length.\n\ndef create_dict(L):\n    new_list2 = [(value, index) for index, value in enumerate(L)]\n    new_list2 = sorted(new_list2, key=itemgetter(0))\n    d1 = dict(new_list2)\n    return d1\nThe above code is a function to create a dictionary of the given list without hashing"], [0.14342507325174647, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function used to split a list into two parts each having the given length.\n'''\n# defining functions\ndef is_sublist(l, s):\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i"], [0.1431182204021225, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts\n'''\n\ndef func(LI1,L2):\n\n  empty = all(not d for d in LI1)\n  if(empty):\n    return empty_list(2)\n\n  else:\n    while(L2):\n      l1, l2 = split_two_parts(L2, len(L2) // 2)\n      if(empty_dit(l1"], [0.1430825721405088, "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " function will split a given sequence in two parts where the left list contains the first L elements and right list contains the remaining elements.\n(L) is the parameter to split the given sequence list1 in to L and R.\n\ndef insert_end(str):\n      sub_str = str[-2:]\n      return sub_str * 4\nThe above code returns a string where the last two elements are copied as many times as its length in the given string."], [0.1428184992421816, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list of integers into two lists (left and right). The length of the first is L.\ndef decode(str1,str2):\n    for i in str1:\n        if i in str2:\n            return 'Yes'\n    return 'No'\nThe above code is a python function to judge if the string1 could be the encoded form of string2.\nimport math\nfrom collections import defaultdict\nT="], [0.14261967190209004, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function takes a lists and a lenght n, and splits it into a tuple of two lists based on the length given.\nThe above code is a function takes a list, splits it into two parts with the first part taking up first half the list samples evenly and second half taking up the remaining samples,\n\ndef slice_list(list1, start = 0, end = 0):\n    return list1[start:end]\nThe above code is a"], [0.1426015589304617, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list into two parts in left and right of the center index, so that sum of left split is same as sum of right split, with no prior knowledge of the sum.\n\n# **Problems**\n\n# 1.Given a list of numbers and a number k, \n# return whether any two numbers from the list add up to k.\n\n# 1.for example:\n# \n# ```\n# Given nums = [10,"], [0.14243299893589695, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list 'list1' into two lists on the basis of passed integer 'L'.\nIt will split the list into two lists where the first list will contain first 'L' elements and the second list will contain rest of the elements \nThis is the function which I missed earlier which can help to split a list into head and tail.\ndef extract_less_than_5(lst_list, number=5):\n    count=0"], [0.14240762105381763, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts.\ndef is_ascending(list1):\n  return sorted(list1) == list1\nThe above code is a function to check if a given list is sorted or not(in ascending order).\ndef second_smallest_num(list1):\n  list2=[]\n  for i in range(0,len(list1)-1):\n    if list1[i] not in list"], [0.14213969462574003, "import math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits the elements of a given list1 into two parts. \nIt returns two lists - the first parts and the second parts that were obtained from the list1 argument.\ndef identify_departure_element(l1, l2):\n    for m, n in zip(sorted(l1), sorted(l2)):\n        if m== (n + 1):\n            return m\nThe above code is a function to find"], [0.14201547054442906, "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\ndef filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts.\ndef split_nearly_sorted_array(array,length):\n        \n    array.sort()\n    return (array[:length], array[length:])\nThe above code is a function to split a given array in to two subarrays where one subarray has first half of the ordered array and second subarray has other half of the ordered array.\n\ndef radius_finder(parking"], [0.14201101946613548, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two parts based on L elements.\nAlternate solution:\ndef Size(string) :\n    return len(string)\n\ndef Alphabetical(string) :\n    return string.lower()\n\ndef Diff(string1, string2) :\n    Alpha1 = Alphabetical(string1)\n    Alpha2 = Alphabetical(string2)\n    if Alpha1 == Alpha2 :\n        return 0\n"], [0.14172042504469975, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list into two parts according to a specified integer and returns two lists.\nThey'd asked Peter to help them analyze a string-based data and tell them which attempts to get data were successful, and which ones were not. Each row of the given data contains a date and stock values separated by a tab.\ndef convert_date(dateStr):\n    try:\n        date_obj = date.dull(dateStr)\n        return date_obj\n   "], [0.1414349042653797, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two such lists, from left to right first, then from right to left.\n\"\"\"\n#Code starts from here\ndef split_two_parts(list2, L):\n    return list2[:L], list2[L:]\nif __name__=='__main__':\n    \"\"\"\nThe following test case will check if we can successfully create a positive integer in_list, and split it into two parts"], [0.14132975747299822, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes a list as argument and divides it into two tuples based on the value of the integer.\n\ndef next_position(row, col, i, j ): \n \n        if row + col == 2: \n            if (i == 0 and j == 1 ) or (i == 1 and j == 0): \n                return 2, 2\n            else: \n                return 2, 0\n        else:\n            if"], [0.1409434169752307, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is the function for splitting a list into two lists according to the length of list L.\ndef fun(x):\n  return x%2==1\nThe above code is the function for returning true if the given number(x) is odd.\ndef map_(func, list1):\n  res = []\n  for i in list1:\n    res.append(func(i))\n  return res\nThe above code is the function for calling the functions"], [0.14089039346028773, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is python function to split a given list into two parts.\ndef sorted(arr, n): \n    count = [0] * (n) \n    for i in range(0, n): \n        count[arr[i]] += 1\n    curr = 0 \n    for i in range(0, n): \n        while (count[i]): \n            arr[curr] = i \n            curr +="], [0.14083366228066682, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list into two parts. L is the part where list is split. Both lists contains L elements.\ndef count_chars(s1, s2):\n    s = s1 if len(s1) < len(s2) else s2\n    count = 0\n    for ltr in \n    s:\n        if list(s1).count(ltr) != list(s2).count(ltr"], [0.14083366228066682, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list at the midpoint. \n\ndef kth_smallest_num(list1, k):\n    return sorted(list1)[k-1]\nThe above code is a function that returns the kth_smallest_num in a list.\n\ndef largest_even_num(list1):\n    return max([element for element in list1 if element%2 == 0])\nThe above code is a function that returns the largest"], [0.14051356523298564, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two parts with the size of two parts being determined by L.\ndef find_digit_log(n): \n    sum1 = 0\n    while n > 0:\n        n //= 10 \n        sum1 += 1\n    return sum1\nThe above code is a python function to find the total number of digits in a given number.\ndef find_josephusPostions(N,M):"], [0.1396797585260355, "import sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split given list into two parts, considering given L value \ndef max_index(arr):\n    return arr.index(max(arr)) \nThe above code is a python function to return the index of largest item in given list/array.\ndef index_second_biggest(arr):\n    first, sec_max= (arr[0], arr[1] if arr[0] > arr[1] else arr["], [0.13922364707780518, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " will separate the given list in two parts as mentioned by the length L.\n\n\ndef prime_factor(N,i=2):\n    while i**2 <= N:\n        if N%i:\n            i+=1\n        else:\n            N//=i\n    return N\nThe above code is a function to find prime factors of a number N.\n\n\ndef left_pattern(A):\n  if A>=65 and N<="], [0.1391402660691636, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits the sorted list into two halves. L is the size of the first half\n\"\"\"\n\"\"\"print(list(str(abs(int(input())))))\n\ndef largestSub(n):\n    ans=0\n    num=list(str(abs(int(n))))\n    x=[int(i) for i in num]\n    x.sort()\n    size=len(x)\n    while(((size-ans) and x"], [0.13901966604253277, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is very simple code to split the given list and print 2 lists, 1 which shall be smaller by length of the given length.\ndef Find_Min(lst): \n    minList = min((x) for x in lst) \n    return minList\nThe above code is a python function to find the element of a list having minimum length.\n\n\n#40\nimport datetime    \n\ndef Add_a_year(dt0):\n   "], [0.13835009135729637, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two equal halves.\n\ndef update_list(list1, str1, str2, N):\n    res = str2\n    for i in range(len(list1)):\n        if i <= N:\n            if list1[i] == str1: list1[i] = res \n        else: return 'Index Error'\n    return list1\nThe above code is a function to"], [0.13835009135729637, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\nimport math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two parts depending on given length.\ndef swap_complementary_bits(N):\n    new_N = N\n    values = [0, 2, 4, 6, 8]\n    for index in values:\n        mask, bit = 1<<index, N>>index\n        if mask & N:\n            new_N ^= 1<<index + 1\n            new_N ^= 1<<("], [0.13835009135729637, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two parts on length basis.    \n    \ndef swap_list(list1):\n    for i in range (len(list1) - 1 ): \n            list1[i], list1[i + 1] = list1[i + 1], list1[i]\n                        \n            if i % 2: \n                if i + 1 == 1: \n                    break \nThe above code is"], [0.13816962784011433, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two different parts of given length.\n\nx=lambda a, b : a + b\nprint(x(3,4))\nThe above code is a lambda function that adds two numbers 3 and 4 and returns the result 7.\nprint(a < b <= c)\nThe above code is an comparison operator used for chaining.\ndef function(x, y, z=1.5):\n  if z > 1"], [0.13806188173134845, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " has a function to split given list into two parts.\n\n\n'''\n#Taking input\nmydict = eval(input())\nvalue_to_match = eval(input())\n\nimport random\n\n#Return random integer in range 1 to 52, included\nnumber = random.randint(1,52)\n\n#Return a random integer N such that a <= N <= b.\nresult = random.randint(1,15)\n\n\n# Create"], [0.1375558499949013, "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a given list into two lists either on the\nbasis of length or a numerical element. L being the index to split the list.\n\ndef search(arr, key): \n    for i in range(len(arr)): \n        if key == arr[i]: \n            return i \n    return -1\nThe above code is a python fuction to search for a particular key in an array.\n\ndef"], [0.1374553080605462, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\nimport sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts by the value L.\ndef list_diff(list1, list2): \n  return list(set(list1) - set(list2))\nhe above code is a function to find a difference of two lists.\ndef list_int(list4, list5):\n  return list1+list2\nThe above code is a function to add two list by element.\n\nThe above code is"], [0.13745427189336884, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list of lists int two parts accoding to the length L\n\ndef read_file(filename):\n    f = open(filename, \"r\")\n    list_file = f.readlines()\n    return list_file\nThe above code read a file into lists by reading each lines.\n"], [0.13722349176037457, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given string in 2 parts on the basis of given L length.\nEfficiency: The Big O porperties of the above code is O(n) where n is the size of the list1.\n\"\"\""], [0.13711573087914053, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split given list according to given length.\ndef string_both_ends(str):\n  if len(str) < 2:\n    return ''\n  return str[0:2] + str[-2:]\nThe above code is a function to return a string made of the first\ntwo and the last two characters of the given string.\n\nimport re\ndef change_date_format(dt):\n  return re.sub("], [0.13708082985990325, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two parts.\nclass Date:\n\n    def __init__(self):\n        self.day = 0\n        self.month = 0\n        self.year = 0\n    def __init__(self, nday, nmonth, nyear) : \n        self.day = nday\n        self.month = nmonth\n        self.year = nyear\nThe above code is an object oriented code"], [0.1369497597900035, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split an list into two parts where the second part contains at most L entries.\n"], [0.1368468475983711, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\ndef count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list uniformly into two parts with each part having an equal 1/prob(success) chance of having at least one of each number in it.m\ndef list_overlap(list_a, list_b): \n    return [common for common in set(list_a) if common in set(list_b)] \nThe above code returns a list of elements that are common to both the lists of identical lengths and size"], [0.13658108588058782, "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that given an ordered list L IN R^N splits it into two halves L1 and L2 such that L1 is the first len(L1) elements of L and L2 is the remaining elements of L.\nSame functionality can be done using list(iterable) method as shown below.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\ndef split_two_parts"], [0.13630473949820135, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list into 2 lists (elements from the beginning until L element and from L element until the end of the list)\n\n# ****\n# Exercise #10\n# The Average of Numbers in a Given List.<br>\n# This program will read the numbers and calculate their total, then calculate the average.<br>\n# \n# Inputs:\t1. The numbers in the list (1 to 5 numbers) <br>\n#"], [0.13622653112296806, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a two list in two list according to the length of the sublist input parameter.\ndef backward_element(xs):\n    return xs[::-1]\nThe above code is a python function to reverse a given list.\ndef count_down(n):\n    while(n):\n        print(n)\n        n -= 1\n    print('Lift Inactive!')\nThe above code is a python function to"], [0.13616328327661673, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two lists based on the given value of (L). This function returns the two lists.\n#How to Sum a List of Numbers.\n\ndef sum_list(numbers, n):\n  return sum(set(numbers)) * n\nThe above code is a function to return a multiple of entire sum of list of numbers by a given value of n. This is a one-liner in Python.\n\n\nCalcul"], [0.13579054542111654, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is working as python function splits the given list at two locations specified value and returns two list.\n\ndef check_palindrome(n):\n    a=n\n    rev=0\n    while(n>0):\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    print(rev)\n    if(a==rev):\n        print(\"Given number is palindrome\")\n    else"], [0.13551353559798987, "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list in two parts of the specified length. If the length is not specified it will split the list just once.\n\nsegment = lambda L, words, step=4: max((L - sum(len(i) for i in words)) // (step + 1), 1)\nForth argument \u201cstep\u201d in the above lambda function is the optional argument. If two of the words has length 16 and the length of total list"], [0.1354455539314248, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two sublists at specific point.\nThere is a special permutation for each (length of list, expected number of zeros) combination in a given input file.\nThe requirement was to take two lists of exactly one particular size and one element not present in that size subset.\n\ndef find_combination(l1, l2):\n    l2_set = set(l2)\n    return [(x, y"], [0.13535778590740058, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which takes two arguments one is List and the second one is Integer L. \nThis function splits the list into two parts according to the value of L.\nFirst part consists of elements which consists of length less or equal than L.\n\nSecond part consists of elements which consists of length greater than L.\n\nFor Example :\n\nUsing the above split_two_parts List and an Integer L, the output will be :\nInput_list = ["], [0.13523998607055573, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to split a list into two parts of specific lengths.\n\ndef minSizeSubStr(str1,str2):\n    a = list(str1)\n    b = list(str2)\n    l = len(b)\n    while l:\n        if b == a[:l]: return l\n        l -= 1\nThe above Python function checks if a smaller string 'b' is a substring of a larger string 'a' with"], [0.1350488612963829, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that takes a list with N elements and a positive integer L as arguments.\nOriginal list:               [a, b, c, d, e, f]\nsplitting at n = 2:      [a, b], [c, d, e, f]\nsplitting at n = 4:     [a, b], [c, d, e]\nsplitting at n = 6:     [a, b], [c, d]"], [0.13500443474292997, "def cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is split a list based on the length of the list into two lists.\nimport math\ndef calculateDays(Y,M):\n    head_listOfDaysInMonth=[0,31,28,31,30,31,30,31,31,30,31,30,31]\n    if(M!=2):\n      total_day=head_listOfDaysInMonth[M]\n    elif(Y%4==0 and"], [0.1345208104157213, "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts, the first part contains L elements, and the second part contains the rest of the elements.\n'''\n\n# 2. Given any sentence, you need to find the most frequent word in this sentence, which is not a ``stop word``. \n# \n# The stop words are defined as follows:\n\n# The stop words are \n# - words like  a, the, in  etc which are"], [0.1344988529204664, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a Python code to split a list into 2 parts of the specified lengths.\ndef remove_duplicates(any_list):  \n    return set(any_list)  \nThe above code is a python function to remove duplicate data in a list.\ndef sum_of_list(list2):   \n    return sum(set(list2))  \nThe above code is another python function to find the total sum of the list with out duplicates."], [0.13435312206812372, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list in two parts based on the length of the list!\n\n\n\nDo you know how to calculate O(n^2 m ^O(c)) ? You are gonna learn it in this chapter :). Next to writing, you may want to locate words of a particular length N within a string.\n\nGiven a list of words, can you check if there are two words, such that one word can be formed by extracting two letters from another word"], [0.13433683239376687, "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function that splits given list of objects into two parts based on length provided in arguments.\n\n\ndef add_even_no(lst):\n    lst2 = lst\n    lst2 = list(filter(lambda x: (x%2 == 0), lst2))\n    a = sum(lst2)\n    return a\nThe above code is a python function that add the even numbers in list.\n\n\n\ndef add"], [0.1339047585917554, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two sublists(parts) given a length.\ndef regression_line(x_list, y_list):\n    xy= 0\n    xx= 0\n    x= 0\n    y= 0\n    n= len(x_list)\n    for i in x_list:\n        x += i\n    x_mean = x/n\n    for i in y_list:\n        y +="], [0.13366826346969704, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function which splits a given list l1 into two parts each of size l as mentioned in L and returns a tuple of both. L should not exceed len(l1)\n\n__init__ is the class constructor, that gets invoked automatically whenever a new instace of class is created.\n__init__ method is called automatically in the creation of object for a class.\ndef fib(n): \n    fibValues = [0, 1] \n  \n"], [0.13358787834644703, "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\n\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list to 2 parts based on the given value L.\n\nfor i in test_list:\n  if (first round of actions ):\n    within those actions:  \n      if(fill 6-gallon jug for the first time):\n        visited_nodes_directions=[i,]\n        volume_filled_uptill_now=0\n        \n      if(empty 6-gallon jug for the first time"], [0.13354895316560966, "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split two parts of a list into two parts.\n\ndef combine_all_pair_wise(list1, list2, L, M):\n    indicesA = [i for i in range(M)]\n    indicesB = [j for j in range(M,L)]\n    indicesA = [[i] for i in indicesA]\n    indicesB = [[j] for j in indicesB]\n    itemsA = list"], [0.13348160981775437, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list into two lists.\n\nimport re\ndef text_match_two(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by zero or one b's.\n\ndef chan(user, channel1):\n        channel = str(channel"], [0.1334393450592014, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a given list into two different lists of given L length.\ndef convert_to_tuple(L) :\n    print({x:y for y,x in L})\nThe above code is using list comprehension to convert list of tuples to dictionary of tuples.\nAn example of list comprehension its written as \"p={i:i*i for i in range(10)}\"\nimport os\nimport os \ndef fun"], [0.13284122675394422, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function when given a list and a value, include the value at the correct index in the first sublist, and exclude it from the second sublist by progressively deleting the first element of list1 and keeping track of the add count.\n\ndef binary(s,k):\n    if k == 0:\n        return s\n    if k == 1:\n        return \"0\"+s\n    split_idx = len(s)/2\n    ss"], [0.13240063197698634, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to split an array into two parts based on the given length.\n\ndef interlock(word1, word2):\n    return \"-\".join([word1[i:i+1]+word2[i:i+1] for i in range(0, max(len(word1), len(word2)), 1)])\nThe above code is a function to interlock two words.\n\nimport os \nimport shutil\n\ndef delete"], [0.13224482621506387, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\nimport math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts separately.\ndef square_coordinates(a, b, c, L):\n    if a+b >= L and c+b >= L and a+c >= L:\n        return [ print([a, b, c]) for a in range for b in range for c in range]\nThe above code is a snippet to print all possible coordinates when the sum of any two coordinates is less than or equal to a"], [0.1320497930945433, "def sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to splits a given list into exactly two parts, one part having the length L defined by the user.\ndef merge_parts(list1, list2):\n    i, j = 0 , 0\n    result = []\n    \n    while i < len(list1) or j < len(list2):\n        if i == len(list1):\n            result.extend(list2[j:])\n            break\n        el"], [0.13189299492524564, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list into two lists , one of first L elements of list and other one with the number of elements left.\ndef remove duplicates from a list:\n    final_list=[]\n    for num in list1:\n        if num not in final_list:\n            final_list.append(num)\n    return final_list\n\ndef Remove(tuples): \n    final_list =[i for i in tuples if i !="], [0.13188769586589008, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is intended to split a given list into 2 parts of length L and (list_length-L) respectively.\ndef get_all_substrings(string):\n    length = len(string)+1\n    list_substring = [string[x:y] for x in range(length) for y in range(length) if string[x:y]]\n    return list_substring\nThe above code will give list of all substrings from a string"], [0.13174824541019128, "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to divide a given list in two parts where one partition contains the first specified number i.e. L integers and the second partition contains the remaining integers.\ndef update(dict1, str1):  \n    for i in str1: \n        if i in dict1: \n            dict1[i] += 1\n        else: \n            dict1[i] = 1\n    return str1\nThe above code is a python"], [0.1314600147376132, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts where the first part contains L elements."], [0.13137633322287637, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " can be used to split a given list into two parts. It will try to split on the basis of given length. In the following example, we split coloured balls into two halves.\n\nimport os\nos.environ['http_proxy']=\"http://167.205.35.227:80\"\nos.environ['https_proxy']=\"https://167.205.35.227:80\"\nThe above two lines of code can be used to bypass"], [0.13137251806698536, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a given list into two parts.\n\n\n'''\n\n\ndef bin_search(pat, word):\n    pass\n\n\npat = \"bacbaacbcac\"\nword = \"abc\"\nx = [i for i, letter in enumerate(pat, 0) if letter == word[0]]\ny = [i for i, letter in enumerate(pat, 0) if letter != word[0]]\nprint"], [0.13124769626637361, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to take a list and length as input and split the list in two parts with one part having length as mentioned in the function.\n'''"], [0.13117960518514749, "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \nThe above code is a function to determine if the sum of the divisors of two integers are the same.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits the given list in two parts.\n\ndef glue_parts(L1,L2,list1):\n\ti = n2-1\n\tj = n1-1\n\twhile j >= 0:\n\t\tlist1[i] = L1[j]\n\t\ti -= 1\n\t\tj -= 1\n\ti = n1-1\n\twhile i >= 0:\n\t\tlist1[i] = L2"], [0.1309706839669589, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a Python function that returns a tuple, consisting of the required subsequences after splitting a list into two parts.\ndef swap(a, b): \n      \n    temp = a \n    a = b \n    b = temp \n      \n    return (a, b, '\\n swapped numbers successfully!')\nThe above code is a function to swap variables 'a' and 'b'.\ndef add(Num): \n      \n    Add"], [0.13078482582594828, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two parts.\n    \ndef reverse_sublist(l1, start, end):\n    l1[start:end] = l1[start:end][::-1]\n    return l1\nThe above code is a python function to reverse a part of a list.\n\ndef countInversions(arr):\n    print(\"input array : \", arr)\n    length = len(arr)\n   "], [0.1307629842325104, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the whole list into two parts: [:L] the first part, and [L:] the second part. \ndef question(i):\n    a       = [1, 0, -3]\n    aindex  = left_insertion(a, i)\n    elota = aindex-1\n    if elota == -1:\n        init = 0\n    else:\n        init = elota\n    if"], [0.13073856303938733, "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list of any length into two parts based on a split length.\n# Read the file\nimport ast,sys\ninput_str = sys.stdin.read()\ninput_list = ast.literal_eval(input_str)\nprint (type(input_list),input_list)\nThe above code shows converting string to list.\nimport numpy as np\nls1 = [1,2,3,4"], [0.13066034345425595, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to split a given array into two halfs of sizes u and v. For example list = [1,2,3,4,5,6,7,8,9] and length = 3, then two parts first with length 3 would be : [1,2,3] and second with length of 6 [4,5,6,7,8,9]\n"], [0.1306073466024913, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to split the list1 into two parts at a given L.\ndef diff_in_lists(list1, list2):\n    return list(set(list1) - set(list2))\ndef diff_in_lists_tuple(list1, list2):\n    return list(set(list1).difference(list2))\nThe above two codes are function to find the difference between two lists in tuple datatypes.\ndef"], [0.13059842749600034, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list in given size and returns the two splits.\n\ndef invert(list1):\n    return [x * -1 for x in list1]\nThe above code is a function to invert using the list comprehension and multiply each element of list with -1 and returns the new list.\n\ndef unique(string):\n  return (string.upper())\nThe above code is a python function to convert the given string to upper case"], [0.1297249039794007, "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\n\ndef maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list into x and y considering L, \nwhere l is the no. of elements in the first tuple and y is the no. of elements in the second tuple.\nprint (\"Given tuple: \", tup1) \nprint (\"Splits of iterable tuples into two tuples x, y:\\n\", split_two_parts((1, 2, 3), 1))\n# read counter data day wise, ...\n\n#"], [0.1296383851167894, "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into 2 parts at the given Low.\ndef my_func():\n    print('Hello World')\nmy_func()\nThe above code is to defining a function named my_func which prints the `Hello World` statement when called.\ndef sum_square(x):\n    return x*(x+1)*(2*x+1)/6\nThe above code is a function to find the sum of the squares of"], [0.12940114776612624, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list into fractions given a fraction as denominator and index.\n\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that splits a list into fractions given a fraction as denominator and index.\n\n\ndef find_missing_no(list1): \n  return sum(list1) * len(list1) - sum(range"], [0.1293688181175807, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts. \n\nSTRINGS = [str(n) for n in range(16)] \nThe above code is an array of strings for all the 16 digits. \n\ndef bf_search(d, match, flag): \n    string = STRINGS[d] \n    for i in range(4): \n        for pi in permutations(string, i+1): \n            val"], [0.12905188245550997, "def add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list1 into two parts based on the L index value.\n\ndef convert_tuple_to_dictionary(test_tup): \n    for i in range(0, len(test_tup), 2):\n        k = test_tup[i]\n        v = test_tup[i+1]\n        dict[k] = v\n    return dict\nThe above code is a function to"], [0.12803274738164622, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " takes a list and two integers called L and returns two lists called parts containing the two sets - left and right sets.\nimport array\ndef array_rotate(arr,n):\n    sofm = []\n    newra = [None] *n\n    newra = list(newra)\n    pp = [None] * n\n    pp = list(pp)\n    ak=0\n    while (ak<len(arr)):\n       "], [0.12787966244977395, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the input list into 2 parts based of the given index L. https://www.geeksforgeeks.org/break-list-chunks-size-n-python/\n\ndef RPN(expr):\n    import operator\n    stack =[]\n    ops = { \"+\": operator.add, \"-\": operator.sub }\n    for x in expr.split(\" \"):\n        if x in ops:\n            op2,"], [0.12775558385403812, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two equal sub parts.\nimport bisect\ndef continuous_element(list1):\n    list1=sorted(list1)\n    list3=[]\n    list2=[]\n    for i in range(len(list1)):\n        y=2**i\n        x=y*(i+1)\n        if x>len(list1):\n            break\n        y1="], [0.1275517056593165, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\ndef min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list into two parts.\nsortlist = [(9,), (1,), (5,), (2,), (4,), (8,), (7,), (6,), (3,)]\nleft = []\nright = []\nwhile len(sortlist) > 0:\n    if len(sortlist) < 2:\n        left.extend(sortlist)\n        for rem in left:\n           "], [0.1273951247169988, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list.\n\ndef Prod(list1,L,R):\n   ans=1\n   for i in range(L, 0, R-L+1): \n       ans = (ans * list1[i]) \n   return ans\nThe above code is a python program to find the product of the first L terms of a given list.\n"], [0.12732239783060476, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts. The second list contains L items.\n\ndef list_to_tuple(list1):\n    return tuple(list1)\nThe above code is function to convert a list to a tuple\ndef dictionary_contains(dct, element):\n    return element in dct\nThe above code is function to check if a dictionary contains the given element.\n\ndef return_index(str1, p):"], [0.12732239783060476, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two lists by specified length.\nNote: \nRange in python2 allows negative step. \nThis will cause an undesired behavior as step is defined post shortening of list.\n\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nIf length L equals to length of list, then below code works.\nlist1a, list1b = split"], [0.12720710745137392, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list in two parts with L being the index of the first element in the second part.\n\ndef remove(duplicate): \n    final_list = [] \n    for num in duplicate: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \nThe above code is a python program to remove a duplicate from a list.\ndef min"], [0.12698110362084747, "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts.\nList multiplication and addition:\nprint([1,2,3]+[4,5,6]) by adding will generate output as [1, 2, 3, 4, 5, 6]\nlistmultiplication by default repeats the list n number of times.\nprint([1,2,3]*2) will generate output as [1, 2, 3, 1, 2, 3].\nConversion between"], [0.12697425266620846, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that breaks set of numbers in order to form two sub list, one if\nless than L in length and should be on the left side of slice and the other of length L and should\nbe on the right side.\ndef recurse(dummy0, dummy1 , dummy2, dummy3, dummy4):\n  if sum_list1[(~L)>= 0]:\n  \ndef feed_duplicates(duplicate):"], [0.12688803500292833, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a divide a list into two parts.\nYou can call len() on any Python type that has len(), for example a string.\nChunk the data in a list into smaller lists of items.\ndef my_sum(numbers):\n    sum = numbers[0]\n    for number in numbers:\n        sum = sum + number\n    return sum\nThe above code implements a recursive function to find the summation of a list of numbers.\nimport n"], [0.12688360056222195, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two lists.\ndef remove_nums(list1, L): \n    return [i for i in list1 if i%n]\nThe above code is a python function to remove numbers from the list at an index n  in range (1, L-1).\ndef find_avg(L1, L2): \n    L3 = L1+L2\n    return sum(L3"], [0.12688360056222195, "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function split two lists into two parts of specified lengths.\ndef odd_before_even(l):\n    l.sort(reverse = True)\n    return l\nThe above code is a function sort the odd numbers before even numbers in the given array.\ndef radix_sort(l):\n    iterator = 10\n    \n    exp = 1\n\n    max_num = max(l)\n    \n    while max_num/exp > 0"], [0.12676938805141583, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two given sublist length.\nYou are given a list of tuples like [ (1,4,5), (8,9), (0,4,2), (5,2,9) ] that contain daily price fluctuations for the stock for given day. \nYou will need to fetch the stocks for each of the day and output the maximum profit from the stock on that day. \nIf there is no profit then report"], [0.1266276833480309, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two lists by a given length L. \n\"\"\"\ndef is_prime(n):\n    return all([(n % j) for j in range(2, int(n ** 0.5) + 1)]) and n > 1\ndef is_Diff(n):\n    return (n % 11 == 0) \ndef overlapping(list1,list2):  \n    for i in range(len"], [0.12662630931202146, "def find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\n\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which takes a list and the number of elements in each sublist and returns the list split into two sublists.\n"], [0.1265864592649964, "def split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " will split a list into 2 parts and return both parts as part of a list.\n\ndef reverse_evens(L):\n  for i in range(0,len(l),2):\n    L[i]=l[i][::-1]\n  return L\nThe above code will reverse every second word in a given string\ndef get_primes(a, b):\n  list=[]\n  for i in range(a,b"], [0.12624921065429265, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to divide a list into two lists of specified length.\n# sorting tuples\nimport operator\nx = 2, 6, 1, 4, 9\nsorted_tup = sorted(x)\nprint(sorted_tup)\n\nx = 2, 6, 1, 4, 9\nsort_tup = sorted(x, key=operator.itemgetter(0))\nprint(sort_tup)\n\nx ="], [0.12604014729539906, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " function that splits an array into two smaller arrays. \n\ndef is_sorted(list1):\n    for i in range(0, len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n        else:\n            return True\nThe above code returns a boolean indicating if the list (of numbers) is sorted in ascending order.\n"], [0.12603593720113013, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two lists.\ndef merge_lists(list1, list2):\n    return list1+list2\nThe above code is a function to merge two lists.\nimport theano \nprint('Theano version: {}'.format(theano.__version__))\nimport os \nimport tensorflow as tf\nprint(\"TensorFlow version: {}\".format(tf.__version__))\nimport keras"], [0.1259549869603938, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the input list into two smaller lists with a minimal sum difference of 2.\ndef four_parts():\n    while True:\n    \twith open('input.txt') as inp:\n    \t\tinputline = int(inp.readline())\n    \tif inputline == -1:\n    \t\tbreak\n    \twith open('input.txt') as inp:\n    \t\tinputarray = [int("], [0.12585750533876028, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two list at a specific location.\ndef find_finalist(team_name, game_result):\n    if all(elem in game_result[0] for elem in team_name) and all(elem in game_result[1] for elem in team_name):\n        return True\n    return False    \nThe above code is a function to find a team specific to the game play and return"], [0.12584185128563977, "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to find two parts from a given list and given length.\n\n\ndef tup_out_size_in(tup_ele_func,n):\n      tp = tup_ele_func\n      return [ tup_ele_func(*[i]*elem) for i in range(1,n+1) for elem in range(1,n+1)]\nThe above code is a python function to check"], [0.12552086800656648, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list into two lists such that their sums are equal.\nThe lines 4 and 5 perform the rotation operation for the linked list.\ndef remove_nth(list1, n):\n    if len(list1) == 0:\n        return\n    if len(list1) == 1:\n        return list1[0]\n    elif len(list1) == 2:\n        if n==0:\n            return"], [0.12507899371184228, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list in two parts with specified length. The left part is of size m of specified length and right part is of specified length n.https://www.geeksforgeeks.org/python-split-list-two-parts-based-first-list-element/\ndef reverse_list(list1):\n    return list1[::-1]\nThe above cde is a function to reverse a given list.https://www"], [0.12486704447429212, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list in 2 parts and return 2 list as list1 and list2. The parameter L is use to denote the list size.\n\ndef find_the_min_max(list1):\n\n  if len(list1) == 1:\n    return list1[0], list1[0]\n\n  if list1[0]<list1[1]:\n    a = list1[0]\n    b = list1"], [0.1248653166576198, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts.\ndef new_String(str):\n    str1 = str.split(\".\")\n    final_str = \"\"\n    for x in str1:\n        replace_str = x[:-1]\n        replace_str = replace_str * 2\n        replace_str += x[-1]\n        final_str += replace_str\n    return final_str\nThe above code is a function"], [0.12480055938345687, "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\n\ndef split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list at the nth eelment and add the first part to the end.\n\ndef even_odd(arr):\n    next_even, next_odd = 0, len(arr) - 1\n    while next_even < next_odd:\n        if arr[next_even] % 2 == 0:\n            next_even += 1\n        else:\n            arr[next_even], arr[next_"], [0.12468847024249871, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list into 2 parts based on the given length.\ndef join_two_lists(list1, list2):\n   return(list2 + list1)\n The above code is a function that joins 2 lists by alternating the values.\n\ndef remove_even(list):\n    return [i for i in list if i % 2 != 0]\nThe above code is a function that remove all the even numbers from a given list."], [0.12454490120969637, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split one list into two sublists on the basis of passed integer as index.\ndef rev_list(lst):\n    ret = []\n    ln = len(lst)\n    for i in range(ln - 1, -1, -1):\n        ret.append(lst[i])\n    return ret\ndef rev(lst):\n    if len(lst)==1:\n        return lst"], [0.12441482739444053, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two parts based on the maximum size.\nnb_year(p0, percent, aug, p)\nGiven:\nStarting population;\nPercent growth per year;\nCity growth modifier per year.\n\ngrowth = (percent/100) + 1\nyear = 0\n\nwhile population <= p:\n    population = population * growth\n    population += aug\n    year += 1\n    \nprint(year)\nimport"], [0.12437834944517388, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two sublists.\ndef find_word_horizontal(matrix,word):\n    for row in matrix:\n        if word in \"\".join(row):\n            print(word)\n            return True\n    return False\nThe above funciton is a function to search a word in a matrix horizontally.\nOutput is True or False.\n\ndef pattern(n): \n \n    for i in range("], [0.12437132917149944, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given array/list into two pairs depending on the L, \nthe where the split needs to occur.\n\nasn4.py\n\nInstructions for running:\n$ python3 asn4.py\n\tEnter command: s\n\tEnter url: profmoore\n\tRetrieving http://www.cs.utsa.edu/~wagner/\n\t<!DOCTYPE HTML PUBLIC \"-//IETF"], [0.1241616148293124, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts.\n\"\"\"\n\n\"\"\"\nUnfortunately, the Python version is a little slow because it is interpreted rather than compiled.\nThe Java version of the RGB to Hsv converter is almost an order of magnitude faster than the Python version.\n\nfrom java.lang import Math\n\ndef split_two(L, list1):\n    return list1[:L], list1[L:]\ndef rgb_to_hsv"], [0.12403563096512431, "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list in two sublists.\n\ndef standardize_in_numbers(li):\n return list(map(lambda x: x+5, li))\nThe above code is a function to modify the original list with modification of all numbers in a list in n numbers.\n\ndef find_duplicates(num_list):\n return list(set([x for x in num_list if num_list.count(x"], [0.12385937603669042, "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\n\nimport sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list of integer numbers in two parts according to the given L value \nand return the two parts of the list.\na = \"I love Python\"\n \nprint a[7:],\nprint a[:6]\nThe above code prints two words from the given string \u2018I love Python\u2019.\nYou have to work on the a = \u201cWelcomeGeek\u201d using the special strings functions given below.\n"], [0.12383585167999783, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which takes a list of integers and splits it into two list at L as the index.\n#!/usr/bin/env python3\n\ndef interact():\n    print('Hello stream world')\n    while True:\n        try:\n            reply = input('Enter a number>')\n        except EOFError:\n            break\n        else:\n            num = float(reply)\n            print(\"%f squared is %f\" %"], [0.12372623859833631, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits up a list in two parts and returns two lists with L items are in the first list and (len(list1) - L) items are in the second list.\n"], [0.12357532247861881, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a funtion to split a given list of numbers into two sublists of length L(provided by user) and R.\ndef get_common_elements(list1, list2):\n    return list(set(list1) & set(list2))\nThe above code is a function to get the common elements between two lists.\ndef get_certain_hierarchical_elements(list1, n):\n    return list1[n"], [0.12357532247861881, "def split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function that returns list split into two list at the given index\nlist1 = [11, 10, 9, 8, 7, 6, 4, 3, 2, 1] \nL =4\nprint( split_two_parts(list1, L))\ndef repeated_num(l):\n    d= {}\n    for i in l:\n        if i in d:\n            d[i]+=1\n        else:\n"], [0.12350666759458037, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split two parts of the list L items from both sides.\ndef add(list): \n    return fsum(list) \nlist = [1, 2, 3] \nprint (add(list))\n\nimport math \nnumber=int(input(\"Enter number\")) \npower = math.log(number, 2) \nif (power - int(power) > 0): \n    print (\" not power of"], [0.12340282851496161, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python code which splits a given list of even length into two list of same size.\ndef common_elements(list1, list2):\n\tlist1.extend(list2)\n\treturn set(list1)\nThe above code is a Python function to find all common elements present in the two given lists.\ndef common_elements(list1, list2):\n    return set(list1).union(set(list2))"], [0.12323216905932101, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function returns two parts divided by the position passed in as an argument (included if L is > 0, excluded if L is nonpositive or L is greater than the length of list1). If L (ord L < 0, or if L. len(list1)) are matched to a false condition, the function splits list1 into a copy of list1 and and empty list.\ndef fib_number(n):\n  x = 0\n  y = 1"], [0.12293379989122966, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list in two parts. \n\ndef start_and_stop_on_even(numbers,startwith = False):\n    lst = []\n    if startwith:\n        lst.append(startwith)\n    stop = False\n    for i in range(len(numbers)-1):\n        if numbers[i]%2 == 0 and numbers[i+1]%2 == 0:\n           "], [0.12285591250209624, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is used to split a list into two required segments which can be of size differnet by providing L\ndef description(description):\n a<description> (modify a)\n print \"banana\"\n return a\n'hangman_with_help.py'\nThe above code no optimization as of now\nfor(i=0;i<m;i++)\n  sum=int((sum*26)+1+str[m])\nCode for iteration"], [0.12247067796166973, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two lists by dividing the given length from left and from the right, respectively.\ndef is_power_of_3(N):\n    if (N == 1):\n        return True\n    while (N % 3 == 0):\n        N /= 3\n    return N == 1\nThe above code is a function to check whether a given number is power of 3 or not.\ndef reverse_arr(arr):\n"], [0.12243409585599979, "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is The input is defined as a list and integer number L, a python function to split the list.\nfrom operator import add\ndef combine(list1, v):\n    return list(map(add, list, [v] * len(list)))\nThe above code is The input is defined as a list and integer number L, a python function to Sum all the given numbers in the list and find the following: Sum of all even numbers, Sum of all odd numbers"], [0.12210811644232802, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts. You can send a list object as parameter.\n\n# Question No.8 ==========================\ndef all_divisors(n, d1, d2, list_a=None):\n    \"\"\"\n    Finds all divisors of n, that are  smaller than n, larger than d1, and larger than d2\n    Enter n, d1, d2 as input parameter, d1"], [0.12207581840775837, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a Python function to split given array in two parts where first array lenght is L and second array lenght is given list's length minus L.\n\ndef insertionSort(arr):\n        for i in range(1, len(arr)):\n            key = arr[i]\n            j = i-1\n            while j >= 0 and key < arr[j] :\n                    arr[j + 1] = arr[j]\n                   "], [0.1219450110709679, "def split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a sequence into two parts.\n\ndef flst(list1):\n    # bs and bg_pos track the latest index found for a continuous block\n    # and its corresponding gap length, the first block with no gap will start two new tracking variables\n    bs = bg_pos = None\n    for i in range(len(list1) - 1):\n        if bs is None:\n            if list1"], [0.12181460639461898, "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\n\ndef combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a method to split a given list should into a list mentioned first and then second.\n\n## Given an Array of numbers, find the maximum sum of a continuous subarray of the array\ndef max_cont_sum_array(A):\n    cnt = 0\n    ans = 0\n    for i in range(len(A)):\n        maxdigs = max(A)\n        A.remove(maxdigs)\n        if maxd"], [0.12181460639461898, "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\nimport re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function that splits a list of length L into two lists of as close lengths as possible.\ndef reverse_grid(grid):\n    return list(zip(*grid))\n# Python3 program to print all subarrays in O(n^2) time \n# Function to print all subarrays of arr[]  \ndef printSubArrays(arr,n): \n   \n    # Pick starting point \n    for i in range("], [0.12169034705423576, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which splits two types of items in list given sum and length of list.\n\nd = {\"A\":1,\"B\":2,\"C\":3,\"A\":4}\na = \"A\"\n\nfor i in d:\n    if i>a:\n        a = i\nprint d.get(a)\nThe above code store duplicates in a dictionary and print the key that have max value.\n\ndef words_to_"], [0.12150598510542933, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to divide the given list into 2 equal parts.\n\nx = \"eqkllmjaeoxvcsulmrbipzistdocbnyozmnqthhpv\"\nn=len(x)\ntemp = []\nfor i in range(1,len(x)//2+1):\n  for j in range(0,len(x)-i+1):\n    temp.append(x.count(x"], [0.12146323884323272, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list L elements in two parts. It is used in the problem where a given list is separated by equal length into two parts.\nfrom operator import lt, gt\nCountries = [\"\", \"Germany\", \"USA\" , \"France\" , \"and so on..\"]\nfor i in filter(lt, (range(1, len(Countries))), countries.keys()):\n    print(Countries(i), \""], [0.12144700030336596, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts. It can be modified for other uses.\n\ndef sort_list(list1):\n     sort = QuickSort(list1)\n     out = sort.sort()\n     return out\nThe above code is a function to sort a list of strings.\ndef string_common(s, s1, s2): \n    str1 = string.ascii_lowercase\n    n = len("], [0.12101207118939895, "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two parts according to a desired index value L.\nA default argument is an argument that assumes a default value if a value is not provided in the function call for that argument.\n\npython default arguments if a default argument is not given then it will be carried forward.\nTo del() an item P in the function def(), we can write,\n\ndel P.\nIn a function definition the syntax for making a list that is sorted"], [0.12082743432144649, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " takes a list of integers as input and returns which array is the first of the two equal to the sum of its elements when split into thee parts.\n\ndef call_it(object, methodname, args=None, kwargs=None):\n    if args is None:\n        args = ()\n    if kwargs is None:\n        kwargs = {}\n    methods = dict(inspect.getmembers(object, inspect.ismethod"], [0.12068238851856913, "def even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a Python function to split a list into two parts.\n\ndef percentage(left, right, allowed_error=1e-10): \n    return abs((right - left) / right) < allowed_error\nThe above code is a python function to find the percentage difference between two values.\n\ndef reverse_poem(poem): \n    return '\\n'.join(line.strip()[::-1] for line in poem."], [0.12068238851856913, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that tests whether two lists have the same elements in a specific relative order.\ndef split(xs, L): \n    if xs[L - 1] <= xs[0]: \n        print(\"Invalid list. Please re-enter.\")\n    for index in range(L): \n        if xs[index] >= xs[L]: \n            print(\"List doesn't contain one strictly increasing subsection\")\n            break\n       "], [0.12045262527366525, "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split list into two halves.\n\ndef print_matrix(mat):\n    for i in range(len(mat)): \n        for j in range(len(mat[i])):\n            print(\"{:>2}\".format(mat[i][j]), end = \" \") \n        print()\nThe above code is a function to print matrix in formatted way."], [0.12038122056301516, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a data structure to split the strings with even size in terms of their first half and second half. This is provided for splitting tuples into two parts.\ndef construct_list_odd_size(L, odd_size):\n    return [L[i] for i in range(1, len(L), odd_size)]\nThe above code is a function that is essentially a matrix of \"L\" for odd/even subsequences. Therefore, construct_list"], [0.12034032505481232, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\nimport math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a two different lists into two parts with sizes of the two parts are equal.\ndef convert_ColorPixel_to_BlackWhite(img, w, h):\n    for i in range (h):\n        for j in range (w):\n            if img[i, j] < 100:\n                img[i, j] = 0\n            else:\n                img[i, j] = 255\n    return img\n"], [0.12026373654836978, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function  to split a list of L elements into two parts .\n\n\ndef rotate_list(list1, k):\n    return list1[k:] + list1[:k]\ndef reduce_list(list1, index):\n    return list1[:index] + list1[index+1:]\ndef remove_nth_last_element(list1, index):\n    return list1[:len(list1)-index"], [0.11989737892173971, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a given list into 2 smaller lists and return them in the same order.\ndef find_representative(target_number,number_of_appearances,target_appearance_number, output, mean_calculation, output_identical_elements, mean.calculation,  identical_elements, L):\n    if mean_calculation == target_number:\n        if output_identical_elements <= target_"], [0.11975448269891838, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two sublists of equal sizes.\ndef return_element_greatest_num_list_n(list1, list2):\n    L1 = len(list1)\n    L2 = len(list2)\n    i1 = 0\n    i2 = 0\n    candidate1 = 0\n    candidate2 = 0\n    has_candidates = True\n    while (i1 < L1)"], [0.11956265392527804, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is Split a given list of integers into two parts of the same size.\nTo solve the return statement in question,some people have used while loops while others have used break statement to calculate the number of steps but my approach was to apply condition and then solve the problem at a very basic starting point.\n\ndef traffic_signal_turn_time(signal):\n    this_time=0\n    while not signal == 'stop':\n        signal=signal."], [0.11950434333420008, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which splits a list into two parts. \ndef split_two_parts(list1, L):return (list1[:L], list1[L:])\nList comprehension with if condition\nn=100\nL = [x*x for x in range(1,n) if x*x <= 10 ]\nprint(L)\n\n\nList comprehension with two if conditions\nn=100\nL = [x*x for x"], [0.11948965093657894, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list in two equal parts when length of list is given.\ndef find_it(list1):\n    s=[]\n    e=[]\n    for i in list1:\n        if (i%2)==0:\n            s.append(i)\n        else:\n            e.append(i)\n         \n    print(\"expected elements:\",len(e))\n    print(\"unexpected elements:\","], [0.11933864129700482, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list such that the sum of two (L-1)-lengths is minimized.\n\n\ndef char_position(alphabet, text):\n    match = re.compile(alphabet)\n    text = match.sub(lambda m: str(text.index(m.group())), text)\n    return text\nIn above code, we are finding all instances of the pattern in the text and replacing them with the positional index of"], [0.11916268119869233, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\nimport re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits the list provided into 2 parts equal to the length given.\nDISCUSSION\n\n>>>txt=\"problem of evil\"\n>>> txt.split()\n['problem', 'of', 'evil']\n>>> txt.split('o')\n['pr', 'blem ', 'f e', 'vil']\nIn case of no occurrence - empty string is returned.\n\nIn most of these functions where the function isn't returning anything on the basis of an argument"], [0.11906702984579622, "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list list1 in two lists given a third list L (sub-list of list1 ).\n\ndef display_relative_path(path, dirs):\n    result = list(path)\n    n = len(dirs[0].split('/')) - 1\n    for file in dirs:\n        num = len(file.split('/')) - 1\n        if num > 0:\n            while n"], [0.11865162247510551, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\nimport collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a  function to find the split in a list to make sublist with equal sum.\ndef multtuple_dict(D):\n    keys = list(D.keys())\n    return sorted(D.items(), key= lambda x: x[0][:keys[0]], reverse = True)\nThe above code is a function to make a multtuple dictionary.\n\n7.Write a function to find out third greatest element in the given array"], [0.11865162247510551, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two parts.\ndef check_sublist(list1, list2, l):\n    return all([e in list2 for e in list1]) & all([e in list1 for e in list2]) & (l==len(list1))\nThe above code is a python function to check whether a list is present in another list.\ndef combine_lists(list1, list2): \n    return"], [0.1185989722702912, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " Extracts the two parts of the input list and forms a tuple L1, L2 = split_two_parts(list, L) ,   where L1 consists of items in list[0:L/2+1] and L2 consists of items list[L/2+1:L].\nimport re\ndef text_match(text):\n\tpatterns='^(a|i|e|o|u|A|I|E|O"], [0.11857582448588334, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\nThe above code is a python function to remove odd numbers from a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function returns two lists, one is L smaller than the list and another is the remaing n - L elements the original list.\ndef list_dict(list1):\n    a={}\n    for i in range(len(list1)):\n        if list1[i] not in a.keys():\n            a[list1[i]] = 1\n        else:\n            a[list1[i]] +=1\n   "], [0.11827823686443287, "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split given list into 2 parts appropriately for such a given L.\ndef split_three_parts(list1, start, third):\n\tresult = []\n\tfor i in range(start, start+third):\n\t\tresult.append(list1[i])\n\treturn result\nThe above code is a python function to split list into 3 parts given the starting position and the size.\ndef split_arrangement(list1"], [0.11810440521136972, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which takes two lists as inputs and split combined list into two parts with lengths passed in first part input.\n"], [0.11788841421215647, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " will break up the list into first L and then the remainder, both.\n\ndef get_all_but_nth(nums, nth):\n    return nums[:nth] + nums[nth + 1:]\nThe above code will get all items except the one at index nth and it will be an extension of the previous question.\n\ndef get_all_but_jth(L, idx):\n    init ="], [0.11751589238651355, "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a given list 1 into two parts of length L and R.\ndeployed\n\nWe use dict in order to get access to elements in O(1).The keys of dict are processed which are numbers from 0 to N-1 and their respective values are the corresponding bits.Thus our task becomes easier as now we have all nos we have to match with the values of dict.\ndef canMakePaliQueries(self, s: str, queries):\n   "], [0.1174974536524421, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a large (one-dimensional) list into two parts whenever it encounters the first negative number. https://www.geeksforgeeks.org/split-the-given-list-into-two-parts-with-negative-values-in-first-part-and-positive-values-in-second-part/\ndef selectWord(list, k):\n    return list[(k-1)%len(list)]\n"], [0.11744561055528659, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given sentence into a left and a right chunk based on the given cutoff point. Assume that even a singletion has a suffix '_' so that string lengths are handled appropriately. Rounds down in a tie.\n\nThe given list1 is a list of characters in the sentence that has to be split into three sections. list1 is of the form SCSP. The first segment list1[0:L] belongs to the first division given to"], [0.11739684505023643, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\nimport collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list(list1) into smaller lists of length L and length len(list1)-L.\ndef sliding_windows_maximum(list1, k):\n    return [max(list1) for i in range(0, len(list1)-k+1)]\nThe above code is a function to return maximum of each sliding window.\ndef construct_intervals(list1):\n    return list(zip([x * ("], [0.11738569877389413, "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list of integers into two sublists of approximately equal sizes.\n\nsolution:\n\ndef sum_of_sequence(given_list, number):\n    sum = 0\n    for i in given_list:\n        sum = sum + i\n\n    if sum == number:\n        return f\"The list for {given_list[0]} to {given_list[-1]} gives the sum of {number}\"\n"], [0.11733832067777333, "def odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list in two equal parts according to the first index treated as pivot.\nGiven a list, return the most frequent element, ie the element that appears most often. \ninput_list = [1, 1, 2, 2, 3, 3, 3]\nlist_frequencies = [(x, input_list.count(x)) for x in set(input_list)]\nprint(\"Input list:\", input_list)\n"], [0.11686229930980169, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function used to split two parts of the same list if given L.\ndef remove(list1, index):\n  list1.pop(index)\n  return list1\n\n  The above code is a function to remove an index from the list.\n\ndef odd_product(arr):\n  flag = 0\n  for i in range(len(arr) - 1):\n    for j in range(i + 1, len(arr)):"], [0.1165011088592406, "def reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a given list into two outputs.\n\ndef test_substr(self):\n    string=\"abcab\"\n    self.assertEqual(substrCount(3, string),3)\n    string=\"aba\"\n    self.assertEqual(substrCount(3, string),2)\n    string=\"abcd\"\n    self.assertEqual(substrCount(3, string),1) \nThe"], [0.11642996997657805, "def tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to return two sublists whose concatenation equals the original list\"\"\"\n\"\"\"One big odd number\n\nGiven an array of integer numbers, the task is to find the first biggest odd integer number of the array.\n\nExamples:\n\nInput : 4,5,2,10\nOutput : 5\n5 is the first biggest odd number of the given array.\n\nInput : 8,98,74,11,2\nOutput : 74\n74 is"], [0.11633165065146961, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split an array into two parts based on the given index and length L.\n0 <= L < list1.length\ndef last_occurrence(list1, elem):\n    left = 0\n    right = len(list1) - 1\n    while (right - left > 1):\n        midpoint = left + (right - left) // 2\n        if (list1[midpoint] >= elem):\n            right"], [0.11578399763435801, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits two list at a given index L.\n\ndef is_in_order(n, list1):\n    for i in range(len(list1) - n + 1):\n        if list1[i:i+n] == sorted(list1[i:i+n]):\n            return True\n    return False\nThe above code checks whether a given list is indeed in sorted order given length of sublist as n.\n\ndef is"], [0.11576398590030407, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is the function to build a cutting index for spliting a given list into compartments for given L value.\n\n#The following codes import the test cases specified by the requirement.\nimport os.path\nfrom os import path\nTestcases = csv_reader_dataset('TestCases.txt')\nwith open('TestCases.txt') as f:\n    lines = len(f.readlines())\n    Testcase1 = (Testcases"], [0.11530831713015799, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function that splits the sublists into two different lists.\ndef Check_Vowel(char): \n    return True if (char=='a' or char=='e' or char=='i' or char=='o' or char=='u') else False\nThe above code is a function to check if the entered character is a vowel or not.\n\ndef move(ch, direc):\n    return chr(ord("], [0.11518819410563876, "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits up a list a and b at y into a list of elements uptil y in a and y onwards in b.\ndef concatenate_list_data(listA, listB):\n    return listA + listB\nThe above code will concatenate to lists so as to form a single list.\ndef all_occurrences_of_an_element_in_list(a,b,c):\n    \n    all_indices"], [0.11517025148672211, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to create two lists from a given list by dividing it into two equal parts as per length mentioned.\ndef player_game(random_list, user_limit):\n    \n    print(\"LET'S PLAY GAME....\")\n    \n    user_input = int(input(\"ENTER NUMBER OF GAMES TO BE TOSSED:\"))\n    t_list = random_list\n    guesses = int(input(\"ENTER LIMITS FOR A"], [0.11512434010018281, "def sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list into two parts with given L: https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-10.php\ndef sum_of_two_numbers(n, number):\n    if n == 0:\n        return 0\n    else:\n        return (n - 1) % number + sum_of_two_numbers(n"], [0.1150588182961227, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split the input list into two sublists with given length L.\n\ndef counting_sorted(array):\n    \n\treturn len(array) == len(set(array))\n\nsecond part is simple : ve check karna hai ki agar counter 1 se jyada hai to yes otherwise no\nThe above code is a python function to check if a list contains any duplicates.\n\ndef towerOfHanoi("], [0.11475424352864093, "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to split a given list into 2 equal parts.\ndef compose(lon):\n    result = \"\"\n    for element in lon:\n        result = result+ str(element)\n    return result\nThe above code is to merge the elements of a given list into a string.\ndef is_check(list1, list2, list3, L):\n    L1, L2 = split_two_parts(list1, L)\n   "], [0.1144973216776667, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list in two parts different elements in those parts.\n \ndef multiplication_table_for(n):\n   return ((x*y) for y in range(1,13) for x in range(1,13) if x==y)\\ \n            if n==12 else \\\n          ((x*y) for y in range(1,n+1) for x in range(1,n+1) if"], [0.11443830787355402, "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to split the list into two parts.\ndef new_number(number, num):\n    return str(number)*2\nThe above code is to repeat the number with number of digits of the given input."], [0.11421407122418058, "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given input in some number of parts of equal size 3 parts also.\n\nlist1 = [1, 2, 3, 4, 5]\nL = 1\nprint(tuple(split_two_parts(list1, L)))\n\nprint(tuple(split_two_parts(list1, 1)))\n\ndef dig_sum(n):\n    dig_sum = 0\n    \n    while(n !="], [0.11415231601972753, "def find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which returns two half list.\n\ndef maxsum_contig_subarray(A): #O(n) time complexity. Calling the linear time function \u201clongest_increasing_subarray\u201d twice.\n# This function returns the sum of the contiguous subarray that has the largest sum.\n\tleft_max, all_max = 0, 0 \n\tfor i in range(len(A)): #Recall that the"], [0.11411383447500181, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that returns 2 lists split into 2 parts.\n\nQ: What will the following function execution produce?debug the function\n\ndef change_int(integer_parameter):\n    '''Create inner function to add 5 to integer parameter'''\n    def add_five():\n        '''add 5 to integer parameter'''\n        nonlocal integer_parameter\n        integer_parameter += 5\n        return integer_parameter\n    return add"], [0.11405151548384906, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " can be used to split the list at an index value of L\n\ndef sum_third_element(alist):\n    return sum(x[2] for x in alist)\nThe above code is a function to sum the 3rd element of all the tuples in a list.\nfrom functools import reduce\n\nB = [2, 3, 4, 5] or [1.1, 2.2, 3.3]\ndef reduce_"], [0.1139443095834272, "import re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to create two different list segments of the original list equal in size.\n\ndef two_three(nums):\n    return [i*i+1 if i%3 == 1 else i*i*2 if i%3 == 2 else i*i*3 if i%3 == 0 else i for i in nums]\nThe above code returns the array of squared/cubed elements of the given array if they present every three numbers"], [0.11389058110378592, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a list at the element with Lth index and puts the value at even index and more than Lth index values into another list.\n\n\n\"\"\""], [0.11376928257598981, "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list in two parts. First parameter is the size of the second list.\n\ndef call_it(a, **kwargs):\n    function_to_call = eval(reverse_dict(kwargs))\n    return function_to_call(a)\nThe above code is a function to dinamicaly call a function based on the string passed via parameter.\n\ndef extend_list(value, list1 = []):"], [0.11375635537134635, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits the list into to two lists based on the index L.\n\nfrom collections import Counter\nfrom itertools import permutations\nfrom math import factorial\ndef permutation_count(input):\n    counts = Counter(input)\n    n = len(input)\n    sys.stdout.write(str(int(factorial(n) / math.factorial(n - sum(counts.values())))))\nThe above code is a"], [0.11317970333817531, "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list1 into 2 parts each the first part containing L elements. the second part will contain len(list1) - L Element\npair = []\nspeech = 'Let this be even, not ill advice; let none look upon the letter which I shall send. For Amendment is my Name, and Magistration my Supper.'.split()\nfor idx, word in enumerate(speech):\n    if word.startswith('M'"], [0.11296021101667382, "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list and a range value into two list each.\n\nUnderstanding argparse \u2013 Python Tutorial for Beginners\n\nfrom __future__ import print_function\nimport argparse\nimport glob\nimport os\nimport pprint\nimport re\nimport string\nimport sys\nimport argparse\nimport subprocess\nif not sys.argv[1:]:\n    sys.argv.append('-h')\nparser = argparse.ArgumentParser(description ="], [0.11287843273953968, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a generic function that will give you the two equal parts in a array based on the partition length L.\n\ndef add_two_bin(n):\n    return int(bin(n)[:2:-1], 2)\nThe above code is a python extension to convert any base-10 integer to base-2 integer (binary).\ndef sort_by_length(words):\n    t = []\n    for word in words:\n        t.append"], [0.11218196393933207, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list 'list1' into two lists based on a argument 'L'.\ndef find_floor_by_sort(num_str, f):\n    str = ''.join(num_str)\n    str1 = ','.join(str)\n    str1 = str1.split(',')\n    result = (list(map(int, str)))\n    result.sort()\n   # new_list"], [0.1119821157088358, "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list, L number of elements, into two lists all the time and returns both of them simultaneously.\n\nnum = int(input())\nlist1 = []\nfor i in range (1, num+1):\n  list1.append(i)\nfor i in range(0, num) : \n  if (list1[i] % 3 == 0 and list1[i] % 5 == 0) : list1[i] ="], [0.111940754573427, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the array into two array, one of which will have equal number of elements before and the other, after the given index L. Note that the input array will be modified, hence use the copy of original array in your solution.\ndef fabseries(N):\n    f1 = 0\n    f2 = 1\n    if N==1:\n        return f1\n    elif N==2:\n        return f2\n    else:"], [0.11171033905300218, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the elements of the given array into 2 different lists.\ndef triangle_shape(rows):\n    for i in range(rows):\n        for j in range(i+ 1):\n            print(\"* \", end = \"\")\n        print(\" \")\nThe above code is a function which prints a triangle of given number of rows.\ndef matrix_multiplication(a, b):\n    for i in range(len(a)"], [0.11167398700155222, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list in two parts.\ndef n_th_even(Input): \n  for evenNum in range(1, Input + 1, 2):\n    print(evenNum)\nThe above code is a function to print the same as the desired format output.\ndef is_pattern_contained(big_string, small_string):\n    patLen = len(small_string)\n    strLen = len(big_string"], [0.11167398700155222, "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list of elements into two parts.\ndef split_two_parts1(list1, L):\n    return [list1[:L]] + [list1[L:]]\nThe above code is a python function to split a list of elements into two parts.\ndef reverse(s,n):\n    rev_list = s[-n:]\n    rev_list1 = s[:-n]\n    rev_"], [0.11142282553610902, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that we'll use to split the array at point of inde. If the array has odd number of elements then we get the first element as the split point and then proceed as usual, else we'll divide it into the first, second and third elements based on which the split will occur.\n\ndef find_index_index(index):\n    f_index=index\n    return f_index\nThe above code is a function to update the first index value"], [0.11119211167638511, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list in O(n) time.\ndef get_selected_positions(list_num):\n    res = []\n    i = 1\n    while list_num > 0:\n        if((list_num & 1) == 1):\n            res.append(i)\n        i += 1\n        list_num >>= 1\n    return res\nThe above code is a function to find the selected positions in a given"], [0.11110115940984927, "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function that splits a sequence into two parts.\ndef minus(Numbers): \n    neg= []\n    negs= set()\n    neg1= set()\n    ne= 0\n    s= 0\n    while s<= len(Numbers)-2:\n        if Numbers[s]< Numbers[s+ 1]:\n            ne = Numbers[s]\n            neg.append(ne)\n            neg1.append(ne)\n"], [0.11082335212650678, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " divides a list as tthe mid point and splits it in two parts.\n\n# Sets and its default functions\n# set is a dictionary with only keys\ns1={1,2,3,3,3}\nprint(s1)\n#convert list to set\nlist1=[1,2,3,4,5]\ns2 =set(list1)\nprint(s1)\n#add multiple elements to set\ns2."], [0.11068307398119094, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\ndef filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function that breaks a list into 2 parts.\n\ndef convert_to_title(M):\n column_title_list = []\n while( M > 0 ):\n        a = int((M-1) % 26)\n        column_title_list.insert(0,a)\n        M = int((M - a)/26)\n return column_title_list\na = 26\nn = int(input(\"Enter a no\"))"], [0.11067066889067359, "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the lists into two equal half.\ndef order_word(str1):\n    str1 = str1.split(\" \")\n    str1.sort()\n    print(\" \".join(str1))\nThe above code is a function to print out the words of string in alphabetical order.\n\n\n# task3\ndef imdb(file_path,file_name):\n    import requests\n    import json\n    from google"], [0.11063201811500593, "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split two lists into 2.\nFunctions written in a file named calculator.py are listed in this cell. When using terminal and using python shell, we might only type the filename of the script name without the extension \".py\". If the filename of the script is abc.py, Type \"python abc.py\", then the code is executed.\nNote: The variable names in this perl script are same as same as in calculator.py function, and"], [0.11061909299841108, "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split list1 into two sublists of equal size.\ndef container(num_container, num_ship):\n    return num_ship - sum(num_container) <= 0\nThe above code is a function to check whether there are sufficient containers in a ship, given the contents of each container, and the number of ships.\ndef even_list(list1):\n    return [i for i in list1 if i % 2 == 0]"], [0.11049379870060716, "def rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two lists. We will call this function once we have read the entire list.\n\ndef check_diff(n1, n2, d):\n    return (n1 != n2 and abs(n1 - n2) == d)\nThe above code is to check if difference between two numbers is as predicted by us.\n\ndef calc_all_diffs(list1, K):\n    for ind, item"], [0.11018423390820878, "import sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function if input list is given split it into two lists of size L and n-L  .\ndef segragate0and1(list1): \n        count0, count1 = 0, 0    \n        for i in list1:        \n            if i == 0: count0 += 1         \n            else: count1 += 1         \n        return [0] * count0 + [1] * count1\nThe above code is"], [0.11018423390820878, "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\n\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to print one half of list and another half in reverse order.\ndef mapping_list(list1):\n m=map(lambda x:x+\" in Pakistan\", list1)\n print(list(m))\nThe above code is a function to print the list with changed elements using map. Output:[note, maps and methods]\ndef question(mark1, mark2, mark3):\n qmessage = lambda mark3 , mark2 : \""], [0.10955435128433251, "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to take a list as input with L as the index value and it returns 2 parts divided at L.\ndef find_nearest_number(A, x):\n  A.sort()\n  return min(A, key=lambda n:abs(x-n))\nExample list given as A = [4, 5, 7, 8, 8, 10]\nThe function gives the number closest to 9\ndef get_min_max(A"], [0.1094981126688506, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list into 2 parts of given length.\nprint(125, type(125), isinstance(125, int))\nThe above code is to check the data type of the variables.\n'''"], [0.10948355165070067, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to divide a list of numbers into two sub lists of two parts. \n\ndef make_list(list2):\n    nums = \"\"\n    for l in list2:\n        nums = nums + \" \" + str(l)\n    return nums[1:]\nthe above code is a python function to make a list item number into a string by \" \" seperation.\n"], [0.10939443057423386, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list into two parts.\ndef uniquedata(li):\n  unique=[]\n  for i in li:\n    if lin not in unique:\n      unique.append(li)\n  return unique\n\n\nli=[1,2,3,3,2,1]\ndublicate_items=uniquedta(li)\nprint(dublicate_items)\ndef isinsorted(a,"], [0.1092199317908285, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two parts.\ndef Find(num):\n    if num == 0 or num == 1:\n        return 1\n    return num * Find(num - 1)\nThe above code is a python function to find the factorial of any number.\n\ndef Pow(a,b):\n    if b == 0:\n        return 1\n    \n    product = Pow(a,b >> 1)\n    product *"], [0.1092199317908285, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a Python function split the list into two parts:\n\nfirst and second.\ndef check_perfect(n): \n\tsum = 1\n\ti = 2\n\twhile i * i <= n: \n\t\tif n % i == 0: \n\t\t\tsum = sum + i + n / i \n\t\ti += 1\n\treturn (True if sum == n and n!=1 else False)\n\n\nThe above code"], [0.10885713761983758, "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is used to split a list into two parts.\ndef splitting_given_list(L, D):\n    return L[:D[0]], L[D[0]:D[1]], L[D[1]:]\nThe above code is used to split a list into three parts specifically.\ndef count_values_in_list(list_of_values):\n    return list_of_values.count(list_of_values["], [0.10794788623441355, "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list of no.s in 2 parts of L no.s each.\ndef reverse_vowels(str1):\n    vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    i = 0\n    j = len(str1) - 1\n    string = list(str1)\n    while i < j:\n        while i < j"], [0.10776851951128819, "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is the function to split the list \"list1\" into two parts.\n\ndef merge_sorted_lists(e, b, result):\n result = []\n i = j = 0 \n L1,L2,L3 = len(e), len(b),len(list1)\n while i < L1 and j < L2:\n        if e[i] > b[j]: result.append(b[j]);j+="], [0.10763544163235089, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list of heterogeneous data into two lists with first L elements as one list\nand next N \u2212 L as other list.\n\n'''"], [0.10705496944936133, "def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\n\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list in two parts and return the 2 parts as a 2-tuple.\n\ndef sum_of_two(p, q):\n    return p[0]+q[0], p[1]+q[1]\nThe above code is a python function to add two coordinate tuples.\n\ndef star(n): \n  if (n > 0) : \n    print( n, sep = \"\", end"], [0.1069558575756266, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into parts in 2 sub list.\ndef str_to_list(s1,s2):\n    x= s1.split()\n    y=s2.split()\n    for i,j in zip(x,y):\n        t = type(i)\n        w =type(j)\n        if t != w:\n            print(t,w)\n        else:\n            print (t"], [0.10646127414994333, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function that finds two parts of a list in a specific location i.e L.\n\ndef minimumSwaps(arr):\n    count = 0\n    for i in range (len(arr)):\n        if arr[i] != i + 1 : # note (i + 1) here since index in python starts from 0 not 1 or else where in mathematics\n                             # I consider everything from 1 .\n                             # if array has 4 elements"], [0.1062581713289628, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two lists \nx       = [1,2,3,4,5,6,7,8,9] \nleft1, left2,right3 = split_two_parts(x, 3)\nThe above code will display   x       = [1,2,3,4,5,6,7,8.9]\nleft1 = [1,2,3]\nleft2=["], [0.10609205744860917, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a tuple into two parts.\ndef add_two_tple_elements(test_tup1,test_tup2):\n    return tuple(x + y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to add two tuple elements by index.\ndef create_dictionary(keyval_list):\n    return dict(x.split(\":\""], [0.10603608782332788, "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list equally into two sublists. \n\ndef is_lowercase(equal):\nstr equal\n     if equal == equal.lower():\n     return true\n     else:\n     return false\nThe above code is a function to check whether a given string is converted to lower case.\ndef is_divisible_by(number1,number2):\nnumber1 = int(number1)\nnumber2 = int(number"], [0.10591632430602382, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list of elements into two lists whose sum of elements is equal.\n\nPositive numbers neverrilate same number hence if we increase or decrease the nuber if difference is same at that point we choose that to flor champion.\nfrom collections import Counter\ndef non_divisible_subset(k, S):\n   count = Counter([num % k for num in S])\n   return min( count[0],1 if k"], [0.10573438021781804, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function splts the list in two equal parts according to length.\ndef all_subsets(s):\n    new = []\n    if len(s) != 0:\n        ss = all_subsets(s[1:])\n        if len(ss) != 0:\n            for i in range(len(ss)):\n                cpy = [s[0]]\n                cpy.extend(ss[i])\n               "], [0.10573438021781804, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to return the two parts of same length.\n'''\n\ndef array_manipulation(n,q):\n    lst = [0 for i in range(n)]\n    for i in range(len(q)):\n        for j in range(q[i][0], q[i][1] + 1):\n            lst[j-1] += q[i][2]\n    return max(lst"], [0.10556382098425107, "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list passed as parameters in two(the first half and the last half).\n'''\nMIVULATION CODING\nLet T(N) be the time in seconds needed to check if a number N has a special form (A squarefree number N is a prime number p where gcd(N,p)=1, or a power of a prime number. If a number has a form such p^k it is said that the power"], [0.10527632468683783, "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list at the index value L .\ndef swap(a, b): \n    a = a ^ b; \n    b = a ^ b; \n    a = a ^ b; \nThe above code is a function to swap a and b.\n\ndef twoStrings(s1, s2):\n    count = 0\n    l1 = len(s1)\n    #print(s1, s2)\n   "], [0.10520544771326854, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list in two parts at an index position.\nFind Minimum difference of maximum and minimum of a list:\n    We are provided elements of a list.\n    We need to find the minimum difference between maximum element and minimum element of a list.\n    \n    \n>>> li = [3, 2, 1, 2, 3]\n>>>\n>>> def max_diff(li):\n>>>     return max(li) - min(li)\n>>>\n>>>"], [0.10520544771326854, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split two parts of a set into two lists using L as the delimiter.\ndef concat_list(x, y):\n    return list(y + x) \nThe above code is a python function to concatenate two python lists x and y.\ndef copy_hash(h) : \n    c = h.values() \n    return c \nThe above code is a python function to return the hash table values"], [0.10507048109763086, "def split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to find two parts among given list of numbers.\n\ndef find_common_prefix(arr1, arr2, len1, len2):\n\ti = 0\n\tj = 0\n\tprefix = \"\"\n\twhile ( i < len1 and j < len2):\n\t\tif (arr1[i] == arr2[j]):\n\t\t\tprefix = prefix + arr1[i]\n\t\t\ti"], [0.1050641605444132, "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\n\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a fuction to split the two parts of a given list.\ndef get_upper_case(sample_string):\n    upper = []\n    for char in sample_string:\n        if char.isupper():\n            upper.append(char)\n    return upper \nThe above code is a fuction to get only upper characters from sample string.\ndef concat_str(str1,str2):\n   return str1+str2"], [0.10505654564188831, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a split a list1 repeatedly into smaller lists with a maximum length of L each time until the list has only one number.\nn = input(\"enter any number\")\nprint(n.split(', '))\n\nThe above code is a integer list to convert a string input list. \ns = [1, 5, 6, 9]\nprint (s)\nprint (type (s))\nm =list(s)\nprint (m)\n"], [0.10482942926858664, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to separate elements on both sides of the list.\ndef find_divisors(N):\n    divisors = []\n    \n    for index in range(2,N):\n        if N%index==0:\n            divisors.append(index)\n    \n    return divisors if divisors else '{} is prime'. format(N)\n\nThe above code is a function to find the divisors"], [0.10469783466129408, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split two parts of lists difference lesser than or equal to two and a common part.\n\ndef prefix_average1(S):\n    n = len(S)\n    A = [0] * n\n    for j in range(n):\n        total = 0  \n        for i in range(j + 1):  \n            total += S[i] \n        A[j] = total / (j + 1)  "], [0.10419442955148671, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to split a list by computing index L, where list[L] is the first item of second part.\nlst1 = [1, 2, 4, 7, -9, 5]\nprint(split_two_parts(lst1, 3))\n\n# Mathematical Puzzles\n# The above cell is to split a list by computing index L, where list[L] is the first item of second part.\nfrom datetime import datetime\n"], [0.10393780115655266, "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list in two equal parts.\n'''\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef len_list(lst):\n    count = 0\n    for i in lst:\n        count += 1\n\n    return count\n\ndef mean_list(lst1):\n    return(sum(lst1)/len_list(lst1))\n\ndef var_"], [0.10392529938932564, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits given sorted array after the K'th element.\n\"\"\"\n\"\"\"\nQuestion:\n    Given two strings as strings parameter inputs, \"First String\" and \"Second String\". \n    Write python code, \n        to print second string in the first string, \n        and first string, second string in seperate lines. \n    Also the order of characters in each line should match the second string. \nFull form of abbreviation should also match.\n"], [0.10388886771932057, "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a  to split given list into 2 parts with different L. \n'''\n'''\nfrom math import sqrt\npole = float(input(\"Enter The Value Of Pole \"))\nvir_radius = float(input(\"Enter The Value Of Virtual Radius \"))\nparall_len = float(input(\"Enter The Value Of Paralel length \"))\ncentr = float(input(\"Enter The Value of Centre \"))\n\ndef ab_Length"], [0.1037478740516971, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split an iterable (ie. list) into 2 distinct lists, given a partition point.\nThere are 2 versions of this function:\n1. using quick sort partition\n2. using a linear two pointer technique\n\n\"\"\""], [0.10365849917971094, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a sequence into two sequences of given length. You can solve the above question by coding.\"\"\"\n\nlist3=[\"Cat\", \"Bat\", \"Sat\", \"Mat\"]\nlist1=[\"Cat\", \"Bat\", \"Sat\", \"Mat\"]\nlist2=[\"Cat\", \"Bat\", \"Sat\", \"Mat\",\"All\"]\nlist3 = [i for i in list3 for j in list1 if i==j] + ["], [0.10354981973773401, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python split two parts into two lists. If L==0 then we should not consider the first list, All elements of list1 from position 0 to L-1, correspondingly list2 will not have values from position L to len()-1th positions in list1.\n\nimport math \ndef queryLeft(L, R, index, tree, n): \n  \n    # (L, R] segment includes all elements \n    # of left"], [0.103422281294025, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is returning 2 parts of the list.\n\ndef join(str1):\n    out =\"\"\n    for i in range(0,len(str1), 4):\n        temp = str1[i:i+4]\n        out = out + temp[::-1]\n    return out\nThe above code is taking the list convert it to a string and finally reversing it. \ndef listComp_gener():\n\tout = \"\"\"res ="], [0.10334800759566917, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split to 2 parts.\ndef get_ranked_ids(pred_dict, engaged_with_user_id, user_id, rank_size, threads_no):\n    \"\"\"\n    Splits the Scores into chunks and rank them\n    :param pred_dict: predictions of engagements\n    :param engaged_with_user_id: ids of posts that have been engaged with returned from method in engagement module\n    :param user_"], [0.10313094806135716, "def my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to user defined indexing to split a list\nIf both the split is made at specific places in the original list, it would look like as follows:\nlist1 = [3, 2, 3, 2, 1, 2, 3]\n\nlist_split(list1, 5)\nprint(list1)\nthe above code is a function to split two lists to known two list lengths\n\ndef rsum(T):\n    if T =="], [0.10308533002699703, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the sting from $Lth position.\ndef skips(list1,S):\n  return list1[::S]\nThe above code is a function to get out every S-th element of the list.\ndef convert_mins_to_secs(C):\n  return C*60\nThe above code is a function to convert minutes to seconds.\n\"\"\""], [0.10283878829908667, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a mixed up list into two lists.\ndef check_vowels(string, vowels): \n    sen = set(string.lower())\n    ans = sen.intersection(vowels)\n    return len(ans)\ndef strings_common_char(s1, s2):\n    dict1 = dict.fromkeys(s1, 0)\n    dict2 = dict.fromkeys(s2"], [0.10269309709926884, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " to split a list L into two parts, first L1 elements and last L2 element.\n\ndef mincost(list2, L2, sum2, i, j, km, cost):\n    if (i>=L2 or j >sum2):\n        return 0\n    ke = km[i][j];\n    if (ke == -1):\n        if(list2[i] <= j):\n            val1, val2"], [0.10264804870021633, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split list1 into two parts.\n\ndef get_even_list(list2):\n return [item for item in list2 if item%2 == 0]\nThe above code is a function to find even numbers from the inputted list.\n\ndef my_enumerate(list1, list2):\n    combine = [x+y for x,y in zip(list1,list2)]\n    return combine\nThe above"], [0.10226903475482113, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split three lists into two different tuples with one element of smallest value.\ndef split_three_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function to split three lists into two different tuples with one element of smallest value.\ndef split_counted_numbers(seq):\n    counts = {}\n    for el in seq:\n        counts[el]"], [0.101938015736279, "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " will split a list into the first half and second half.\ndef find_factors(num): \n\tfactors = list()\n\ti = 2\n\twhile (i * i <= num): \n\t\tif (num % i == 0): \n\t\t\tfactors.append(i)\n\t\t\tnum = num // i \n\t\telse: \n\t\t\ti += 1\n\tif (num > 1):"], [0.10183928781588517, "def pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to find splitting indices into 2 equal parts such that sum of the split lists are equal.\n\ndef mailing_labels(persons):\n    for person in sorted(persons, key=itemgetter('name')):\n        print(f'{person[\"name\"]}')\n        print('{0}: {1} {2} {3} {4}'.format(person['name'], person['street'], person['"], [0.10182318992099575, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a given list of any length(list1) into two (L) parts.\ndef duplicates(list1: list) -> list:\n    empty_list=[]\n    for x in list1:\n        if list1.count(x)>1:\n            if not x in empty_list:\n                 empty_list.append(x)\n    if len(empty_list) > 0:\n        return empty_list\n   "], [0.10132829901903807, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to make to lists of equal size and put it the elements into each list alternatively.\ndef split_two_parts(cost):\n    n=len(cost)\n    count=0\n    for i in range(1, n):\n        count+=min(cost[i-1] ,cost[i])\n    return count\nThe above code is a python function to find the minimum cost so as to change any one value in the array"], [0.10117617305917741, "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\n\ndef remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\nThe above code is a python function to remove odd numbers from a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split the list in two parts.\ndef square_and_sort(listin):\n    print sorted([x*x for x in listin])\n    return sorted([x*x for x in listin])\nThe above code is to return square of numbers in aalist and sort the list.\ndef divide_number(x, y):\n    return x/y\nThe above code is to calculate division of two numbers.\ndef"], [0.10088956853230219, "def digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\n\ndef Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list according to the method mentioned above.\n\nclass MaximumLength:   \n    def maxLength(self, numbers, sum_L, sum_R): \n        \n        length = len(numbers)  \n  \n        if length == 0: \n            return False\n  \n        for i in range(length): \n            s_left, s_right = split_two_parts(numbers, i"], [0.10070628679682404, "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts when given a length of the second list.\n"], [0.10032223186180954, "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndef square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " must accept List as an input and n (positive integer) as a parameter and returns two lists as an output. N is (len(list1)/ 2) if it can be divided in 2 equal parts else N=(len(list1)/ 3).\ndef IsLoggedIn(id):\n    bool = id >= 2**31\n    return bool if bool else print('Invalid input.')\n    \n    \n    \n    \n    \n    \n    \n    "], [0.10011437153575645, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list into two different lists.\n\ndef QS(list1):\n    if len(list1) < 1:\n        return list1\n    else:\n        p = list1.pop(0)\n        list1_lt =[]\n        list1_ge =[]\n        for i in range(len(list1)):\n            if p > list1[i]:\n                list1_lt.append(list1["], [0.10010514641192542, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into 2 parts of desired length.\ndef A(m, n):\n    if (m == 0): \n        return n + 1\n    if (m > 0 and n == 0): \n        return A(m - 1, 1)\n    if (m > 0 and n > 0): \n        return A(m - 1, A(m, n - 1))\nThe above code is a python"], [0.09994058448982948, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a Python function to cut a list's same length of two parts.\n\nfrom itertools import groupby\nfrom collections import defaultdict\ndef remove_whitespaces(seq):\n    return \"\".join(letter for letter in seq if letter is not ' ')\nThe above code to replace all whitespace characters at the beginning and  \nend of a string with no space:\n\ndef calculate_gc_content(sequence):\n    return round(("], [0.09964554753195064, "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is used to split the list (list1) into \"two\" lists given the length L.,\n  \n.\n\n\n\nFind all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\n\n\nNote:\nAll numbers will be positive integers.\nThe solution set must not contain duplicate combinations.\nExample:\n\nInput: k = 3, n ="], [0.09945666157359548, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function split a list into 2 parts without any comparison between list elements.\ndef move_element_to_end(array, elem):\n    idx_1 = array.index(elem)\n    idx_2 = len(array) - array[::-1].index(elem) - 1\n    array[idx_1], array[idx_2] = array[idx_2], array[idx_"], [0.0993044340012591, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to split a list in to two parts.\n '''\n\n# The above functions in a class\nclass Tricks(object): \n    def check_frozen(self):\n        thefinallist = [1,2]\n        print(thefinallist)\n        anotherlist = [\"test string\"]\n        print(anotherlist)\n        \n    def check_mutability(self):\n        tm = (\"Hello\", \"World\", \""], [0.09920198212333492, "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split given list in two halfs, need to create main.py, add global vairables such as question from options, code from the question\nimport os\nimport pathclass\nfrom pathlib import Path\ndef get_size(path: str = '.'):\n    folder_size = 0\n    for (path, dirs, files) in os.walk(path):\n        for d in dirs:\n            folder_size +="], [0.09845178055302743, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to divide a given list into two lists with the length (L) equal to the number entered.\n"], [0.09818487592495692, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list in two parts.\nPython program to find size of binary tree in C++\n\nint size(Node *root){\n    if (not root) return 0;\n    return size(root->left) + size(root->right) + 1;\n}\nThe above python code is the program to find the size of binary tree. It can also be implemented in other languages such as C++ and Java.\ndef width("], [0.09738986622875954, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " defines a function to split a list in two parts.\nThe above code can also be written using slice as:\n  python = [10,20,30,40]\n  first, second = python [:2], python [2:]\nL = [10, 4, 6, 8, 3, 4, 5, 7, 7, 2]\nlist1 = [1,2,3]\nlist2 = [3,4,5]\ndef"], [0.09738986622875954, "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list in 2 parst with the desired index L.\n\ndef shuffle_part(first_part, second_part, first_freq, second_freq):\n    flag = 0\n    m = 1\n    max_freq_sum = 0\n    while ( m != second_freq ):      #while not to move more than 1 away \n        flag = 0\n        list1 = list(first_part"], [0.09720001201705973, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is Python code to find two list with first two elements and third to last elements of a given list.\nIn cryptography, a Caesar cipher is one of the simplest and most widely known encryption techniques. It is a type of substitution cipher in which each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. For example, with a left shift of 3, D would be replaced by A, E would become B, and so on.\nThe below code"], [0.09698734990909887, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts.\ndef find_successive_numbers(x,y):\n     x2=[]\n     y2=[]\n     x1=list(range(1,x+1))\n     y1=list(range(1,y+1))\n     for i in x1:\n        for j in y1:\n             if(j-i==1):\n                 x2.append"], [0.09665483845704156, "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function split the list in 2 given lengths of cut.\n\nimport os \nimport sys\n\ndef p2d(path): \n    d = list()\n    \n    for i in os.listdir(path): \n        k = os.path.join(path, i)\n        \n        if os.path.isdir(k): \n            d.append(i) \n            \n    return d\n\n\n"], [0.09592844029807135, "def add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " returns the two list after splitting a list.\ndef generate_primes(N):\n\tP=[True]*N;\n\tprime = 2;\n\tnum = 0;\n\twhile prime*prime <= N:\n\t    if P[prime] == True:\n\t        for i in range(prime*prime,N,prime):\n\t            P[i] = False\n\t    prime +=1\n\tfor i in range(2,"], [0.09592844029807135, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " splits a list, whatever the length and position is given.\nimport itertools,random\ns = \"abcde\"\nnum = 5\nmyperm = itertools.permutations(s,num) #print all print!-too time consuming,need exclude dupliacate\nmyperm2 = (list(perm) for perm in list(myperm))\nshuffle_perm = itertools.permutations(list(range(1,7)),"], [0.09578087512617586, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is used to split two list and gives two lists as output.\ndef get_anagrams(word_list, pattern):\n  return sorted([word for word in word_list if sorted(word) == sorted(pattern)])\nThe above code is used to split two list and gives two lists as output.\nimport re\nsf = \"/home/wwmm/Desktop/sample_file.txt\"\ndata = (open(sf, \"r\").read"], [0.09555355983473691, "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a two even sized partitions of a list.\ndef egg_dropping_game(n, k):\n   # A 2d table to store the number of moves: \n    # needed in worst case with n eggs and k floors\n    INT_MAX = 10000\n    dp = [[0 for x in range(k+1)] for x in range(n+1)] \n    for i in range(1, n+"], [0.09467296118396451, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a Python program to split a variable length string into variables.\n\n def is_Anagram (s, t):\n       t = list(t)\n       return cmp(sorted(s), sorted(t)) == 0\nThe above code is a python function to check whether two strings are anagram of each other or not, i.e. they contains same set of characters.\n"], [0.0943250558797354, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two sublists - different size.\ndef dens_join(tup_1, tup_2):\n    if tup_1:\n        if tup_2:\n            if len(tup_1) > len(tup_2):\n                tup_1[len(tup_2):]=('',)\n            else:\n                tup_2[len(tup_"], [0.09415105155623625, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split an array if a given subset is removed.\ndef sumsOfSubset(nums, value):\n    memo = [0] * 31\n    memo[0] = 1 \n    for i in range(len(nums)): \n        for j in range(value, nums[i] - 1, -1): \n            memo[j] = memo[j] + memo[j-nums["], [0.09388521513027816, "import math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the list in two halves. The function should return both halves of a list and the middle index'''"], [0.0938187774345194, "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " find the two lists which are disproportionate by variable L.\ndef find_the_digits(arr):\n    res = [str(i)*n for i,n in enumerate(map(int,str(max(arr)))) if i<=max(arr)]\n    return res\nThe above code find the digits in the array according to the value of its elements.\ndef check_prime(n):\n    if n > 1:\n        for i"], [0.09336783566975516, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list n sublists of nearly equal sums.\n\n\n\"\"\"\n\n'''\n1 - Encode\nfor every[i] in list:\nif i==find:\n    list[find]=list[find]+1\nelif i!=find:\n    if j>find:\n        list[find]=list[find]+1\n    else:\n        list[i]=list[i]+1\n'''\nclass"], [0.09151221672713714, "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a given array into 2 parts each of maximum size L.\n\ndef split_into_two(A, N):\n    ASorted = sorted(A)\n    middle = sum(A) / N\n\n    listOne, listTwo = list(), list()\n\n    value, i, j = 0, 0, 0\n\n    while i < N and j < N:\n        while j < N and value < middle:\n           "], [0.09024429467728153, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split array in such a way that states that equal number of elementsl one element go to left sub array and one element go to another subarray\ndef cumulative_Sum(n): \n    return n and n + cumulative_Sum(n-1)\nThe above code is a recursive function which returns cumulative sum of that value.\n\n\n# \u2022 Anagram Sample Output\u00b6\n\n# Uses python3\nfrom random import randint\nfrom random import"], [0.0898817511545755, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " returns two parts from one list.\nsquare = lambda x: x * x\ndef square(x): return x * x\nReverse a string in place.\nclass Reverse():\n    def __init__(self, list1):\n        self.lst = list1\n        self.lstrev = []\n\n    \n\n    def rev(self):\n        i = 0\n        while i <= len(self.lst):\n            self."], [0.08918989080226081, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which tris to find a partition point(index)\nMachine learning pipelines\nA pipeline object runs the operations on one dataset,in specified order,\n and then runs the operations on the second dataset.\n That is the way pipelines become helpful in Machine learning.\nLet us define an example function to create a pipeline object with\n trasformation operations:\n\n# create a pipeline object with transformation operations\ndef pipe_line():\n x = [0, 1"], [0.08906028563169416, "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which splits two subarrays.\nbool is_adjacent(string, L, R):\n  return (R - L == 1)\nTo check if adjacent positions are a match\nbool are_matching(string, L, R):\n  return (string[L] == string[R])\nTo check if two adjacent positions are matching.\ndef expand(string1, n):\n  string2 = \"\"\n  i = 0"], [0.08739435988441797, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " returns both halves of the list. Is all the changing logic in one single, little function\u2026 not just in several million copy-pastes.\nAnswer 3\nCode 1\n    def binary_search(li, x):\n        l = 0\n        r = len(li)\n        while l <= r:\n            mid = l + (r - l) // 2\n            if li[mid] == x:\n                return mid\n            elif li["], [0.08707901118595304, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split lists element-wise.\n\ndef get_middle(list2, L):\n    return list2[:L:L-1]\nThe above code is a function to get lists element-wise.\ndef construct_integer(list2, L):\n    str_num=''\n    new_list = list2[:L]\n    for x in new_list:\n        str_num +=str(x)\n"], [0.08396763806438481, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to split list1 into two parts based on L.\n!pip install import_ipynb\nfrom Model_funcs_day9_1 import total_2_decimal\nfrom Model_funcs_day9_input_3 import month_names, month_number_to_name\nfrom Model_funcs_day9_5 import read_dictionary, lookup_key, lookup_value\nfrom Model_funcs_day9_"], [0.07986983518372605, "def armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts of L and N-L size respectively.\n'''"], [0.07886707338163133, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two parts given length of first part.\n\"\"\""], [0.07703851131597285, "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python code to split list in 2 parts.\ndef findKey(d1, value):\n    A=[]\n    B=[]\n    for key, val in d1.items():\n        if val == value:\n            A.append(key)\n        else:\n            B.append(key)\n    \n    if len(A)<=len(B):\n        return A\n    else:\n        return B\nThe"], [0.07323516146724364, "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is an example of split_two_parts: splitting a given list1 into two parts each of which is bigger than or equal to L. \n"], [0.06625236525514908, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function that will split the input 2D array in 2 smaller arrays that each contains half of the original array.\n"], [0.06513191590976908, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given given list as two parts with respect to the given index as L.\n"], [0.06445358298659049, "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " will splice a list into 2 parts. Assumption that L< len(Test)\ndef stock_pred(data_df,train_days=30,chart='no'):\n  filepath = os.path.abspath('.credentials')\n  CLIENT_ID = json.loads(open(filepath, 'r').read())['web']['client_id'] #'Change To your client id'\n  CLIENT_SEC"], [0.06392736360258935, "def toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the contents of list1 into two lists such that the difference between their lengths are minimum.\n"], [0.06289245970650706, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " helps split a list into two parts.\ndef print_the_path(arr):\n    for i in range(len(arr)):\n        print(arr[i])\ndef print_paths(arr,mark,i,n):\n    if(i==n):\n        print_the_path(mark)\n        return\n    mark.append(arr[i][0])\n    print_paths(arr,mark,i+"], [0.062349289111153325, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list elements into only two parts with ratio given L/R.\n\n\"\"\""], [0.06101380620412619, "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\n\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into a list of 2 parts having equal sum."], [0.05984833966203577, "def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which takes a list and returns two parts of the list.\n'''"], [0.059197189247476405, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given two lists in the equal portion based on the given length.\n'''"], [0.056641951752458154, "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list (list1) in two parts up to a given length (L).\n\n'''"], [0.055523492358947914, "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the elements of a list in 2 parts according to the specified L.\n\n'''"], [0.05505405806280798, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which split a given list with the given value L\nif (remainder ==0):\nfirst_digit = first_Digit(remainder)"], [0.054988661128875974, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " gives arbitrary list in tuple format.\n\ndef shuffle_parts(parts_tuple): \n\tparts_tuple = sorted(parts_tuple, key = lambda element: len(element)) \n\tres = (), () \n\tif bool(parts_tuple[0]): \n\t\tres = ((parts_tuple[1][0], ), (parts_tuple[0][0], )) \n\telse: \n"], [0.05387500650495177, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a given list into two lists of L length \n\n"], [0.05383726193620459, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two equal parts according to the size specified.\n"], [0.0516881992830906, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split given list into two different list with given length.\n\n"], [0.05036276125787199, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split the given list on the basis of length into 2 parts."], [0.05028642257214281, "def Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\n\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to split a list into parts of fixed length.\n\ndef sort_two_list(list1,list2):\n  ndict={}\n  nlist=[None]*(len(list1)+len(list2))\n  nlist[::2]=list1\n  nlist[1::2]=list2\n  aux_list=nlist\n  \n  else:\n    if len(list1)<=len(list"], [0.0481618923789711, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a program to split a string into 2 parts at mid index.\n\"\"\"\nimport pandas as pd\ndataFrame= pd.read_csv('https://query.data.world/s/rfhjkdpnqv2hg6cwvj56wj6um5sr5c')\nprint(dataFrame.head(15))\nprint(dataFrame.tail(10))\nprint(dataFrame[0:6])"], [0.04649345714349544, "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split any list(banana) into lists in half(apple).\ndef tri_dup(list1):\n    if list:\n        first=list1[0]\n        last=list1[-1]\n        middle=list1[1:-1]\n        print(list,list1[1:-1],first,last,first+last,first+last+first,last+first+last,sep='"], [0.0440701414068803, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into two parts with given length.\n"], [0.04045294384290522, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to split a list into 2 equal parts\nimport torch\nx1= torch.tensor(data=4.,device='cuda',requires_grad=True)\na=torch.tensor(data=2.,device='cpu',requires_grad=True)\nb=torch.tensor(data=1.,device='cpu',requires_grad=True)\ndef expression1(x1,a,b):\n    z=(("], [0.036889165897893636, "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to divide a given list, L number of elements into two parts.\n"], [0.03625857933081539, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which divides a list into 2 equal parts or approximate equal parts.\n"], [0.035955559479027385, "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split list into two lists of lengths equal to L.\n"], [0.03537039567971523, "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is used to divide list into two peices in an equal way with no repetition.\n"], [0.03361412078400862, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split any list into two sublists of given length. \n"], [0.0335471831427965, "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function which breaks down a list of elements into two list.\n\nhttps://stackoverflow.com/questions/212358/binary-search-bisection-in-python\n    \n    \n    \n"], [0.03135964996499572, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list of numbers into two different lists. \n'''"], [0.026965672584138803, "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a python function to split a list into two parts\n"], [0.015371199832910014, "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is a function to split a list into 2 equal parts.\n"], [0.009025502444229732, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to split a list into two parts.\n'''"], [0.008620925578131121, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " returns two halves from the list provided during function call.\n"], [0.003073159908552078, "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to divide one string into two uni\n"], [0.00046027667571729215, "import math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code", " is to print given string lengthwise.\n"]]}
