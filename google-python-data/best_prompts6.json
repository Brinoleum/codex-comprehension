{"prompt": {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 756, "prompt": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php", "code": "import re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert text_match_zero_one(\"ac\")==False", "assert text_match_zero_one(\"dc\")==False", "assert text_match_zero_one(\"abbbba\")==True", "assert text_match_zero_one(\"dsabbbba\")==True", "assert text_match_zero_one(\"asbbbba\")==False", "assert text_match_zero_one(\"abaaa\")==True"]}, "queries": [[0.5558227128840585, "import re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that matches a string the has an 'a' followed by anything, once or none.\n"], [0.39363849012340835, "def remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that matches a string that has an a followed by one or more 'b'.\ndef sta_match(test_str, K, S_L):\n    \n    for word in S_L:\n        if \"#@!\" in word:\n            match=word\n            window_size= len(match)+2\n            test=test_str.split()\n            for i in range(len(test_str)-window_size+"], [0.3690329928994729, "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches a string that has an \"a\" followed by zero or one 'b'.\n"], [0.352060550162214, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks if the string has an 'a' followed by one or more 'b's.\n\nre.search(ur'\\w*le[pn]_?[sz]e([aoy]|u)\\w*', ur'Leapyear, Lapse, Leper, Lepidopterology, Leprosy, Leprous, Levee, Lovable, Lover, Loving, Love')\n# returns this tuple\n('Leapyear, L"], [0.3224762933356572, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check Checking that a given text contains an a followed by one or more b's.\n"], [0.29526890693684466, "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that matches a b followed by one or more 'a'.\nimport re\nregex = r'(\\d{1,2}[\\/-]\\d{1,2}[\\/-]\\d{2,4})'\nprint(re.findall(regex,text))\ndef extract_date(input):\n  return re.findall(regex, input) \nThe above code is a function that extracts the"], [0.2807736285435751, "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that matches a string that has an 'a' and continues to be followed by any number of 'b's.\nimport re\ndef text_search(text):\n        patterns = [ 'fox', 'dog', 'horse' ]\n        for pattern in patterns:\n                print('Searching for \"%s\" in \"%s\" - ' % (pattern, text))\n                if re.search(pattern,  text):\n                        print('MATCH"], [0.2611749408662299, "def Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that matches a string that has an a followed by zero or more 'b'.\n\nimport re\ndef text_match_one_more(text):\n        patterns = 'ab{2,10}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by two to ten 'b'.\n\n\nimport re\ndef text_match_non_greedy(text"], [0.2606555671809056, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that matches a string that has an a followed by zero or one 'b'\nimport re\ndef text_match_starts(text):\n        patterns = '^[a-z]+[1-9]$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to match a string that has an a followed by zeros or more  b"], [0.24730436025733266, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that matches a string that has an a followed by zero or one b's.\n\nimport re\ndef text_match_consecutive(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by zero or more b's. \nimport re\ndef text"], [0.24686863811162046, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that matches a string that has an a followed by zero or one 'b'.\nimport re\ndef text_match_exactly_one_a(text):\n        patterns = 'ab{3}?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is is a function that matches a string that has an a followed by exactly three b's.\ndef match_"], [0.238024513568403, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to match strings that contains characters a followed by one or more b.\n\n\n\n#Validate IP Addresses\nimport re\ndef valid_ip(ip):\n        exp='^([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.' \\\n"], [0.19589543265074758, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match a string which consists of either 'a' followed by one or more b's or only zero or one 'a's in it.\nimport re\ndef text_match_zero_one(text):\n    patterns = 'ab{2,3}?'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n    The above code is a"], [0.19363109955919347, "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to match a string which has an a followed by zero or one b.\nimport re\ndef text_match_zero(text):\n        patterns = 'ab*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string which has an a followed by zero or more b's.\nimport re\ndef text_match_one(text):\n"], [0.19263747935030454, "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regex to match the string \"ab\" with a string that has zero or one \"a\" present in it. https://www.geeksforgeeks.org/c-program-match-search-one-or-many/\n'''\n\n###https://stackoverflow.com/questions/9319317/quick-and-easy-file-dialog-in-python"], [0.18589376191700693, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)\nThe above code is Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches with a string which has start character \"a\" followed by one or more occurrence of \"b\", l\n\"\"\"\nx=2\ny=3\nz=x\nx=y\ny=z\nprint(x,y)\n\n\ndef trouble_sort(x):\n\n    for i in range(len(x)-1,0,-1):\n        for j in range(i):\n            if x[j] > x[j+1"], [0.18263583582007686, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that defines the text search for the expression \u2018ab+?\u2019. \nSimilar to the above problem, replace the \u2018x\u2019 with an expression a followed by z or b, followed by one or more \u2018x\u2019.\n\ndef check_y(text):\n  res = False\n  if text:\n    if text.startswith('a'):\n      if len(text.split('a')[1"], [0.18132900026039886, "def even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function is Regular Expression which checks whether a string satisfies the given regular expression containing \u2018ab\u2019, matches a string that has an \u2018a\u2019 followed by zero or one \u2018b\u2019. \ndef even_num(upper):\n    nums = []\n    for num in range(upper):\n        if num % 7 == 0 and num % 5 == 0:\n            nums.append(str(num))\n    return"], [0.17746062513114222, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to check if a string has 'a' followed by 1 or more 'b's.\n\"\"\"\n\n\nimport re\n\ntxt = \"The rain in Spain\"\nx = re.search(\"^The.*Spain$\", txt)\nprint(x)"], [0.17733509570012504, "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check one or more occurance of character 'a' followed by one or more occurance of character 'b'.\n\ndef text_match_zero_or_one(text):\n        patterns = 'ab?'\n        if re.search(patterns, text):\n                return True\n        else :\n                return False\nThe above code is a function to check zero or one occurance of character 'a' followed by 'b'.\n\n"], [0.1746203608175149, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression that checks for a string that has an a followed by zero or one 'b's.\nimport re\ndef text_match_special(text):\n        patterns = '\\w(non+o)\\w?\\so'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\nThe above code is a regular expression that checks for 'nono"], [0.1723814249574884, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\nfrom array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if the string matches one or more occurences of the character \u2018a\u2019 followed by one or more occurences of the character \u2018b\u2019.\n\n!/usr/bin/env python\nimport ast\nclass CodeAnalyzer(ast.NodeVisitor):\n        def __init__(self):\n                self.loaded = set()\n                self.stored = set()\n                self.deleted = set()"], [0.1723814249574884, "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks for a string with an a followed by one or more b\u2019s.\n\ndef html_match(text):\n  regex = r'\\s*[Hh][Tt][Mm][Ll].*'\n  if re.search(regex, text):\n    return True\n  else:\n    return False\nThe above code checks whether the string given is a html tag or not.\n\nimport re\n\n#correct ="], [0.16579665711398328, "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if a letter(here \u2018a\u2019) succeeds by one or more \u2018b\u2019.\nlist1 = [(1,2,3),[1,2],['a','hit','less']]\nlist2 = ['b','c','d'] \nlist4 = [(1,2,4),[1,22],['a','hit','less']]\nlist3 = [] \nfor item in list1"], [0.16241903638047844, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that checks whether a string contains the 'a' character followed by a minimum of one and a maximum of any number of 'b' characters."], [0.15927308042379043, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that matches zero or one instances/occurances of a regular expression.\n\n'''\n############### Q3 ####################\nimport re\n\ndef is_allowed_specific_char(string):\n    charRe = re.compile(r'[^a-zA-Z0-9.]')\n    string= charRe.search(string)\n    return not bool(string)\n\n#######################################\n\n############"], [0.15799104062665115, "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that matches strings having 'ab' using regex but accepts 'ac' too.\nimport re\ndef which_to_upper(str): \n\tpatterns = '^[aeiouAEIOU][A-Za-z0-9_]*$'\n\tif re.search(patterns,  str):\n                item = re.sub('(^[aeiouAEIOU]|[aeiouAE"], [0.15772569316704113, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to find if a search string starts with a one or more alphabets 'a' followed by any characters\nimport re\ndef text_match_lower_upper(text):\n        patterns = '[a-z]+[A-Z]{3}[a-z]{1}[A-Z]{3}[a-z]+'\n        if re.search(patterns,  text):\n                return re."], [0.15532240443174813, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that matches a pattern.\nimport re\ndef text_match_count(text):\n        patterns = 'ab{3,5}?'\n        if re.findall(patterns,  text):\n                return 'found word:%s'% patterns\n        else:\n                return 'not found!\\n'\nThe above code is a function that matches several patterns and returns an error if no matches were found.\nimport re\ndef"], [0.15387506990459465, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\ndef validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function that checks for a match of  strings of the form: a followed a letter boundary,  followed by one or more \"b\"s, ignoring  other text.\n\nimport re\ndef text_match_split(text):\n        patterns = '\\\\$'\n        if re.findall(patterns,text):\n                return True\n        else:\n                return False\nThe above code is a python function that checks for a match of"], [0.15349902747297048, "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\nThe above code is a python function to remove odd numbers from a given list.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " finds whether the text contains prefix a followed by one or more b.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code finds whether the text contains prefix a followed by 0 or 1 b.\n\nimport re\ndef text_match_two_exclude_two(text):\n       "], [0.15188280663081974, "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that matches a \u2018zero or one\u2019 occurrence of pattern. Think of is like simple match which matches a pattern in the whole string.\n\nimport re\ndef text_match_zero_or_more(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a \u2018zero or more"], [0.15080654726702894, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that matches a word at the beginning of a string, the '\\A' expression.\nimport re\ndef text_match_non_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that detects whether a string starts with 'a#' and ends with 'b'.\nimport re\ndef"], [0.15031884483136482, "def all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression to check whether a string starts with the word \u201cab\u201d, followed by one or more \u201cb\u201d. The output would be True if pattern is matched otherwise False.\n\nimport re\nr=[]\nfor i in range(1,101):\n    text = str(i)\n    text = list(text)\n    text = [int(e) for e in text]\n    song = [sum(text["], [0.14984414334048082, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check whether the string contains any a followed by one or more b'\nimport re\ndef text_match_zero_or_more(text):\n        patterns = 'ab*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to check whether the string contains all a followed by zero or more b\u2019s\nimport re\ndef text_"], [0.14764465893817846, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that checks whether a string starts with 'a' followed by any number of 'b's.\n\ndef changeXY(text):\n        patterns = 'Y+?'\n        replace = 'X' * len(re.findall(patterns, text))\n        \n        if len(replace) > 0:\n                replace = replace.replace(\"Y\",replace,\"Y\")\n                return re.sub(patterns, replace, text)\n"], [0.14648416241775247, "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is function to find the string that has an a followed by zero or one 'b'.\nimport re\ndef text_match_zero_or_more(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python program to find a string can start with 'a' follwed by \nzero or more b's.\nimport"], [0.1419911405061855, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function that matches ab with zero one.\nprint all matches of [a-y0-9].\nimport re\ndef text_matched(text):\n        string = '(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|0|1|2|3"], [0.14096089484267918, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\ndef union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks the first character of the string and matches its occurrence agains patterns a followed by one or more occurrence of b.\nimport re\ndef text_match_zero_or_more(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code checks the first character of the string and matches its occurrence agains patterns a followed by zero or more occurrence"], [0.14087492862755052, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that takes a text strin and returns True if the text matches with the pattern \"ab+?\", which means it contains the strings 'a' followed by either nothing, or more than one 'b'.\nimport re\ndef text_match_email(text):\n        patterns = '^\\w+[\\w\\.]*@\\w+.\\w{3}$'\n        if re.search(patterns,  text):\n                return"], [0.1406487196016156, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to test whether a string ends with zero or one occurence of \"ab\" string.\n"], [0.13507819269910054, "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression to match a string with 'a' followed by any character.\n\ndef twiiters(message):\n message = re.sub(r'^https?:\\/\\/.*[\\r\\n]*', '', message, flags=re.MULTILINE)\n message = re.sub(r'^@.*[\\s]*', '', message, flags=re.MULTILINE)\n preprocessed"], [0.1341948193308683, "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to determine whether a given text matches the pattern. The first box of the pattern should contains at least a \u2018a\u2019 followed by one or more \u2018b\u2019 characters.\n\nYou have to remove consecutive duplicates from the strings which are passed as the input. For example , var=\u201dacaaabbbacdddd\u201d, then the output should be aaabbbcdd not aaabac\nThe above code will remove the consecutive dupl"], [0.132670101871592, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function using regular expression to match text 'a' followed by any no. of 'b's. \nimport re\ndef Check_email(string): \n    if re.match(r'[a-zA-Z0-9_-]+@+[a-zA-Z0-9]+\\.+[a-zA-Z]{1,3}$', string):\n        return True\n    else:\n       "], [0.13122730230891885, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches a word containing 'ab' next to it.\n\ndef pattern_ten(text):\n    patterns = '[+-]?\\d*[A-Z]+[A-Z]\\d+'\n    if re.findall(patterns, text):\n            return True\n    else:\n            return False\nThe above function that matches a word containing numbers, letters and +|- next to it.\n\nimport re \ndef solution"], [0.13091495324225905, "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\n\ndef combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression that matches one or more instances of \u2018a\u2019 followed by a single \u2018b\u2019.\n\nimport re\ndef text_match(text):\n    patterns = 'ab?'\n    if re.search(patterns,  text):\n                return True\n    else:\n                return False\nThe above code is a regular expression that matches either one or no 'a' followed by a single 'b'.\n\nimport re\n"], [0.12931517364220813, "def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks if the string has 'a' followed by 'b' one or more times.\ndef text_match_zero_one(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nCheck if the string has 'a' followed by 'b' zero or more times.\ndef print_json(json_data):\n  for i in json_"], [0.12928900102564236, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches all strings having an \"a\" followed by zero or one \"b\".\nimport re\ndef text_urdu_sms(regex_str):\n        patterns = '[\u0985-\u0994]*'+'\\s'+'[\u0985-\u0994]*'+'\\s'+'\\d{4}'+'\\s'+'\\d{2}'+'\\s'+'\\d{"], [0.12833489052631453, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that checks whether a string contains the 'a' character followed by one 'b' character. \n\nThere are total three products. We need to return product whose value is maximum. max() does the same.\nFunctions\nmax_product(arr)\nDefinition\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_pro"], [0.12833489052631453, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that returns true if a string contains a ab  followed by one b.\nimport re\ndef text_match_non_number(text):\n        patterns = '[^0-9]+'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that returns true if a string contains a sequence of non-blank characters.\n\ndef text_match_zero"], [0.12793645140629045, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks for a word that has an a followed by zero or one b.\n\ndef text_match_zero_or_more(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code checks for a word that has an a followed by zero or more b's.\n\ndef text_match_one_or_more(text):\n"], [0.12624921065429265, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find whether pattern \u201cab\u201d, which matches the string that has \u2018a\u2019 followed by\nanything else. The pattern \u201cab+?\u201d which matches the string if it has \u2018a\u2019 followed by at least 1 occurence. \nimport re\npatterns = ['\\sfull-time or part-time(online)?,?\\s\\S?\\s\\S?\\s\\S?\\"], [0.12547461743839441, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match texts with a pattern such that it matches \u2018ab\u2019 with \u2018a\u2019 present zero or one times and \u2018b\u2019 present one or more times.\n\ndef is_successful_employee(df):\n  df.loc[df['is_promoted'] ==1]\n  male_emp = df['is_promoted'].count()\n  female_employee = df[(df['is_"], [0.12232861603866445, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that only matches the given text with a regular expression pattern consisting of the letter a followed by a plus sign indicating one or more occurrences of the character a.\n\nimport re\ndef text_match_zero_or_more(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that only matches the given text with"], [0.12209582902859509, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\ndef neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that provides a user confirmation to indicate if a given \nstring has the specified string of 1 or 2 'a' surrounded by 'b'\nh\nWrite a function named reverse_string that has one parameter named s. \nThe function should return the reverse of the string s.\n\n\n# write your function here\ndef reverse_string(s):\n    return s[::-1]\n #invoke\nreverse_string(\"welcome\")\n#"], [0.12070544769029991, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\ndef sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that takes in a text and checks if it matches an element of the regular expression that matches if the string contains a pattern of a or a expression followed by b.\n\ndef nearly_palindromic(text):\n        nums = []\n        for i in range(len(text)):\n            if text[i].isDigit() == True:\n                nums.append(text[i])\n        sumOfDigits = 0"], [0.12064675358735906, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " will check if the string contains \u201cab\u201d followed by 1 or more \u201cb\u201d characters.\n\ndef unique_list(input_list):\n  unique_list = []\n  for ele in input_list:\n    if ele not in unique_list:\n      unique_list.append(ele)\n  return unique_list\nThe above script is a function that removes duplicate values in list.\n\ndef matched_char(reference,"], [0.11944579091752575, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that checks whether a string contains the 'a' character followed by at least three 'b' characters.\n>>> import re\n>>> def match_digits(string):\n...     pattern = '^\\d+?$'\n...     if re.search(pattern,  string):\n...        return True\n...     else:\n...        return False\n... \n>>> print match_digits('1237622864571')\n>>>"], [0.11865162247510551, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that returns true if the given string S has any a followed by zero or more b's. Otherwise, it returns False.\nimport re\ndef text_match_backward(text):\n        patterns = '^ab.+?[^a-c]'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that returns true if the given string S has"], [0.11855701843370119, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that matches words that begin with 'a' and follow with any letter except b. It will return True is the matched string is (ab), but False if the matched string is (ab+).\nimport re\ndef text_match_zero_multi(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that"], [0.11855490764581322, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to test whether or not a string consists of a  or"], [0.11829583924143454, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that takes in a character string, and checks if the strings contains \u2018ab\u2019 followed by 1 or more \u2018b\u2019s (i.e. \u2018b+?\u2019) This returns True if \u2018ab\u2019 is found and False otherwise.\n\nimport collections\nall_pairs = collections.OrderedDict() \nfor key, val in all_pairs.items(): \n    print (key, val"], [0.11798091248443487, "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find whether a string matches into a string which has the pattern like 'word boundary closely followed by a letter a which can appear 1 or more times , if the condition satisfies then it returns True , otherwise returns False'.\n"], [0.11720908690003798, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that checks whether a string contains the 'a' character followed by a single or no 'b' character.\n\nimport re\ndef mylower(text):\n        patterns = '[^A-Z]+'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains all non-uppercase characters, i.e. that only"], [0.1171434935331531, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to see if \u201cab\u201d, which matches the pattern from the string being passed, appears two or less times.\n"], [0.11651428270474526, "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to decide if a string starts with \"ab\", or zero or one times.\nhttps://www.w3resource.com/python-exercises/re/python-re-exercise-49.php\n\nimport re\ndef cw_length(text):\n    s=0\n    for char in text:\n        if re.search(r'a|e|i|o|u|A|E|I|U"], [0.11587934603836166, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " when used in conjunction with bool instance names will allow for our recognition of an 'a' followed by none or many \n't' characters in a given text.\nWhen using this function within a function, this would be used like so:\ndef total_str_len(list1):\n    total = 0\n    for item in list1:\n        if isinstance(item, str):\n            total += len(item)\n    return total\nTo return the"], [0.11528317139338035, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\nimport re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches a word containing 'a' followed by \\w+ one or more times. We have used 'ab' in the string followed\nby all the letter including whitespaces. Then we have used '+' and then the '?' in the string which was expected to return\nonly one solution i.e. 'a' but we found out that it was returning more than one string. \nimport re\ndef text_match_number(text):\n        patterns = '"], [0.11449093943515665, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function which returns true if the given text contains a pattern like 'ab' or 'ab+'.\n"], [0.11395174419235311, "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that uses a regular expression to match strings which have substring 'a' followed by less or equal to 1 instances of letter 'b'.\ndef text_match(text):\n        patterns ='a.*b$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that uses regular expression to match strings which have a with any number of letter in between and"], [0.11388291634200572, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that checks if a string contains a combination of two specified characters.\nimport re\ndef text_match_two_adjancent_lowercase_letters_rangee(text):\n        patterns = '[a-z][b-d][b-d][b-d][z]'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to check if"], [0.11354374914116795, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " code checks if a string contains a word starting with 'a' followed by any number of 'b's\nText = \"ac\"\nprint(text_match_zero_one(Text))\n\n# Regular expression to find different alphabets other than  starting from a.\nimport re\ndef text_match_onlyalpha(text):\n        patterns = '^[^a-zA-Z]'\n        if re.search(patterns, "], [0.1132376553935773, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to determine if a given string \"text\" contains \nat least one pattern that matches a regular expression \"ab+?\".\nimport string\ndef word_count(text, word):\n\ttext_filled = text.replace(';', ':').replace(',', '-').replace('.', '!').replace(' a ', ' ').replace(' the ',\n\t\t' ').replace(' ', ' ').replace(':', ' ;"], [0.11323211829558474, "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches if given string contains \u2019ab\u2019 and followed by one other alphabet in the given string using regex.\n\nPattern no. 4:\nimport re\ndef text_match(text):\n        patterns = ['\\D\\d$', '^\\d+\\S*$']\n        if re.search(patterns[0],  text) or re.search(patterns[1],  text):\n                return True\n        else:\n"], [0.11200964108789635, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches the patterns a followed by one b but zero or one b.\n\ndef text_check_paranthesis_checker(text):\n    lc = 0\n    rc = 0\n    for i in range(0, len(text)):\n         if (text[i]=='('):\n                lc = lc+1\n         else:\n            rc = rc+1\n         if(rc > lc):\n                break"], [0.11162370415076958, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks if there is a substring with \u2018ab\u2019 occuring once or more times. \ndef match_html(html):\n    #<[^>#]*:[^>]*>#?\n    return bool(re.match(r'<[0-9a-z][^>#]*?:[^>]*>#?', html)) \nThe above code checks whether a string matches the given condition. \nimport"], [0.11138776614710307, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if a given string/text contains the pattern, a must followed by zero or one b's\ntechniques learnt: metacharacters and operands, one and zero, parenthesis and obviously regular expression matching\n"], [0.11136065500486025, "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that accept a string and search for a pattern.\nimport re\ndef text_match_non_zero_more_than_6(text):\n        patterns = 'b{2,}?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that accept a string and search for a pattern.\nre.match(\"c\", \"abcdef\")   "], [0.11136065500486025, "def rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that tests if a string contains any word that starts with a and ends with b.\n# By Victor Rybakovas\n# Victor Rybakovas Aug 2019 - http://bit.ly/2vhrYi9\ndef text_match_one_or_more(text):\n        patterns = 'ab+'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe"], [0.11097753046198143, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to check whether a string contains a pattern. https://www.geeksforgeeks.org/regular-expression-python-examples-set-3/\n1\nimport re\ndef thirteen_digits(n):\n        patterns = '[456][0-9]{3}-?[0-9]{4}-?[0-9]{4}-?[0-9]{4}$'\n       "], [0.11084813820142561, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that looks for a pattern, using regular expressions, within a given string and returns True or False depending on whether the string is matched.\n\nimport datetime\ndef datamatch1(dt1):\n    dt2 = \"2017-08-15\"\n    Dd = datetime.datetime.now(datetime.timezone.utc) - datetime.datetime.strptime(dt2, \"%Y-%m"], [0.11034160106487136, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that takes in a string and returns if the string ahs at most one occurence of the pattern \u201cab\u201d.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab??'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe text_match_zero_one() function is similar to the text_match_one_"], [0.11004810858426407, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if a string has zero or one a.\ndef text_match_zero_more(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to check if a string has zero or more number of 'a'.\nThe regular expression that matches date format is\n2017-01-09\n"], [0.10983567795566498, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks whether the text has 'a' followed by 'b'. It also prints the matching string. https://www.tutorialspoint.com/python/python_reg_expressions.htm\n\ns = \"abcd1234\"        \nall_freq = {} \n   \nfor i in s: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all"], [0.10933512686106173, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression to match 0 or  atleast 1 'a' followed by 1 'b'.\n\ndef regex_always_n_or_more(text):\n        patterns = 'ab*'\n        if re.search(patterns,  text):\n                print text\nThe above code is a function which prints all words whose length is greater than or equal to 2 \nusing regular expression.\n\ndef regex_match_equal_n("], [0.10926022538172929, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that takes a string as an argument, and returns true if the string contains zero or one characters beginning with 'a'.\nimport re\ndef text_match_at_least_two(text):\n  patterns = 'ab{2,}?'\n  if re.search(patterns,  text):\n                return True\n  else:\n                return False\nThe above code is a function that takes a string as an argument, and returns true"], [0.10926022538172929, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to find if a string starts with 'a' and followd  by any numb ber of 'b's. '\nimport re\ndef text_match_zero_in_between(text):\n        patterns = 'ab'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python function to find if a string has 'a' followed by any number and"], [0.10902373620974719, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\nimport re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if the string contains a 'zero or one' repetition of the letter 'a'.\nimport re\ndef text_match_remindo(text):\n        patterns = '^[a-zA-Z_]\\w*@[a-z0-9]+\\.[a-z]{2,3}(\\.)?[a-z]{2,3}(\\.)?[a-z]{2,"], [0.10898624404056886, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that takes in a text and returns True if there is any match of the 'a' character two or more times but is followed by 'b'.\n\nSample Input:\nNo\nab\nabababababab\n\nSample Output:\nMatch found   - 0\nMatch not found - 1\nMatch found - 0\nMatch not found -0\n\nimport re\ndef exclude_char(string):\n  pattern = '[3679!@#$"], [0.10863269771044673, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to search for an ab followed by 1 or more b.\nimport re\ndef change_punc(text):\n       char = re.sub(r'[^\\w\\s]','',text)\n       return text\n\nThe above code is a function to return all the words after removing all the punctuations.\na = 'aaaabbaccddd'\n\ndef get_largest_counts_char_to_one_time"], [0.10845659930363573, "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check whether given string having atleast one or more time 'ab'.\n\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to check whether given string having atleast one or more time 'ab'.\n\nimport re\ndef text_match_zero"], [0.10778218789436615, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that takes in a text string and a pattern that checks for either of the following two cases:\n1) 'a' zero or one times followed by 'b' once\n2) 'ab' explicitly\n(here +? means to check for the longest possible 'ab' string regardless of the way it is written, since it is not greedy). \ndef text_match_zero_repeat(text):\n        patterns = 'ab*?'\n        if"], [0.10767524728421808, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match Zero one times.\nimport re\ndef text_match_zero_or_more(text):\n  patterns = 'ab*?'\n  if re.search(patterns,  text):\n    return ('\\nTrue, the string contains \"ab\" followed by 0 or more \"b\"')\n  else:\n    return ('\\nFalse, the string does not contain \"ab\" followed by 0 or more \"b\"')"], [0.10761232733584006, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to see if a string consisting a + or none.\nimport re\ndef is_allowed_specific_char(string):\n   charRe = re.compile(r'[^a-g0-9.]')\n   string = charRe.search(string)\n   return not bool(string)\nThe above code is a function that returns true for strings of allowed chars specified by the RE and false for others.\nimport re\ndef"], [0.10691090287613277, "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to test if a string matches a regular expression consisting of an a followed by zero or one b(s).\n```\n\n```c++\n#include<bits/stdc++.h> \nusing namespace std; \n  \n// a regular expression consisting of an a followed by zero or one b(s). \n// This corresponds to the Regular Expression (ab+)? for corresponding \n// Regular Expression langage. \nbool"], [0.10690089085037437, "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that checks if a string contains a ab, except no more than 1 a.\nimport re\ndef text_match_zero_one0(text):\n        patterns = 'aba*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks if a string contains a ab, except 0 or 1 a.\n\nimport re\ndef text_match"], [0.10680032895333263, "def filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if we have the given sequence in the text. In this case the seqeunce is either 'ab' or 'a' followed by any no. of 'b'. So, the '+' ensures that we get ghe desired sequence.\ndef text_match_zero_one(text):\n    patterns = 'ab?'\n    if re.search(patterns,  text):\n                return True\n    else:\n                return"], [0.10672817598761103, "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is make a function that will match the word 'Batman':\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?[a-z]+'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is make a function that will match the word 'Joker' or Joker:\nimport re\ndef text_match_zero_one(text"], [0.10671532684635546, "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to implement a regex function.\ndef text_challenges(text):\n    if re.search(r\"([0-1]+[+-]?)*[0-1]+\",    text):\n        return True\ndef text_match_zero_one_multiple(text):\n    patterns = ['^((0[0-9]*[*1+])|([1-9][0-9]?[*1+"], [0.10601877282237723, "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks whether given string has 'a' followed by 1 or more instances of 'b'. It will return True instead of False if there is match.\nimport re\ndef mag_num():\n       match = re.findall(r'\\w+(\\.\\d+)', 'Autopsying 2.4 watermelons, 2.4 tons of YOU')\n        for item in match:\n            print(item)\nThe above code prints the numbers after the last"], [0.10585749965350798, "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to find the word \"ab\" or \"ab?\" or \"ab+?\" in a string or not.   \nhttps://stackoverflow.com/questions/2674391/given-a-string-how-do-i-check-if-it-is-a-possible-AABB-string\ndef pythagoras(a,b,c):\n    if a*a + b*b == c*c"], [0.10526990943581242, "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is for a text match that matches for ab+?\ndef extract_something(lst):\n    result = []\n    for cases in lst:\n      result.append(cases[::-1])\n    return result\nThe above code is a function to extract the string in the list in reverse.\n"], [0.10493553705172601, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that check whether the pattern text is a match of a zero shortest and a one shortest string where the a in both strings indicates a capital 'A. For example, ababbb match zero and one lengths of A. https://stackoverflow.com/questions/26515422/how-can-i-match-a-shortest-possible-string-using-regex-in-python\t\nimport re\ndef text_match_one"], [0.10474929234485772, "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check whether a given string begins with the 'a' character, followed by one and any number of characters in the 'b' character's set.\n\nimport re\ndef text_match_fin(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is  a function to check whether a given string begins with the '"], [0.10461645021630771, "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to find whether the string starts with 'a' and 'b' one or more times.\nimport re\ndef text_match_one_more(text):\n        patterns = 'ab+\\w?'\n        if re.search(patterns,  text):\n                return True\n        else:  \n                return False\nThe above code is a python function to find whether the string starts with 'a' and 'b' one or more"], [0.10444185777010763, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to returns a boolean value if the RE matches or not. https://www.w3resource.com/python-exercises/regex/python-re-exercise-42.php\n...\nprint('Test set {}'.format(i+1))\ntrain_data=Matrix_train_tagged\nHidden = np.zeros(No_of_weeks) \ntrainthis, testthis = train_this, test_"], [0.10423260824131597, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\ndef extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if the a string matches a regular expression in Java or not.\n\ndef check_lowercase_vowel(text):\n  pattern = '[aeiou]';\n  return bool(re.search(pattern,text));\nThe above code is a function to check if the string has atleast one lowercase vowel or not.\n\nimport re\ndef check_sentence(text):\n  pattern = \"^[A"], [0.10409605633309979, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function is a function that searches for the \u2018zero or one pattern\u2019 ab+? in the give text, and returns True if it is present and returns False\nimport re\ndef count_the_articles(strng):\n        patterns = 'the| The| THE'\n        match = re.findall(patterns,  strng, flags=re.IGNORECASE)\n        if match:\n                return len(match)\n\n"], [0.10388886771932057, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\ndef string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to check the number of occurences of the pattern that is a single 'a' followed by any no of 'b's in a text and `*?` design means that the second 'a' can occur anywhere in the string except the beginning.\nimport re\ndef text_match_kleene_plus(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:"], [0.10345714776779726, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match the string a followed by zero or more b's.\n\nimport re\ndef digit_match(text):\n        patterns = '\\D+?.*\\-.*\\-.*\\d+'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to match the string containing digits and a range or x-y or first-last or \\d{"], [0.10329130024898316, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that checks if any text exists in the given text or not.\n\ndef text_match_zero_or_more(text):\n        patterns = '[a-e]+'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks if any text exists in the given text or not.\n\ndef text_match_one_or_more("], [0.10316487072074605, "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a complete regular expression which would match exactly one 'a' followed by any number of 'b's but not vice versa.\nsentence = \"A, very very; irregular_sentence\"\n\n\ndef despace_sen(sen):\n        for i in ';:,_':\n                if i in sentence:\n                        sentence = sentence.replace(i, ' ')\n        return sentence\nThe above code is a function which converts the input sentence consisting of"], [0.1025124249794533, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that takes in a string and checks whether the string is matched using the regular expressions corresponding to the regex \u2018ab+?\u2019. The method returns a boolean value depending on whether the text has a match or not.\nimport collections\nimport pandas as pd\nimport re\ninp = input()\nall_words = re.findall('\\w+', open('big.txt').read().lower())\ncounter = collections.Counter(all"], [0.1025104872667627, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that checks if the first character is 'a', followed by any no. of 'b's and then ends with 'b'. aab will match, but abb wont.\ndef check(patterns, data):\n    for pattern in patterns:\n        print 'Seeking \"%s\" ->' % pattern,\n        if re.match(pattern, data):\n            print 'Match!'\n        else:\n            print 'No match'\nThe"], [0.10216862090313149, "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that takes any string as argument and matches it with the given regex pattern. If the match is successful it returns 'True', else it returns 'False'.\n        \nimport re\ndef text_match_upto_five(text):\n        patterns = 'ab{3,5}?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that takes any"], [0.10168110923081897, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program to check whether a string starts with 'ab' so that the string contains atleast one 'a' after 'ab'.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python program to search the string that contains 'ab' followed by any character but"], [0.1013189972013108, "def rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks if a string contains 'ab' followed by zero or one 'b'.\n\nimport re\ndef text_match_cehck(text):\n        patterns = 'bha[abc][gl][mx]..a...'\n        if re.search(patterns, text):\n                return'Match Found'\n        else:\n                return'not found! '   \n\nThe above code prints if the string contains 'bha' followed by zero"], [0.1013189972013108, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if a given text matches a given pattern, here a plus sign repeats one of more than one whole words.\nimport re\ndef match_num(string):\n    text = re.compile(r\"\\w+\\s\\d+[-](0[1-9]|1[012])[-]\\d{4}$\")\n    if text.match(string):\n        return \"This is a valid US"], [0.10130446012784616, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to verify if a given text matches a pattern or not that has a pattern like 'ba' that can occur once or zero times.\n\nimport re\nif re.match(r\"a+?b+?c\", \"abcadbasdsabbacc\"):\n     print(\"There is match\")\nThe above code Checks if there is a match with 'ab' occurs once times\nimport re\ndef text_match_alphabets(ingredients"], [0.10029233002270933, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a pattern matching function which takes a string and checks for the pattern \u2018ab+?\u2019. The pattern matches ab\u2019s that are present in the given \ntext followed by an \u2018a \u2019and outputs whether it matches the text or not.\n\nWhat is the big O notation of the below answer?\ndef find_longest_sentence():\n        file_name = \"text1.txt\"\n        with open(file_name"], [0.10009047473025628, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression function matching the smallest case of substring followed by aa.\n"], [0.10001924379203349, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a pattern matching function that checks whether the string contains any 4 letter\u2019s or not.\n\nimport re\ndef text_match_zero_or_more(text):\n        patterns = 'ab*'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\nThe above code is a pattern matching function that checks for 0(zero) or more than 4"], [0.09982755714459192, "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if ab occurrence is there with 0 or 1 'a' or 'b' \nimport re\ndef is_valid(phoneNumber):\n        pat = r'[.]{1}[0-9]{2}[ ]?[0-9]{2}[0-9]{3}[ ]?[0-9]{3}'\n        if re.search(pat,phoneNumber):\n               "], [0.09920198212333492, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to search for a text which has an \"a\" followed by zero or only one \"b\".\nimport re\ndef text_match_min_max(text):\n        patterns = 'ab{2,3}?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python function  to search for a text which has an \"a\" followed by 2 or 3 \""], [0.09892192348315297, "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match whether the given substring is \u201cfound or not found\u201d in a string or not.\n\"\"\"\n\nimport re\ndef text_match(text):\n        patterns = 'z+?'\n        if re.search(patterns,  text):\n                return 'found a match!'\n        else:\n                return('not matched!')\n\nprint(text_match(\"azzzzb\"))\nprint(text_match(\""], [0.0988322309978814, "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if the given string match 'ab+' ie. This expression checks for \n\u2018a\u2019 followed by any no of \u2018b\u2019s ie. it matches the \u2018ba\u2019 and \u2018bb\u2019 and also \u2018abb\u2019. It doesn\u2019t match the \u2018a\u2019.\npasting some shit code... https://www.geeksforgeeks.org/question-echo-terms-"], [0.09878279943055876, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to see if text matches \"ab or ab followed by any number of bs\nimport re\ndef text_match_zero_many(text):\n        patterns = 'ab*?'\n        if re.search(patterns = 'ab*?'):\n                return True\n        else:\n                return False\nThe above code is a function to see if text matches \"ab or ab followed by zero or more b.\nimport re\ndef remove_"], [0.09874609912697675, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match the pattern string for zero or one times.\ndef text_match_zero_or_more(text):\n    patterns = 'ab*?'\n    if re.search(patterns,  text):\n        return True\n    else:\n        return False\nThe above code is a function to check the searching of pattern string for zero or more times.\n\ndef text_match_one_or_more(text):\n  patterns"], [0.09866837118096128, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to check if a string contains a pattern.\ndef large_sub(text, max_gap):\n        match_sub = re.search(\"A{2,5}\" + \"[a-z]{0,3}\" + \"[A-Z]{3,}\",  text)\ndef word_equals_string_replace(text):\n        if re.sub(\"h.*?e world\",  \"HELLO\", "], [0.09851671675598163, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a Python code to match a given text with a pattern, prints true if found or else false.\nmathematical symbol\ndef center_align_text(text):\n    text = 'AIGH'\n    print(' '*(20-(len(text)//2))+text)\nThe above code is a function that prints a given text center aligned with even margins to right.\ndef binary_to_decimal(binary):\n    x = []"], [0.09851671675598163, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python code to search whether a pattern matches a string or not using regular expressions\nmylist = [\"mahesh\", \"rakesh\", \"ashwin\",\"aakash\"]\nlist1 = []\nfor item in range(len(mylist)):\n    list1.append(mylist[item][0])\nprint (list1)\n\nThe above code is a python program to find the first alphabet for the given list of strings. \nimport"], [0.09830451394896006, "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function which returns the pattern if found in the string else returns \u20180\u2019\n"], [0.09807761076768491, "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " finds if a string has repeating characters of same type.\n\ndef is_valid_total(s1, sub_str):\n    count = count_substring(s1, sub_str)\n    if count in range(1,3,1):\n        return True\n    elif count > 3:\n        return False\nTo find if a substring occurs twice or more times in any string.\n\ndef gcd_calc(x,"], [0.09788092640534388, "def find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression to search for  regular expression 'ab'. Here the '+' symbol is used to look for one or more instances of a pattern.\n\ndef check_number(a):\n    if re.search('[|^&*#@()]', a):\n        return False\n    else:\n        return True\nThe above code is a regular expression to search number from the given string.\ndef block_user_fn(user_id"], [0.0978797397482496, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression on text containing 01 one or more times,if true return true else false\nimport re\ndef text_match_zor(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a regular expression on text containing zero or one 'ab' or 'a' or 'b',if true return true else false\ndef"], [0.0978797397482496, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\ndef extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that receives a message and check if string private key is presented in message : Yes/No.\ndef text_match_n_n(text):\n        patterns = 'ab{3}?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that receives a message and check if string private key is presented in message : Yes/No.\n!git added"], [0.09786989107443851, "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is compute frequency of substring with \"?\" operator in the given string\n\ndef sum_in_list(list1, key):\n    return sum([i for i in list1 if i <=key]) \nThe above code is a function that takes a lisr and key, and that computes the total sum of all the values in the list that are less than or equal the key\n\ndef mul_items_item(list1, item):\n   "], [0.09765357030053179, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\ndef interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match a string begining with 'ab' and ends with a character i.e a single occurence of 'b' .\n\ndef text_match_one_or_more(text):\n        patterns = 'ab+'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to match a string begining with 'ab' and followed by"], [0.09741021424584376, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to test a given string contains patter which can be made of \u2018a\u2019 followed by 1 or more \u2018b\u2019.\n\ndef text_pattern_zero_one_special(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python function to test a given string contains patter which can be"], [0.09741021424584376, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\nfrom math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to determine if the string \u2018text\u2019 contains any a followed by zero or one b.\ndef sum_of_eve_nums(low, up):\n        total=0\n        for num in range(low,up+1):\n                if num%2==0:\n                        total+=num\n        return total\nThe above code is a function to find the sum of all the even numbers in the inclusive range low to up.\n"], [0.09738986622875954, "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check whether the given word contains an \"a\" followed by some characters, which could be empty i.e., zero or one other characters.\n \nimport re\ndef test_range(n):\n  if (n in range(3,9)):\n    print(\"Number %s is in the range.\"%str(n))\n  else :\n    print(\"Number %s is NOT in the range.\"%str(n))       "], [0.09738986622875954, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function that takes a string text, and a string patterns. If zero or one character repeats, return True.\n\n# def text_match(text):\n#     patterns = 'ab*?'\n#     if re.search(patterns,  text):\n#         return True\n#     else:\n#         return False\ndef test_range(n):\n    if n in range(5,11):\n        print( \" %s"], [0.09735603157584785, "def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check whether the given data has any substring matches one or ab\n\ndef natural_no(n) : \n  \n    if (n <= 17) : \n        return (18 - n);  \n  \n\nn = 24; \nprint(natural_no(n), end = \" \") \n  \n\nn = 17; \nprint(natural_no(n), end = \" \") \nThe"], [0.09730908164767937, "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " return matches for an input text containing a string that starts with a specific letter \nand containing certain number of b's after the first letter\nimport time\nimport datetime\nstart = time.time()\nprint('hello world')\nend = time.time()\nprint(end - start)\nThe above code prints the time taken in seconds\n\nmy_date = datetime.datetime(2018, 3, 2)\ntoday = datetime.datetime."], [0.09730908164767937, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program to match a pattern \"ab+?\" wherein each alphabet 'a' is repeated one or more times but not more than once.\n#importing all the required libraries\nimport math\nimport random\nimport re\nimport time\n\nprint('Task 2.1:' )\n#Assign 1,9 to a and b respectively\na=1\nb=9\nif a==b:\n   print (\"Both are equal\")\nelif a>"], [0.09730291163251488, "def rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to test if a string matches ab+?  pattern. https://docs.python.org/3/library/re.html#re.search\n\ndef empty_list(list1, list2):\n    for idx in range(len(list1)):\n            if list1[idx] not in list2:\n                  return False         \n    return True      \nThe above code is to check if there is any element in list"], [0.09726885680815157, "def armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that print 'True' is the pattern is avaiable and print 'False' if the pattern is not avaiable.\ndef text_match_pythonic(text):\n    if re.search(r'ab+?',  text):\n        return True\n    else:\n        return False\nThe above code is a function that print 'True' is the pattern is avaiable and print 'False' if the pattern is not avai"], [0.0972278434194402, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python code to checking for exact match of a string followed by exactly one occurrence ofb.\n\nistTo have a string follow specified characters that need to be at the beginning of a string  * zero or more times is the least amount of times the characters need to be present\n* at the beginning of the string  * one or more times is the  amount of times the characters need to be present at the beginning of string.\n\ndef text_match(text):"], [0.09713193857021805, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is the regex string for 1st character to be a and followed by 1 or more bs, thus satisfying zero or one condition.\ndef ex_sum(test): return sum([int(t) for t in str(test)]);\n\nThe above code is a function to convert the number and write it as a list from converting to String. Then using SUM operator, we just add them up.\ndef convert_to_decimal(frac_str, base ="], [0.09684873345289982, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to match ab zero or one times.\n\ntext = input(\"Enter an email: \")\nimport re\ndef validate_email(email):\n    if re.match(\"\\A(?P<name>[\\w\\-_]+)@(?P<domain>[\\w\\-_]+).(?P<toplevel>[\\w]+)\\Z\",email,re.IGNORECASE):\n        return True\n    else"], [0.09681133088627192, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\nimport math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check whether the given text is valid forever. \n\nIf only one of ^ and $ is used, then this is same as using only the $. But when both are used, they behave differently. For example, the pattern \"^code$\" means that the string should contain exactly the word \"code\" with no additional character at the beginning or end. Such a string is said to be \"anchored\". Expressions containing just one or more anchors are called"], [0.09657041935394749, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function that validates our user for '0' or '1' for it to execute.\n#For FuzzyWuzzy\nresult_df = pd.DataFrame()\nresult_df['String_A'] = test_df['String_A']\nresult_df['Match'] = test_df['String_B'].apply(lambda x: process.extract(x, test_df[\"String_A\"], limit="], [0.09657041935394749, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to search for a specific string using re.search() and a given numbered criteria of arguments.\n\nimport urllib3\ndef modify_content(request_object):\n        loaded_request_object = http.request(request_object)\n        loaded_request_object.add_header('url', \"http://abc.com/index.php\")\n        modified_response = loaded_request_object.url\n        verbose_message"], [0.0962811845139966, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find if the word \"b\" is present 0 or 1 times in any word within the same string.\n%prog ccs.fa ccs.fa\nm130812_012016_sherri_c100477642550000001823071904131362_s1_p0.fastq.gz m130812_012016_sherri_c10047764255000000182307190413"], [0.0962811845139966, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function for text matching for 0 or 1 time using \"ab+?\". \nLook at https://www.tutorialspoint.com/How-to-match-specific-characters-with-regular-expressions\nLook at https://www.w3schools.com/python/python_regex.asp\nLook at this insight package check https://github.com/perfectline/insight-packages \n\"\"\""], [0.09600360219220418, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match patterns containing zero or one of the previous character.\ndef text_match_zero_or_one_repetitions(text):\n        patterns = 'ab?|abc?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to evaluate whether a string is equal to def or ab pattern.\ndef text_match_zero_or_more"], [0.09561793110513483, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to find the the match between any binary 0 followed by 1 only (length n)\n\nn=int(input())\nli=[]\nli=[int(li) for li in input().split()]\nli=sorted(li)\nprint(int(li[2]//2) if li[2]%2==0 else int(li[-1]+li[-1]-li[-3]//2))\n"], [0.09561071881321374, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to determine if a pattern \"ab+?\" matches a text.\n\ndef is_credit_card_valid(number):\n        str_num = str(number)\n        digits = [int(char) for char in str_num]\n        print(digits)\n        res = []\n        for num in (digits[-2::-2]):\n                product = num*2\n                if product >= 10:\n                       "], [0.09560575039450339, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is python code to search a pattern 'ab+' that describes string match of length one or more.\n\ndef text_match_zero_one_1(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                print('Found a match!')\n        else:\n                print('Not matched!')\n        print()\nThe above code is simple python code to search a pattern 'ab+' that"], [0.09538415269545474, "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\n\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " returns true if the given string has any character between a-b or a followed by characters \ndef multiple(*args):\n    sum=0\n    flag=0\n    for n in args:\n        sum=sum+n\n        if n==0:\n            flag=1\n    if flag==1 or sum==0:\n        sum=1\n    return sum\nprint multiple(3)\nprint multiple(-3,-3)\nprint multiple("], [0.09536899205577916, "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to search for a pattern \u2018ab\u2019(Zero or more repetitions) in a given string\ndef text_match_reluctn(text):\n    patterns = 'ab+?'\n    if re.search(patterns,  text):\n        return 'We have a match'\n    else:\n        return 'Try again'\nThe above code is a function to search for a pattern 'ab'(One or more repetitions"], [0.09531523924673388, "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function that search for the given string with ab+ from the given texts.\ntxt = \"The rain in Spain falls mainly in the plain!\"\n\n#Check if the string contains \"ai\" followed by exactly one \"l\" character\nimport re\n\nx = re.findall(\"al{1}\", txt)\n\nprint(x)\nThe above code is a python script that finds al{1} from the texts.\nimport re\n"], [0.09521013147262364, "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match the first occurrence of a given regular expression. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nimport numpy as np\ndef numpy_matrix(arr):\n    d1 = np.array([np.array(x) for x in arr])\n    print(\"\\nMatrix:\\n"], [0.09514617857362266, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match a string \u2018zero or one\u2019 times.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab.*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to match a string \u2018zero or one\u2019 times.\nimport re\ndef text_match_zero_one_zero_"], [0.09495363633564007, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\ndef replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function that takes in a text string pattern ab and returns true when it matches the pattern.\nimport logging \ndef display_logging_information():\n            logging.debug(\"Debugging message\")\n            logging.info(\"information\")\n            logging.warn(\"warning message\")\n            logging.error(\"Error message\")\n            logging.critical(\"Critical message\")\n\nThe above code is a python program that displays the debugging, warning,error,and critical"], [0.09449012692933281, "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if a given string text matches a pattern to find the first matching \nsubstring.\ndef text_match_decimal(text):\n        patterns = '\\d{1,2}.\\d{2}'\n        if re.search(patterns,  text):\n                return('Found match!')\n        else:\n                return('Not matched!')\nThe above code is a function to check if a given string matches"], [0.09432902640774138, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if the string a word such as \u201cAbbreviations\u201d  contains words such as \u201cAbbreviation\u201d or \u201cab(Zero or one)\u201d.\nimport re\ndef text_match_count(text):\n        patterns = 'ab{2,3}?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return(\"not"], [0.09421142608842943, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check --b added 0 or 1 times with re in simple text.\n\ndef text_match_zero_more(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"], [0.09416542792057107, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if a given text matches the given regex.\n"], [0.09415437214411308, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match a regex expression 'ab' with a string of text, but will return True if 'b' comes after 'a'.\n\ndef return_dates(user_input=\"Feb 10, 2017\"):\n    user_input1 = user_input.split(',')\n    year = user_input1[2]\n    month = user_input1[0]\n    day = user_input1[1]\n    month ="], [0.09390473589832755, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match or search for a op character \u2018a\u2019 followed by any no of \u2018b\u2019s in a given string and returns true for a match and false for no match.\n\nprint(re.search('^a.*[1234567890]$','a\\nszb12dD'))\n\nThe above code is a fuction to match exact string (NOTE: the scope of the search is limited in the string)\n"], [0.09390473589832755, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match characters of text, 1 or more times.\n\ndef print_reverse(text): \n        i = len(text) - 1\n        while i >= 0:\n                print(text[i])\n                i = i - 1\nThe above code is a python function to reverse a string, i.e., print each character at the right extreme, one by one.\n\n(Merge Sort)\ndef reverse(list):\n"], [0.09390473589832755, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches text to (ab)+?, i.e., (a followed by zero or more b's). \nMore on Regular Expression in Python can be found here.\nThe above code creates a new regular expression module. It returns TRUE if ab+? is found in text or FALSE otherwise.\n\ndef text_match(text):\n    patterns = 'ab*?'\n    if re.search(patterns,  text):\n            return 'Found a match!'\n"], [0.09390473589832755, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program used to search if the string contains a pattern.\ndef text_match_zero_all(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return 'match found'\n        else:\n                return \"not found\"\nThe above code is a python program used to search if the string contains zero or more . a followed by zero or more b.\ndef text_match_string"], [0.09390473589832755, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression to find out pattern that matches substrings 'ab' once or not at all in the given text.\nimport re\ndef text_match_Word_Zero_and_More(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a regular expression to find out patterns that matches substrings 'ab zero or more times"], [0.09387769388173027, "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if string contains a regular expression pattern.https://www.geeksforgeeks.org/python-check-string-contains-regular-expression-pattern/\ndef string_common_substring(string1, string2):\n    shorter = string1\n    longer = string2\n    if (len(string1) > len(string2)):\n        shorter = string2\n        longer = string1\n    ans = \"\""], [0.09387769388173027, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " check if a string has the given the pattern.\ndef no_space(x):\n  return x.replace(\" \",\"\")\nThe above code takes in a string and removes all the spaces from the string.\nimport re\ndef ip_address(string):\n    ipPattern=re.compile(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3"], [0.09387769388173027, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find whether 'a' is present or not in given text but the found should be either zero or one.\ndef rem_num(test):\n  return(re.sub('Far\\d{1,5}',' FarEast ',re.sub('Near\\d{1,5}',' NearWest ',re.sub('High\\d{1,5}',' OverSea ',test))))\nprint(rem_num(test))\nThe"], [0.09377922478614516, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python re module function that uses aQuantifer. It tests if the string has a length of 0 or more, ab and repeats the a by 0 to infinity.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python re module function that uses aQuantifer."], [0.09361211459436061, "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match the first string(prefix) which starts with 'a' and followed by any no of 'b's\nimport re\ndef text_match_zero_or_more(text):\n        patterns = 'ab*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to match the first string(prefix) which starts with 'a' and followed"], [0.09358243582417988, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check whether a string contains only zero \nand one and recursively until reaching five zeros, that is, at least a chain of \nfive zero, starting with zero (b followed by zero)\n\nThe above code is a function to check whether a string contains only zero \nand one and recursively until reaching five zeros, that is, at least a chain of \nfive zero, starting with zero \n(b followed by"], [0.0935490387642823, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function that takes in a text, builds a regex pattern and checks if any patterns are found\nimport re\ndef text_match_c(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that takes in a text, builds a regex pattern and checks if any patterns are found\nimport re\ndef text_match_"], [0.09327786274919436, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is an example to match the start of a string with an ab ?\n\npublic static void main(String[] args){\n  Matcher m=Pattern.compile(\"([-+])([\\\\d]+)\").matcher(s1);\nfor (;m.find();){\n    String str=m.group(2);\n    if(Integer.parseInt(str)>=0){\n         isPositive = true;\n    }else"], [0.09283110502534611, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " should match zero or more a's followed by b. So  ab, aab and acb would be True. \n\"\"\"\nimport random\ndef roll_dice():\n    try:\n        num = int(input('Number of dice rolls: '))\n        while True:\n            dice_one = random.randrange(1, 6)\n            dice_two = random.randrange(1, 6)\n            dice_sum = dice_"], [0.09275535004519687, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to search a pattern in given text.\n\nQuestion 3:\nDefine a function that take data as argument and returns max value, min value,sum of all values, average of all values, variance, standard deviation and any other statistic you would like to implement\ndef calc_stats(series):\n        max_val = max(series)\n        min_val = min(series)\n        total = series.sum()\n        mean = series.mean()"], [0.09275495803287094, "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression function to find 'ab' minimum occerence(minimum  one time) in a given string.\n\n\nYou are given a string S. \nIn the first line, print True if S has an odd number of\n1's or '1' itself. Otherwise, print False. \nIn the second line, print True if S has an even number of\n1's. Otherwise, print False.\ndef show(s):\n    count"], [0.09274408592556381, "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to display your output based on the regex pattern search.        \nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?' \n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code indicates zero or one occurrences of an \u201ca\u201d followed by a \u201cb\u201d.\nimport re\ndef text_match_reluctance"], [0.09274408592556381, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to test whether a text starts with the letter a, ends with the letter b, and has at least one letter in between,which does zero or one times.\n'''\n#Assignment 5.2\nimport re\nprint(\"Enter the text you want to match\")\ntext=input()\nlist_of_values=[\"^a..a$\",\"^[a-z]*s$\",\"^[^JT]*a*$"], [0.09274408592556381, "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python code for text match.\nimport re\ndef text_match_email(text) :\n        if re.search(r'[\\w.-]+@+[\\w.-]+',  text) :\n                \n                return True\n        else :\n                return False           \nThe above code is a function to find if a particular string is an email or not.\ndef count_capital(t): \n    total = 0\n    for"], [0.09260143217272566, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to find the sequence a followed by zero or one b in a given string.\n\nimport re\ndef find_five_non_consecutive_letter(word): \n  pattern = r\"[[a-zA-Z]]{5}\"\n  if re.search(pattern, word):\n      return True\n  else:\n      return False\nThe above code is a python function to check if a given word contains five non-"], [0.09242853234103146, "def triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to decide if an input text matches a pattern and whether it is 'zero or one' presence or not.\n\ndef findpass(string):\n    password = ''\n    for each in string:\n        if 'a' <= each <= 'z':\n                password += each\n        elif 'A' <= each <= 'Z':\n                password += each\n        elif '0' <= each <= '9':\n                password += each\n\n"], [0.09224123720378857, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python module to test the text matches\nsome b followed by optional a using regex/regular expression.\n\nPrerequisite: Regex, Python Re, Import re\n\ndef prefilter(w):\n    w = w[0].upper()+w[1:]\n    w = w+'ma'\n    w = w.replace('ph','f')\n    w = w.replace('ch','h')\n    w = w.replace"], [0.09224123720378857, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to match a substring that has a ab with maximum one occurrence using the regular expression.\n\ndef string_match(string1, string2):\n        X = min(len(string1), len(string2))\n        cnt = 0\n        for i in range(X-1):\n            x = string1[i:i+2]\n            y = string2[i:i+2]\n            if x == y:\n"], [0.09224123720378857, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to see if text match a pattern or not and prints the corresponding result.\n       \nThere are many more examples to learn the basics of regular expressions, visit [this](https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md) link to learn them.\n\n# **\u7ec3\u4e60**\n# - \u8bf7\u95eeregular expression\u5339\u914d"], [0.09206997008459403, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression function to check if a string has \u2018Zero or one occurrence\u2019 of a sub-string.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab{3,5}?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a regular expression function to check if a string has \u2018Zero or one occurrence"], [0.09206997008459403, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " verifies that first mismatches ab and then matches b zero or more times.\nimport re\ndef text_match_regex_necessary(text):\n        patterns = ''\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\nThe above code is a python function to check if a particular text is matched in the given entire text.\nre.sub(r'"], [0.09204727296605823, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to return the matched string from a string if the keywords zero or one\n\ndef exception_list(list):\n  list = [x*x for x in list]\n  print(\"element present:\", list)\n  list_5 = [x for x in list if x % 5 == 0]\n  int (list_5)\n  \n  except_list = []\n  for n in list:\n    sub_list = []"], [0.09200544991143954, "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check whether the string matches the pattern or not.\n[Q 23]\nThe re.search() method takes a regular expression pattern and a string and searches for that pattern within the string. If the search is successful, search() returns a match object or None otherwise. Therefore, the search is usually immediately followed by an if-statement to test if the search succeeded, as shown in the following example which searches for the pattern 'word:' followed by a 3 letter word"], [0.09192672485992463, "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if a text matches a regex pattern which is of zero or more (a+?) described using regex.\n\nWhat does the error function in Python IRL in math library:\nimport math\ndef test_error_func():\n  if 'error' == math.erf(0.34567):\n    return False\n  else:\n      return True\nThe above code will fail the test case and return true, when the expectation is false"], [0.0916232778463677, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\ndef find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function which checks if a given input matches a particular criteria.\nfrom collections import Counter\ndef CountFrequency(my_list): \n    freq = {} \n    for item in my_list: \n        if (item in freq): \n            freq[item] += 1\n        else: \n            freq[item] = 1\n    for key, value in freq.items(): \n        print (\"% d"], [0.09161020050293275, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches a plain 'a' with any number of 'b'\u2019s. \n\n\nimport re\ndef text_match_four(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code matches a plain 'a' with only one 'b'.\n\nimport re\ndef text_match_five(text):\n        patterns = '"], [0.09109559632977952, "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " tells us, that given a string as an input it should be checked if zero or more times, an \"ab\" string occurs in the original string.\n\nimport re\ndef begins_with_ vowel(words):\n        print re.findall(r\"\\b[aeiouAEIOU]\\w+\", words)\nThe above code:\nChecks the words string to see if the vowels occur together at the beginning of words in the string."], [0.09104731775673656, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to achieve regex pattern \"ab+?\" in the form of starting with a followed by b and then more than 1 a.\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n        \nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2"], [0.09093554813329228, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks if there is a text starting with \u2018a\u2019 followed by just one \u2018b\u2019:\n\ntest_string = 'abbcbbd'\nprint(\"Original Substring: \",test_string)\nprint(\"OutPut: \",text_match_zero_one(test_string))\nIf the Substring doesn\u2019t start with \u2018a\u2019 followed by just one \u2018b\u2019, the code returns False.\n\n"], [0.09093554813329228, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to find whether a string follows a particular pattern.\n\nimport re\ndef text_match_numbers(text):\n      patterns = '\\D{1}(\\d{0,9})\\D{1}\\D{2}(\\d{0,8})'\n      if re.search(patterns,  text):\n                return True\n      else:\n                return False\nThe above code is to find whether a string follows a pattern or"], [0.09080911726054922, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks whether a string contains the pattern or not.\nimport re\ndef text(sample_text):\n     e = re.findall(r\"\\w+ly\", sample_text)\n     if e :\n         print (e)\n         \n\nSample_text =str(input())  \ntext(sample_text)\ndef square(n):\n    items=[]\n    for i in range(1,n+1):\n        items"], [0.09080911726054922, "def rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check the given pattern is metacharacter match pattern or not.\n\ndef check_sub_string(string, sub_str, n): \n    if (string.find(sub_str) == -1): \n        return False; \n    else: \n        return (string[0] == sub_str[0] and string[n-1] == sub_str[n-1]); \n      \n"], [0.09067894806830078, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find if a given text matches regular expression pattern \"ab?\"\n###### Write a list comprehension that returns a list containing values when only list1 is multiply by the index and the result is less than 50\n\nlist1 = [3, 4, 5, 20]\nresult = []\nfor value in list1:\n        if value * list1.index(value) <= 50:\n                result.append(value * list1.index(value"], [0.09064435434844716, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a one line code to check if a string contains from 0 to one 'ab's.\n\ndef remove(items):\n    rval = ''\n    for a,b in the_tup:\n        rval += a\n    return rval    \nThe above code is to remove identical ports from a list of strings which contain 2 or more port numbers.\n\nimport logging \ndef PrintException(error):\n    f = open('/code/"], [0.09059267667399372, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match 0 or more occurances of the pattern ab and return true or false.\n\nimport re\ndef text_match_escape_char_re(text):\n\tpattern = 'a\\.b'\n\tif re.search(pattern,  text):\n\t\treturn True\n\telse:\n\t\treturn False\nThe above code is a function to match Escape character with regex and return true or false.\n\n6\n.*az\n"], [0.09043231014293467, "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks for the presence of 'ab' in the ahead substring position of the given string.\ndef match_num(string):\n str1num=re.search('[0-9]+[a-z]+',string)\n return str1num\nThe above code returns a substrings that begin with a 'digits' and followed by a 'lowercase letter' in the given string.\ndef regexpal(word):\n regexpal1=re.comp"], [0.09043231014293467, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a program to tell if a string like 'abb', 'ab', 'a' are matched or not using re.search().\n\nfrom random import sample\ndef square(x):\n    return x**2\ndef map_basic2(function, iterable):\n    return [function(x) for x in iterable]\ndef map_basic3(function, iterable):\n    return [function(x) for x in sample(iterable,"], [0.09043231014293467, "def find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to check whether a given string matches a regular expression. \nprint(\"ip: \", ip)\nprint(\"mask: \", mask)\nprint(\"network: \", network)\n \nprint(\"Your entered pack we got from user\")\nprint(\"Valid ip address: \", calc_net_addr(ip, mask))\n\nprint(\"##########\")\nprint(\"# ip      #\")\nprint(\"##########\")\nprint(\"ip: \", ip"], [0.09043231014293467, "import sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find whether the text has a pattern like 'ab+'.\nimport re\ndef text_match_occurences(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return re.findall('ab?',text)\n                \nThe above code is a function to find all occurences that match the given pattern.\n\nimport re\ndef text_match_occurences("], [0.09029218729671627, "import heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function for us to implement regular expression for 0 or 1 combination to find a pattern\ni=[1,3,4,5,6,7]\nj=[]\nk=[]\nm=[]\nt=[]\nb=[]\nflag=True\nfor x in range(0, len(i), 3):\n    j.append(i[x])\nfor x in range(1, len(i), 3):\n    k."], [0.09029218729671627, "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program to find if a string contains a regular expression: https://www.geeksforgeeks.org/python-check-string-contains-regular-expression/.\n\ndef is_regular(str): \n    # Make an empty stack \n    stack = o\n    # Traverse through the given string \n    for i in range(len(str)): \n        if str[i] == '(': \n            stack."], [0.09029218729671627, "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to search words starts with 'a' and ends with 'b'.\nimport re\ndef text_match_zero_one(text):\n        return bool(re.search(r'^(\\w(?!_))*$',  text))\nThe above code is a python function to remove underscore alpha numeric characters.\nimport re\ntext = 'aceacebjkb123'\nprint(re.sub(r'[0-9]+',"], [0.09029218729671627, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is made to search for the pattern 'ab+' within the given string.\nimport re\ndef text_match_a_b(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe ab{2,3} expression means a followed by either 2 or 3 b's \n"], [0.09021349396844157, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program to verify if the text include at least one \"ab\" word.\nimport re\ndef text_match_one_only(text):\n    patterns = 'ab+'\n    if re.match(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python program to Use the search and match functions for verifying if the string has at least one a followed by zero or one b.\n"], [0.09020838827540195, "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find if there is a match (zero times or one time ) of word \"ab\" in the given text.\n\ndef text_match_zero_or_more(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to find if there is a match (zero times or more than zero times ) of"], [0.09013375722635923, "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to find if the pattern (a followed by zero or 1 b) matches with the given text or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                print(False) \n\n\nThe above code calls a python function for the same purpose as above and returns True if \nthe"], [0.0898817511545755, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function for matching with zero or one of preceding character.\n\ndef text_match_two(text):\n        patterns = 'ab{2}?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function for matching with two preceding character.\n\nimport re\ndef text_match_word(text):\n        patterns = '\\w+'\n        if"], [0.08975121376289787, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function for matching patterns of the type ab+?ac+?(correct until here).\nimport re\n\ndef shorten_frnd_name(temp_list):\n  for i in range(len(temp_list)):\n    print(temp_list[i].replace(temp_list[i][0], ''))\n  return\n\nx = \"saaaammmy\"\ny = \"vvvbbiirr\"\n\n"], [0.08968021596231712, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match a word with 0 or 1 a's.\nimport re\ndef text_match_group(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n            patterns = \"ab+\"\n            obj = re.search(patterns,  text)\n            #print(obj.group(0))\n            return obj.group(0)\nThe above code is a function to match"], [0.08968021596231712, "import sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks if a string contains a pattern.\nimport re\n\nlist1 = ['ab', 'abc', 'aabbcc', 'aabbbccc', 'ac', 'acc', 'abbbcccc']\n\nfor s in list1:\n        m = re.search('ab{0,1}?  c', s)\n    \n        # In pattern ab{0,1}?  if 0, 1 or both { and } are"], [0.08966139995719101, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find if a given word \"ab\" appear once or more in the sentence.\nimport re\ndef text_match_zero_one_or_zero(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to find if a given word \"ab\" appear once or not at all in the sentence.\n"], [0.08966139995719101, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find whether any substring matches a certain pattern or not.\nA loop function is created using a generator expression. The generator expression is passed to the chain from  from itertools import chain method which is applied to a tuple.\n\nturkey_road_shops = ('Pixelma Shop', 'KottonShop', 'Yummy Yummy Dumplings')\nnumber_of_shops = iter(range(len(turkey_road_sh"], [0.0895461647686601, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find the first occurrence of an expression, in this case, a zero or one occurrence is searched.\n\ndef print_subset(data, idx, sub): \n  # getting a 3 digit subset \n   # Construct the subset \n   temp = [data[e] for e in range(0, len(data)) if idx[e] == True]\n \n  print(temp)\n  # Append subset"], [0.0895461647686601, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match the pattern with text that includes 'a' and 'b'.\ndef tags_without_three(html):\n        tags = re.findall(r'<\\s*?(\\w+).*?>', html)\n        matches = [match for match in tags if match != 'body' and match != 'html']\n        return len(matches) != 0\nThe above code is a function to validate the html tags not"], [0.08949778097645412, "import re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if a string contains a word between a and b, with a being present but b being absent.\n\ndef text_match_repetitions_zero_one(text):\n    patterns = '/w+(a|b){0,1}ab/'\n    if re.search(patterns,  text):\n        return True\n    else:\n        return False\nThe above code is a function to check if a string contains two"], [0.08940987541946588, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a boolean function that tests to see if the string ab exists given that there be zero or one instances of its occurance.\n\ndef text_match_set(text):\n        patterns = '[au]+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a boolean function that tests to see if the string issued contains all a or all u in the provided string.\n\n"], [0.08937925432514436, "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\n\nimport sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " will check for zero or one occurrence of a pattern in a string and return true if the pattern of ab+ is present atleast once\nimport re\ndef text_match_zero_or_more(text):\n        patterns = 'ab*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code will check for zero or more occurrences of a pattern in a string and return true if"], [0.08935458027639394, "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function that checks whether the string satisfies the given regex or not.\n\ndef do_find_substring(substring, string):\n    if substring not in string:\n        return -1\n    for i in range(len(string)):\n        for j in range(len(substring)):\n            if i + j < len(string):\n                if string[i + j] != substring[j]:\n                    flag"], [0.08922066124847258, "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if a string consists the patterns given and returns true or false accordingly.\n\ndef area_conversion():\n  km = float(input(\"Enter the area in kilometer squared: \"))\n  converter = float(1000000)\n  meters = km*converter\n  return meters\nThe above code is a function to train the given km to meters.\n\ndef temp_conversion():\n  temp_given_in = float"], [0.0890973606121723, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is used to match a word containing 'ab'\n\nimport re\ndef text_match_word_b(text):\n        patterns = '\\b[A-Z][a-z]*?\\b'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\nThe above code is used to match a word starting with capital followed by lower case.\n"], [0.0890973606121723, "import re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\n\nimport sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to evaluate a given \u201cregular expression\u201d pattern with an example text.\n\nimport operator as op\n\nstudent_data = ['Ankit',{'Maths':30,'English':50}]\n\nprint(max(student_data[1].items(), key=op.itemgetter(1))[0] )\n\nThe above code is an example to extract\nmax/min out of dictionary\n\nHow to run a my"], [0.08908345582054471, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to match a substringtext from a string text, where a ? metacharacter specifies that the previous character is optional.\ncount=0\nfor x in range (1,4):\n    for y in range (1,4):\n        if x==y:\n             count=count+1\n        break\nprint (count)\nTo find if a number is prime number or not.\n\ndef is_prime(n):\n"], [0.08908345582054471, "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\n\ndef union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to match if the given string contains a pattern 'ab' zero or one time.\n\t\nimport re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is to match if the given string contains a pattern 'ab' zero or more times.\n\nimport re\ndef text_match(text):\n"], [0.08908345582054471, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a funtion to match zero or one occurences of the \"ab \" string in the input\nimport re\ndef text_match_zero_more_than_one(text):\n    patterns = 'ab*'\n    if re.search(patterns,  text):\n                return True\n    else:\n                return False\nThe above code is a funtion to match zero or more occurences of the \"ab \" string in the input\n"], [0.08898469540912568, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to verify the string 'a', 'ab' and 'a' are present once or zero times in a string and returns True.\n\ndef rangoli(num):\n  width = ((num * 2) - 1) * 2 - 1\n  asci = 96 + num\n  for i in range(1, num):\n      pat = ''\n      for j in range(((num * 2) - 1) * 2 - 1):\n"], [0.08898469540912568, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a program to find if a string matches a re pattern that allows one character preceding it. It returns False if no match is found and True when found.\n#!/usr/bin/env python\ndef remove_digits(text):\n    result = re.sub(r\"\\d\", \"\", text)\n    return result\nThe above code is a program to remove digits from a given text to search useful information from text.\n#!/usr/bin/"], [0.0887421263452011, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program which takes a string and performs a search.\npattern='ab?'\nprint(re.match(pattern,\"ababd\"))\n\n\ndef min_Search(str1,str2) : \n    L = min(len(str1), len(str2)) \n    bcheck = L  \n    count = 0\n    for i in range(L) : \n        if (str1[i] != str2["], [0.0887421263452011, "def lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to count the number of occurence of given pattern. https://www.hackerrank.com/challenges/matching-zero-or-one/problem - in this case a verbatim copy of test cases\n\nimport re\ndef text_match_min_max(text):\n        patterns = 'ab{2,3}?'\n        if re.search(patterns,  text):\n                return True\n        else:"], [0.0887421263452011, "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regex [regular expression](https://www.w3schools.com/python/python_regex.asp) code to search a string to see if a particular pattern exists in a text. \ninp = \"abracadabra\"\nch = \"abr\"\nr = re.search(ch,inp)\nif r:\n    print(\"found\", r.span(), r.start(), r.group(), r.end"], [0.08863782600778886, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to match if the given input text is containing \nmatching zero(s) and/or any one more 'a's.\n\nimport re\ndef match_zero_a(text):\n    patterns = '[^o]+?'\n    if re.search(patterns,  text):\n                return True\n    else:\n                return False    \nThe above code is a python function to check a given input is having sequences of one or"], [0.08822292185421153, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a validator to check if the given string starts with one 'a' and ends with \"b\".\n\ndef regex_range():\n        regex_range=\"^1[0-9]{10}$|^9[0-9]{10}$|^[0-9]{10}$\"\n        return regex_range\nThe above code is a RegEx validator which reads a text file name Regex_values.txt,"], [0.08820833684299528, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to check the validity of an email address.\n\npython-regex.pdf : This file is consite illustration of how to search, match and find other alterantives for a string in regular expressions.\nHere a single character matches exactly that character which is dot here. exactly match three(3) digits.\nimport re\nPattern = r'\\d{3}[.-]\\d{3}[.-]\\d{4}'\nfor i"], [0.08820833684299528, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to return the string containing the prefix called zero or one times.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\nimport"], [0.08820833684299528, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if the specified text string matches the given pattern or not.\nimport re\ndef text_match_zero_one(text):       \n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to check if the specified text string matches the given pattern or not.\nimport re\ndef text_match_zero_one("], [0.08812566173135587, "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to do a case-insensitive pattern search. Ignore Case in a specified text\n\ndef text_match_bc(text,bc):\n    for i in range(0,len(text)):\n        for j in range(0,len(bc)):\n            if bc[j].isdigit():\n                if bc[0] == \"*\":\n                    print(\"False\")\n                    return False\n                    \n\nThe above code"], [0.08812566173135587, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find strings which will match a given regularexpression.\ndef no_consecutive_one(l):\n  start=l[0]\n  print(\"1\")\n  for number in l:\n    if(start != number):\n      print(\"0\")\n      start = number\nno_consecutive_one([1,1,0,0,1,0])\nThe above code is a function to to remove"], [0.08809742686685036, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " vreates a function with a string parameter to find whether or not there is a match to the regular expression pattern AB+? in the string text. This would be similar to using the caret anchor (^) at the start of the pattern, except that it will check only that text begins with the pattern, not necessarily that the string ends with it.\nimport pdb\ndef text_match_zero_one(text):\n        patterns = [0,1]\n"], [0.08801095798791009, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match or not match ab or ab+?\ndef text_match_zero_or_more_repetition(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return \"Found a match!\"\n        else:\n                return \"Not matched!\"\nThe above code is a function to match or not match ab or ab*?\n\ndef text_match_backward_zero"], [0.08801095798791009, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match a text string from the input text with the pattern.\nimport re\ndef count_facts(text):\n  dic_ans = {}\n  count=0\n  for all in text:\n    for num in all:\n      if num%2 == 0 :\n        count+=1\n    n = text_match_zero_one(all)\n    n1 = text_match_zero_one(all)\n   "], [0.08789922672202222, "def set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if given text matches the pattern, 1 time or zero times.\ndef text_match(text):\n\tpatterns = 'ab?'\n\tif re.search(patterns,  text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn('Not matched!')\nThe above code is a python based regex search matching the pattern \"ab?\".\ndef text_match(text):\n\tpatterns = '"], [0.08750384592780018, "def second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check whether a given text is matching the given pattern of string.\nimport numpy\ndef movingaverage(array, window):\n    if(len(array) != len(window)): # check input array and window size are equal or not\n        return \"incorrect input\"\n    weights = numpy.ones(len(window))/len(window) \n    return numpy.convolve(array,weights,'valid')\nThe"], [0.08745200290121356, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to check whether the text matches a particular pattern or not.\nimport math\ndef expand_integers(lst):\n    res = [int(i) for i in lst]\n    return res\n\nfilter(expand_integers, lst)\nList(filter(expand_integers, lst))\nThe above code is a python code to unfold numbers in list. Without using any inbuilt functions.\nsum("], [0.08745200290121356, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check whether text matches with regex - zero or 1.\nimport re\ndef text_match_zero_or_more(text):\n        patterns = 'ab*??'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to check whether text matches with regex - zero or more.\nimport re\ndef text_match_one_or_more"], [0.08739435988441797, "def sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is an example function to check whether the entered text matches a given pattern or not.\nimport re\ndef text_match(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\nThe above code is an example function to check whether the entered text matches a given pattern or not.\nn = int(input())\nfor"], [0.08739435988441797, "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is used to match the given string that only has zero or one occurence of a. Thus it prints a True.\n## if given f,ob,g and if white spaces are present first program will remove them and then remove special characters re\nimport re\ndef metric_prefix(text):\n    text = re.sub('f|ob|g','',text.lower())\n    if not text:\n        return None\n    if text[-1]"], [0.08732322765926476, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to match/search text that starts with 'a', ends with 'b' and has zero or one 'b'.\n\nimport re\ndef text_match(text) :\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else :\n                return False\nThe above code is a python function to match/search text that starts with 'a', ends with 'b' and"], [0.08702642006680146, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " will match zero or one small case 'a' in front of 'b' in Python.\n\nfrom string import ascii_lowercase\nfrom re import sub\ndef domain_get(url):\n    get_text = sub(\"(http.://|www.)\", \"\", url)\n    get_domain=sub(\"\\.(com|net|org|io|co|in|edu|cn|info|nl)(.*$)\", \"\", get"], [0.08702189001836953, "def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to return all non-overlapping matches of patterns in each input string using zero_one quantifier.\nimport re\ndef text_match_zero_one0(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to return all non-overlapping matches of patterns in each input string using zero_"], [0.08701867980404966, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to search for specific substrings in a sentence.\nimport re\ndef is_allowed_specific_char(string):\n    charRe = re.compile(r'[^a-zA-Z0-9.]')\n    string = charRe.search(string)\n    return not bool(string)\nThe above code is a function to check specifically whether a specific character exists in a string.\nimport re\ndef find_tags"], [0.08701867980404966, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to return the satisfiability of the condition of matching 1 or none.\n\ndef unique_element(lis):\n  return list(set(lis))\nHere is a function to extract unique values from list.\n\nimport numpy as np\ndef vectorize(glove):\n  vector = np.random.random((300,))\n  for i in glove:\n    vector[i] = glove[i].reshape((300,))"], [0.08701867980404966, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is matching a string ab, abb, abbb, but not aa, aaa or aaaa.\n\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is matching a pattern ab and abb, but not abbb, abbbb and so on.\n\n"], [0.08701867980404966, "def even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find the text which has the pattern- 'ab+?' where at-least a should be there, including 0.\ndef KMP(text, pattern): \n        text_len = len(text) \n        pattern_len = len(pattern) \n  \n        #Longest prefix postfixes(LPS) of the given pattern \n        #Till ith index in lps indicates the longest postfixes  \n       "], [0.0870083109849067, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " displays whether a string has or has not any or one 'a' present in it.\n\n# List\n\n# Q 3.1\ndef divide_3_5(lst):\n  sum = 0\n  for num in lst:\n    if num%3 == 0 or num%5 == 0:\n      sum8 = sum\n      sum += num \n  return sum8\nThe above code is to return the sum of multiples of 3"], [0.0870083109849067, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check whether the string matches the given pattern or not.\nimport re\ndef text_match_to_asterisks(text):\n        patterns = '\\w+\\S*$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to check whether the string matches the given pattern or not\nThe above code is a simple python program which prompts for"], [0.0870083109849067, "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\n\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " will match for strings that start with \"ab\" followed by any amount of characters, with the letters b and o being option. It returns a True if the string is matched, otherwise False.\nimport re\ndef text_match_zero_one_multiple(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code will match for strings that start"], [0.0870083109849067, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is Given a text string, we need to check if even one character in the text is lowercase alphabet or not.\nA regular expression denoting a string of length exactly four containg only lowercase letters from english vocabulary.\n\n//Write a program to check the validity of password input by users............//\n                                             \nimport re\ndef text_match_password_check(text):\n       patterns = '(?=^.{8,}$)("], [0.08660791284720062, "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if b occurs exactly to the zero or one times of a in a non-empty text.\n\nAdd a global called REVERSE and change it to True when the output must be in reverse order.\ndef sort_reverse(dict1):\n        sorted_x1 = sorted(dict1)\n        if REVERSE:\n            sorted_x1.reverse()\n            return sorted_x1\n        else:\n            return sorted"], [0.08655404593900339, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if they match a pattern\n\ndef text_match_float(text):\n    patterns = '[+-]?\\d*[.]\\d+'\n    if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to check inclusion of a single-character \"+\", \"-\"< or no sign character (\"+\"),a digit (not \"0\"), a"], [0.08654743295815148, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if a given string contains a two characters joined by any number of characters.\n\nThe re module provides several functions to check a given strings matches a pattern or not. One such function is re.fullmatch(). It returns a match object when the pattern is found and returns None otherwise.\nIf any letters from a-z or A-Z or 0-9, return the string True, otherwise, return the string False.\ndef values_match_in"], [0.08645617278407866, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a functionto search a pattern in given text.\nimport re\ndef text_match_float(text):\n    patterns = '[^0-9]([0-9]{1.5})($|[^0-9])'\n    if re.search(patterns,  text):\n        return True\n    else:\n        return False\nThe above code is a function to search a pattern in given text.\nimport re\ndef"], [0.08645617278407866, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match the pattern which occurs a and b only once assuming there \nis no whitespaces and lowercase letters.    \nc\n2*32+2*21003+1*43747\n10*81+9*675+8*1290+7*104\nContinue\n\nThe dictionary xml_dict  contains the decoded weather object. \n\nimport xml.etree.ElementTree as ET\n\ndef xml(xml_dict"], [0.08645617278407866, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check the given text against the condition that the first character be in lowercase,\n and all remaining characters be in uppercase.\nimport nltk\nnltk.download('vader_lexicon')\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \nsid = SentimentIntensityAnalyzer()\ndef sentiment_analysis(text):\n  sentiment_analyse = sid.polarity_"], [0.08627458415387583, "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to find strings that contain zero or one 'a'\nAliasing it as a function\ndef match(s1, s2):\n         from difflib import SequenceMatcher\n         seq = SequenceMatcher(None, s1, s2)\n         return seq.ratio()\nThis module is in the difflib package of the standard library which allows you to know similar ratios of any objects.\n\nfor ex:- in 4 you have Aliasing it as"], [0.08626177941162029, "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function that returns true if the string contains first and second as first character\nof string with one character in between an third character as 'b'. Otherwise it returns false.\nPlease help me to solve the above code of regualar expression problem.\n\nSimple Python program to check if a string starts with specified characters.\nistartswith()- return Boolean stating if the characters passed to the completer start substring to the target string.\n\"\"\""], [0.08620916933057549, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " creates a regular expression that allows a group(b) to occur 1 or more times(+). By useing two mutually exclusive operators in regular expression we can match a and p with b anywhere in between.\n\ndef merge_ranges(ranges):\n    merged_range = []\n    for start, end in sorted(ranges):\n        if merged_range and start <= merged_range[-1]:\n            merged_range[-1] = max"], [0.08610865034627765, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match specific number of occurances of characters .\nimport re\ndef special_symbol(symbol):\n    if symbol.isalnum() or symbol.isspace():\n        return False\n    else:\n        return True\nThe above code checks for the special characters within a string. \nimport re\ndef occurence_digits(text):\n count = sum(1 for _ in re.findall(r\"\\d\","], [0.08610865034627765, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find sequences of lowercase letter (a-z) appearing at least once.\n\nimport operator\nlis = [(1, 2), (3, 1), (5, 10), (11, -3)]\nlis.sort(key=operator.itemgetter(1))\nprint(lis)\nThe above code sorts a list of tuples by the second value in the tuple.\n\nimport operator\ndef length_sort(words):\n"], [0.08610865034627765, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find whether the text has \"ab+?\" pattern\nimport re\ndef text_match(text):\n        patterns = '^[a-z]*s$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to find whether the pattern \"^[a-z]*s$\" is matched in the given text\nimport re\ndef"], [0.08593187914311455, "def unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find whether the input string contains a text match for the above pattern. This tests if the patterns appear one or zero times.\ndef unique_list(l):\n    x =[]\n    for a in l:\n        if a not in x:\n            x.append(a)\n    return x\nThe above code is a function to create a new list which only counts the number of times each value appears in the original string.\nk ="], [0.0859256424109809, "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function which matches the string with regular expression ab+?.\n\ndef add(string):\n    s = sum = 0\n    for word in string:\n        sum = sum + int(word)\n    return sum\nThe above code is a function which takes one string and sums up the integer values present in the string.\n\nimport copy\nx = [1, [1, 2]]\ny = copy.deepcopy(x)\ny["], [0.08582482382050943, "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", "s is a function to check the given \"text\" contains \"ab\" zero or one time satisfying the regular expressions and meta-characters for checking given string as true else returns false\nimport re\ncolor1 = 'Red', 'Green', 'Orange', 'White'\ncolor2 = 'Black'\nprint(re.match('Green', color1))\nimport re\ncolor1 = 'Red', 'Green', 'Orange', 'White'\ncolor2 = 'Black"], [0.08568130627484105, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function which searches for any word(s) \u2018ab\u2019 in a given word. In other words this functions returns a True value if a given word has word(s) \u2018ab\u2019.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:text\n                return False\nThe above code is"], [0.08568130627484105, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match specific characters present or absent in a string.\nimport re\ndef text_match_re_5(text):\n  patterns = 'ab$'\n  if re.search(patterns,  text):\n                return True\n  else: \n                return False\nThe above code is a function to match the end of a string.\nimport re\ndef text_match_re_6(text):\n  patterns = 'ab"], [0.0855878745246035, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match the text contained in the string variable text/ It returns True/False based on whatever matched with the text provided. Here we used re.search() function which returns either an object/ None based on whether the match was successful or not. Here, the user defined variable (patterns) is input.\n\nYou can find more about python regex syntax here.[https://www.w3schools.com/python/python_regex.asp]\n\n"], [0.08547193218040006, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to implement regexp.\nimport re\ndef match_patterns(text):\n    patterns = '\\w+'\n    if re.search(patterns, text):\n        return 'There is one: ' + re.search(patterns, text).group()\n    else:\n        return 'There are many: ' + ', '.join(re.findall(patterns, text))\nThe above code is a function to find"], [0.08545410105574609, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find whether the string contains first the word \"ab\" , with or without any number of b's appended behind it.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to find whether the string contains first the word \""], [0.08538656340685756, "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check whether the string contains\natmost one 'a'.\nBased upon the input provided by the user; the aba function\nwhich exactly matches the string character and their\nnumber of occurrences will be returned.\nFor example, if a string: abaaaacaadaa is passed to this function\nthen the string  a.a.a.a is returned.\na is present 4times in the string while\nb & c are present once.\n"], [0.0852709232810149, "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match with ab exatly one b in a string.\n\nimport re\ndef text_match_threedigstart(text):\n        patterns = '^...\\....'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to match with atleast 3 digits start with 7 in a string.\n\ndef search(pat, txt"], [0.0852709232810149, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a Python code to match a regex pattern in text and return True or False.\n\nimport re\ndef count_letter(text):\n        return len(re.findall(r'[^ \\n]+', text))\nThe above code is a function to return number of letters in a given string.\n\ncount_letter(\"beep boop\")\n# 4\ncount_letter(\"happy thoughts\")\n# 6\ncount_letter(\"happy time\")"], [0.08519852363907088, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a program which matches the word which has zero or one a character.\nimport re\ndef text_match_non_space(text):\n        patterns = '\\S+@\\S+'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a program which matches the word which has non space letters.\nimport re\ndef text_match_group_one(text"], [0.08519852363907088, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function  to match a regular expression zero or one times.\nimport re\ndef text_match_non_zero(text):\n        patterns = 'ab+'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python function to match a regular expression more than zero times.\nimport re\ndef text_match_mul_zero(text):\n       "], [0.08509628078456316, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression function that returns a True for any input that contains \u2018ab\u2019. The \u2018+?\u2019 metacharacter stops the engine looking for \u2018ab\u2019 any further into the \u2018a\u2019. The two characters combined make sure that in the input \u2018abbababababab\u2019 only the first \u2018ab\u2019 is taken into account returning \u2018True\u2019.\n\nThe number of vowels in a"], [0.08501311671597465, "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is regex expression to match ab '0 or more times'\nimport re\ndef text_match_fixed_count(text):\n        patterns = '^[a-zA-Z0-9_]{7}$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is regex expression to match length of the string 7 characters and alphanumeric values.\n\nimport"], [0.08501311671597465, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression to match ab.\ndef is_ascending_lists(lists):\n    for i in range(1, len(lists)):\n        if lists[i] and lists[i-1] and lists[i] > lists[i-1]:\n            return False\n    return True\nThe above code is function that returns true if the list is ascending.\nclass Solution(object): \n    def __init__(self,"], [0.08497711745721535, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program that uses re.search(string) to search for the presence of a word or words in a text file that match a particular pattern.\nimport re\ndef text_match_split_join(file):\n    patterns = '[0-9]{1,3}[0-9]*'\n    with open(file, 'r') as text:\n       if re.search(patterns,text):\n           return True\n      "], [0.08487649761370195, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to process user data\ntext = input(\"enter your data:\")\nif text_match_zero_one(text):\n        print \"it is a valid data\"\nelse:\n        print \"it is not a valid data\"\nThis is python code implementation of a compilier that allows the user to process user data.\nimport pyttsx\nengine = pyttsx.init()\nengine.say('GeeksforGeeks"], [0.08487649761370195, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if at-least one occurrence of \"ab\" will be there in text.\ndef move_zeroes(arr):\n    for each in arr:\n        if (each == 0):\n            arr.remove(0)\n            arr.append(0)\n    return arr\nThe above code is a function to move all zeroes to the end of the array in place.\ndef check_sum_four(num_list"], [0.08480962641324631, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to see if a given text matches a pattern which involves searching for the characters a and b in that order, with the '?' regex modifer allowing the a and b characters to\n    'match zero or one times each'.\nimport re  \ndef check_ten_consecutive_integers(numbers):\n  patterns = '^1'\n The above code is a python function to check if the given list of integers includes at least ten in"], [0.08457451411127818, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches a pattern at the start of the string.\nimport re\ndef text_match_mul(text):\n      patterns = 'ab{2,4}?'\n      if re.search(patterns,  text):\n                return \"Found match\"\n      else:\n                return \"Not Found\"\nThe above code repeats a pattern multiple times at the start of the string.\nimport re\ndef text_match_homewoner_oop(text"], [0.08449710373199906, "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check if a given input string contains regex expression \"ab+\".\nimport re\ndef number_plate_num(text):\n        patterns = 'KL\\d\\d\\d\\d'\n        if re.search(patterns,  text):\n                return 'The test passed'\n        else:\n                return 'The test failed'\nThe above code is a function to check if a given input number is a valid KA number"], [0.08449710373199906, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check whether the given string is repetition of  'ab+' with 0 or 1.\n\ndef pypart(n):\n    for i in range(0, n):\n        for j in range(0, i+1):\n            print(\"* \",end=\"\")\n        print('\\r')\n\nfib(11)\naFunction is called with the name of the module when importing the module.The alignment format is the same"], [0.08441671339318567, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to check the presence of a pattern 'ab+?' in the text. The question marks after a, b indicates the pattern has to be searched in the text once, or not at all.\n\ndef text_match_zero_more(text):\n        patterns = 'ab*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to check the presence"], [0.08415701590142591, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\ndef filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " searches through a case-senstive text for the word 'python,' with zero or one 'e\u2019 in the word.\nPython Challenge\n\nmysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nmysock.connect(('data.pr4e.org', 80))\ncmd = 'GET http://data.pr4e.org/page2.htm HTTP/1.0\\r\\n"], [0.08415479651556887, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\ndef max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression with a Zero-One quantifier.\nWrite a regular expression to find lowercase letters joined with \u2018_\u2019.\nimport re\ndef text_match_lc_joined(text):\n        patterns = '[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python regular expression to search for"], [0.08415479651556887, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks if a value is present in a string and if present returns True else returns false.\n\ndef string_validators(input):\n    #your code here\n    nO_alnum = 0\n    cH_alnum = 0\n    nO_alpha = 0\n    cH_alpha = 0\n    nO_digit = 0\n    cH_digit = 0\n    nO_lower = 0\n    cH_lower ="], [0.08415479651556887, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to search regular expressions.\n\nclass Multiplication(): \n        def multiply(self):\n                a = 10\n                b = 20\n                print(a * b) \nMultiplication().multiply()\nThe above code is a class to declare methods and again call them.\n\nimport re\ndef at_least_three_vowels(s):\n>>>>>>> akash\n    count = 0\n    for ch"], [0.08415479651556887, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find the patterns using \"ab+?\" in a given text.\nimport re\ndef text_match(text):\n  patterns = re.search(\n      r'ab\\w.\\w?','ab,'\n  )\n  if patterns:\n      return patterns.group()\n  else:\n      return \"No match\"\nThe above code is a function to find the patterns using \"ab\\w.\\w?\" in a given"], [0.08413188680230096, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to search \"ab\" for a string and a \"b\", however, greedy search is restricted to 0 or 1 time.\n\ndef text_match_zero_or_more(text): \n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is to search \"ab\" for a string, however, greedy search is restricted to 0 or \""], [0.08413188680230096, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match the text in pattern, if matched return True else return False.\ndef group_list(group, users):\n  members = f'{\", \".join(users[:-1])} & {users[-1]}'\n  return f'{group}: {members}'\nThe above code is a function to create a given group name and user list in form of string format.\ndef binary_search(n, arr, l,"], [0.08413188680230096, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is for checking if a given string contains any word whose length is 1.\n\nThe above code is for matching \u201czero or 1 a\u201d.\nimport re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return 'Match Found'\n        else:\n                return 'Match Not Found'\nThe above code is for matching \u201czero or more a\u201d."], [0.08413188680230096, "def largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match a given text in regular expression by defining the pattern 'ab+?'.\n\nimport re\ndef text_match_zero_or_more(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to match a given text in regular expression by defining the pattern 'ab*?'.\n\nimport collections"], [0.08409375994347705, "import sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find whether the string starts with a or ends with b where b can repeat once.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'a.+'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to find whether string ends with a and starts with o after a dot.\n\nimport re\ndef match"], [0.0840787763016848, "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to find whether there is any match in the text using regex with '+?' operator.\ndef ip_checker(ip_string):\n        return re.match(r'(^[2][0-5][0-5]|^[01][0-9][0-9]|^[1-9][0-9]|^[0-9])\\.([0-2][0-5][0-"], [0.0837812889645473, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is the most general solution. Ab+ will mean the character a followed by b any number of times except 0 times.\nimport re\ndef text_match(text):\n        pattern = 'hackerrank'\n        if re.search(pattern,  text):\n                return True\n        else:\n                return False\nPattern: a condition for the searched text\nText: the text that needs to be further assessed\nReturn value from search(): If search() either returns"], [0.08378005604518197, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to search for a pattern \"ab+\" in a given string.\n\ndef closest_to_zero(A):\n    result = sorted(A, key=abs)\n    return result[0]\nThe above code is a function to find the number nearest to zero in an array and all such numbers would be considered.\n\ndef valid_parenthesis(s):\n    stack = []\n    paren = {')':'(',"], [0.08375275082001014, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to search a text which contains 'ab' at least once.\nimport re\ndef three_multiple(text):\n  patterns = '[1-9]+\\d\\d\\d'\n  if re.match(patterns, text):\n    return True\n  else:\n    return False\nThe above code is a function to match a text which contains multiples of three.\nabcccddddeeeeeef\na, b,"], [0.08367636035725759, "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks if a string contains word \u201cb\u201d from the word \u201cab\u201d.\ndef upper_constraints(str1):\n    if str1.isupper():\n        return str1\n    else:\n        return str1.upper()\nThe above code converts lower case to upper case.    \ndef count_string(str1):\n    length = len(str1)\n    if(length == 3):\n      return str"], [0.08367058773353993, "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to find if the given string contains a sequence \u2018abc\u2019 or \u2018abcabc\u2019.\ndef alternate(num) :\n    prev = num[-1]\n    for i in range(n-2, -1, -1) :\n        cur = num[i]\n        if cur!= prev :\n            return ('False : '+num)\n        else :\n            prev = num[i]  "], [0.08367058773353993, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to search for the presence of zero or one occurrences of pattern inside a string.\ndef binary_search_recursive(array, target, start_index, end_index):\n        if start_index > end_index:\n                return -1\n        mid_index = (start_index + end_index)// 2\n        mid_element = array[mid_index]\n        if mid_element == target:\n                return mid"], [0.08366285238117552, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a program to search and return only that string which has 'ab' repeated 0 or 1 times.\nimport re\ndef text_match_try(text):\n\tpatterns = 'ab*?'\n\tif re.search(patterns,  text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn('Not matched!')\t\nThe above program is a program to search and return only those strings whose 'ab' is repeated"], [0.08356565493101564, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a fuction that returns true when there exists a match for the patterns described in text, else it returns false.\nimport re\nnum = '6748536357934875'\n\nif not re.match(r'^[456]+[0-9]{3}-?[0-9]{4}-?[0-9]{4}-?[0-9]{4}$', num):\n    print(\""], [0.08344087882163725, "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find a match of a substring  with the given pattern or not.\nimport re\ndef text_match(text):\n    patterns = 'ab{3,5}?'\n    if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to find a match of a substring  with the given pattern or not.\nimport re \ndef textStart_"], [0.08344087882163725, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular Expression to check if the given sentence has at least 1 character \"ab\" present in the same order somewhere.\n\ndef str_count(strng, letter):\n    return strng.count(letter)\nThe above code is a function to count the number of times of appearance of a particular character.\n\nimport re\ndef text_match_twice(text):\n        patterns = 'ab?'\n        if re.search(patterns,"], [0.08336726646676286, "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to search for 'ab+?' in a given string.It required to give input \"ab\" for getting True as output.\nimport re\ndef num_match_word(word):\n    if re.search(r\"[0-9]\",word):\n        return 'found'\nThe above code is a function to search for numbers ('0-9') in a given word.\ndef concatenate(dict):\n    result=''\n"], [0.08336726646676286, "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to do a text pattern match using regular expressions.\nimport re\n\ndef text_match(text):\n        patterns = 'ab{3}?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\nThe above code is a function with regular expression.\nimport re\nMyname =input(\"My name  is\")\nstring1 = \""], [0.08327191172509207, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks if an input string contains a pattern and returns True or False.\n\nreq ={\"Name\":\"Pankaj\",\"Age\":35,\"Country\":\"India\",\"Hobby\":\"guitar\"}\nnew={\"Name\":1,\"Age\":2}#get my dictinories\n{k:v for k,v in req.items() if k not in new}\nThe above code returns a dictionary of all the keys which are not found in the specified dictionaries."], [0.08318579389337699, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is python function to determine if the given text matches the pattern.\ndef mth_index_cutp():\n       \nThe above code is python function that return the last substring of the list which contains the list of counter and value.\nIn the given list if a value is less than m return a tuple with 2\ndifferent variables.\ndef enumerate(sequence, start=0):\n     n=start\n     series=[]\n     while n< len("], [0.08318453835906915, "def Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python code to match zero or one occurance.\nimport re\ndef text_match_zero_one(text):\n        patterns = re.compile(r'^[\\w\\.]+\\@[\\w]+.com$')\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python code to match zer or one occurance.\nimport"], [0.08311367536438638, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match a single character repeatedly once or zero times\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab{3,5}?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to match a single character repeatedly a minimum of 3 times, and a maximum of 5 times.\nimport re\ndef text_match"], [0.08311367536438638, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to check if the string contains 'ab'(+ denotes 0 or more occurences of a or b) and return true if it does else return false.\n\ndef text_match_never_ends(text):\n  patterns = 'ab*?'\n  if re.search(patterns,  text):\n    return True\n  else:\n    return False\nThe above code is to check if the string contains 'ab' (* denotes 0 or more"], [0.08311367536438638, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regex expression, however regex is currently not covered in our course. Use a function test_regex() to display boolean results for the following examples\n    \n    \nL0 = [1,2,3,-1]\nL1 = [4,5,6,7]\nfull_list = L0 + L1   \nFull list is a python list and has the following properties if we print full_list and then add full_list[:4"], [0.08311367536438638, "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program to search for a pattern in text. The '+' searches for 1 or more instances of preceeding character whereas the '?' searches for a single instance of preceeding character.. This can be used to search for pattern like ab in text.\n\nimport re\ndef text_match_count(text):\n        patterns = '^[a-zA-Z]*s$'\n        if re.search(patterns,  text"], [0.0830214149286509, "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndef insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a program that takes a string and matches it against the regular expression ab+?. If the pattern detects a match, True is printed to screen. Otherwise, a False is printed to screen.\nstring[::-1]. If a string is reversed using the syntax provided above, a new reversed string is also returned. Reverse yourself by setting the step parameter to -1 as in string[::-1]. In this exercise, you will repeat the steps and count the characters that ="], [0.08297829131336766, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to check of string match only zero or one a or b.\n\nfrom numpy import array\ndef flip_bit(number, n_bit):\n        result = number ^ (0b1 << (n_bit - 1))\n        return bin(result)\nThe above code is function to flip the nth bit in a binary number with the &^ operator.\n\ndef split_dad(word):\n    return word.replace(\"dad\", \""], [0.08288972514468644, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python code that checks whether it agrees to the conditions or not.\nimport re\ndef text_match_u(text):\n        patterns = '^[a-zA-Z|\\s]*$'\n        if re.search(patterns, text):\n                return True\n        else:\n                return False\nThe above code is a python code that checks the given text is starting with alphabet.\ndef is_num(k):\n"], [0.08279781407346017, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to check whether a string contains a pattern at the start of the string.\n\"\"\"\n\"\"\"\ndef char_list_to_str(char_list):\n  result = ''\n  for i in range(len(char_list)):\n    result = result + char_list[i]\n  return result\nThe above code is a python function to concatenate the string in a list given to a function.\n\"\"\"\n\"\"\"\n"], [0.08279781407346017, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python code to check whether the given text contains any word \u201cab\u201d  or not. Here the b is considered zero or more time. \nimport re\ndef text_match_non_zero(text):\n        patterns = 'ab+'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python code to check whether the given text contains any word"], [0.08279781407346017, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to search for a string in another string.\ndef check(n):    \n    return [i for i in range(1,11) if n+1 == i*i]  \nThe above code is a very short code to check if the required files can be easily created with the given data.\ndef longest_common_sub(s1,s2):\n    curr_len = max_len = t = 0\n    for"], [0.08264198963436381, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " Create the regex expression to match the word that starts with \"ab\" and the following letter is not \"c\",\nfollowed by anything. Note that, Here we have used \"?\" which is always greedy.\nimport numpy as np\ndef standard_scaler_test(test_data,test_mean,test_standard,test_size):\n  train_list = [0 for i in range(len(test_mean))]\n  for _ in"], [0.08264198963436381, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find match patterns repeatedly to words in text.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?' \n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to find match patterns repeatedly to words in text.\nimport re\ndef text_match_zero_onet(text1):\n        patterns = '"], [0.08264198963436381, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match part of a text using patterns.\n\ndef remove_characters(text):\n    patterns = '[0123456789]'\n    out = re.sub(patterns, \"\", text)\n    return out\nThe above code is a function to remove all numeric digits in a text.\n\nimport json\nfrom bs4 import BeautifulSoup\ndef clean_data(dict):\n  details = {}\n  details[\"Phone"], [0.08252301452243646, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks whether a given string matches appropriate pattern or not.\n\ndef lang(n,i):\n   for e in range(1,i):\n      n=n+n\n   return n\nThe above code is a recursive fuction with two parameters given in the IV.\n\nimport random\n\ndef gau():\n   a=int(random.uniform(0,9))\n   print(a)\nThe above code randomly generates a number between 0"], [0.08252301452243646, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " helps to match a pattern in the actual string.The pattern \"ab+?\"\nmatches the string s in {\u201cab\u201d, \u201cabb\u201d, \u201cabbb\u201d}. However, \u201ca\u201d does not match \nThe above function returns true if it finds a match else it returns false.\n\ndef substitute_Substring(String, pattern, replace):  \n count = 0  \n result = re.sub(pattern,"], [0.08249270730666546, "def find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find a given pattern in a given string (optional).\nfrom re import search\ndef text_match_system(text, patterns):\n        if search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to find a given pattern in a given string using regular expression().\ndef sum_dimension(dlist):\n        result = i = 0\n        while (i < len("], [0.0823414292127406, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks the given string to match a pattern that begins with a specific string but does not end with specified string.\n\nimport re \ndef purify(num):\n nlist =[]\n for n in num:\n  if n % 2 == 0:\n   nlist.append(n)\n  return nlist\nThe above code checks for divisiblity of an integer by 2.\n\ndef remove_duplicates(string):\n s = ''"], [0.08232071632754916, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is returns a match if it is between two character and both are a or b.\nimport re\ndef text_match_multiplof3(text):\n        patterns = '^[a-z]+\\s([0-9]{0}$|([0-9]{1500})$)'\n        if re.search(patterns,  text):\n        In \"{0}\" '0' indicates the pointer to the pattern and can be used more than"], [0.08230039917338555, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to search for the presence of a pattern in a string.\ndef sum_of_all_digits (n):\n sum_=0\n while 0<=n:\n     sum_=sum_+n%10\n     n=n//10\n return sum_\nThe above code is a function to add all the digits of a number.\nThere must be spaces between words of string.\nExamples of use:\n\nsum_digits"], [0.08230039917338555, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to search if the given text containing the regular expression \"ab+?\".\nimport re\ndef text_match_numbers(text): \n        patterns = '\\d\\d\\d'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to search if the given text containing the regular expression \"\\d\\d\\d\"\nimport re\ndef text"], [0.08217084822433852, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\ndef list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks if a given text, matches the pattern 'ab+?' or not.\nThe '?' after patterns specifies that that the preceeding element(here 'ab') is optional. So, matched or not matched, both will give same result.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab??'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"], [0.08201149574055273, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression to match a phone number with the following conditions.\n\n789-789-789\n768-456-123\nabcdefgh\n+91\n0\n00\n9\n8\n7\n6\ns = \"73167176531330624919225119674426574742355349194934\\n96983520312774506326239578318016984801869478851843\\n8586"], [0.08199276785850557, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a text matching function but needs to return False in case of a match failure.\n\nimport re\nfrom itertools import permutations\ndef two_strings_to_perm(string_1, string_2):\n    \n    perm_1 = set(permutations(string_1))\n    perm_2 = set(permutations(string_2))\n    \n    perm = perm_1.intersection(perm_2)\n    \n"], [0.08197175859587691, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to search for patterns in a text using regular expression.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to search for patterns in a text using regular expression.\nimport re\ndef text_match(text):\n        patterns = 'ab*?"], [0.08197175859587691, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to return if the given text matches the given pattern. There can be variations in the input text.\nfrom collections import deque\nclass BSTree( object ):\n        def __init__(self):\n                self.root = None\n        def insert(self, x):\n                node = BSTNode(x)\n                if self.root == None:\n                        self.root = node\n                else:\n                        curr = self.root\n"], [0.08191866197503324, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " returns the search result of a given pattern in a given string.\ndef ip_add(ip_string):\n    ip = []\n    for i in ip_string.split('.'):\n        j = i[1:]\n        if int(j) <0:\n            print(\"Erorr: {} is an imaginary number\".format(i))\n        if int(j) > 255:\n            print(\"Erorr: {} is more than"], [0.08191866197503324, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function which checks if a given input is matched or not with the given pattern. \n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab??'\n        if re.search("], [0.08183236832904181, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to find whether there is a match or not of a given text with a regular expression formed by a set of letters some of which are specified by 'ab'.\n\ndef match_num(text):\n    patterns = '\\d{3}-\\d{3}-\\d{4}'\n    if re.search(patterns,  text):\n                return True\n        # else:\n        #         return False\n    return"], [0.08165533370661265, "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to search for a pattern at the beginning of a sequence.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.match(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to search for a pattern at the beginning of a sequence.\n\nimport re\ndef text_match_one(text):\n        patterns ="], [0.08165533370661265, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to find the difference between text match and text search\n\ndef text_match_model(text):\n        patterns = 'ab+?'\n        if (re.search(patterns,  text)):\n                return True\n        else:\n                return False\nThe above code is a function to find the difference between findall and search\n\nimport nltk\n\nsentence = \"\"\"At eight o'clock on Thursday morning Arvid and/*"], [0.08163662047114369, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match the text string to pattern ab+? and if it is matched return True otherwise False\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to match the text string to pattern ab? and if it is matched return True otherwise False\nimport re\ndef text_match"], [0.08150678345543184, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to find if the string has a pattern like shown.\n\ndef ord_upper(text):\n  return text.isupper()\nThe above code is a python function to find if the string only contains upper case letters.\n\ndef txt_vowels_replace(txt):\n  return ''.join('r' if i in 'aeiouAEIOU' else i for i in txt)\n  print s\n\n\n"], [0.08136941017228241, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function which is used to search the given text in order to find the possible matches of the word 'ab'.\nimport re\ndef text_match(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\nThe above code is a function to search the given text in order to find the possible matches of the word '"], [0.08119336241347726, "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression that accepts only single occurance of 'a' in the given string.\nimport re\ndef text_match_zero_or_more(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a regular expression that doesnot allow zero occurance of 'a' in the given string.\nimport re\ndef text"], [0.08113556767018949, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function which is used to perform the zero or one check on the strings.\n\neverything above is required and can be used.\nstill have some doubts regarding the integration.\n'''\n# Python function to print common elements in three sorted arrays by modifying first array\n'''\nThe above code shares common elements in three sorted arrays\n\nimport numpy as np \n  \na1 = np.array([1, 5, 10, 20, 40, 80"], [0.08111055596638632, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to test the given string for matching the given pattern. If the string match pattern it returns True else False.\nimport re\ndef text_match_one_more(text):\n        patterns = 'ab+'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to test the given string for matching the given pattern. If the string match pattern it returns True"], [0.08108445282045154, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a program for matching string with \"ab+?\" regex.\nimport re\ndef text_match_numbers(text):\n        patterns = '^-?(\\d+\\.\\d+$|\\d+$)'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a program for matching floating nubers with \"^-?(\\d+\\.\\d+"], [0.08105646371546442, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\nimport sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to search and check using RE (Regular Expression) about ab+? in a given string.\nimport re\ndef text_match_specific(text):\n        patterns = 'a.b'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to search and check using RE (Regular Expression) about a.b in a given string.\nimport re\n"], [0.08101718711839995, "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " will look for all the possible occurence \"ab\" and \"ab+\" and last element \"ab+?\"  in the given string text.\n"], [0.08077280508540315, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " returns a true if a match is found in given text, else false.\nimport re\ndef text_match_zero_all(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return ('match')\n        else:\n                return ('no match')\nThe above code is a function to search for given text in the specified string, and returns a match if found else returns not match. \nimport"], [0.08062509592888484, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match the given text and the pattern and returns true if the pattern is found else returns false.\ndef rep_punctuation(text):\n    punc= [',', '.', '?', '&', '/', '//', '=', ':']\n    jj=\"\"\n    for char in text:\n        if char in punc as ch:\n            jj=jj\n    else:\n        jj=jj"], [0.08060035483702262, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks for a pattern 'ab+' in a given string using regular expressions. The pattern \u2018ab+?\u2019 means the (ab) with non-greedy quantifier b. Greedy quantifier matches as many characters as possible while non-greedy one tries to match as few characters as possible. Non-greedy quantifier uses '?', whereas greedy quantifier uses '+'. \nimport re\ndef text_match_subtract(text):\n"], [0.08049892654555002, "def rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to match the text with a pattern and returns 'True' if it finds a pattern and 'False' \nif it does not find a pattern.\nimport re\ndef text_match_word(word):\n        patterns = '\\Dz\\D*'\n        if re.search(patterns,  word):\n                return True\n        else:\n                return False\nThe above code is a function to match the text with a pattern and"], [0.08047974690368784, "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks whether the text contains a word 'o' occurring from zero to one times. In simple terms, it matches the word 'o' either zero or once.\nfrom datetime import datetime\nimport pytz\nfrom pytz import timezone\nimport re\ndef time_convert(time):\n        local = pytz.timezone(\"Europe/Warsaw\")\n        local_dt = local.localize(datetime.strptime(date_as"], [0.08035363634798354, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks if a text contains a pattern.\nimport re\ndef text_match_email(text):\n        patterns = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n        if re.search(patterns,  text):\n                return True\n        else:                \n                return False\nThe above code checks if a input"], [0.08031955920381394, "def catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches the pattern in the string test and prints if a match is found. It also enables the user to enter 0 or 1 pattern in the defined position. In a way, it tries to match a pattern in the given text.\n\nimport re\ndef text_match_zero_one_with_groups(text):\n        patterns = 'ab+?b'\n        if re.search(patterns,  text):\n                return True\n        else:\n               "], [0.08031955920381394, "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to check if a given text matches the pattern. The first word must be \"wikipedia\", link can have only one \"w\". The last four characters of a link must be \"org\".\n\n# Code Pattern\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nimport re"], [0.08015704244410785, "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\n\ndef find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python code to check whether the string contains a adjacent matching in which the no of occurences are 0 or 1.\n\nimport re\ndef text_match_Ex_At(text):\n        patterns = '[a-zA-Z-0-9]+@gmail[.]com'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python code to check"], [0.08001236355370005, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function to distinguish patterns with the given expression of regular expression.\n\nfrom z3 import *\n\ndef check_str(str):\n    n =len(str)\n    s = Solver()\n    I=[[0 for i in range(n)] for i in range(n) ]\n    D=[[0 for i in range(n)] for i in range(n) ]\n    for i in range(n):\n        for"], [0.07984733261465657, "def is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to search for a specified string without considering its case.\n\n[1,2,3] + ['A','B','C']\n\nOUTPUT\n\n[1, 2, 3, 'A', 'B', 'C']\nThe above code is concatenating two lists using [ ] operator.\n\nsum([1,2,3])\n\nOUTPUT\n\n6\nThe above code is a python function to find sum"], [0.07978667604559621, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to search for zero or one occurrences of a pattern in the given string.\ndef text_match_zero_or_one(text):\n     patterns = 'ab?'\n     if re.search(patterns, text):\n            return \"Found a match!\"\n     else:\n            return \"Not matched!\"\nThe above code is a python function to search for zero or one occurrences of a pattern in the given string.\ndef string_valid"], [0.07954983785505038, "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " uses regular expression re to search text with the pattern.\n\ndef text_match_zero_one(text):\n  return bool(text.replace('a',''))\nThe above code is a python function to count the numbers of find string with given condition.\n\ndef fabnum(n):\n      \"\"\"\n               finding Fabonacci series\n      \"\"\"\n      a = 0\n      b = 1\n      if (n < 1)  :\n       "], [0.07953025851330141, "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function for text match for 01.\n\ndef match(text): \n    patterns = '\\w*z.\\w*'\n    if re.search(patterns,  text):\n        return True\n    else:\n        return False\nThe above code is a python function for text match.\n\nimport re\ndef RegEx(string) :   \n    try :             \n        re.compile(string)        \n       "], [0.07950251782409946, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a Python Program that takes a string with lower case english alphabets and checks if it starts with a particular charachter and ends with another character. Extract the substring from the first and last character of the string. \nOutput Format :\n\nIf it satisfies the above mentioned criteria, then print 0-1 \nelse print -1 \n\nSample Input :\ngggqr\nSample Output :\n0-1\nThe above code is a python"], [0.07926384014118394, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to check whether the \"ab\" is present in the given text or not. \nimport math\ndef match_zero_or_one_or_n_times(text):\n    patterns = 'ab{0,1}?'\n    if re.search(patterns, text):\n        return True\n    else:\n        return False\nThe above code is a python function to similarly find the presence of \"ab\" in the given text"], [0.07918725283941637, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a Python regular expression to match patterns of the kind ab+ and abb+. \n\nimport re\ndef text_match_zero_one(text):\n       patterns = '\\w{3}\\W\\w{10}\\W\\w{3}'\n       if re.search(patterns,  text):\n                return True\n       else:\n                return False\nThe above code is a python function to match the pattern \\w{3}\\"], [0.07918725283941637, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is used for 0 or 1 occurence of a pattern in a text.\n\n>>> def text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n>>>#Provide different values for text and test your program\n>>> text_match_zero_one(\"ab\")\nTrue\n>>> text_match_zero_one(\""], [0.07918725283941637, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python Program to check for text matching in a particular string given in text variable .\n    \nimport calendar\ndef to_find_first_weekday(year, month):\n        day_of_the_week = {i:calendar.weekday(year,month, i) for i in range(1, 32) }\n        permuatations = [key  for  key, value in day_of_the_week.items()"], [0.07890619674048485, "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program to find out whether the string exist in the given string. According to the pattern given, one character must come before b3 times and then b string came in the. In the above example, \"ab\" actually started to come, there are 3 times and b is the string that started to come. the first time of ab is just one time.\n\nimport re\ndef text_match_bc(text):\n    patterns = 'b[a-z"], [0.07885992167407196, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program to check (zero or one) Concatenation from a give text.\ndef is_keyword_comb(sentence,keyword):\n    try:\n        return (re.search(keyword, sentence)[0])\n    except:\n        return \"\"\nThe above code is a python program to search a keyword from a given text.\ndef word_len(sentence):\n  l,word=[],[]\n  l"], [0.07885992167407196, "def pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program to match the given text pattern which contains \u2018ab\u2019 and one \u2018a\u2019.\ndef count_fraction(numerator, denominator):\n  if numerator == 0 or denominator == 0:\n    return 0\n  reduced_numerator = numerator\n  reduced_denominator = denominator\n  result = \"+\"   \n  \n  while reduced_numerator % reduced_denominator"], [0.07885992167407196, "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " returns a True if the given text matches the pattern, false otherwise.\nimport re\ndef text_match(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code returns a True if the given text matches the pattern, false otherwise.\n"], [0.07873726779271734, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a boolean function to define if a text matches the pattern 'ab+?' or not.\nThe question arises that how can you have '+' in between two letters and still be collected as a set. Well, after careful analysis of the code, it is understood that there exist two states in which a '+' sign can exist between two letters without being collected as a set. It is TRUE when -\n1. a capital A comes after the '+' sign.\n"], [0.07872373625383179, "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program to to check whether string is a search pattern or not.\nimport re\ndef text_match_zero_or_more(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python program to to check whether string is a search pattern or not.\nimport re\ndef text_match_password(password):"], [0.07872373625383179, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is used to check if a given pattern appears zero or one in a string.\nimport re\ndef text_match_one_two(text):\n    patterns = 'ab?'\n    if re.search(patterns,  text):\n        return True\n    else:\n        return False\nThe above code is used to check if a given pattern appears zero or one in a string.\n\nimport re\ndef text_match_three_more(text):"], [0.07872373625383179, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a program to check whether the text matches with a specific pattern or not.\nimport re\ndef text_match_with_star(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a program to check whether the text matches with a specific pattern or not.\nimport re \ndef text_match_with_plus(text"], [0.07846845124962276, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to takes in a text string and checks if it contains any lowercase characters.\nimport re\ndef is_divide_by_three_or_five(n):\n        for i in range(0, n):\n                if i % 3 == 0 and i % 5 == 0:\n                        print (\"fizzbuzz\")\n                elif i % 5 == 0:\n                        print (\"buzz\")\n                elif i % 3"], [0.07824810874311128, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function for searching for a pattern.\n\ndef Find_Even_index(arr):\n    for i in range(len(arr)): \n        if sum(arr[:i]) == sum(arr[i+1:]): \n            return i \nThe above code is a python function to find a index which can be divided into two arrays.\n\ndef matrixMultiplication(arr,num):\n    row = len(arr"], [0.0782222967536855, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a program to check whether there is a word in the text, which matches this pattern. The above will find both \u201cab\u201d and \u201ca\u201d but will not match any words with an \u201ca\u201d in the second position, \u201cadb\u201d, \u201cadfabc\u201d, but the second \u201ca\u201d is not needed to match.\nimport numpy as np\nar=np.random.randint(1"], [0.0779847851888664, "def cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to check whether the string starts with a given word 'ab' and thereafter, it contains any number of times character(b) 'b'.\n \nimport re\ndef text_match_b_star(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                re\nThe above code is a python function to check whether the given string starts with '"], [0.0779847851888664, "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to match the text between 'b'. It also takes care of 'a' following 'b'.\n\nIt returns true if it finds the pattern, else it returns false.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python function to returns true"], [0.07785396380000544, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program to implement matcher(regex , string).\ndef fixed_point_match(text):\n        patterns = '\\bfixed[ -]?point'\n        if re.search(patterns, text):\n                return True\n        else:\n                return False\nThe above code is a python program to implement matcher(regex , string).\n"], [0.07775546331227855, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks if a match is found in text.\n\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'\nThe above code prints out a match if a match is found in text or not when searching for the pattern ab plus symbols and zero or only one times.\n\nimport re\n"], [0.07768736519249937, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " will check for the pattern 'ab+?' in a given string.\n\ndef check_line_end(line):\n    text = \"abcdefghijklmnopqrst\"\n    if re.search(r\"ef\", text):\n        return \"I am on a line ending with 'ef'\"\n\nThe above code will check if a given string ends with 'ef' which is a given pattern.\n\ndef find_double_words("], [0.07768736519249937, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks whether text contains a pattern 'ab'. Length of the 'ab' should be less than or equal to 1.\n\nimport re\ndef text_match_nocase(text):\n        if re.search(r\"Air\", text):\n                return text\nThe above code checks whether text contains the string \"Air\".\n\ndef word_count(file_name):\n  infile = open(file_name, 'r')\n  content ="], [0.07751448465020092, "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a simple regular expression code in python. https://stackoverflow.com/questions/11983024/regular-expressions-using-in-python\nimport re\ndef text_match(text):\n        patterns = 'ab{3}?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\nThe above code is a simple regular expression code in"], [0.0774241564929285, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\ndef eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a code to match the given pattern from the string text.\n\ndef text_match_zero_many(text):\n        pattern = 'abb*?'\n        if re.search(pattern, text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\nThe above code is a pattern to match the given pattern from the string text.\n\ndef text_match_many(text):\n        patterns = 'ab"], [0.0774241564929285, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks for a match of the word 'zero' or 'one' in a text.\n        \nimport re\ndef text_match_a_country(text):\n     \n        patterns = '[A-Z]+'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code checks for a match of the word 'zero' or 'one' in a text.\nimport re\ndef"], [0.0774241564929285, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\ndef Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function which demonstrates usage of the Meta character +?.\n\ndef text_match_zero_one(text):\n        patterns = 'ab+??'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python function which demonstrates usage of the Meta character +?.\n\ndef Split(list): \n    ev_li = [] \n    for i"], [0.0774241564929285, "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a Python program to match a given string which contains only lowercase letters.\ndef test_range_overlap():\n        assert(overlap( (1,2), (2, 3)) == True)\n        assert(overlap( (1,2), (3, 4)) == False)\n        assert(overlap( (1,3), (2, 4)) == True)\nThe above code is a Python program to find whether two given line"], [0.07731972973999558, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to check whether accoring to the rules, the inputed text is recognized as a regular expression or not.\nimport re\ndef text_match_whitespace(text):\n        patterns = '\\s'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python function to check whether accoring to the rules, the inputed text is recognized as a"], [0.07731972973999558, "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a code to check whether the text starts with 'ab' and it should contain at least two b's after the first a.\n\ndef pattern_match_zero(text):\n    patterns = 'ab??'\n    if re.search(patterns, text):\n        return True\n    else:\n        return False\nThe above code is a Python code to search for the patterns with zero or one a.\nimport re\nphone_numbers = ["], [0.07719241189910614, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " takes a iterable and checks if the string contains \"ab\" in \"ab+?\"\ndef satisfies(sequence_items):\n    count = 0\n    while (count < len(sequence_items)):\n        if sequence_items[count] == 3:\n            if (sequence_items[count+1] != 4):\n                sequence_items.pop(count)\n            break\n        else:\n            count += 1\n    return sequence_items"], [0.07717146001442812, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to look for pattern \"ab+\" in the given text.\nimport random\ndef get_random_number():\n    random_num = random.randrange(1, 50)\n    return random_num\nThe above code is a python function to get a random number maximim upto 49.\n\ndef display_text():\n    results = 'You won ${}!'.format(10)\n    print(results)\nThe above"], [0.07717146001442812, "def Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to match a pattern containing 0 and 1\nimport os\nfor i in os.walk('.'): \n    dirpath = i[0]\n    dirnames = i[1]\n    filenames = i[2]\n    print(dirpath) \n    print(dirnames) \n    print(filenames) \nThe above code is a python script to list all directories and files in a directory in python."], [0.07692864837341588, "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " will match zero or one occurence of a or beofore b any character(non-greedy).\n\nimport re\ndef text_match_not_beginning(text):\n        patterns = 'ez'\n        if re.match(patterns,  text):\n                return True\n        else:\n                return False\nThe above code will not match the given patterns at the begining of text but the end of text.\n\nimport re\n"], [0.07692864837341588, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " shows the example of the re.search and the RegEx pattern, give a text or string it checks whether the given string is matching with specified pattern or not.\nThe above language code is in the python's regex language.\nimport nltk\nnltk.download('stopwords')\n\nfrom nltk.corpus import stopwords\nstopwords.words('english')\n\nalice = nltk.corpus.gutenberg.words"], [0.07692864837341588, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches the given text if the text contains given pattern and returns a boolean value.\n\ndef count_substring(string, portion):\n    l_portion = len(portion)\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+l_portion] == portion:\n            count+=1\n    return count\nThe above code returns the total no of substring matched in a string.\n\ndef"], [0.07669514353459422, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is used to search a given string. If the string contains the pattern return True. If not, it returns False.\n\nclass triangle(object):\n\n    def __init__(self, a, b, c):\n\n        self.a = a\n\n        self.b = b\n\n        self.c = c\n\n    def Area(self):\n\n        s = (self.a + self.b + self.c) / 2\n\n        area = round(("], [0.07669514353459422, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to count the upper case characters in a given string.\n\ndef text_match_min_max(text):\n        patterns = 'b{2, 3}?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python function to count the upper case characters in a given string.\n\n\ndef getSublists(L, n):\n    original ="], [0.07669514353459422, "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program to return true if the input matches the regular expression above.\nimport re\ndef text_match(text):\n\t#patterns = 'ab{1,3}?a'\n\tpatterns = 'dev@com'\n\tif re.search(patterns,  text):\n                return True\n\telse:\n                return False\n#The above code is a python program to return true if input matches the specified pattern.\nimport"], [0.07659528899941712, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\ndef catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a program to perform matching of pattern \u2018ab+\u2019 in a given text. It must match \u2018abc, abbc, abbbbc and so on \u2026.but shouldn\u2019t match abcabc, ab, abab and so on.\n\ndef text_match_numbers(text):\n    patterns = '^[0-9]*[0-9]$'\n    if re.search(patterns,  text):"], [0.07647041202925901, "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program to match a given string with a pattern.\ndef find_target_positions(numbers, target):\n    result = [str(x) for x in range(len(numbers)) if numbers[x] == target]\n    if len(result):\n        return ' '.join(result)\n    else:\n        return -1\nThe above code is a python program to find the target values into a given list.\ndef"], [0.07647041202925901, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to check if b appears 0 or 1 times in the text\n    \n\ndef is_decreasing(seq):\n    for i in range(0 ,(len(seq) - 1)):\n        if seq[i] > seq[(i + 1)]:\n            continue\n        else:\n            return False\n    return True\nThe above piece of code is a condition to check if the array is a non-decreasing array\n\n"], [0.07647041202925901, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a boolean answer to check for search element 'a' between 0 and 2 times in sequence.\ndef my_is_repeated_num(a):\n      for i in range(len(a)):\n          for j in range(i+1, len(a)):\n            if a[i]==a[j]:\n              return True # change this line\n      return False # change this line\nThe above code is a boolean answer to check"], [0.07625396072081346, "def cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python regular expression to find the no.of occurences of a substring in the main string.\n\nimport re\ndef text_match_zero_many(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a Python regular expression to find whether a substring present in the string(0 or many times).\n\n"], [0.07605344575572491, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a date match function. Here in this function,we can match whether the given date is correct or not through the re.search() function.\nimport re\ndef text_match_zero_one(text):\n    patterns = '^[a-zA-z0-9_]{2,20}$'\n    if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code"], [0.07605344575572491, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a true-false fucntion to check whether ab is taken 1 or 0 times.\ndef list_phones(list_numbers):\n list_phones=[]\n for i in list_numbers:\n   if len(str(i))==10:\n       list_phones.append(str(i))\n   else:\n       continue\n return (list_phones)\nThe above code returns the same list with just the 10 digit numbers."], [0.0760453330456282, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\ndef number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python code to find the matched string with the appended regular expressions.\nimport re\ndef text_match_zero_one_fixed(text):\n        patterns = 'ab+'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'\nThe above code is a python code to find the matched string with the appended regular expressions.\nimport re\ndef text"], [0.0760453330456282, "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to find if there is a match of a pattern in a string.\nThe above code is a python function using regular expression with intervals.\n\nimport re\ndef text_match_groups(text):\n    patterns = 'h[\\w]*'\n    if re.search(patterns,  text):\n                return 'Found a match!'\n    else:\n                return('Not matched!')\nThe above code is a python function"], [0.07591857749703701, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " should match for the given string say abshshshdssssssssssssssssssssddddddddddddddddddddddddab!!!\n\nimport re\ndef text_match_at_least_three(text):\n        patterns = 'ab{3,5}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code should match for"], [0.07580086222204419, "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " means that re should search for the pattern \u2018abc\u2019 when \u2018text\u2019 contains abc, abbc and abbbc, but shouldn\u2019t match when there are contain c after ab. It evaluates to True when it finds a match, and False when no match is found.`"], [0.07567055708221833, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program which checks whether a given regular expression is valid against input text.\nThe upper() method returns a copy of the string in which all case-based characters have been uppercased.\n#Input Format\nThe first line of input contains integer t, the number of test cases. \nThe next t lines consist of input characters that are either uppercase/lowercase alpha and/or numeric characters.\n1\nhELlo\no/p:He"], [0.07564988549680217, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to search a specific word with zero and one.\ndef test_range(n):\n  if n in range(1,10):\n    print( \" %s is in the range\"%str(n))\n  else :\n    print(\"The number is outside the given range.\",end=\"\")\nThe above code is a python function of simple defined range\n\ndef is_groupword(*word):        # First we take the word from"], [0.07555940287907752, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is The input is defined as a sentence. Functions to check if a text contains words started \nwith 'ab'. The max length of words is 2.\nimport re\ndef text_match(text):\n        patterns = '\\d{1,2}[a-z]*[A-Z]*$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not"], [0.07555940287907752, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a valid expression for given code. \nimport re\ndef text_match(text) :\n    patterns = 'ab*?'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n The above code is a valid expression for a given code.\nimport re\ndef variable_match(text):\n    patterns = '^t[a-z]*"], [0.07555940287907752, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " provides whether the given text matches the pattern or not.\n\ndef text_match_zero_or_more(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code provides whether the given text matches the pattern or not.\nimport re\ndef text_match_min_max(text):\n        patterns = 'ab{2,3"], [0.07546230701897468, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to find a pattern within a string. This will return True if pattern is present in the text, False if not present.\nimport re\ndef text_match_range(text):\n        patterns = 'b{1,3}'\n        if re.search(patterns,  text):\n                return 'Match Found'\n        else:\n                return 'Match Not Found'\nThe above code is a python function to find a pattern within"], [0.07546230701897468, "def unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " (regular expression) returns True if expression 'ab+' occurs at least once in the string. It can be interpreted as a special case of the more general pattern searching 'regex101' tool.\nHowever, we can write the same code more concisely by replacing the '+' symbol with \"*\":\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab*'\n        if re.search(patterns,  text"], [0.07532833372668257, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks whether the given word contains regex pattern or not.\n\ndef text_match_1(text):\n    patterns = 'ab*?'\n    if re.search(patterns,  text):\n                return 'Found a match!'\n    else:\n                return( 'Not matched!')\nThe above code checks whether the given word contains regex pattern or not.\n\ndef text_match_2(text):\n        patterns = 'ab{3}"], [0.07532833372668257, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " print 0 to 6\n\nimport re\ndef count_plus(text):\n        num = re.findall(r'\\d?\\d?\\d\\+',  text)\n        print num\nThe above code prints string having contact number length more than 10 and before area code print only first 3 digits and after.\n\nimport re\ndef count_time(text):\n        num = re.findall(r'\\d\\d:\\d"], [0.07528102991107477, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a funtion to check for a given string for the provided set of pattern and if found return True else False.\nimport re \ndef text_match_search(text):\n  patterns = 'ab{2,3}?'\n  if re.search(patterns,  text):\n                return 'Pattern found'\n  else:\n                return ''\nThe above code is a funtion to check for a given string for the provided set of patterns and"], [0.07510698462048798, "def Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to find if there is any of the strings, 'a' or 'a' or '^\\n$'.\nSolution for  Code challenge question\ndef max_keyCount(dict1):\n  max = 0\n  ans = max(dict1)\n  for num in dict1:\n    if max < int(dict1[num]) :\n      max = int(dict1[num])\n      ans = num\n  return ans\n  "], [0.07510698462048798, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is function matching the pattern of given text\nimport re\ndef text_match_fixed(text):\n        patterns = 'bake'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is function matching for a fixed text in given string.\nimport re\ndef text_match_anything(text):\n        patterns = 'b.k'\n        if re.search(pattern"], [0.07510573689567103, "def find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to search whether a given text contains a pattern.\nimport re\ndef text_match_zero_one(text):  \n        patterns = '\\Bz\\B'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python function to search whether a given text contains the pattern. In this case, the pattern must be at the start of the text and"], [0.07510573689567103, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches the given text with the pattern \u2018ab\u2019 and it is replaced with \u2018a\u2019 if the text happens to contain \u2018ab\u2019. The character \u2018b\u2019 is optional and it\u2019s behavior is defined by the regular expression, restricting that the occurrence of the character \u2018b\u2019 must be minimum of x times and at least y times.\nstr_test = 'abbbbabbaabbbbabaab'\nprint('Text:"], [0.07506737888184424, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " function checks if the given string matches the regex patterns.\n\nYou are given an input\nvalue. \nIf the following conditions are satisfied, \n \nthe character at the ith position in the string should be replaced with the character at position i of the replacement string. \nIf the ith character of the orignal string is \".\" , \nit can be replaced with any of the string's characters. \n\nIf the ith character of the"], [0.07493613181365892, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function which checks whether the word \"ab\" is present in any places of the specific word.\n\nimport re\ndef text_match(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python function which checks whether the word \"ab\" is present any number of times in a specific \nword.\n\nimport re"], [0.07489474243176718, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python script to find 'ab' in the given text\nimport re\ndef text_match_zero_n(text):\n        patterns = 'ab*tt'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a python script to find 'ab' and 'tt' in the given text\nimport re\ndef text_match_zero_n(text):\n"], [0.07469104507186011, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " will return 1 for only a1 and bbb and will return 0 for a and abb, abbb etc.\ns=['coooool Allows only for a single character match']\n# stop=[' ','!','?',',',':',';']\nfor line in ''.join(s).lower().strip().split(' '):\n    for w in line:\n        if w in [w.strip() for w in s.split(' '"], [0.07465631084635793, "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python functionto check if the text matches the pattern 'ab'\nYou are given a list of  lowercase English letters . You can insert between each pair of consecutive letters a single\nscond of your choice- either a, or. Print a single integer denoting the number of different strings you can generate\nusing a and b as symbols of your choice separated by letters of given list.\n\n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Gas"], [0.07449537625589495, "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program to search some selected characters (a,b) from a given text.\n\ns1='Shogun'\ns2='Pizza'\n\n#print Scheherazade\nfor i in range(len(s1)):\n\tprint (s1[i], end =\"\")\n\tprint (s2[i], end =\"\")\nThe above code is a python program to add two strings up to the length of the first"], [0.07449537625589495, "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular  expression to find a particular pattern in the string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a regular  expression to find a particular pattern in the string.\nimport re\ndef text_match_zero_one(text):\n        patterns ="], [0.07449537625589495, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " will search and match a pattern(patterns) given in text to the text.(string) provided to the function.\n\nimport re\ndef count_zero_one(text, words):\n        patterns = '(ab+?)'\n        print re.findall(patterns,  text)\n        return len(re.findall(patterns,  text))\nThe above code will count and display the number of instances for a given word in text, if"], [0.07430726090092649, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " will check if text contains regex \"ab{1,}? instead of pre-defined regex \"ab{1,}\" without a character before it.\ndef search_linear(xs, target):\n        for (i, v) in enumerate(xs):\n         if v == target:\n            return i\n        return -1\nThe above code will search a number x in a given list xs.\ndef find_unknown_words(vocab, w"], [0.07430726090092649, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " shows how to test two text match. Here we are using two techniques.\n#other techniques are:\n#Zero or one preceding the expression being matched, specify the preceding expression\n# o or 1\n#Matches 0 or 1 occurrences of preceding expression.\nmatcher = re.finditer(\"ab+\", \"ababbaba\")\nfor m in matcher:\nprint(m.start(),'....',m.end(),'......',m.group())\n"], [0.07430726090092649, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is using regex for the given flag \u20180\u2019 and \u20181\u2019 to separate even and odd length strings present in the text.\n\ndef text_match_regex(text):\n        patterns = 'ab'\n        if re.search(patterns,  text):\n                print ('matched')\n        else:\n                print ('Not matched!!')\nThe above code is using regex \u2018ab\u2019 to see if a given string starts"], [0.07394393336050063, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to test whether the text is starting and ending with the same character or not. https://www.w3resource.com/python-exercises/re/python-re-exercise-47.php\n!python --version\n\n# Task1:\n# \n# Task2:\n\n# **Task3:**\n# \n# Task4:\n# \n# Task5:\n# \n\n# [link text](https"], [0.07394393336050063, "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches the given substring \u2018text\u2019 with the regular expression \u2018ab+?\u2019.\ndef text_match_zero_one(text):\n        patterns = 'ab[^a]?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code matches the given substring \u2018text\u2019 with the regular expression \u2018ab[^a]?\u2019\n"], [0.07378402087321236, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " finds the pattern 'ab' either zero or one time in given\nstring/sentence and checks if it is present or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code finds the pattern 'ab' either zero or one time in givenstring/sentence and checks if"], [0.07378402087321236, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks for a given text. Strips the \"b\" off the text and then check\n\ndef word_count(programming):\ncount = 1\nfor char in programming:\nif char == \" \":\ncount += 1\n        return count\n    The above code is used to count number of words in a given line\nimport numpy\ndef numpy_dot_ushort(short_array,ushort_array):\nans=numpy.dot"], [0.07378402087321236, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\ndef Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches the input text with the pattern. In this case, it checks the number of 'ab' occurs with optional 'b'.\ni, k = [True, 1,2,3], [False,5]\ndef func1():\n\tfor j, k in i, k:\n\t\tif j:\n\t\t\tk.append(4)\n\t\tprint k\nfunc1()\nWe can use the above code by changing the definitions of '"], [0.07362206010136596, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks to match a given pattern from the text.\ndef longest_word(word_len):  \n   words = input('Please enter a few words')\n   word = words.split() \n   word.sort(key=len) \n   print(word[-1])\nThe above code is a python program to find out the longest word in a sentence\n# This program will compare two words without depending on the cases\ndef islower(word):"], [0.07350421799051675, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks if the text contain 'ab'? and returns true.\n\ndef is_present(string): \n    sub_str = 'Rs.12599' \n    if re.match(sub_str, string): \n        return True\n    else: \n        return False\nThe above code will match 'Rs.12599' with the string provided.\nimport re\n\ndef convert_to_time(sentence):\n  return re."], [0.07346576871330597, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " contains re.search funtion to search for the pattern. If a match is found, true is returned otherwise false.\n import re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code contains re.search funtion to search for the pattern. If a match is found, true is returned otherwise false"], [0.07337784053920385, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression to get matched with a nput string 'text' to have a text start with a specific word 'ab'. It will return true if the given text starts with a specific word 'ab'\nimport re\ndef capitalLetters_count(text):\n        return sum(1 for c in text if c.isupper())\nThe above code is to count the number of capital letters in a given string. It will return the number.\nimport re\n"], [0.07310524074527304, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a Python code to count teh number of pairs whose xor value is odd.\n\n#include <iostream>\nusing namespace std;\nclass Node  \n{ \n    public: \n    int data; \n    Node *left; \n    Node *right; \n    Node *random; \n     \n    Node(int x){ \n        data=x; \n        left = NULL; \n        right ="], [0.07302802770431462, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is Preety print. Library gives a very good look to the print output.\nString will intern in Python.\nfor i in range(0, 100):\n  print(InternedString[2])\nYour email will be marked Not Submit till you take LOCK by yourself. That's the builtin magic to avoid multiple response.\nvalidate = True\nwhile validate:\n  something = input(\"whatever\")\n  if something in somevariables:\n   "], [0.07263172058911055, "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression to match certain pattern The input to the match is ab so it returns True.\n\nimport re\ndef text_match_beginning(text):\n        patterns = '^India'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a regular expression to match certain pattern The input to the match is India Bangladesh so it returns True.\n\ndiction = {\""], [0.07257127474932171, "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is used to return T/F according to whether the given text matches \u201cab+?\u201d.\ndef pattern_match(word, pattern):\n   \n    if len(pattern) == 0 and len(word) == 0:\n        return True\n    elif len(pattern) == 0:\n        return False\n    elif len(word) == 0:\n        for i in range(0, len(pattern)):\n            if pattern"], [0.07257127474932171, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a Function to check for ab repeated at least once\ntext ='aaadaaaa'\npattern = 'ab+?'\nprint(re.search(pattern,  text))\n\ntext =''\n\nimport random\n\ndef random_ip_generate():\n    numbers = []\n    while len(numbers) < 4:\n        num = random.randint(0, 255)\n        if num in numbers and num != 0:\n           "], [0.07250780541892173, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python function to do regular expression with help of search on the given text.\nimport re\nNumber = int(input())\nfor Number in range(0, Number):\n    print(Number)\nThe above code is displaying the postive integers less than the given number.\nimport re\nNumber = int(input())\nfor Number in range(0, Number):\n    print(Number*Number)\nThe above code is displaying the square of postive integers"], [0.07250780541892173, "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is used to find if ab occurs once or not.\n\"\"\"\nprint(\"_______________________________________________________________________________________\")\nprint(\"Give a range of numbers and find the number of perfect squares in that\")\n\ndef perfectSquare():\n    i = 1\n    result = 0\n    # your code goes here\n\n    while i*i <= num:\n        result += 1\n        i = i + 1\n    return result\nnum = int(input(\"Enter the upper bound for finding"], [0.07240824880003217, "def min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " finds if there is any text in 'ab+' in the input string. --> one match\nhttp://www.python-course.eu/re.php\n\ndef unique_in_order(iterable):\n    res = []\n    pre = \"\"\n    for i in iterable:\n        if pre == i:\n            continue\n        else:\n            res.append(i)\n            pre = i\n    return res\nThe above code removes"], [0.07225191248736648, "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to regular Expression Zero one pattern.\n\ndef format_duration(seconds):\n  if not seconds:\n    return \"now\"\n  years = seconds // (365*24*3600)\n  seconds %= (365*24*3600)\n  days = seconds // (24 * 3600)\n  seconds %= (24 * 3600)\n  hours = seconds // 3600\n  seconds %= 3600\n  minutes = seconds"], [0.07210185072958282, "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is checking for a pattern match ( starting with ab) anywhere in the string.\n\ndef is_prime(n):\n   for i in range(2,n):\n      if n%i == 0:\n          return False\n   return True\n\ndef primes(start, stop):\n   for i in range(start,stop + 1):\n      if is_prime(i):\n          print(i)\n\nThe above code is checking for"], [0.07155717281241086, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to check whether the sub string which is the input for the search is there in  the main string which is the search function. \ndef text_match(word):\n        starting_word = re.compile(r\"\\bHa\")\n        if starting_word.search(word):\n                return starting_word.search(word).group()\n        else:\n                return False\nThe above code is to do the search functionality with the given pattern"], [0.07143333968988452, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is used to search the pattern ab(one instance) in the string text.\nimport re\ndef text_match_fixed_len(fixed_len, text):\n        patterns = str(fixed_len) + '$'\n        if re.search(patterns,  text):\n                return True\n        else:\n              return False\nThe above code is used to search the pattern with specified fixed length in the given string.\nimport re\ndef text"], [0.07119861667914897, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python program to test whether number lies between 10 to 20 using\nregular expression.\nThe re module provides regular expression matching operations similar to those in Perl.\nSample code:\n\nimport re\n\nline = \"Cats are smarter than dogs\"\n\nmatchObj = re.match( r'(.*) are (.*?) .*', line, re.M|re.I)\n\nif matchObj:\n   print (\"matchObj.group()"], [0.07097965966532746, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " utilizes the re module in python for regular expression, the search method in this helps to find the desired pattern from the input which in this case from the text.\nimport re\ndef text_match_zero_one_re(text): \n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\nThe above code utilizes the re module in"], [0.07097965966532746, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to check for partial string matching in the given criteria with parameters a,b and b+?\nimport re\ndef text_match_zero_one(text):\n        #patterns = 'ab+?'\n        if re.search(text,  text):\n                return True\n        else:\n                return False\nThe above code is to check for partial string matching in the given criteria with parameters a,b and b+? but it doesn't work due"], [0.06939100743892035, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " will check whether the text matches the expression 'ab+?' using regular expressions.\nMessi and Ronaldo shut down entire defence with panache\nMessi and Ronaldo shut down entire defence with panache\nMessi and Ronaldo shut down entire defence with panache\nMessi and Ronaldo shut down entire defence with panache\nMessi and Ronaldo shut down entire defence with panache\nMessi and Ronaldo shut down entire defence with panache\nMessi and Ronaldo shut down entire defence with pan"], [0.0646804564114976, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " implements a RegEx to find the substrings of pattern \"ab+?\" present in the text.\n"], [0.0606367797158066, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a regular expression to get a match on 'ab' in text.\n"], [0.0606367797158066, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is the code to check if the string has 'ab' present once.\n"], [0.04825784754871679, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a python code to match ab+ pattern with the text.\n"], [0.043343314989507664, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a function returns matching pattern in text\n"], [0.042038198653298754, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks if the given string satisfies the given regular expression.\n"], [0.042038198653298754, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is python function to metch input 'Text' with defined pattern.\n"], [0.040777802222232276, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " matches to email text in a very long sentence.\n"], [0.018006614548462065, "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is a zero-one function in regex"], [0, "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is used to match the given pattern with text.\n\ndef text_match(text):\n    patterns = input(\"Enter the pattern to be matched: \")\n    if re.search(patterns,  text):\n        return True\n    else:\n        return False\nThe above code is used to match the given pattern with text.\n\nimport urllib.request as urllib\nimport json\n\nurl = input(\"Enter URL:\")\n"], [0, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " will match the given pattern with string. If the pattern is present in the given text, then true will be printed and returns true. Else false will be printed.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code will match the given pattern with string. If the pattern is present in the"], [0, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to search for given regular expressions at the beginning of the string.\n    \n    \nimport re\ndef text_matching(text):\n    patterns = '\\w+\\S*$'\n    if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is to search for given regular expressions at the end of the string.\n\nimport re\ndef text_matching_backsl"], [0, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is the regular expression code to search for the given set of strings.\n\ndef cal_mul(list):\n  num = 1\n  for i in (list):\n    num = num * i\n  return(num)\nThe above code multiplies the sequence of numbers given in the list using the for loop.\ndef square(nums):\n  ls = []\n  for i in nums:\n    ls.append(i*i)"], [0, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " is to search  ab+? in text.\n\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is to search  ab+? in text.\ndef add(x,y):\n    return x+y\n\ndef subtract(x,y):\n    return x-"], [0, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code", " checks for \u0100 text.\n"]]}
