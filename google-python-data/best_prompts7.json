{"prompt": {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 579, "prompt": "Write a function to find the dissimilar elements in the given two tuples.", "code": "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)", "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)", "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"]}, "queries": [[0.7034185487819401, "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in two given tuples. \n"], [0.7015657245595953, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in two tuples."], [0.68847933554599, "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\n\nimport sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in both the tuples.   \n"], [0.63878471514222, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\nimport re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in the two tuples given to the function.\n"], [0.6272867772211013, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python method to find dissimilar elements in the given two tuples.\n"], [0.6093329570775948, "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements from two given tuples. \n\n\"\"\""], [0.6052402810363172, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements between two tuples.\n"], [0.5723580762273696, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements between two tuple.\n"], [0.5288717416792963, "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimilar elements present in the tuple.\n"], [0.524653542473939, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar values between the two given tuples.\n\n\n"], [0.5084097278509426, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar items between two given tuples.\n\n\n"], [0.4888464667071602, "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\n\ndef hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar letters in two words. \n"], [0.46267960039720807, "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " finds the dissimilar elements in the given two lists that are passed as args to a function.\n"], [0.4490134532995688, "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\n\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find the dissimilar elements between given two tuples."], [0.4090643552755164, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimilar numbers between 2 given tuples.\n\n"], [0.3965127260879665, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " given a tuple sets a function to find the set of dissimilar numbers. \n"], [0.3837874859066368, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the intersection and symmetric difference of two tuples.\"\"\""], [0.37338245590521224, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the tuple the elements which is not common in two tuples.\n"], [0.35544317823456467, "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in two tuples by calculating the XOR.\n"], [0.34335018548507423, "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in two given tuples. https://www.geeksforgeeks.org/python-find-dissimilar-and-similar-elements-in-a-list-or-tuples/\ndef sub_tuple(tup1, tup2):\n  return set(tup1).issubset(tup2) \nThe above code is a function to return True if tup1"], [0.3427135226565702, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements from given two tuples.\ndef diff_indices(test_tup1, test_tup2):\n  res = tuple([((test_tup1),test_tup2) for (test_tup1, test_tup2) in zip(test_tup1, test_tup2) if (test_tup1 != test_tup2)])\n "], [0.34059036059008935, "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\n\ndef babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find out the dissimilar items from the given tuple.\n\n"], [0.3384336290069782, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the number of dissimilarities between two tuple list or sets.\n"], [0.32853787057657446, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in both the tuples. \ndef print_heros(file_name):\n  with open(file_name) as file:\n    ctr=0\n    list=[]\n  \n    for line in file:\n      list.append(line)\n  file.closed\n  list=list[1:]\n  list.sort()\n\n  print(list)\n\n  i=0\n "], [0.323397178815423, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the opposite of the equal elements of two lists of equal size.\n"], [0.3207992740140073, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements of two tuples.\n"], [0.31471036543397385, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in two\ndef read_csv(file_path):\n    data = None\n    if os.path.exists(file_path):\n        with gzip.open(file_path) if file_path.endswith(\".gz\") else open(file_path) as fp:\n            reader =  csv.DictReader(fp)\n            fields = reader.fieldnames\n           "], [0.3119820504386792, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimiliar elements in the two tuples. \n\n\n"], [0.3102773527712205, "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the tuples that are dis-similar and merged into a new tuple.\n"], [0.3082280148370352, "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function which returns the dissimilar elements in 2 given tuples.\n\n\n"], [0.30408816539391453, "def Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to create a new tuple by finding the dissimilar elements in the given two tuples.\ndef remove_tuples_having_the_element_in(elem, nested_tup):\n\n  leng =len(nested_tup)\n  res = tuple()\n  for i in range(0,leng):\n    if elem in nested_tup[i]:\n      res += (nested_tup[i"], [0.3027457968433246, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the difference between two tuples.\n"], [0.2987214705035411, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements between a pair of tuples.\n#if necessary condition\nif isinstance(imagelist, list) and isinstance(imagelist[0], list) and isinstance(imagelist[0][0], int):\n  imagelist.sort()\n  image_save()\n\n\n      \n\t\t  #[-1][1]=-1[-1][1]=-1[-1][1]=-"], [0.29384366444468735, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find Dissimilar elements in given tupples.\n"], [0.293580455657396, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in the two tuples.\ndef permutation_str(str_name):\n  yield [str_name]\n  if str_name:\n    for i, c in enumerate(str_name):\n      for cc in permutation_str(str_name[:i] + str_name[i+1:]):\n        yield [c] + cc\nThe above code is highly optimized code to"], [0.28959273894021903, "def split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the set difference of two given tuples.\n\"\"\""], [0.286986337545051, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in two lists (or tuples).\ndef check_adjacent(num1, num2):\n    def same_first_last(num_tup):\n      if len(num_tup) < 2:\n        return True\n      else:\n        return (num_tup[0] == num_tup[-1])\n\n    if [tup for tup in zip(tuple"], [0.2867086347549042, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in the given two tuples.\n\ndef map_cost(m, cost_table, c):\n  cost = 0\n  for row in cost_table:\n    for index in range(m + 1):\n      cost += row[index]*c[index]\n  return(cost)\nThe above code is a function to return the total cost by multiplying the cost of particular weights and the selected elements."], [0.28244512917816544, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar from the given two tuples. \nhttps://www.geeksforgeeks.org/python-find-the-maximum-occurring-character-in-the-input-string/\nimport collections\ndef check_max_occuring_char(test_string):\n    test_string =test_string.lower()\n    data = collections.Counter(test_string)\n    print(data)\n    count"], [0.2823169761455785, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar members of the given two tuples.\n\ndef modify_tuple(sample_tuple, n):\n  l1 = []\n  l2 = list(sample_tuple)\n  for i in range(len(sample_tuple)):\n    if i != n: \n      l1.append(l2[i])\n  print tuple(l1)\n  return tuple(l1"], [0.28185696655178977, "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements of two tuples\ndef dis():\n\tfirst = input()\n\tsecond = input()\n\tp=len(first)\n\tq=len(second)\n\tstring1=[]\n\tstring2=[]\n\tstring3=first\n\ti=0\n\tj=0\n\tfor i in range(0,p):\n\t     string1.append(first[i])\n\t     "], [0.28006405139158447, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in the tuple.\nWhat is this code?\nclass open():\n    def __init__(self):\n        self._x = 0\n\n    def getx(self):\n        return self._x\n\n    def setx(self, x):\n        self._x = x\n\n    def delx(self):\n        del self._x\n\n    x = property(getx, setx, delx,"], [0.27418441164089546, "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements between two tuples.\n\ndef get_stddev(comp):\n  myList=[]\n  for i in comp:\n    myList=myList + list(i)\n  mean=sum(myList)/len(myList)\n  standard_deviation = 0\n  for x in myList:\n    standard_deviation = standard_deviation + pow((x-mean),2"], [0.27418441164089546, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements from both the given tuples.\n\ndef max_min_pwr(Data, N, k):\n    temp = N//k\n    res1 = (temp*pow(k, 2*k-2, 998244353)) % 998244353\n    res2 = (pow(k, 2*k-2, 998244353)-1) % 998244353\n   "], [0.2739195647039409, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimilar elements in a given list of tuples.\ndef single_line(test_string): \n    string = test_string\n    com_string = test_string.split(\"\"\"\\n\"\"\")\n    if(len(string) == 0): \n                return \"Weird\"\n    elif(len(com_string) > 1): \n                if(string.find(\" \")):\n"], [0.26995745962449985, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar values of test_tup1 and test_tup2.\n'''"], [0.2661576254280181, "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements between two given tuples. geeksforgeeks.org/find-dissimilarity-between-two-tuples/\n\n\n\nReplace the letters in a text according to the given mapping. geeksforgeeks.org/replace-given-set-letters/\nFunction to check whether a pattern is present in a string. geeksforgeeks.org/search-a-pattern-in-a-given-"], [0.26535959656891944, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the sum of results of the sorted tupples with one combination order of the test tuples.\n"], [0.2649421621824509, "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in two tuples.\ndef get_deletions(test_str1):\n  cnt = Counter(test_str1)\n  cnt = {k:v for k,v in cnt.items() if v > 1}\n  dedup_test_str1 = ''.join(cnt.keys())\n  res = [x for x in test_str1 if x not in"], [0.26368978915315144, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find and return the tuple containing the dissimilar elements of two tuples.\n"], [0.25854340415231825, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements in tuple.\n\n"], [0.2555256829848946, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in two tuples.\ndef merged_lists(list1, list2):\n  last = list1[-1]\n  i = len(list1)\n  while(i < len(list1+list2)):\n    list1.insert(i, last)\n    i += 1\n  return(list1)\nThe above code is a function to add a common item to the end of"], [0.25523369381601063, "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements between two given tuples.\n\ns ='rafael'\nvowels = list(filter(lambda value:len(value)>1,s))\nprint(vowels)\nThe above line of code is to find the vowels in the given string using filter.\n\nprint(\"-------------reduce()--------------------\")\nnums = [2,2,6]\n\nnums_list = []"], [0.2549170131929102, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements of the given two tuples.\n\n# Python program to calculate Simple Interest\n\ndef calculate_interest(principle, rate, years):\n  Total_amount= principle * rate * years\n  Intrest_paid= Total_amount - principle\n  print(\" Total amount is :%f\" %Total_amount)\n  print(\" Intrest paid :%f\"  %Intrest_paid)\ncal"], [0.2506744811345722, "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in the two tuples.\n\ndef group_by_owners(og_dict):\n  res = {v : k for k,values in og_dict.items() for v in values}\n  return (res)\nThe above code is a function to group the elements of the dictionary according to their keys.\n\ndef get_nth_fibonacci(n):\n  res = []\n"], [0.2441121729079039, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in given two tuples \n(remember tuples are imutable , can't add or modify).\n\ndef search_element(input_list,val):\n    return (((len(input_list)-1)==input_list.index(val)))\nThe above code is a function to find one of a given element in a list without using inbuilt fuction\n'''"], [0.24284184563083835, "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar values in the given tuple.\ndef convert_tuple(test_tup):\n  list_tup2=list(test_tup)\n  list_tup2.sort()\n  tup_out=tuple(list_tup2)\n  return (tup_out)\nThe above code is a function to convert the given tuple to other tuple in descending order.\n"], [0.23941670761275052, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function  to find the dissimilar elements of two tuples.\n\n\ndef max_profit_employees(input_arr, profit_arr, n, m):\n  employee_profit_arr = []\n  max_profit = 0\n  for i in range(0, n):\n    allocation_arr = [0] * m\n    profit = 0\n    while True:\n      if sum(allocation_arr) == m:\n"], [0.2370049646734721, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in two tuples.\ndef char_freq(str1):\n  res = {}\n  for ele in list(str1):\n    if ele in res.keys():\n      res[ele] += 1\n    else:\n      res[ele] = 1\n  return res\nThe above code is a function to return character frequencies for a string.\ndef sort_words(sample_string):\n "], [0.23684684906945008, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a Python Program to find the dissimilar elements in two lists.\ndef string_sum(list1):\n    new_list = []\n    list1.sort()\n    if len(list1)<2:\n        return 0\n    else:\n        val = list1[0]+list1[1]\n        new_list.append(val)\n        for j in range(2,len(list1)):\n            val2"], [0.23599746182216552, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in both tuples.\ndef count_array(test_list):\n  odd_count = 0\n  odd_sum = 0\n  even_count = 0\n  even_sum = 0\n  for i in test_list:\n    if i % 2 == 0:\n       even_count += 1\n       even_sum += i\n    else:\n       odd_count += 1\n       odd_"], [0.23441079277738391, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements by converting the tuples into sets and using the symbol ^ for XOR, yet to be confirmed.\n\ndef find_liquid_in_container(expected_container,container_list):\n    for container in container_list:\n        container_amount = sum(container.values())\n        expected_amount = sum(expected_container.values())\n        if container_amount<=expected_amount:\n            return"], [0.23380222126352473, "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in the given two tuples.\ndef int_palindrome(test_int):\n  res = True if str(test_int) == str(test_int)[::-1] else False\n  return (res) # when looping over the last 5 pages of codewars, I found that list reverse is a simialr method, which list().rever() has the same functionality\n\n\n# def int"], [0.23247769195276594, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in tuple\ndef visualize_data(code):\n  ''' code that provides a visualized output using python code '''\n  from PIL import Image, ImageDraw\n  the_image = Image.new('RGB', (100, 30), color = (73, 109, 137))\n  d = ImageDraw.Draw(the_image)\n\t[im1, im2 , im3, im4,"], [0.23204497334494217, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the elementwise dissimilar tuples out of the given two tuples.\ndef add_fourth_element(test_tup1, test_tup2):\n  tup = list(test_tup1)\n  tup.insert(3,test_tup2)\n  res = tuple(tup)\n  return (res) \nThe above code is a function to add one tuple\u2019s value"], [0.2319632788617871, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " to find the dissimilar elements in a tuple:\nfrom collections import Counter\nfrom itertools import combinations \ndef find_pairs_with_given_sum(arr,sum):\n    result=[]\n    mp={i for i in arr}\n    for c in combinations(arr,2):\n        if sum==c[0]+c[1]:\n            tp_list=sorted(list(c), reverse=True)\n           "], [0.23168792417230735, "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in the two tuples.\n\ndef float_to_int(list):\n    res = []\n    for i in range(0, len(list)):\n        for j in range(0, len(list[i])):\n            res.append(int(list[i][j]))\n            print(i, j)      \n    return res\n\n\nfloat_to_int([[1."], [0.23159369842822153, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements between two tuples.\n\ndef predict_employees_salary(years_experience):\n   if years_experience <3.0:\n     return \"Low\"\n   elif years_experience <6.0:\n     return \"Medium\"\n   else:\n     return \"High\"\nThe above code is a function that predicts the status of the employee salary. \n\n\n# Sort a"], [0.23044709629433163, "import re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements between 2 tuples\nimport pandas as pd\ndef string_match(words):\n  df = pd.DataFrame(words, columns=['first names'], dtype=str)\n  pairs = len(words)\n  pairs = len(words) \n  df[\"pairs equals\"] = pairs \n  length = [df.iloc[item][\"first names\"] for item in"], [0.22925827794136583, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in 2 tuples.\nnums = [1,2,3,4,5,6,7,8,9]\nprint([(x,y,z) for x in nums for y in nums for z in nums if x+y+z==14])\nThe above code is a function to find all triplets in a list that sum to 14.\ndef unique_string(string):"], [0.22795173859337883, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements of two tuples.\n\nfor index, (x, y) in enumerate(zip(var1, var2)):\n  if x != y:\n        break\nelse:\n  index += 1\n\ndef swap_or_not(a):\n    if not a:\n        return 'no'\n    swaps, i = 0, 0\n    while i < len(a):\n        if"], [0.22685856457884065, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimilar elements between two tuples \n\ndef dict_intersect(dic1,dic2):\n\tdic=dict()\n\tfor i,j in dic1.items():\n\t\tif i in dic2:\n\t\t\tdic[i]=min(dic1[i],dic2[i])\n\treturn dic\nThe above code is a python function to find"], [0.2263472686385578, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\nfrom math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find all the elements that exist in two given tuples/lists and return them as a tuple.\n\n"], [0.22443628523976292, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in two variables.\ni.Write a function that takes sets A and B as input and returns:\n   True if A is a subset of B\n   False if A is not a subset of B\ndef check_subset(set1,set2):\n  if(set(set1)<=set(set2)):\n    return True\n  else:\n    return False\n\nii. Write a"], [0.22262351749957043, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements between two lists.\ndef find_decrease(current,last):\n increase = current - last\n return (increase)\nThe above code is a function to find the difference between elements in the list.\nimport csv\ndef csv_record(csv_source, col_name, col_id):\n   with open(csv_source,\"r\", newline = '') as test:\n    #"], [0.22213511772753408, "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the subtraction set of two tuples.\ndef find_most_similar(test_tup, test_list):\n (res1, res2) = (list(test_tup), []) \n for i in range(len(test_list)):\n  first_set =  find_dissimilar (test_list[i], test_tup) \n  res2.append(len(first"], [0.22180799753310068, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimiliar values in two tuples.\nExecute the following code to check the above functions:\n  \nl1 = [1,2,3]; l2 = [4,5,6]; l3=[1,2,3]\nprint(check_lists(l1,l2))\nprint(check_lists(l2,l1))\nprint(check_lists(l3,l1))\n"], [0.2201414617855278, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in two tuples or sets.\ndef print_pattern(N):\n  x = 0\n  for i in range(N):\n    x = 0\n    num = 1\n    while x < N - i:\n      x += 1\n    while x < N-1:\n      print(' ', end='')\n      x +=1\n    while x <= N:\n      print(num,end"], [0.2201414617855278, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in tuple one with respect to tuple two and output them in sorted order.\ndef count_consecutive_summers(n):\n    res, total, count  = 0,0,0\n    for i in range(n):\n        total += 1\n        if(total == n):\n            count += 1\n        else:\n            res += count \n    return (res) \nThe above code"], [0.21986035498046685, "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the elements in the dissimilar set between the two given tuples. Assuming that no tuples have the same elements i.e are similar. https://www.geeksforgeeks.org/python-program-to-find-dissimilar-set-from-two-given-sets-using-set-symmetric-difference/ \n\"\"\"\n#Exercise 1\nfact = lambda x,y : x*y\na"], [0.2177839808689304, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements of two tuples.\nset([1,1,1,1])\n# Merges two subarrays of arr[].\n# First subarray is arr[l..m]\n# Second subarray is arr[m+1..r]\ndef merge(arr, l, m, r):\n    n1 = m - l + 1\n    n2 = r- m\n \n    # create"], [0.21740200405362156, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in the given two tuples.\ndef sort_by_length(test_list):\n  sorted_list = sorted(test_list, key=len)\n  return sorted_list\nThe above code is a function to sort the given test_list according to length of the elements.\nA lambda function accept two numbers and return their product. If the result is greater than\n1000, then it should return 0.\n\n"], [0.21733593677650812, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in two tuples .\ndef combine_lists(images, titles):\nresult = list(map(lambda tup:\nf\"<img src={tup[0]} alt={tup[1]} width=200 height=200>\",titles)); \nreturn result\nThe code converts two lists into a list of html code.\nThe above code is a python program which reads information from two lists, a list"], [0.21676105324172798, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the simlar elements of two tuples.\narr=[1,2,3,4,5,6,7]\nn=int(input(\"enter the n-th term :\"))\nprint(\"The n-th term of the array upto 6 elements is :\")\nprint(arr[n:(n+6)])\narr=[1,2,3,4,5,6,7]\nn=int(input"], [0.21440720072908245, "import re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar element in two given tuples .(source - Geeks for geeks)\nhttps://www.geeksforgeeks.org/python-program-to-convert-a-tuple-to-a-string/\ndef sum_2_list_condition(list1, list2):\n  list1 = [x for x in list1 if x % 4 == 0]\n  list2 = [x for"], [0.21395776511278236, "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements of the two given tuples.\nimport collections\ndef ordered_dict(pat, txt):\n  d = collections.defaultdict(int)\n  for ch in txt[:]:\n    if ch not in d:\n      d[ch] = 0\n    d[ch] += 1\n  ordered_dict = []\n  for ch in pat[:]:\n    if ch in d and d"], [0.21292200719928114, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the symmetric difference elements in the given tuple list.\ndef remove_duplicate_calculate(test_list, alpha_list):\n  res = []\n  res1 = []\n  final_set = set()\n  final_list = [] \n  final_list2 = [] \n  res = ([idx[:alpha_list - 1] for idx in test_list])\n  res1"], [0.21274353300609042, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\ndef maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)\nThe above code is Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar members in two given tuples.\n\nProblem : Print the elements in a given list which are not equal to the least element in that list.  \nn=int(input())\nl=list(map(int,input().split()))\nll=set(l)\nr=l.count(min(l))\nprint(r)\nfor i in ll:\n  if l.count(i)>"], [0.2117768197847772, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\ndef lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in two lists. Using the XOR operator of Python. \nP.S.: Python exercise taken from Konstantin Bozhkov's blog. Checkout: https://becominghuman.ai/interview-questions-python-numpy-interview-d1453843e393.\n'''"], [0.211484516963752, "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimilar elements in given two tuples.\n\ndef array_diff(num, key):\n  while(key in num):\n    num.pop(num.index(key))\n  return num\nThe above code is a python function to remove a specific element value in a given list of elements (list of numbers).\n\ndef duplicates(arr, n):\n  s= []\n  # Creates an empty list"], [0.21092053521645024, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar values for the two given tuple values.\ndef remove_vowels(str_input):\n  vowels = ('a', 'e', 'i', 'o', 'u')  \n  for x in str_input.lower(): \n    if x in vowels: \n      str_input = str_input.replace(x, \"\") \n    return (str_input)\nIn the above"], [0.2091788278771865, "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\n\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements between two tuples.\n\n# The following code intends to input an integer and then prints all digits of that integer in English\ndef reverse_list(list1):\n    newlist = list1[::-1]\n    return newlist\nrv = \"\"\ndef printMissNumber(number):\n  global rv\n  count = 0\n  numbers = [0,1,2,3,4,"], [0.20912933435514444, "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function which uses set operations to find dissimilar elements in list of tuples.\n"], [0.20885403675469277, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements of two tuples.\nCode Writer : Neelam Swarnkar\n'''\n\ntuple1 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\ntuple2 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\ntuple3 = (6, 5, 4, 3)\ntuple4 = ()\ntuple"], [0.20585017632555552, "def list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar part of the two tuples. L = [1,2,3], M = [3,2,4], K = [1,2,3,4].\n\ndef count_various(test_list):      \n  dict = {}\n  for i in test_list:\n    dict[i] = test_list.count(i)\n  return dict\nThe above code is a function to count"], [0.2054747694345554, "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements in the given two tuples test_tup1, test_tup2.\nThe above code is a python function to check if a given string is palindrome or not.\n\ndef check_unique_key(num, d):\n    num = str(num)\n    for i in range(len(num)):\n        if num[i] in d:\n            d[num[i]]"], [0.20504647931538353, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar items in two sets.\n"], [0.20504647931538353, "def Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a Pyhton function to find dissimilarity between two given tuples. \n"], [0.20504647931538353, "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar tuples in 2 tuples.\n"], [0.20457492323583074, "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimilar elements in two given tuples.\n\ndef replace_max(test_list, element):\n    list_max = test_list.index(max(test_list))\n    test_list[list_max] = element\n    return test_list\nThe above code is a python function to replace the maximum element in a given list with the given element.\n\nIn how many ways can you find a given tuple"], [0.20388691244426452, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\ndef ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements from two tuples.\n\ndef cubes4art():\n\tfor i in range(1,13):\n\t\tprint(i**3,end=' ')\n\t\t\t\t\nThe above code is to print cube of 1 to 12 numbers without any new lines after each output and alsoprints cube of 1 to 12 elements without space between all cubes.\n'''"], [0.20302699699642246, "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\n\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in tuple.\nWrite a conditional function \"if odd append to list and if even then square that number.\nCreate a tuple and iterate it.\nWrite a function that takes minimum and maximum and a list and return the condition.\n\"\"\"\n# all the while loop statements,programs should be in function\n# print(answer[0][0]+answer[0][1]+answer[1]) 38 7777\n\n#"], [0.20239390744917296, "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements of two given tuples and output them in sorted order.\ndef proc_seq(test_tup1):\n    t1 = len(test_tup1)\n    res = tuple(test_tup1[i] ** (1/(i+1)) for i in range(t1))\n    return res \nThe above code is a function to square every number of a given tuple and output them"], [0.20136467341158426, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function returns the tuple of dissimilar elements from specified two tuples."], [0.1960979752324742, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar value between two given tuples.\n\ndef valid_date(date_string): \n    return bool(re.match(r'^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2])\\"], [0.1931344685435267, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a Python function that returns a tuple of all the dissimilar elements in the two tuples a and b.\ndef convert_us_to_eu(time_usa):\n  hour_usa = int(time_usa.split(':')[0])\n  tuple_eu = (hour_usa + 11, int(time_usa.split(':')[1]))\n  eu_time = str(int(eu_time[0"], [0.1928321900418758, "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes two tuples as arguments to find the characters which are dissimilar in them."], [0.19263747935030454, "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar values in a tuples.\ndef myreduce(add,seq):\n    size_of_concatenate_string=len(seq)\n    temp_list=[]\n    temp_value=0\n    list_each_node=[]\n    final_tem_value=0\n    ans_dic={}\n    grouped_list=[]\n    total_length=0\n    for i in"], [0.1924524052759679, "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\n\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimilar elements between given tuples.\nimport os, sys\nimport time\nclass one:\n    def show(self):\n        print(\"Hey you found me!\")\ndef checkTime(startTime, stopTime):\n  for i in range(4):\n    if(startTime & 10 == 0):\n      print(\"Stop Time -->\", stopTime)\n    else:\n      print(\"Start Time -->\", start"], [0.19238918431063606, "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find a tupple that of dissimlar element only in the given two tuples.\ndef find_nationality(test_str):\n  res = re.findall(r'(\\w+):', test_str)\n  return (res)\nThe above code is a function to find how many times re lib find string of particular nationality  in a given paragraph.\ndef detect_fake_news(test_str):\n "], [0.19163419712273883, "def Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar number from given two tuples in the given tuple list. This maybe related to the above function two find combinations of sums with tuples in the given tuple list.\nChao_Ancestor(lst)\n#Example\nZ = [12, 1, 61, 5, 13, 18] #Test Case\nprint (\"Input:\", Z)\nprint(Chao_Ancestor(Z))\n\n# Chu-"], [0.19110751090002218, "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilarity between two tuples.\ndef interchange(list): \n\ta=list[-1] \n\tlist[0]=list[-1] \n\tlist[-1]=a \n\treturn list \nThe above code is to interchange the first and last element in the list.\ndef add_matrix(a,b):\n    r1 = len(a)\n    c1 = len"], [0.1910802621020695, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar element of two tuples.\ndef find_all_indexes(lst,el):\n  return [i for i,c in enumerate(lst) if c == el]\nThe above code is a function to find all instances of an element in a list.\ndef sum_elements1(tup1,tup2): \n  res = ()\n  if len(tup1) !="], [0.1906864417853687, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \nThe above code is a function to determine if the sum of the divisors of two integers are the same.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the disjoint elements from the given two lists.\ndef find_the_first_non_repeating_letter(test_str):  \n  for i in test_str.lower():\n    if test_str.lower().count(i)>1:\n        continue\n    else:\n        return i \nThe above code is a function to find the first non repeating letter from the string\ndef add(value1,"], [0.19013650173450222, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimilar elements in tuple or other data types.\ndef printspecial(tom): \n    temp = list(tom)  \n    print(temp[-1])\n    #for x in temp[:-1:2]: \n   #     print(x, end=\" \")\nThe above code is a python function to print all even indices forcefully along with the special element(last index). It uses temporary list to carry out"], [0.19013650173450222, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements of given tuples.\n\nclass Eq:\n  def __eq__(self, other):\n    return True\nThe above code is a dummy class to compare __eq__() method with other objects.\n\nclass Notequal:\n  def __eq__(self, other):\n    return False\nThe above code is a dummy class to compare __eq__() method with other objects.\n\nclass NotE"], [0.18673238945020856, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar values between these two tuples. \npalindrome_rec(str1) returns True if str1 is a palindrome, else returns False\n\"\"\"\n\"\"\" The following palindrome function also gives the same result:\ndef isPalindrome(st):\n    # Run loop from 0 to len/2 \n    for i in xrange(0, len(st)/2): \n        if st["], [0.1866230762487762, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements between two tuples by converting them into sets and then performing the ^ operator to find their intersection and return the result as a tuple.\n\ndef num_of_prime_factors(num):\n  count = 0\n  for i in range(2, int(num ** .5)+1):\n    if not num % i and isPrime(i):\n      count += 1\n  return count+1\nThe"], [0.1863886752916762, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " returns a tuple of dissimilar elements in two input tuples.\n"], [0.18612433156255487, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar values from the given tuples.\ndef check_half(number):\n imported = {\"zero\": 0 , \"one\": 1 , \"two\": 2}\n head = number.split(\" \")\n digits = imported.get(head[0])\n return True if digits and head[1] == 'half' and not ((eval(head[1])*digits)%2) else False\nThe above code checks if"], [0.18599177234029005, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements from the input 2 tuples and return them as a tuple.\ndef printBoard(Test_board):\n  for i in range(len(testBoard)):\n    if (i % 3 == 0 and i != 0):\n      print(\"- - - - - - - - - - - - - \")\n\n    for j in range(len(testBoard[0])):\n      if (j % 3"], [0.18523640638019137, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\ndef tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements in both tuples.\ndef enclosed_square(n):\n    return sum([x*x for x in range(n) if ( x % 2 == 0 ) ])\nThe above code is a function that computes squares of even numbers within a defined range.\n\n----------------------------------------\n\n\nSETS\n------\n1) Set Definition\nA set is a collection of items not in any particular order. A Python set is similar"], [0.18467393773413976, "import math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elements of a tuple.\n\nimport os\ndef file_search(dir,fname):\n  return (os.path.join(dir,fname))\nThe above code is to find the absolute path of a file given it's name. Since we are passing two variables, this will help us avoid hard coding the directory name. Thats the beauty of functions.\n\nn = 10\nso = [str(i)"], [0.1842544772396558, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar items in two sets.\nimport datetime\nd1 = datetime.date(2018, 12, 28)\nd2 = datetime.date(2019, 1, 4)\nMdash= d2 - d1\nMslash= abs(Mdash)\nreturn Mslash.days\nThe above code is a function to find the number of days between two dates.\ndef table_of_mult(num):\n"], [0.18326446155987647, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python to find the dissimilar elements in two given tuples.\n\ndef print_50():\n\tfor i in range(1,51):\n\t\tprint(i)\nThe above python code is to print all the numbers between 1 and 50.\nfrom operator import itemgetter\nlst = [(3, 456), (1, 55), (3, 6), (2, 6), (0, 456), (0, 55)]"], [0.18241246200684463, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimilar elements after comparing two tuples.\ndef common_finder(tup1,tup2): \n    res = tuple(set(tup1) & set(tup2)) \n    return (res) \nThe above code is a python function to find the common elements after comparing two tuples. Although the two sets are not visible in \nthe diagram, set tup1 has all the elements sorted"], [0.18191919116639402, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar elementd of two given tuples and output them in sorted order.\ndef count_digits_letters(string):\n  d = l = 0\n  for j in range(len(string)):\n    if string[j].isdigit():\n        d += 1\n    elif string[j].isalpha():\n        l += 1\n  return d,l\nThe above code is a function to find"], [0.18107181912375783, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimilar elements of two given tuples.\ndef numbers(a,b): \n  return tuple(a**2 for b in range(a,b+1) if b % 2 ==1)\nThe above code is a python function to compute values of a to b. \nOutput {1, 9, 25, 49, 81}\ndef validate_pin(pin):\n    return len(pin) in (4"], [0.18078041175507065, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the uncommon elements of two given tuples.\n\ndef max_num(nums):\n  return(max(nums)) \nThe above code is a function to find the maximum number in the given list.\n\ndef count_num_if_true(func, list1):\n    cont = 0\n    for cond in list1:\n        if func(cond):\n            cont += 1\n            return cont \nThe"], [0.1806598364028235, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to have a set distnce between two tuples\n'''"], [0.1796772889579862, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimilar elements between two sequences.\n\ndef replicate(p, *args):\n    return [i for i in p(*args)]\n    # YOUR CODE HERE\n    # PUT YOUR ANSWER IN THIS VARIABLE\n\ndef add(a, b):\n    return a + b\n    \ndef subtract(a, b):\n    return a - b\n    \ndef apply(func, a, b"], [0.17795050449935104, "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in both the tuples.\n\n# Dynamic relationship graph\nclass graph:\n    def __init__(self,start_point, value): \n        self.dict = value\n        self.g = dict()               \n        self.g[start_point]=None         \n    def breath_first_search(self, start_point, end_point, word_numb):\n        visited = set()\n"], [0.17752318464754213, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar member from both tuples. Whichever numbers are not in both the tuples, part of their union, it will take the union member.\n\ndef create_str(test_str, i1, j_minus, j):\n\ttemp_list = []\n\tj += j_minus\n\tfor i in range (j_minus, i1 + 1):\n\t\tt = str(i)\n\t\t"], [0.17657269957132768, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimilar elements in the given 2 tuples.\nWhat are data structures python?\nPython offers a rich selection of inbuilt data structures that can be used to work with sequential data. A data structure is a particular way of organizing data in a computer so that it can be used efficiently.\n\nThere are some data structures in python and each of them are generally based on topics such as Hash, Tree and Graph. The following are the basic data structures"], [0.176470116927444, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements in the two tuples.\ndef find_single(list1):\n  return [x for x in range(list1[0],list1[-1]+1) \n              if x not in list1] \nThe above code is a function to find single elements in a list.\ndef findSquareRoot(n) : \n  \n    # Base cases \n    if (n <= 1)"], [0.17606344657539622, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the tuple by dissolving a given tuple that has all items together.\ndef convert_polygons_to_vector(polygon_list):\n  final_list = []\n  final_list.extend(polygon_list)\n  vectorized_list = []\n  vectorized_list.append(list(chain(*final_list)))\n  return vectorized_list\nThe above code is a function to convert the"], [0.17423863640632786, "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimilar elements and represent them in form of a tuples.\ndef square_cube(number): \n    sq = number**2\n    cb = pow(number, 3) \n    return (sq, cb) \nThe above code is a python function to generate a tuple holding values square and cube of a given number.\ndef square_cube(Number): \n    sq = num**2 \n   "], [0.17423442913655113, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python tuples to find the dissimilar elements of tuples,just written an alternative from stack overflow. \ndef list_ret(limit):\n  if(limit >=27):\t\n    return list(range(limit-27,limit+1))\n  if(limit <27):\t\n    return list(range(limit,limit+28))\t\nThe above list function is to find the range according to PEMDAS. \ndef"], [0.1734123624571107, "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns the dissimilar elements in a tuple.\ndef same_elements(test_tup1, test_tup2):\n    return tuple(set(test_tup1).intersection(set(test_tup2))) \nThe above code is a function that returns the common elements present in the two tuples.\ndef min_drop(lattice):\n  drop=[0]*(len(lattice"], [0.1731797275143546, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the elements which are not in common between the two tuples.\ndef mergeTwoLists(a,b): \n    temp = None\n    if a == None: \n        return b\n    if b == None: \n        return a\n    if a.data <= b.data: \n        temp = a \n        temp.next = mergeTwoLists(a.next, b) \n    else:"], [0.17311241875684216, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find the dissimilar elements of two tuples.\n\ndef validate_mail(s): \n  l, d, c = map(str, s.split('@')) \n\n  if not (0 < len(l) < 20 and \n     all(97 <= ord(i) <= 122 or\n         48 <= ord(i) <= 57 or\n         ord(i)==45 or\n         ord(i)==95 or"], [0.17259712735202137, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in two given tuples.\n\ndef common_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find common elements in two given tuples.\n\ndef nonrepeat_chars(test_string):\n    res=''"], [0.1719791080360281, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\nimport sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements between the two given tuples.\ndef func(games_int, exit, prnt_dissimilar, serviance_str, tuple_lst):\n  global cur_pos\n  global dissimilarities\n  while (cur_pos < len(tuple_lst) and exit == False):\n    #print(test_tup)\n    #print(test_tup1)\n    #"], [0.17152374007204377, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimlarity between the two tuples i.e., the numbers which are similar in the tuples will be removed.\ndef make_even_parity(str):\n  s=str\n  for i in range(len(s)): \n    if i % 2==0:\n      s = s.replace(s[i], 'per')\n    if i%2==1:\n      s = s"], [0.17096654972064165, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the elements that are not similar between two given tuples.\n\n#Replacing space with \"%20\" using python.\n\ndef replace_spaces(test_str):\n  str_lst = test_str.split(\" \")    #Split string on \" \"( spaces ).\n  strts_lst = '%20'.join(str_lst)  #Join the list elements with '%20'.\n  return"], [0.17054397874517468, "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar numbers from the given tuples.\nYou have to define a function checkcourse() with three parameter( course, session and year) and return true if\nthe student is eligible to take the course otherwise return false. The student should meet atleast two\nspecified pre-requisites to take a particular course.\n *  \n *  \n *  \n */"], [0.17051598680935628, "from itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimiliar elements in the given tuples.\n/* Display the data \n1. Display the names and amount in a sorted order\n2. Display the names that didn't find the amount\n3. Display the names the third occurance of amount */\n\nimport pandas as pd \n\ndef main():\n    \n    names = []\n    values = []\n    amounts = {'Harry':1000, 'Larry':1200"], [0.16914774861278, "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the uncommon elements from two list.\n\ndef sum_two_numbers(num1, num2):\n  return num1+num2\nThis is simple function to return sum of two numbers.\ndef mkarr(arr):\n  for i in range(0,len(arr)+1):\n    if i**2 in arr:\n      print(True)\n    else:\n      print(False)\nThe above function"], [0.16914774861278, "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar items of tuples.\n\nn1 = int(input())\nlst = [int(y) for y in input().split()]\ndef my_average(lst_name):\n    n2 = len(lst_name)\n    total = sum(lst_name)\n    res = total/(n2)\n    return(res)\nThe above code is a function to find the mean of"], [0.16744839760096838, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " finds the dissimilar elements between two tuples.\n\"\"\""], [0.16689505508021651, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " function to find the dissimilar elements.\n\nclass isUnique:\n\n  class Solution():\n\n      def isUnique(self, s: str) -> bool:\n        return len(set(s)) == len(s)\nThe above code class is to check whether the given string is Unique string or Not.\n\ndef singleNumber(nums):\n  hash_table = collections.Counter(nums)\n  for i in hash_table:\n   "], [0.16688088757155578, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar values from the two tuples.\ndef binary_search(test_list, given_key):\n  mid = TEST_LIST_SIZE//2\n  \n  if len(test_list) > 1:\n    while test_list[mid] != given_key:\n      if test_list[mid] < given_key:\n        return binary_search(test_list[mid:], given_key)"], [0.16383808440521816, "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in two tuples.  \ndef convert_nested_tuple_to_tuple(test_tup):\n  test_tup = \" \".join(str(x) for x in test_tup)\n  test_tup = tuple(test_tup.split())\n  return test_tup\nThe above code is a function to convert a tuple which contains other tuples or other complex"], [0.16374116022580587, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to check and print difference of 2 sets.\n"], [0.16337777434923462, "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in the nested mixed tuples.\t\ndef reverse_seq(n): \n\tn = int(n) \n\trev_seq = tuple(x for x in range(1, n+1) if n % x == 0) \n\treturn (rev_seq) \nThe above code is a function to produce reverse of a sequence without using Inbuilt function.\n\ndef find_num_upp("], [0.16295962923165186, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the elements in the two tuples parenthesis that are incompatible between the two tuples' elements.\ndef find_bcr(fbncc):\n  global count\n  while (count <= UPPER_LIMIT):\n    count += 1\n\n    if ((count // 3) + (count * 1) == fbncc):\n      sum_of_fbn = count // 3 + count // 2 + count * 1\n"], [0.16232847056875757, "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\n\ndef is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in two given lists of tuples.\ndef binary_search(arr, l, r, x):\n\tif r >= l:\n\t\tmid = l + (r-l)//2\n\t\tif arr[mid] == x:\n\t\t\treturn mid\n\t\telif arr[mid] > x:\n\t\t\treturn binary_search(arr, l, mid-1, x)"], [0.16139195937328674, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in given 2 tuples.\n\n\n# Python Class\n# * Without constructor\n# * Without method overloading\nclass Box:\n    def getArea(self, side1, side2=4):\n        print(\"Box Area is {0} sq.units\".format(side1 * side2)) \n\nobj = Box()\nobj.getArea(7,8) \nobj.getArea(7)"], [0.16133843844850104, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimilar items in two different tuples.\n\ndef reverse_string(foobar):\n  return (foobar[::-1])\nThe above code is a python function to reverse a string.\ndef find_duplicates(args):\n  res = []\n  for n in args:\n    if args.count(n) > 1 and n not in res:\n      res.append(n)\n "], [0.16129100138913047, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the elements that dissimlar in two given tuples.\ndef add_single_key_value(tup1, key, value):\n  res = tuple(zip(tup1, itertools.repeat(value)))\n  return (res) \nThe above code is a function to add a new key with a value to a tuple, given the employee tuple and a new value\ndef all_subsets(test_t"], [0.16083625689325265, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements from tuples provided to the function.\ndef pair_sum(tup1,tup2,num1):\n  add_nos = []\n  my_list = []\n  for each1 in tup1:\n    for each2 in tup2:\n      my_list.append((each1,each2))\n  for ele in range(0,len(my_list)):\n   "], [0.15944044287138598, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find the dissimilar elements concatenated in a new tuple from two given tuples.\ndef print_number_pairs(array):\n\tfor i in range(0,len(array)):\n\t\tfor j in range(0,len(array)):\n\t\t\tprint()\nThe above code is to print the desired output. Modify it to print the required output.\n\"\"\"\n\"\"\" Problem: You are given a number \u2018"], [0.15927308042379043, "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar items from 2 tuples.\ndef nqueen(n):\n    def rotate(lst):\n        return lst[1:] + lst[:1]\n\n    def rule_not_valid(elem_lst):\n        elem1 = elem_lst[-1]\n        m = len(elem_lst)\n        for x in range(m):\n            elem"], [0.15921210878613798, "def check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the different elements of tuple1 and tuple2.\n\nsorted([(1,0),(2,2)]) \nOutput: [(1, 0), (2, 2)]\nsorted([(2,2),(1,0)]) \nOutput: [(1, 0), (2, 2)]\nIn above sorted syntax argument type can also be tuple while sorting. \nIn the programming world we are generally not mentioning"], [0.15831629117207124, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements common in both given tuples.\ndef weight_matrix(list1):\n# get absolute max/min values\n  max_value=max(list1)\n  min_value=min(list1)\n  wt_list=[]\n  if(max_value==min_value):\n    return ([1,1,1,1,1,1,1,1,1,1"], [0.15794246704230364, "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\n\nimport sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python program to find the dissimilar elements between the given two tuples using set() API.\niterable = ['body', 'boy', 'boil', 'deal']\na = list(map(lambda word: word[0] == 'b' , iterable))\nprint(a)\nThe above code is a program that returns iterable list of booleans True if first character is b else returns False.\na = [1,2,"], [0.15777391490206355, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements of two given tuples.\nfrom collections import Counter\na1 = [\"python\", \"pyhton\", \"java\", \"java\", \"scala\", \"scala\", \"pascala\", \"pascala\", \"snippet\", \"pyhton\", \"ptyhon\"]\ncounting = Counter(a1)\ndictionary = {}\nprint(counting.most_common(5))\nfor i in"], [0.15691205026577, "def find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar values from the given two tuples.\n\ndef g_c_d(a, b): \n\tif(b == 0): \n\t\treturn a \n\telse: \n\t\treturn g_c_d(b, a % b) \nThe above code is a Python program to find GCD of two numbers.\ndef string_without_k_distinct(dna, k):"], [0.15679590230763507, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the set of dissimilar numbers in to two tuples, and returns them as a tuple.\ndef same_index(tup_list):\n  res=[]\n  for i in tup_list:\n    res.append(i[::-1])\n  return tuple(res)\nThe above code is a function to reverse the elements in each tuple of the given list, for the each given index, and return them as a"], [0.1558600994436171, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in 2 tuples.\ndef find_max_length(list1, list2):\n    maxlen = 0\n    for i in list1:\n        if len(i) and len(i) > maxlen:\n            maxlen = len(i)\n    for j in list2:\n        if (len(j) and len(j) > maxlen):\n            maxlen = len(j"], [0.15569682195802043, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the tuple containing the distinct elements contained in two tuples\ndef get_chars(test_str):\n  cnt = Counter(test_str)\n  res = set(test_str)\n  print(res)                 \n\nThe above code is a function to remove duplicates from the string.\ndef strip_leading(test_str): \n  \"\"\"\n  Do not remove first and last character of string as required."], [0.15569435951921146, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements of two tuples. https://www.geeksforgeeks.org/set-tuple-find-dissimilar-elements-two-tuples/\n\nimport datetime\ndef make_unique(new_list):\n  out_list = []\n  for i in new_list:\n    if int(i) not in out_list:\n      out_list.append(int(i"], [0.15550359586906567, "def add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find out the dissimilar tuples (present one tuple 1 and another tuple 2)\n\ndef repeat_tuple(test_list):\n  res = map(lambda x:x,(list(set(test_list))))\n  res1 = map(lambda x:x,(list(set(test_list))))\n  res2 = map(quadratic1,res,res1)\n  res2 = tuple(res"], [0.15547565676748742, "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the distinct pairs  between two tuples.\nimport numpy as npm \nexplanation 3\nAn explanation3 in Jupyter Lab numpy n-dimensional array/vector:\nGeneral Way:\ndef find_dissimilar(test_tup1, test_tup2):\n  res = np.setxor1d(test_tup1, test_tup2, assume_unique=False"], [0.15532240443174813, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find the dissimilar elements of both the sets x and y \ndef count_digits_letters(word):\n\n    digits, letters = 0, 0\n\n    for char in word:\n        if (char.isdigit()):\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n\n    print(\"# Digits =\", digits)\n    print(\"# Letters =\", letters)\nThe above code checks the"], [0.15532240443174813, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find the dissimilar elements from 2 given tuples.\nQ2. Code snippets (Syntax, Structure and Layout).\n\n(a) A Program for Harmonic Number.\n\ndef my_function():\n  print(\"The Function has been called\")\n\n# Output: The Function has been called\nmy_function()\n\n# Output: 1/1 = 1.0\nprint(\"1/1 =\",1/1)\n\n# Output"], [0.15532240443174813, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the numbers that appear in one tup but not both.\n\nimport re\n#function to get first name\ndef first_name(a):\n    match = re.search(r'^\\w+', a)\n    if match:\n        return match.group()\nprint(first_name(\"sitakantada siriwardene\"))\nThe above code returns the name inside the () brackets.\n\nimport re\n#"], [0.15489340125799786, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the elements present in either of tuples but not in both these tuples.\ndef count_substring(s,sub_s):                                                                                \n  count=0\n  ndx=0\n  ndx2=0\n  string_len=len(s)\n  sub_len=len(sub_s)\n  while string_len-ndx2 >= sub_len and ndx < string"], [0.15411466600055546, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is function to separate the dissimilar elements in both tuples and return a tuple with them.\n\nA function that takes two n-size arrays and returns True if they have at least n+1 common elements.\n\ndef common_number(arr1, arr2, n):\n  first = set(arr1)\n  second = set(arr2)\n  return len(first & second) >= n+1\nThe above function is function to find the"], [0.15391549648773922, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python program to find the dissimilar items in two tuples which are not together.\ndef largestOfFour(lst):\n  lst1 = []\n  for i in lst:\n    res= max(i)\n    lst1.append(res)\n  return lst1\nThe above code is a python function to find the largest number of the list. \ndef sumOfPairs(a, b): \n   "], [0.15343832461983645, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in two given tuples.\ndef rem_sublist(testList,sublist):\n    if not sublist:\n        return testList\n    a = [i for i in testList if not i == sublist[0]]\n    return rem_sublist(a,sublist[1:])\nThe above code is a function to remove all occurences of a given sublist from the given list.\n"], [0.15328265076053435, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find an element in a tuple just like Union. \n\ndef find_power_set(set1):\n    power_set=[[]]\n    for x in set1:\n        res1=[]\n        for sub_set in power_set:\n            print(sub_set)\n            print(x)\n            res1.append(sub_set+[x])\n            #print(res1)\n        power"], [0.15256861258004542, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns the dissimilar elements in two tuples.\ndef find_dissimilar(test_st,test_dic):\n x = set(test_st)\n y = set(test_dic)\n dis=x^y\n return dis\nThe above code is a function that returns the symmetric difference between two sets.\ndef create_dict(test_str,str_length):\n   dict1= {}\n   for"], [0.15203558149600085, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar entries of tuples.\ndef call_from_console():\n path = \"/home/divya/Documents/python/\"\n file1 = \"tasks\"\n fp = open(file1, 'r')\n input1 = fp.read()\n fp.close()\n input1 = \"\".join(input1.split())\n input1 = input1.split('.')\n input1.sort()\n"], [0.1519764961400906, "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in two given tuples.\n\ndef a_unique_set(items):\n  return sorted(set(items), key = items.index) \nThe above code is a function to remove duplicate items from a given list based on its indexes.\n\ndef sum_between(test_list, less, more):\n  sum=0\n  for i in range(len(test_list)):\n        for j"], [0.1517499216545194, "def find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " int two tuples and find the dissimilar elements in between them.\n\nprint('item1' in 'item1 item2 item3') \n \n\n------\n \nIt will return the boolean values based on the condition. If there is 'item in item1 item2 item3' it will return True.\ndef list_input(num): \n    list = [] \n    for i in range(num):\n        list.append(i"], [0.15134645015349263, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the tuples of values which are present in one tuple but not in another.\nGiven a tuple as a parameter we can get the number of tuples present in it.\ndef count_tuple(Input):\n  return len(Input)\nThe above code is a function to count the given number of tuples.\n\ntup1 = [(\"A\",\"A\",\"A\"),(\"B\",\"B\",\"B\"),(\"A\",\"C\",\"D"], [0.150694080744228, "def cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the index which the values between two tuples are dissimilar\n\nfrom operator import mul\ndef tri_ls(input_tup):\n    res = reduce(mul, input_tup)\n    return (res)\nThe above code is a function to find the index which the values between two tuples are dissimilar\n\ndef overlap(test_list):\n  n =[]\n  for sub_list in test_list"], [0.15031884483136482, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the inner elements in two tuples which do not match.\ndef zipping(text1,text2):\n\tres = tuple(zip(text1, text2))\n\t#print(temp)\n\tnew=list(list(i) for i in res)\n\tprint(new)\nThe above code is part of a function where two strings are broken down in to whitespaces, lines and individual character and to print that text"], [0.15007056744476854, "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \nThe above code is a function to determine if the sum of the divisors of two integers are the same.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to preform list subtraction\ndef difference(list1, list2):\n   list_dif = [i for i in list1 + list2 if i not in list1 or i not in list2]\n   return list_dif\nThe above code is a function to find the difference between two lists.\npip install unittest2 \nimport sys \nsys.path.append('/Library/Frameworks/Python.framework"], [0.14982331756782297, "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to check for dissimilar elements in the tuple.\ndef concat_1_3(test_str):\n  res = \"\"\n  for j in range(len(test_str) + 1):\n    for i in range(0, 4):\n      res+= test_str[:i]\n  return(res) \nThe above code is a function to concat particular substrings of the string.\ndef sort_it("], [0.14980625532361677, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return the dissimilar elements between two tuples.\ndef find_common_subsequences(test_tup1, test_tup2):\n  res = tuple(filter(lambda ele: all(sub in ele for sub in test_tup2), itertools.product(*[test_tup1, test_tup2])))\n  return (res) \n#The above code is a function to return all"], [0.14974524465133907, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in given two tuples\ndef find_duplicates(list1):\n res = list(filter(lambda x: list1.count(x) > 1, list1))\n return (res) \nThe above code is a function to find duplicates elements in list\nprint 'Unique elements :', end(all_elements[4:])'''\n# Exercise 5\n\n# Create a templete Create a"], [0.14945234713610073, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the elements that are dissimilar in length in the given tuples.\ndef permutation_uniform_distribution_formula(n,k):\n  ans=factorial(n)/factorial(n-k)\n  return ans\nThe above code is a simple program to calculate probability in permutation.\n\n# Day 4 Assignments\n\n# Day 4 Assignments\n## Construct a Dictionary with keys as Genre"], [0.14917035289241834, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to discard similarities between tuples and return the dissimilar items in a tuple.\n"], [0.14845187645743513, "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements in a truple.\n def RightShiftAccordingly(String):\n    String=String.upper()\n    originalRightShiftSequence=[ i for i in range(0,26)]\n    originalRightShiftSequence[9:13]=[ i for i in range(-3,0)]\n\n    remainingShiftSequences=[ i for i in range(0,26)]\n    remainingShiftSequences[9:15"], [0.14843200946393695, "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to display the dissimilar elements in two specified tuples. \nfrom math import sqrt\nlist1 = [(1, 2), (1, 5), (0, 6), (2, 8), (2, 3)]\ndarks = [sqrt(a ** 2 + b ** 2) for (a, b) in list1]\n    \nreturn (f'{print(darks)} is the list containing dists.')\n"], [0.14805992604532747, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find out the dissimilar elements of the two tuples.\nif __name__ == '__main__':\n  frnds = {\"veronica\", \"danielle\", \"stella\", \"denise\", \"julie\", \"kim\"}\n for item in frnds:\n    print(item)\n\n if frnds == \"alice\" in frnds:\n    print(\"alice is not a index"], [0.1480562254977454, "def even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the elemetns which are not common amond two lists of tuples.\ndef unify(s1, s2): \n  res = set(s1)\n  for t in s2: \n    if t not in res: \n      res.add(t) \n  return res\nThe above code is a function to merge two lists of set into a single union set.\ndef difference_tuple("], [0.1480562254977454, "def remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the difference of two tuples(operates XOR or exclusive or operation)\n\ndef proper_divisor(test_tup):\n  res = tuple()\n  for ele in test_tup:\n    if ele % 2 == 0:\n      res = res + (ele, )\n  return (res) \nThe above code is a function to find the proper divisor/except 1 of a tuple.\n"], [0.14715843178498347, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to test if two tuples are exclusive of each other i.e. they contain now common elements.\n"], [0.14696118352991064, "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements from given tuples.\ndef longest_string(palindrome_arg):\n def longest_palindrome(palindrome_arg):\n i=len(palindrome_arg)-1\n \n while i>=0: \n  #right to left palindrome check\n  j=0\n  while (j<=i)&(i+j < len(palindrome_arg"], [0.14675734847269867, "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the dissimlarity between two lists.\nThe function pair_xor_Sum is defined above, find the final answer of on given pair of tuples.\n\"\"\"\narr = list(map(int,input().split()))\nn = len(arr)\nprint(pair_xor_Sum(arr,n))\ntest_tup1 = (1,2,3,4,4,3)\ntest"], [0.1461092889726482, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the numbers in two tuples/lists which are dissimilar. \n\ndef group_pairs(test_list):\n  test_list = [list(i) for i in test_list]\n  result = []\n  for i in range(len(test_list)):\n    if test_list[i] not in test_list[i+1:len(test_list)]:\n      result."], [0.1460483162820195, "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns the keys that are dissimilar in two dictionaries (dicted tuples).\n"], [0.1456632156998842, "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\nimport re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimilar element between two sets.\nDo DTFT of the resulting signal to show it has periodic components.\nFrom the spectrogram plot, find out the number of periodicity in the signal.\nPlot the FFT of the signal to see its frequency components with \nrepect to time period. Try to find weather it has got aliased components.\nIF we apply a low-pass filter with cutoff frequency at 2kHz, will it degrade "], [0.14565801674355, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python program to find the difference of two sequences of string. \n\nNote: The solution file is called P13-Last-to-the-Last-Element.py\n\"\"\""], [0.14565801674355, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to identify duplications in two sets. It can be used to check dissimilarity between two sets as well.\n"], [0.14559172556144853, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to finf the dissimilar elements between two tuples. \n\ndef convert(c_temp):\n return (9.0/5.0*c_temp + 32)\nThe above code is a function to convert 'Celcius to Farenhiet'.\n\ndef fun(param):\n  res = 0\n  for i in range(0,len(param)):\n    res += math.sqrt(ord(param"], [0.1454110404561194, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\nimport re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the Dissimilarity between two tuples of same length containing numbers, both positive and negative.\ndef all_odd(number_list):\n  res_list=[]\n  for n in number_list:\n    if n % 2 != 0:\n      res_list.append(n) \n  return(res_list)\nThe above code is a function to find all odd numbers and then add all of those odd numbers."], [0.14535737531163587, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements (number/character) between two tuples.\ndef transpose_matrix(mat):\n    return list(map(list, zip(*mat)))\nThe above code is a function to transpose a matrix.\ndef alternate_sort(list1, list2):\n    return sorted(list1 + list2,key=cmp_to_key(compare))\nThe above code is a function to create a list"], [0.14523667194003922, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to evaluate dissimilar elements in two given lists and add into new tuple.\ndef is_sorted_and_how(arr):\n    if (all(arr[i] <= arr[i+1] for i in range(len(arr)-1))):\n      \tprint(\"yes, ascending\")\n    \n    if (all(arr[i] >= arr[i+1] for i in range(len(arr)-1))"], [0.14512677984488598, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the element in two the tuple seq1 and seq2 which are not in both seq1 and seq2 in Python.\nThe robust code is done with set operators found in most of the other programming languages.  \n\ndef find_dissimilar(test_tup1, test_tup2):\n  return tuple(a for a, b in zip(test_tup1, test_tup2) if a != b)"], [0.1451236470814164, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to check the dissimilarity between two tuples. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\ndef find_the_distance_value(arr1, arr2, d):\n  return (sum(abs(a - b) > d for a, b in zip(arr1, arr2)))"], [0.14502212324498012, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the element wise dissimilarity between two tuples.\n\nOutput: \ntext = \"Just...wow, what a234234 day!\";\npattern = \"...\"\nm = re.findall(pattern,text)\npattern = \"[Ii]mproved\"\nimport re\nm1 = re.findall(pattern,text)\nprint (m1)\npattern = \"(?=[Ii]mproved"], [0.14455334542930004, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find out the different tuples between \"test_tup1\" and \"test_tup2\".\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1).symmetric_difference(set(test_tup2)))\n  return (res) \nThe above code is a function to find out the different tuples between \"test"], [0.14454615089530748, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements in two tupples.\n\n# String Functions\nlist = [2, 3, 4, 5]\nmy_list = []\nfor str in list:\n  output = \"\"\n  for elements in str:\n    if elements in [\"2\"]:\n      output+=\"2\"\n    if elements in [\"3\"]:\n      output+=\"3\"\n    if elements in [\"4\"]:\n      output"], [0.1435033142116598, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the set of dissimalar elements present in test_tupl1 and test_tup2. \nTo find this required operation, a two way tuple unpacking technique is used to segregate the elements by their \nrespective tuple indexes. \n    The first tuple with elements passed as argument is considered as test_tup1, the second tup as test_tup2. \n\nDo :- \n>> test_t"], [0.14345069941873695, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilarity between first and second tuple.\ndef is_pentagonal(num):\n    test_tup1 = (1, 4)\n    test_tup2 = (3, 16) \n\n    if(check_smaller(test_tup1, num) == True):\n        if(check_smaller(test_tup2, num) == True):  \n            num = set(find_"], [0.14104434099881127, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return for all the dissimilar elements of within the tuple.\ndef print_duplicates(list1):\n  for i in range(len(list1)):\n    for j in range(i + 1, len(list1)):\n      if list1[i] == list1[j]:\n        temp = list1[j]\n        while(list1[j] == temp):\n          list1[j]"], [0.14083351340026726, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to get the numbers different in two tuples.\ndef find_permutations(some_num):\n\treturn len(set(itertools.permutations(str(some_num))))\nBasically, the above code will return the total number of permutations for a given integer possible.\n'''"], [0.14069213655719565, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar items in two tuples.\n\ndef remove_mcn(files):\n  import re\n  [re.sub(r'^([0-9]{2}_){2}', \"\", f) for f in filelist]\n\nThe above code is a function to remove Mac Os file names prints.\n\ndef salt_password(password):\n  import hashlib\n  test1 = [c for c"], [0.1398600887022484, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\nimport re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the first dissimilar element from both tuples.\n\ndef is_operator(e):\n  if e == '+' or e == '-' or e == '*' or e == '/' or e == '^':\n    return (True)\n  else:\n    return (False)\nThe above code is a function to check if the entered operator is a valid operator or NOT.\n\ndef is_valid_operator("], [0.139854679430337, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the tuple of dissimiliar values between two tuple test_tup1 and test_tup2.\ndef set_difference(tup1,tup2):\n  tup=tuple(set(tup1) - set(tup2))\n  return tup\nThe above code is a python function to find the set difference between two sets.\n"], [0.139854679430337, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimlilar tuple which shares the same element 'i' in both tuples.\nimport random\ndef unique_tuple(lst):\n  if len(lst) == 0:\n    return(\"0\")\n  if len(lst) == 1:\n    res = (\"0\", \"1\")\n  else:\n    i = random.randint(0, len(lst)-1)\n    res"], [0.1394776992737149, "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\n\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimlar elements fromt two tuple.\na = [9,0,0,0,1]\nout = []\nfor b in a:\n    out.append(str(b))\nlogic = \".join(out)\nTo print required out put.\n\n\nprint(\",\".join(map(str,c)))\nA more consise way to do the same querry.\ndef bit_addition(a"], [0.1392218668226893, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to identify dissimilar elements between the two given tuples.\nimport numpy as np\ndef check_hash(int_array, val):\n  return list(np.where(np.array(int_array) == val)[0])\nThe above code is a function to find all the locations of occurences of a given value in given integer array.\nimport pandas as pd\ndf1 = pd.DataFrame(\n   "], [0.13899221984122992, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find dissimilar digits in the two tuples.\n'''\n\ndef tuple as string swap(tup1,tup2):\n\tstr = \"fdsakj\"\n\tstr = str.replace(str[tup1],\"@\").replace(str[tup2],\"tup1[tup1]\").replace(\"@\",str[tup2])\n\tstr = str.replace(str[tup2],\"@"], [0.13865227492337892, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the different elements between 2 tuples.\nThe above code is a function to convert Celsius To Fahrenheit.\nPython3 implementation of the approach  \nimport queue \n  \n# Function to find the maximum \n# possible equal sum  \ndef maxEqualSum(arr, n): \n      \n    # If sum of array is odd \n    # the max equal sum isn't \n    # possible \n    if (n <"], [0.13833364597516262, "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\n\nimport re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " returns a tuple with the items that are different between two tuples.\n'''"], [0.1383127540593912, "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find the dissimlar elements in two sets of tuples.\nclass Calculator_Power:\n    def power(self, n, p):\n      if n < 0 and p < 0:\n        return Null\n      else:\n        return pow(n, p)\nA power class that has a method called power that takes in two parameters a number and an exponent and returns the \nvalue of the passed number raised to the power of passed exponent"], [0.13805815067523927, "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " takes any two tuples and find the dissimilar values between two given tuples\ndiff_diag=abs(complex((ax-hx),(ay-hy)))\nThe above code shows the absolute value of complex number calculation.\n"], [0.13782225304233123, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find differences between two tuples.\n\nmatrix = []\nmatrix_tup = ()\npath = []\nf = open('Roadseg.txt','r')\n\nst = f.readline()\nst = st.split(' ')\nwhile st != ['']:\n    test_tup = [tuple(st[1:])]\n    if st[0] != ' ':\n        matrix_"], [0.13758383131569082, "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to print dissimilar elements of two given tuples.\ndef digit_count(n):\n  count = 0\n  while n:\n    count += 1\n    n //= 10\n  return count\nThe above code is a python function to find count of digits in the given number.\ndef copy(test_tup):\n  return list(test_tup) \nThe above code is a function to copt the contents of a"], [0.13742822428185075, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find a tuple containing the elements which are only present in either of the input tuples.\n def max_value(array: object, n: object) -> object:\n     k = len(array)\n     overall_max = array[0]\n     for m in range(1, n-k+1):\n         sub_array = array[m:m+k]\n         current_max = sub_array[0]\n"], [0.13630292073612646, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find the dissimilar elements between two given tuple.\n\ndef find_Floor(m):\n  res = [ int(m) for a in m.split('.')]\n  print (res) # here split return a list of strings and we are converting it to a integer  as list of int and then returning the entire list\n  return res[0]\nThe odds are returned in a tuple so a separate function is required to find out if its"], [0.1357472720557883, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar items from two tuples.\nOne more example, please refer below.\n\"\"\"\ndef find_similar(s1, s2):\n    list1 = s1.split(\" \")\n    list2 = s2.split(\" \")\n    similar = [w for w in list1 if w in list2]\n    print(\" \".join(similar))\n\nprint(find_similar('y is this how you"], [0.13561048617560334, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes two tuples of the same length and finds the elements that are dissimilar in each.\n\n\n'''\n\n"], [0.1355754326122043, "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar element in both the given tuples.\n\nimport random\ndef digit_add(number):\n\tdigits = [int(digit) for digit in number]\n\tsum_of_digits = sum(digits)\n\treturn sum_of_digits\nThe above code is a function to get sum of digits of any given number.\n\ndef array_parse(test_array, value):\n  res ="], [0.13481969607264754, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return a tuple consisting of the elements in test_tup1 which are not present in test_tup2 and that with the elements present in test_tup2 but not in test_tup1."], [0.134503019213756, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the disimilar elements.\n\ndef sum_of_products(A, B):\n    return sum(map(lambda x: x[0]*x[1], zip(A, B)))\nThe above python code is a python function to find the sum of product of the two lists.\n\nimport unittest\n\nclass Test_question_6(unittest.TestCase):\n\n    def setUp(self):"], [0.13379377414938876, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements which are not common to both the given tuples.\ndef remove_newline_char(str1):\n      str2 = \"\"\n      for i in str1:\n          if i != '\\n' and i != '\\r':\n              str2 = str2 + i\n      return str2\nThe above code is used to remove the new line character from a string.\ndef uniterpreter(str"], [0.1331135400047238, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes two tuples as input and returns a tuple with elements that are different in the two original tuples.\n\n\n"], [0.13288649314958587, "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a method to find the dissimilar characters in 2 strings.\ndef sort1(tuples_list):\n    return sorted(tuples_list, key=lambda elem: elem[0])\nThe above code is a method by airbnb which sorts the tuples according to it's first value.\ndef sort2(tuples_list):\n    return sorted(tuples_list, key=lambda elem: elem[0], reverse="], [0.13284468899202717, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar tuple elements from a pair of tuples.\n\n\n# HARD PROBLEMS\n\n# P1.PY\n\"\"\"\nRGB to HEX\n\"\"\"\nTips:\nUse the formula:\nRGB(r, g, b) = r-g-b\nHEX = R-G-B\nr, g, b = 12, 55, 255\nhex = ceil(r)-ceil(g)-"], [0.1327464290540795, "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements from the converted tuple.\n  \nimport math\nimport os\nimport random\nimport re\nimport sys\nimport collections\n\n# Complete the twoStrings function below.\ndef twoStrings(s1, s2):\n    mark = 0\n    for i in s1:\n        for j in s2:\n            if(i==j):\n                mark = 1\n                return ('YES')\n    return"], [0.13225634803609432, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that finds the dissimilar elements for the given two tuple.\ndef matrix2graph(graph1):\n  H=tuple(set(a) for a in graph1 if len(set(a))>1) # it eliminates tuples with single element sets or otherwise it will print cyclic sets\n  graphS=tuple(set(sum(graph1,()))) # it eliminates tuples of single characters sets ex:('c'), it"], [0.1314993011582401, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function returns dissimilar keys out of two given tuples.\n"], [0.13143585911118544, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements of two tuples.\ndef Vovking_speech(): \n    return \"Whatever you are, be a good one!\" \nThe above code is a simple program to wish vovking.\ndef outer_function(m):\n    m += ' became '\n    def inner_function(n):\n        nonlocal m\n        n += 'more ' + m + n\n        return n\n    print(inner"], [0.13142295478671942, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements from the two tuples. But there can be some errors.\n\ndef remove_all_twos(test_list):\n test_list.remove(2);\n \nThe above code is a funtion to remove all the elements 2 in the list. But first we need to import the list module to perform thi operation.\n\n#cannot remove the 12 which is present in the 2nd index of test_list"], [0.13136059792595947, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find those elements in tuples that are dissimilar. The output should be a tuple.\n\ndef filter_tuple_on_dict(test_tup1, test_dict):\n\treturn tuple(filter(lambda test_tup1: test_dict[0] == test_tup1[0], test_tup1))\nThe above code is a function to filter elements in a tuple based some condition.The output should"], [0.13134396940871365, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find a dissimilarity of these two given tuple \n\ndef create_combination(X,Y,Z): \n\tnumbers = [] \n\tfor i in X: \n\t\tfor j in Y: \n\t\t\tfor k in Z: \n\t\t\t\tif (abs(i - j) != 0 and abs(j - k) != 0 and\n\t\t\t\t\tabs(k -"], [0.13098999698431796, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python program to find dissimilar values between two tuples.\n\ndef super_sum(*lists):\n\tresults = []\n\tfor numbers in zip(*lists):\n\t    results.append(reduce(lambda x, y: x+y, numbers))\n\treturn results #it gives the sum of the numbers stored in the given lists. \nThe above code is a function to calculate the sum of documents.\n\n#and then it outputs the"], [0.1302848365711865, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function same as set, which combines two sets into a single set and removes similar sets by extracting the dissimilar components.\ndef find_common(list1, list2):\n  res = []\n  l3=[x for x in list1 if x in list2]\n  \n  return l3\nThe above code is a python function to find the common elements in two given lists. \ndef filter_list(initial_list): \n"], [0.1298704327238047, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar items from 2 given items.\ndef remove_duplicate(duplicate):\n  list = []\n  seen = set()\n  for a in duplicate:\n    if a not in seen:\n      seen.add(a)\n      list.append(a)\n  return list\nTo remove repeated items from a given list.\n\ndef binary_cover(target, max_value):\n  start, end"], [0.12976091403854464, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find objects that are dislossial and print out the union.  \ndef find_subarray(array, l_sub, l_array):\n  res =[]\n  if l_sub > l_array:\n    res= \"Length of l_sub cannot be grater than l_array\"\n  else:\n    for i in range(len(array)):\n      for j in range(i, len(array)"], [0.12927995605410314, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements from the tuples given.\ndef find_sequence(test_seq1, test_seq2):\n  res= \", \".join([str(len(i) + \"\\t\" + i) for i in set(test_seq1).symmetric_difference(set(test_seq2))]) \n  return res\nThe above code is a python function to sequence of strings given in the tuples"], [0.12914533027441835, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find dissimilar item from the two tuples.\ndef matrix_second_largest(X):\n  X.sort()\n  print(X[-2])\nThe above code is used to find the second largest element in the matrix of values.\ndef stringList(sentence):\n  sentence1=sentence.split(' ')\n  d = tuple(sentence1)\n  print()\n  print(sentence)\n  print"], [0.1290735025624076, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " finds out the dissimilar elements present \nin the given tuples test_tup1 and test_tup2.\n\n\ndef is_exists(param1,param2):\n    try:\n        return True if param1 in param2 else False\n    except:\n        return False\n\n\ndef find_nearest_square(maximum):\n    i = 1\n    while ((i * i) < maximum):\n        i += 1\n   "], [0.12749681780824437, "def pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that finds dissimilar elements of two tuples.\n\ndef binary_fn(array_list):\n        return sorted(range(len(array_list)), key=lambda array_list :array_list[\"name\"])\nThe above code returns the indices of a list of dictionaries sorted by values in the 'name' key.\n\"\"\""], [0.12749266056504202, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return elements which are not common.\n'''\ndef is_num_hexagonal(n):\n    return int(n*(2*n-1))\n\ndef is_num_heptagonal(n):\n    return int(n*(5*n-3)/2)\n\ndef is_num_octagonal(n):\n    return n*(3*n-2)\n\ndef is_pan("], [0.12711243799740304, "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the difference of 2 lists which is the result stored in a Diw tuple. \n\ndef interleavings(str1, str2):\n  memo = {}\n\n  def recurse(s1, s2, memo, eval = ''):\n    if (s1, s2) in memo: return memo[(s1, s2)]\n \n    ans = []\n    if len(s1) =="], [0.12652827150339102, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return the differece between the two lists of given tests.\n#5\ndef encoded_message(test_str):\n    alphabets = 'abcdefghijklmnopqrstuvwxyz'\n    res_list = []\n\n    for letter in test_str:\n        if letter in alphabets:\n            res_list.append(alphabets[25 - alphabets.find("], [0.1264414962830063, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the elements that do not exist in a given pair of tuples.\ndef _count_elements(list_data):\n  dictionary = {}\n  for elem in list_data:\n      if elem in dictionary:\n          dictionary[elem] += 1\n      else:\n          dictionary[elem] = 1\n  return (dictionary)\nThe above code is a python function to count the elements of a given"], [0.12639835024460772, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find the dissimilar values between two tuples using python\n\"\"\"\nimport numpy as np\nfrom numpy import matrix\nfrom numpy import linalg\n\n#checks if the number is a perfect square\ndef issquare(n):\n    if (n**0.5) == int(n**0.5):\n        return True\n    else:\n        return False\n\n#returns true if the given number is a power of"], [0.12605523474787025, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar attributes from the two tuples on the basis of index.\n\ndef common_attributes(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return(res)\nThe above code is a function to find common attributes from the two tuples on the basis of index.\n\nUsing the index, i wrote another"], [0.12605523474787025, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function that removes the common elements from the given two tuples.\ndef stone_pile(pile):\n  a = 0\n  while(a <= pile):\n    print(a)\n    a+=2\n  while(a >2):\n    print(a)\n    a-=2\n   \nThe above code is a python function that prints all the even and odd numbers for a given input 'pile'.\ndef check"], [0.12533629401151494, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return the mutally dissimilar elements in two tuples passed to it as arguments.\ndef is_nested(test_list):\n  l = len(test_list)\n  r = False\n  c = 0\n  if l > 1:\n    while l > 1:\n      r = r or isinstance(test_list, list)\n      test_list = test_list[0]\n      l /= 1"], [0.1252716601020214, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a finding the dissimilar elements of two given tuples.\n\n\ndef default_value(options={'foo': 'bar'}):\n    return options.get('foo', 'no foo')\nThe above code is python code to find the value of the key 'foo' in the dictionary, if dictionary has no key 'foo', then it is going to return no foo, ex: input argument {'foo': 'bar'} which have value of foo:"], [0.12487580091835299, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns the dissimilar elements found in two different tuples of integers.\n def distance(x1, y1, x2, y2):\n  distance = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n  return distance\nThe above code is a function to return the distance corresponding to of two points on a plane with coordinates given in tuples. It uses standard trigonometric addition"], [0.12460182216865778, "import cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return a tuple of dissimilar elements in two tuples.\ndef power_float(a,b):\n c = a ** b\n return c\nA exponent function using for loop for large bases.\n\ndef power_float(a,b):\n    c = int(b)\n    c = len(str(a**c).split('.')[1])\n    return c\nThe above code is a function to return number of digits"], [0.12454490120969637, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\nimport math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements present in two given tuples.\n\ndef binary_to_decimals():\n  val=input(\"Enter a binary value with spaces between each value: \")\n  userList = val.split(\" \")\n  decimals = []\n\n  for binaryDigit in userList:\n    decimals.append(int(binaryDigit, 2));\n\n  print(\"The decimal value of\", val"], [0.12425812831852055, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements between the tuples.\n\n# Evaluate $\\pi$ using Euler's formula and number theory  \nimport sympy as sym\n\ndef evaluate_pi(n1,n2):\n\n  pi = sym.S(1)\n  N = sym.Integer(0)\n  for k in range(n1,n2):\n   pi = pi + sym.S(4)/(N*("], [0.12370650474143569, "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\n\ndef list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " will find dissimilar items in the given two touple values.\ndef list_diff(num_list, diff):\n  x = [t - diff for t in num_list]\n  return x\n \n\nThe above code will subtract the given difference value from each item in the list.\n\n\nThis is a Range Function\n\n  \nrange(stop)\nrange(start, stop)\nrange(start, stop, step)\n\n\ndef samp"], [0.12348796436993968, "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements from two tuples.\ndef dict()\n\nThe above code creates an empty dictionary.\ndecimal = input('Enter the number: ')\n\nif type(decimal) == str:   \n        print ('The given input is a string')\nelse:\n        print ('The type of the given input:', \", \".join(map(str, type(decimal))))\n        print ('The given input is"], [0.1231336182787617, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python program that takes two tuples and returns the dissimilar elements between the tuples.\n\ndef remove_gcd(tup):\n  result = list(tup)\n  for i in range(len(tup)):\n    for j in range(i+1, len(tup)):\n      if math.gcd(result[i], result[j]) != 1:\n        result.remove(result[i])"], [0.12310941580912915, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar coordinates from two adjacent coordinates.\nTest Case 1 : \n  Enter length of matrix:\n5\n\n       * indexed from 0 \n   0   1   2   3   4   \n   5   6   7   8   9\n  10  11   X  13  14\n  15  16  17  18  19\n  20  21  22  23  24\nThe star connected loop of the given"], [0.12310941580912915, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements between two given tuples \u2013 test_tup1 and test_tup2.\nfrom functools import reduce\n\ndef combine_elements(list1):\n    res = reduce(lambda x,y: x+y, list1) \n    return res\nThe above code is a function to combine elements of given list by adding them up \u2013 list1\nIn this question, we are going to use arrays."], [0.12273098068639811, "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements in given two sets.\nFirst Row -      0 0 0     \nSecond Row -     0 1 0 \nThird Row -      1 1 1 \nIter - 31 \nIter - 8 \nIter - 3 \nIter - 0 \nIter - 0 \n\t      \ndef create_board(n):\n\t\nboard = set()\nfor each in range(n): board.add((each, each"], [0.12224758593532782, "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilarity of two tuples, considering certain elements.\n\ndef merge_tuples(tupA, tupB, merge_ele):\n  return tuple({ele for tup in (tupA, tupB) for ele in tup if ele in merge_ele})\nThe above code is a function to merge two tuples and whether to include corresponding elements or not.\n\ndef proper_divisors(input"], [0.12174661063305425, "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \nThe above code is a function to determine if the sum of the divisors of two integers are the same.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is used find the dissimilar elements present between two tuples and returns the output in the form of tuple.\n\n\nThe dictionary \"dicc\" is of the form :\n{0: 1, 1: 0}\ndicc = {}\n\nIt happens when :\ndicc[0] = 1\ndicc[1] = 0\nThis is an expression given to initialize a dictionary\n\nl1 = [\"  x  \", \"  y  \", \" "], [0.12157419895386871, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is the function to find similar elements from two tuple. \n\ndef bit_or(a, b):\n  a = bin(a)[2:].zfill(8)\n  b = bin(b)[2:].zfill(8)\n  print (a)\n  print (b)\n  s = ''\n  for i, j in zip(a, b):\n    s += str(int(i) | int(j"], [0.12151891264490215, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function which compares two tuples and finds the dissimilar elements of the tuples.\ndict = {'jan': 31, 'feb': 28, 'march': 31}\ndef get_dict(dict):\n  return dict[dict.keys()[0]]\nThe above code is a python function which returns value of the given dictionary.\n'''"], [0.12130705623082805, "def split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a functions to find out all the dissimlar elements in two tuples.\ndef findindex(search_n):\n  l = ['red','white','black','red','green','black','yellow','red and white','white','black','blue','red','blue']\n  for ind, el in enumerate(l):\n    if el[0:-2] == search_n:\n      return ind\nThe above code is a function return index of"], [0.12098141469819289, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " will try to find the similarity between two tuples.\nimport tensorflow as tf\ndef printTensors(pb_file):\n  # read pb into graph_def\n  with tf.gfile.GFile(pb_file, \"rb\") as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n \n  tensors = [n.name for n"], [0.12009694176998972, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to compare two tuples and returns the elements that are not present in both tuples.\n\nThis was my testing session with Python as I have already reached at level of other tools.\nThanks a lot. \n"], [0.11902304708795813, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements from the two tuples passed as an arguments.\ndef find_word_horizontal(crossword,word):\n  row_count = 0\n  row_numbers = []\n  for row in crossword:\n    row_number = 0\n    for row_entry in row:\n      if row_entry == word[0]:\n        n = len(word)\n        word_copy = word\n"], [0.11790954127853596, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the similarity between two tuples.\n a = input('Insert space separated textual values for a:')\n b = input('Insert space separated textual values for b:')\n c = set(a.split(' ')) \n d = set(b.split(' '))\n print(c.issubset(d)) \nThe above code is a simple python program which checks if one set is a subset of another set, then it"], [0.11789885987053163, "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements from 2 tuples.\n\ndef find_common(tuple1,tuple2):\n  res = tuple(set(tuple1) & set(tuple2))\n  return res\nThe above code is a python function to find common elements between 2 tuples.\n\nstring = 'abcde' \nprint(re.sub(r'b', 'c', string))\nre.sub("], [0.11757281892420642, "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " returns a tuple with all the elements that does not exist in common between the two source strings."], [0.11721021988741856, "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find missing values/uncommon values in two lists\n\ndef sum_3_diff(x,y,z):\n  if x == y or y == z or z == x:\n    return 0\n  else:\n    return (x+y+z)\nThis code is a function to return the sum of values without common values present. Eg if the 3 values given are x = 1, y =1 z =10, then it"], [0.11714498651216108, "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find out dissimilarities in both lists\nnumbers = (1, 2, 1)\nCounter(numbers)\ndef common_mode(numbers):\n    return (tuple(i for i in numbers if numbers.count(i) > 1)) \nFinish the problem so that your function returns all the common modes, or an empty tuple if no common modes are found.\n\nRequires:\n    1. Use Counter on numbers\n"], [0.11700825114880152, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " finds the elements dissimilar between the two given tuples.\n"], [0.11677007479726378, "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\n\ndef next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find out the values which are dissimilar in the two tuples.\n\ndef interpolate_sum(A, start_count, end_count):\n  n = 0\n  start_count, end_count = min(start_count, end_count), max(start_count, end_count)\n  while start_count <= end_count: \n    n += A[start_count]\n    start_count += 1\n\n"], [0.11665658562168639, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " takes two tuples, compares them and returns the different elements in it's respective tuple.\nx=str.replace(str.replace(str.replace('*','#','###'),'-','#'),'+','#')\nThe above code replaces the given characters in the string.\nTODO\nTo continue with mean,median and mode.\n"], [0.11651428270474526, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python code to find dissimilar numbers between two tuples.\nf = open(\"C:\\Users\\Aditi Sethia\\code\\python\\internship\\MyFile.txt\", \"r\")  \n  \nline = f.readline()  \nline=line.split()     \nwhile line:  \n    print(line) \n    line = f.readline()\n    line=line.split()  \n  \nf.close"], [0.11636689494737967, "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilarity between two sets of tuples. It is found from first set minus its common elements from second set.\n\ndef mode(l):\n    count = Counter(l)\n    # finds the highest frequency\n    max_count = max(count.values())\n    # filter items into a list of elements which are having frequency equal to highest frequency \n    return([i for i in count if count[i] == max_"], [0.11566858071291396, "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements between two given tuples.\ndef delete_string(s1, s2):\n  s = s1.replace(s2,'')\n  return s\nThe above code is a python function to delete a substring from a given string.\ndef reverse(A):\n\tB = A.split()\n\tC = B[::-1]\n\tD = ' '.join(C)\n\tprint"], [0.11565457695889199, "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\ndef maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a functions takes two tuples and returns the dissimilar values.\n\"\"\"\n\n\n\nAccNum = (1,2,3)\n((1+2), (1-2), (1*2))\nmax(1,2,3)"], [0.11488723289774375, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function that takes two tuples and returns the letters that are not exist in both tuples.\n"], [0.1146414662747253, "def split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find an item that is dissimilar in the 1st and 2nd item of the 2 tuples.  \ndef toString(List):\n  return ''.join(List)\nThe above code is a python query that finds the resulted string.\ndef col_reduction(matrix):\n  return list(map(lambda x: x.split(\" \"), np.sum(matrix, axis=0)))\nThe above conde"], [0.11452055745135721, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to check the tuple containing dissimilar items.\ndef find_sorted(T):\n\tT=T[::-1]\n\tT1 = []\n\tT2 = []\n\tT3 = []\n\tTT = []\n\tfor i in range(1, (len(T))):\n\t\tif (T[i] > T[i - 1]):\n\t\t\tT1.append(i)\n\t"], [0.11452055745135721, "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return the element in a tuple that is dissimilar to other tuple.\ndef verify(num_list):\n  cond_list=[]\n  for i,val in enumerate(num_list):\n    sm = 0\n    for i, val in enumerate(num_list):\n        if i%2==0:\n          sm+=val\n        else:\n          sm-=val\n    cond_list.append(sm"], [0.11442681180778128, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find out the dissimilar elements between two tuples.\nx = lambda a, b, c : a + b + c\nprint(x(5, 6, 2))\nThe above code was nothing but the lambda function.\ndef foo(i, x=[]):\n  x.append(i)\n  return x\nfor i in range(10):\n print(foo(i))\nThe above code was nothing but the why of remembering a"], [0.11435662959082223, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find the difference between the tuples in the arguments and return this difference in the form of another tuple. If the length of both tuples is different then it will return some num and not return a tuple.\ndef max_off_number(number):\n    # write the code to find the maximum number of zeros in all possible sub-strings of the given number.\n    zero_count = 0\n    d_zero = int(number/"], [0.11410754582394966, "def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find the index of the second smallest element in a given tuple.\nimport functools\ndef make_uppercase(input):\n  return (functools.reduce((lambda s, c : s + c.upper()), input))\n  \nInput = 'hi, my name is john'\n\n#List\ndef word_to_list(input_str):\n    return input_str.split()\n    \n\n\n#List"], [0.11410754582394966, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to check if two given tuples are dissimilar or disjoint.\n\nimport itertools\ndef generate_all_sentences(subjects,verbs,objects):\n  res_list = []\n  res = itertools.product(subjects,verbs,objects)\n  for ele in res:\n    str = ''\n    for ele1 in ele:\n      str += (ele1+' ')\n    str ="], [0.11406058458214595, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements in two tuple. The output should be a tuple. Use generator expression in the pure python\nsum(i > 6 for i in var) \nsum(i > 6 for i in var) \nsum(i > 6 for i in var) \nsum(i > 6 for i in var) \nsum(i > 6 for i in var) \nsum(i > 6 for i in var) "], [0.11406058458214595, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to fine dissimilar elements between given two tuples.\n\ndef staircase(n):\n    # Base Case: 1 step ways to climb 0 stairs\n    if n == 0: \n        return 0\n    # Base Case: 1 step ways to climb 1 stair\n    if n == 1: \n        return 1\n    # If there are more than 2 stairs, this step only counts for penultimate step and the last step.\n    # Hence"], [0.11397244183439155, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to finding the dissimilar elements from given 2 tuples.\ndef test1(arg1,list=[]):\n    list.append(arg1)\n    return list\ndef test2(arg1,list=None):\n    if list is None:\n        list = []\n    list.append(arg1)\n    return list\nThe above code is a python program to demonstrate code of mutable and immutable data types.\ndef"], [0.11366261910227926, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes in two tuples and returns a tuple containing all elements present in exactly one of the tuples (one of the input tuples). \n\n'''"], [0.11354374914116795, "def check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find the tuple pair which has the dissimilar members.\n\ndef map_words_to_integers(word):\n  res = { let : ord(let)-96 for let in set(word) }\n  return res\n\ndef sentence_to_dict(sentence):\n  words = str(sentence).split()\n  res = { word : map_words_to_integers(word) for word in words }\n "], [0.1132376553935773, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is used to find the set difference of two tuples. Return a tuple.\n\n\"\"\"\n'''  tuple is a sequence of immutable Python objects.\n\n    The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses'''\n\ntup=(\"A\",\"b\",\"c\",\"d\",\"E\")\nprint(tup[3])\n\nprint(tup[1:4])\nprint(len(t"], [0.11323211829558474, "def Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " will find out dissimilar elements in both tuples and return as a tuple.\nimport pandas as pd\n\ndf = pd.read_csv('C:/Users/Vikram/Downloads/heart.csv')\ndf[df['target']==0].describe()\nYou can use pandas to read a csv file \n\nheart.csv\nimport pandas as pd\n\ndf = pd.read_csv('C"], [0.11292167088085464, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to extract the dissimlar elements from unequal tuples.\n\ndef addition(*args):\n    if not all(isinstance(arg, (int, float)) for arg in args):\n        raise TypeError(\"All input arguments must be numbers\")\n    return(sum(args))\nThe above code is a function to add an indefinite numbers\n\n"], [0.1125173063067311, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to print out values that are unique in either of two tuples.\ndef find_com(st):\n    res = re.search(r'\\$\\{(.*)\\}', st)\n    return res.group()\nto find a certain pattern in a string and print one certain thing in a string.\nfor name, score in model_scores.items():\n     print(name + \": \" + str(score))\n"], [0.11224779224730963, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to allot the first three students and last three students in a hostel to other hostel of their choice.\nimport itertools\ndef generate_cartesan_product(tup1, tup2):\n    cartesan_product_list = list(itertools.product(tup1, tup2))\n    for i in range(len(cartesan_product_list)):\n        print(cartesan_product_list"], [0.11210841659761582, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\nimport re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to give the dissimilar element in the two given tuple.\n\ndef say_hello(name):\n  return 'Hello Mr/Miss : {}'.format(name)\nThe above code is a function to return the string with given string in it.\n\ndef format_words(words):\n  assert [len(word) for word in words]\n  return ''.join().format()\nThe above code is a function to arrange all given words"], [0.11198913916614049, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar values between two tuples.\n\ndef ii(s): \n  small = 0\n  capital = 0\n  for c in s: \n    if c.isupper(): \n      capital = capital + 1\n    elif c.islower(): \n      small = small + 1\t\n  print('Original String : ', s) \n  print('Lower case characters : ' , small) \n"], [0.11198913916614049, "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns the uncommon elements of tuple starting with test_tup1 and test_tup2.\nx = \"abcd1efghi\"\ny = \"124567890\"\nz = [y.isalnum(), x.isalnum()]\nprint (any(z))\nThe above code is a python program to find the alphanumeric value of any given string.\nx = \"PyNaTive\"\nprint 1 if"], [0.11179632001950283, "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find the difference of two tuples.\ndef find_pair(test_set,test_element):\n  for element in test_set:        \n      if test_element-element in test_set:\n          res = (element,test_element-element)          \n          return res \nThe above code is - Given a set S, an element I and a pair of tuples, find a pair of elements belonging to the set such that the"], [0.11179632001950283, "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function that finds what elements are dissimilar in two tuples.\ndef count_negatives(s):\n  total = 0\n  str_split = s.split()\n  \n  for word in str_split:\n    word = list(word)\n    negative = \"n\" not in word\n    if negative == True:\n      total += 1\n      \n  return (total)\nThe above code is a function to count the"], [0.11120372739236893, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements of 2 sets of objects.\n\ndef prodDigit(intg):\n  temp = 1\n  for i in str(intg):\n      temp = temp * int(i)\n\n  return (temp)\nThe above code is a python function for a person getting multiplied by his luckynumber.\n\ndef tuple_diff(test_tup1,test_tup2):\n  res=t"], [0.11120372739236893, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return the difference between two tuples of different length. This can be of help if we have to write a function handler function([1,2,3]), and want to return ((1,2,3)).\n\ndef alternateMinimumMax(arr):\n  # fill in the code here\n  lst= sorted(arr)\n  return sorted(lst, key=lambda x:abs(x-lst[0]), reverse=True)"], [0.11091921572982108, "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\n\ndef find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find a common element in two given tuples.  \ndef permute(A, frm, to):\n    choosen = A[frm]\n    for i in range(frm + 1, to + 1):\n        A[i - 1] = A[i]\n    A[to] = choosen\n    return A\nThe above code is a python function to swap two elements in a list.  \n"], [0.11084813820142561, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a basic code to find the difference between consecutive TUPLE.\n\ndef matrixmul(a,b):\n for r in a:\n  for c in b.T:\n   p=sum(np.array(r)*np.array(c))\n return p\nIn the above code we have used Numpy operators to perform Matrix multiplication.\n\ndef countFreq(my_list): \n    dict={i:my_list."], [0.11058903302550109, "def get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to take two sets anf print the elements that are present in one set but not the other.\ndef remove_duplicates_by_comparison(lists):\n  if len(lists) == 0:\n    return\n  temp = lists[0]\n  for i in range(1, len(lists)):\n    lists = lists[1:]\n    for j in range(len(lists)):\n      if temp =="], [0.11049379870060716, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that gives the dissimilar elements of two tuples. \n\ndef get_uncommon_list(list1, list2):\n    return [x for x in list1 if x not in list2] + [x for x in list2 if x not in list1]\nThe above code is a function that gives the common elements of two lists. \n\ndef find_common()\n   l = [] \n    number = int("], [0.11035585503822118, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find dissimilar numbers from two tuples of numbers. We use the \u2018set\u2019 function here to show the sets, which is helpful in understanding the code. \nThis method check duplicates in string.\n\n"], [0.1101957236609216, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes two tuples as the input and returns the dissimilar elements.\n\ndef remove_element(Input_lenght, Input, Set):\n    pp=0\n    qq=0\n    while pp<len(Input) and qq<Input_lenght:\n        if Input_lenght==len(Input):\n                del Input[pp]\n                pp=Input[::]       \n        while qq"], [0.11016074891187587, "def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements of 2 given lists.\n\n\n## Tutorial 2:\n\ndef check_nums(inputList):\n    if len(inputList) == 0:\n        return -1\n    elif inputList[0] == 7:\n        return True\n    return check_nums(inputList[1:])\nThe above code is a python function to check if the first element of a given list is 7. If"], [0.10974311493530062, "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find element from two tuples sharing common elements.\n\"\"\"\nimport ast, parser\nzzz=[]\nfor item in ebaystring:\n  print(dir(item))\n  zzz.append(str(dir(item)).split())\n\n# print(zzz)\n\neda = [25, 27, 34, 5]\na = ' '.join(str(x) for x in eda) \ns"], [0.10974311493530062, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find list-wise dissimilarity between 2 lists of tuples.\narray=picklestring\ndef json_change(array):\n    for i in range(holder_listlength):\n        for j in range(datasetlength):\n            if array[i][j][3]==-9999999:\n                array[i][j]=None\n    return array\nThe above code is a python function which goes through a collection"], [0.10968653760775243, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is where we find dissimilar elements in given 2 tuples.\ndef odd_num(test_list):\n  final_list = list(filter(lambda x: (x%3 == 0), test_list))\n  return final_list\nThe above code returns a list of numbers which are divisible by 3.\ndef only_even(test_list):\n  even_numbers = list(filter(lambda x: (x%2 == 0"], [0.10939087934309567, "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is an function to find coordinates the dissimilar between coordinate tuple one and coordinate tuple two.\n\ndef validate_position(pac_xy_tuple, ghost_xy_tuple):\n  if get_coordinates(pac_xy_tuple) & set(get_coordinates(ghost_xy_tuple)):\n    return False\n  else:\n    return True\nThe above code is an function to efficiently check if Pacman and Ghost is at"], [0.10905343364674523, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to find dissimilar letters in two words.\n\n\nn = int(input(\"Enter a positive integer : \"))\n\nx= lambda n:(int(n%2)/2)\nprint(\"square of {}:\".format(n),x(n))\n\nx=lambda n:(int(n%2)/2)\nprint(\"power Lowest:\",x(n))\n\ny=lambda x,y:((x**n)-y*"], [0.10870584096570017, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return the first dissimilar element in given tuples.\ndef extract_values(input_dict, query_id_list, key): \n    res = {query_id: input_dict[query_id][key] for query_id in query_id_list} \n    return res\nThe above code is a function to return a dictionary with values from input_dict for given keys from each dictionary inside query_id_list."], [0.1084696728992989, "import re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to print dissimilar items between the two tuples.\n\n\ndef chunk(list, size):\n    return [list[i:i + size] for i in range(0, len(list), size )]\nThe above code is a function to bi nd chunks of n size.\nlist = eval(input())\nprint (chunk(list, int(input())))\nTo add chunk function refer to this link\n\n##other\n\n\n"], [0.10838536091120404, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to find dissimilar elements.\n\n#Your report needs to have the following sections:\n\n#1. Introduction\n#The introduction should give a brief overview of the problem to be solved. This section should state: the context of the problem, any existing solutions and assessments, what the proposed solution is, why you have chosen the given solution and if there, the benefits. If a solution exists, the risk associated with it should be mentioned.\n#2. Data"], [0.10826931912324075, "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find dissimilar elements of two tuples. The function gets as input the two tuples and returns a tuple of dissimilar\ndef second_lowest_number(num):\n    num = set(num)\n    num = list(num)\n    num.sort()\n    return num[1] \nThe above python program is a functional to find second lowest number from a list. The program gets a list of integers as input, transforms"], [0.1077170303517099, "import sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return the elements which are there in the first tuple but are not there in the second tuple.\nThere must not be any duplicates in the two sets.\ndef is_square(num):\n  return bool(math.sqrt(num).is_integer())\nThe above code is a function to determine given number is a square of another integer.\ndef first_last_pattern(last_4, last_5):\n  if len("], [0.10758554979430339, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function that accepts a tupleOne and tuple2 and returns the dissimilar elements (as a tuple).\n\nSample Input1:\ncolor_list=(\"Red\", \"Green\", \"White\", \"Black\")\nn=3\n\nSample Output1:\n('r', 'g', 'w')\n('r', 'g', 'b')\n('r', 'g', 'bw')\n('r', 'g', 'bb')\n('"], [0.10753798318935934, "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return set difference of two tuples.\ndef half_sort(arr, add):\n  n = max(add)\n  i = n\n  while add:\n    if i in add:\n      j = add.index(i)\n      add.pop(j)\n      if j % 2 :\n        q = len(arr) - 1\n      else:\n        q = -1\n      r = j // 2"], [0.10752724435109291, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that can find the dissimilar letters between two tuples in the same order. eg. find_dissimilar(('A','B','C'),('A','D','C')) will output('B','D')\nNote that this function does not process non-letters.\n\nNote for myself: I almost passed test 1 but the instructions weren't clear about whether the input should be modified or the return should be a modified copy or both.\n\"\"\"\n"], [0.10745287418088362, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " finds the dissimilar element in two tuples.\n\n'''\n# n = 1\n# print(extract_nth_element(foo, len(foo)//2))\n# for x in range(2, len(foo)):\n#     if extract_nth_element(foo, len(foo)//2) == extract_nth_element(foo, x):\n#         if find_dissimilar(foo[0"], [0.10705496944936133, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that outputs the dissimilar pair of elements between the two given tuples.\ndef sum_1(test_lst): \n  s = 0\n  for test_lst[0] in test_lst:\n    s = test_lst[0] + test_lst[0]\n  return s \nThe above code sums up all the elements of the list equal to twice their individual value.\ndef sum_2"], [0.106972549349482, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns two tuples which are dissimilar in element values.\n\ndef agtp(word,n):\n        return [word[n:n+i] for i in range(len(word))]\n        \nThe above code is a function to give the all the possible substrings of length n.\n\ndef combin(string,n):\n    nu = []\n    i = 1\n    while i <= n:\n        if"], [0.10672817598761103, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return the elements which are dissimilar.\ndef maxkey(lst):\n    if not lst: \n        return \n    mx = max(lst)\n    return mx \nThe above code is a function to return the maximum element.\ndef celement(lst):\n    if not lst: \n        print ('List is empty')\n        return \n    del lst[0]\n   "], [0.10663184593742546, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\nimport cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes two tuples of equal length as a \nparameter and returns a tuple representing the dissimilar items in the same index. \n  \ndef lowercase_keys_recursively(original):\n  result = dict()\n  for key, value in original.items():\n    if type(value) is dict:\n      result[key.lower()] = lowercase_keys_recursively(value)\n    else:"], [0.10615658830057817, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns a tuple of the numbers which are not present in two given tuples of the same size.\ndef reversestring(s):\n    s[: : -1]\n    return (s)\nThe above code is a function to output a string in reverse order.\ndef kth_largest(lst, k):\n  res=[]\n  for i in range(k):\n    res.append(max(lst))"], [0.10603608782332788, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python to find dissimilar elements of the two tuples.\n\ndef create_sorted_distinct(list1):\n  return [tuple(sorted(i)) for i in set(tuple(i) for i in list1)]\nThe above code is used to sort and remove duplicates elements from a list of tuples.\n\nfrom collections import OrderedDict\nfrom operator import itemgetter \nget_original = Ord"], [0.10601877282237723, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to get all the list of words that are they are not common to both(without duplicates).  \ndef read(file1):\n    f = open(file1,'r')\n    lines = f.readlines()\n    for line in lines:\n      l = line.split(',')\n    return l\nThe above code is a function to read the given file and split the values.\n\ndef binary(matrix,row,"], [0.10599945283079128, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return the dissimialr elements while comparing 2 tuples.\ndef subtract(d, s):  \n  res = {}\n  for key, value in d.items():\n    if key not in s:\n        res[key] = 89403340\n \n  return(res) \nThe above code is a function to substract dictionary s from dictionary d  using items() function.\n\n"], [0.10585749965350798, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to check whether two given tuples are dissimilar.\ndef parse_Python_dictionary(dictionary):\n  keys = sorted(dictionary.values())\n  #print(keys)\n  res = reduce(lambda x,y: x[y], keys, dictionary)\n  return res\n\n"], [0.1058120650202803, "import re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to print the odd values.\n\ndef sort_tuple(example_tuple):\n    return sorted(example_tuple, key=lambda x: x[-1])\nThe above code functionfter sorting according to last element of tuple,if last element of tuples will be equal, the elements will be sorted with first position.\nlist2=[[7418529626, 7418529645, 5],\n[7418529610,"], [0.10538507315844761, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " gives the reults of the diffrence bwteen two given tupples.\n'''"], [0.10526596419311846, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes in two tuples and returns the elements in first tuple without any common elements in the second tuple.\n\nimport re\ndef diff_capital_minuscule(s):  \n        lower = s.lower()  \n        upper = s.upper()  \n        diff = set(lower) ^ set(upper)  \n        print(diff)\nThe above code is a function that returns the differences (either capitals or lowercase letters)"], [0.10517120574935265, "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to check if the elements are dissimlar.\n\ns = (\"Python\")\ns = s[::-1]\ns = \"bull \" + s\ns = s.capitalize()\nprint(s)\nThe above code is to reverse the sentences.\ndef unique_items(lst):\n    unique_list = []\n    for item in lst:\n        if item not in unique_list:\n            unique_list"], [0.10507048109763086, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to return the dissmiliar elements from the the given tuples.\ndef find_deck_box(default_list):\n  return (max(default_list))\nThe above code is a python function that takes in a list of numbers and returns the maximum value from the list.\ndef find_dir_name(default_g_str, default_t_str):\n  temp2 = default_g_str.replace(default_"], [0.10493732414248522, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function which helps us remove similar elements in two tuple.\ndef remove_duplicate(tuplex):\n  tuplex = list(tuplex)\n  final = list()\n  index = 0\n  while tuplex:\n    final.append(tuplex[index])\n    tuplex.remove(tuplex[index])\n    for tuplex in tuplex:\n      if tuplex["], [0.1045403323668484, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to return a tuple of all items present in only one of the given tuples.\n\ndef list_to_text(words, count):\n\toutput =\"\"\n\tfor (word, no) in zip(words, count):\n\t\toutput += str(no) + word\n\treturn output\nThis code is a function to join together text and numbers in a string.\n\n\ndef add_index(text):\n\tindex = {}\n"], [0.10449792084249938, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " returns a tuple of all elements that are in test_tup1 but not in test_tup2.\n"], [0.10413457059419463, "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes two tuples as input and returns the tuple of elements not present in them.\nChallenges is a collection of moderate problems on leetcode,and I try to solve it in python.\n"], [0.10393780115655266, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function takes 2 tuples and a function that checks whether two given tuples are dissimilar or not and prints the tuple containing dissimilar elements only.  \ndef steal_card(deq):\n  deck = list(range(1,53))\n  for item in range(0,10):\n    card=deq.pop(0)\n    if card in deck:\n      deck.remove(card)\n  return(deck, deq"], [0.10388886771932057, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python program to find the value most dissimilar to the binary strings of the entered list by considering the XOR operation.\n\ndef max_product(tuplex):\n  My_tup = sorted(tuplex)\n  return (My_tup[-1]*My_tup[-2])\nThe above code is the code for the python program to find the maximum product of two elements of the entered list.\ndef Dict"], [0.10385146722223419, "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " finds the dissimilar numbers between the tuples given test_tup1, and test_tup2.\n\ndef triangular_area(x1, y1, x2, y2, x3, y3):\n\tarea_triangle = 0.5 *abs((x2-x1)*(y3-y1) - (x3-x1)*(y2-y1)) \t\n    print(area_triangle"], [0.10373666366159665, "def unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " will find the two dissimilar elements between two tuples.\nFinding largest element in a list by  \n\ndef find_largest(l):\n  n = len(l)\n  print (l[-1])\n\nThe snippet above will find the largest element in a list called l. Here n is the length of list l. \ndef middle_ways(a, b, c): \n  m = (a[1] - a[0"], [0.10329130024898316, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find tuple of items that are not common in both tuples.\n\ndef my_func(x): \n  k = len(x) \n  if k % 2 != 0: \n    midindex = int (k / 2)  \n    oddlist = x[:midindex] \n    evenlist = x[(midindex + 1):] \n    total = 0\n    for line in oddlist:"], [0.10308533002699703, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes two tuples and return the tuple of distinct elements present in either of the two tuples. \n\ndef simple_decorator(f):\n    def wraps(*args):\n        print (\"Before calling %s\" % f.__name__)\n        result = f(*args)\n        print (\"After calling %s\" % f.__name__)\n        return result\n    return wraps\n\n@simple_decorator"], [0.10287629487564084, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is used to find the elements that do not exist in both the tuples t1 and t2 and returns a tuple which is obtained by t1 ^ t2 .\ndef odd(x):\n  return odd_g(0, x)\n\ndef odd_g(s, x): \n  if s > x:\n    return 0 \n  return (2*s - 1) + odd_g(s+1, x)\nThe above"], [0.10251913732010343, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to subtract element-wise(set operation) for two given tuples and return a tuple as output. \ndef check_dtype(dtype):\n  if dtype in ['bool', 'int8', 'uint8', 'float16', 'float32', 'float64']:\n    return (True)\n  else:\n    return (False) \nThe above code is a function to check if a given type string is valid `"], [0.10206626353096489, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " uses 'set' and 'XOR' operation to perform the membership test and return any dissimilar elements from the input tuples.\n\ndef swap_to_smallest_numbers(lst):\n  for i in range(len(lst)):\n    for j in range(i + 1, len(lst)):\n      if(lst[i] > lst[j]):\n         lst[i], lst["], [0.10188974762247777, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that digs into all the nested elements of a nested tuple, finds that element and their indices which are not common, and return them in a tuple."], [0.10188190723052366, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is the function finds the dissimilar elements \nOf the tuple when we have sets of the given tuple.\n                                                                                                                        \n                     [ Enter a file name: t ]\nEnter something more that 8 characters:    The type of data file (inode/directory/block):\nInput file name:\nNo such file exists.\nEnter something more that 8 characters:    The type of data file (inode/directory/block):\nInput file name"], [0.1018312766155562, "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function containing two tuples. first function stored the difference (tuple1-tuple2) in the result and then storing the difference (tuple2-tuple1) in the res. \ndef sum_of_nth_terms(series):\n  \ndef firstDigit(n) :\n        while n >= 10:\n            n = n / 10\n        return int(n)\n\ndef lastDigit(n)"], [0.1013189972013108, "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns tuple of dissimilar elements betwen given tuple1 and tuple2.\n\ndef count(result_list):\n  dict = {}\n  for i in range(len(result_list)):\n    if result_list[i] in dict:\n      dict[result_list[i]] += 1\n    else:\n      dict[result_list[i]] = 1\n  dict = {key:value for key, value"], [0.1013189972013108, "def split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to return a tuple of dissimilar characters between two tuples.\n\ndef find_doctor(names):\n  n = len(names)\n \n  cons = [\"Dr. \"]*n\n  #names[1] = \"DR. \" + names[1]\n  #names[-1] = \"DR. \" + names[-1]\n  names[1] = cons[1] + names[1]"], [0.10127222111458656, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to subtracts two tuples and return the result as a tuple.\n\n\nNote, in the question below we had used use a*(x-b) which is incorrect. instead, use a*x + b or (1-a)*x + b.  This is because x-b is function of b, which will recursively call the function and eventually cause system to crash.\n\ndef sigmoid(x, a, b):\n"], [0.10103301350767786, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python program to find a tuple containing the values which are dissimilar in two given tuples.\ndef left_smaller_right_bigger(List1):\n  if(len(List1) == 0):\n    return List1\n  # Creates left array which stores elements of List1\n  left_array = [0] * len(List1) \n  # Creates right array which stores elements of List1\n  right_"], [0.10100812513355444, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns all the elements that are unique in the first tuple.\ndef reverselist(test_list1):\n  return (test_list1[::-1]) \nThe above code is a function that reverses any given list.\ndef find_duplicate_frequency(l1):\n  dict_list = dict((i, l1.count(i)) for i in l1)\n  return {k: v for"], [0.1007353065230268, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function for finding dissimilar elements from tuple.\n \ndef combination4(lst1,lst3):\n    res = []\n    for tup1 in itertools.combinations(lst1,4):\n        for tup2 in itertools.permutations(tup1):\n            lst2 = sorted(list(tup2))\n            if  lst2 not in lst3:\n                   "], [0.10061815648327445, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " takes two tuples as input and then outputs the mutual elements in the form of a tuple.\n#Python:\n# Python 3 code to demonstrate working of \n# Counter() to get count of each element \n# using default dict  \n\n#importing \"collections\" for counter function \nimport collections \n# initializing list \n#test_list = [9, 4, 5, 4, 4, 5, 9, 5, 4] "], [0.10045129909419494, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " extracts the dissimilar numbers from the two given tuples.\ndef gcd(x,y): \n   return math.gcd(x,y)\n#Your Code Goes here\nimport sympy\nprint(sympy.primerange(0, 50+1))\n\nimport re \nimport ast \n\ndef load(fp): \n    with open(fp, \"r\") as f: \n        data = f.read"], [0.10037936973520518, "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to print the items present in tuple1 but not in tuple2.\ndef create_list_tuple(item):\n  c_list = list(item)\n  res = ()\n  for i in c_list:\n    res.add(i)\n  return result\nThe above code is a python function to convert tuple into list and then convert the list into tuple.\ndef convert_dictionary(item): \n  d ="], [0.10002888420186103, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a very simple python function to find dissimilar tuples.\ndef to_camel(word):\n  word =''.join(x.capitalize() or '_' for x in word.split('_'))\n  return word\nThe above code is a python function to convert a string to camel case.\nWith a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between"], [0.09986526811083564, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to check if the inputted strings have dissimilar characters.\n\ndef is_divisible(n,x,y):\n  if n == 0 or n%x==0 and n%y!=0:\n    return True\n  else:\n    return False\nThe above code is a function to check if a number is completely divisible by another number.\n\ndef classify(a_list):\n    if len(a_list"], [0.09946778107430161, "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \nThe above code is a function to determine if the sum of the divisors of two integers are the same.\n\ndef babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function for finding elements that are unequal between the two tuples.\ndef calculate_proficiency(all_scores, final_scores):\n    average = 0;\n    average = (all_scores/final_scores) * 100 \n    return average\nThe above code is a function rounding all scores to final scores, and implements a calculation. \n'''\ndef check_proficiency_rounded(num):\n    final_score"], [0.09934591529553109, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\nimport re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " function should give the dissimilar items in two set of tuples. The second set may have repeating elements.\n\ndef last_day_year(param_date):\n  (year, month, day) = param_date\n  print (\"The year is a leap year - \", tup._make(_calendar.monthcalendar(year, month)).count(0) == 5)\nprint (type(last_day_year(tup)))\n"], [0.09934591529553109, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function that takes two comma separated input-tuples, test_tup1 and test_tup2, which contains a list of \nintegers and outputs a single tuple of dissimilar values between the two tuples.\n\ndef multiLoop(s):\n  out_s =''\n  for i in range(0,len(s)):\n    out_s=out_s+s[:(i+1)]       \n "], [0.09921326698669168, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes in two tuples of integers and compute the tuple of any elements that are unequal between the two.\ndef find_flank_match(ref_string, query_string):\n result = \"\"\n i=1\n while True:\n  if query_string[i:].startswith(ref_string):\n   result += query_string[0:i]\n   return(result)\n  i += 1\nI tried to"], [0.09901339495982799, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " finds dissimilar elements from two tuples.\ndef is_nondecreasing_helper(arr, i, n): \n  if i == n - 1:\n    return True\n  if arr[i + 1] >= arr[i]:\n    return is_nondecreasing_helper(arr, i + 1, n)\n  else:\n    return False\ndef is_nondecreasing(arr):\n"], [0.09852619932090381, "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is is a python function that gives the dissimilarity between two tuples.\n\ndef powers():\n    for i in range(0,input(\"Enter the number of inputs:\")):\n        number = int(input(\"Enter Value: \"))\n        exponential = int(input(\"Enter exponential value:\" ))\n\n        print(\"Value: \"+str(number)+\" Exponential Value: \"+str(exponential)+ \" Answer: \"+str(number**exponential))"], [0.09809249528776517, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " finds the dissimilar values in the tuple and returns the result as a tuple.\n\ndef process_records(rec_dict):\n return len(rec_dict) \nThe above code returns the number of dictionary keys.\ndef reverse_in_place(stg):\n\n    arr = list(stg)\n    l = len(arr) -1 \n    \n    \n    \n    \n    for i in range(len(stg)/"], [0.0978797397482496, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to find and return dissimilar(differnt)/ unique(same) items in two lists.\n\ndef pre_fill(num_elem, default_value):\n return [default_value for elem in range(num_elem)]\n\nThe above code is a python function to fill an empty list with a predefined number of element and a predefined value. Eg; fill an empty list with 300 empty strings, ['', '',"], [0.097749030879946, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " returns dissimiliar elements from two given tuples.\ndef kwargs_to_list(**kwargs):\n  print(list(kwargs.values()))\nThe above function prints the values of dictionary values stored in the list directly.\ndef block_print(*args):\n  for i in args:\n    val = i\n  return val()\nThe above code performs a block print of the functions passed with argument.\ndef update(profile_"], [0.09767287537560389, "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns the points of dissimilarity of the two hypercubes.\ndef return_as_list():\n return [2, 3, 4]\nThe above code is a function that returns a list with the object updated.\n\"\"\""], [0.09758509866325128, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that removes common elements from list of tuples.\nclass my_class():\n    def __init__():\n        pass\nnode = my_class()\nprint(request.data)\nresponse = requests.post('http://localhost:3000/graphql', json=request.data)\nif response.status_code == 200:\n  print (response.data)\n"], [0.09735603157584785, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes in two tuples and returns the element-wise dissimilarity of the data elements.\ndef find_hypotenuse(test_tup):\n import numpy as np\n res= reduce(lambda x,y:x*x+y*y, test_tup)\n sm=np.sqrt(res)\n return (res)\nThe above code is a function calculates the hypotenuse of a triangle in the presence"], [0.09717103371209973, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " function returns a tuple of dissimilar values from the two given tuples.  \nPython program to remove newline characters from a file.\n\nimport io.open(\"text.txt\", \"rt\", encoding=\"UTF8)\nwith open(\"text.txt\",\"rt\") as f:\n  data = f.read().splitlines()\n    lines = io.open(\"text.txt\").read().splitlines()\nline = io.open(\"text.txt\","], [0.09706765428656342, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function tofind the set difference of two given lists of tuples. The difference is the disimilar elements.\ndef bracket(input_str): \n  stack = []\n  temp = [x for x in input_str if x in '('] \n  for i in range(len(temp)): \n    stack.append(temp[i]) \n  temp_str = ''\n  for x in input_str: \n"], [0.09699925719731887, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " returns the dissimilar set of two given tuples.\ndef swap_keys_values(original_dict) :    \n    swapped_dict = dict([(value, key) for (key, value) in original_dict.items( )])\n    return  swapped_dict\nThe above code swaps a given dictionary keys with its respective value.\ndef find_ID(seq, seek):\n  for n in range(len(seq)):\n    if"], [0.09681752753676214, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is function returns the dissimlar elements from both the tuples.\n\n# Question 2: Given a Python list, remove all the even number and print out the elements in reversed form. (Write a normal function to do this and call it with an argument.)\nlist1=[]\ndef remove_even(list1):\n    for i in list1:\n       if i%2!=0:\n            print(i)\ntup=input('Enter"], [0.09676669196861866, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", "s is a tuple which will return the dissimilar items from tuple i.e the uncommon values.\ndef test_function(test_cases):\n    for test_case in test_cases:\n        print(string_to_tuple(test_case[0]),'->',string_to_tuple(test_case[1]))\n\ntest_string = 'hello, wor ld he ll ooo   py th on'\ntest_t"], [0.09675184816928697, "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function that tests that returns different elements of sets of tuples as a tuple\n\nHi experts ,I am trying to find a complete list of action subatomic particles and  anti-action  subatomic particles using python and numpy in the following code:\nimport numpy as np\nnp.set_printoptions(sign=' ')\n\nelement_No,Item_No_of_Action,Item_No_of_anti_Action=map("], [0.09666534927632968, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function which finds the dissimilar numbers between two tuples of the same length.\n\ndef make_nested_tuple(test_tup):\n  res = (test_tup,) * len(test_tup)\n  res = res[0] if len(res) == 1 else res\n  return (res) \nThe above code is a function that makes a nested tuple.\n\ndef pow_lists(test_list"], [0.09650755815804085, "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is given a tuple containing find dissimilar numbers, test_tup1, and test_tup2.\ncreate a sorted list containing elements which are common  \nin both the list using '&' operator.\ndef multiply_list(mylist):\n    a=1;\n    for b in mylist:\n        a=a*b\n    return a\nThe above code is a python function to multiply elemets of a list.\ndef pattern"], [0.09641108972075735, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to create a tuple  from the two tuples where the elements from the two tuples are dissimilar.\ndef find_strength(password):\n  count = 0\n  for i in password:\n    c = ord(i)\n    \n    if c>=65 and c<=90: # Uppercase alphabate\n      count+=1\n    elif c>=97 and c<=122: # lower case"], [0.09641108972075735, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function which returns the test_tup having elements dissimilar to those of tuple_tup.   \ndef concatenate_list_data(list):\n    result= ''\n    for element in list:\n        result += str(element)\n    return result\nThe above code is a function which returns the string formed by concatenating all the elements of the list.\ndef is_element_exist_unique_list(test_list,test"], [0.09641108972075735, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that examines contents of two tuples and returns subset of elements that are odd-man-out in both the tuples.\n\ndef Fibonacci(n):\n  first,second=0,1\n  while second<n:\n    print(second)\n    first,second=second,first+second\nFibonacci(10)\nThe above code is using a Data type to create an object for a type of a class Fibon"], [0.09612497907115167, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\ndef two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to identify dissimilar items present in two different lists.\n\ndef print_2d_list(l):\n    for line in l:\n        print(line)\nThe above code is a python function to print a two dimensional list.\n\nimport pandas as pd\ndf = pd.DataFrame([['','col1','col2'],['row1',1,2],['row2',3,4]])\n"], [0.09600360219220418, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns the pair of dissimilar elements from a tuple of variables as a tuple.\n\nfor i in range(5):\n   print(\"*\" * 2)\nfor i in range(5):\n   print(\"#\")\nfor i in range(5):\n   print(\"##\") \nfor i in range(5):\n   print(\"#\" * 6) \nfor i in range(5):\n       print(\"#\""], [0.09538415269545474, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function which takes two tuples and returns the tuple of the diffences common in test_tup1 and test_tup2.\nThe above code is a function that takes two tuples and returns the tuple of the diffences common in test_tup1 and test_tup2.\n"], [0.09535660798117247, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes two tuples as input and returns a tuple that contains all elements of test_tup1 and test_tup2 except for the elements that are present in both tuples.\ndef f(x, l=[]): \n    for i in range(x): \n        l.append(i*i) \n    print(l)\nThe above code allocates memory for the list i,e l to the function. If"], [0.09514617857362266, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that finds dissimilar elements between two tuples and returns them as a tuple.\n\n# Support code\nclass Node:\n  def __init__(self, l, r, p):\n    self.left_child = l\n    self.right_child = r\n    self.parent = p\n\n  def is_left_child(self):\n    if self.parent is not None:\n        return (self.parent.left_"], [0.09509853739223906, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " will return the dissimilar numbers of two given sets.\n\n# Day 4 - 5 \ndef show(lst):\n  m = max([len(str(i)) for i in lst])\n  for i in lst:\n    print(str(i).rjust(m))\n  \nshow([1, 12, 123])\ndef cumulative_lst(lst):\n  for i in range(len(lst)):"], [0.09503284029782733, "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is to return the elements that are present in one tuple but not the other.\ndef print_superior(letters):\n  for letter in letters : \n    if letter.lower() in alphabet : \n      if ord(letter) > 90 : \n        print(letter)\nThe above code will print all elements in the list that is above the alphabetic value A in the alphabet string. \nalphabet = list(\"ABCDEFGHIJKLM"], [0.09495363633564007, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes in tuple 1, and tuple 2, and returns a tuple that contains only the elements that are dissimilar between the disimilar pairs.\ndef find_doctor_id(Doc_npi, doc_id):\n    res = \"UNIDENTIFIED\"\n    index = Doc_npi[1].find(doc_id)\n    if index >= 0:\n      res = Doc_npi[0]\n    return res\nThe"], [0.09464829271498756, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that finds elements in only one of the two tuples (it has to be dissimilar).\n\ndef are_both_even():\n  res = all([i%2 == 0 for i in test_tup])\nreturn res\nThe above code finds the first false boolean expression within a tuple through all the elements.\n\ndef apply_modulo():\n  res = [i%3 for i in test_tup]\n  return ("], [0.09464829271498756, "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " given two tuples it displays the dissimilar tuples in those two lists.                                   \n\n \n  \na=[1,2,3,4]\nres = a[::2]\nprint(res)\n#The above code is a program to print alternate values for a given list. The above code is not showing alternate values. Below is an updated program which is giving the output as alternate values.\n\n#code for printing even numbers\na=[1,"], [0.09457431409748136, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function that returns a tuple of items not found in both tuple 1 and tuple 2.\n"], [0.09449012692933281, "def split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " can be used to find dissimilar values for two tuples.  The keywords used to achieve this were \"res\" and \"^\".\n#Method 1:\nclass Solution:\n    def uncommonFromSentences(A, B):\n        return sorted(list(set(A.split()) ^ set(B.split())), key= A.split().count)\n        \nA = \"this apple is sweet\"\nB = \"this apple is sour\"\n"], [0.09417470832363346, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function which given two tuples containing pairs of numbers and checks if they are dissimlar or not and returns true in case of dissimilar else returns false.\ndef monetary_value_addition(tuple1,tuple2):\n  total =tuple(str(x+y) for x,y in zip(tuple1,tuple2))\n  return(total)\nThe above code is a function which given two tuples containing multiple"], [0.09415127045725653, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes two tuples as input and returns all unique elements in both the tuples.\ndef words_length(list):\n    return list \nThe above line is a function that takes a list of words and returns a list containing words \nalong with the length of each word.\ndef count_digits_literals(data):\n      \n    length = len(str(data))\n    return (length)\nThe above line is a"], [0.09372945962044402, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\ndef count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that gives a list of dissimilar values.\nChecks 4th element of each tuple against the first 3 elements and appends tuples that satisfy the condition.\n\ndef tuple_func(a_list): \n    b_list = []\n    for lst in a_list:\n        if lst[0] < lst[1] < lst[2] and lst[3] not in b_list:\n           "], [0.09361211459436061, "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\n\nimport re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns a tuple of the items that are present in 2 tuples.\n\ndef single_word_count(word_list):\n\tresult = dict()\n\tfor word in word_list:\n\t\tresult[word] = result.get(word,0)+1\n\treturn result\nThe above code is a function that returns a dictionary of the counts of the words in the list.\n\ndef extract_three_last(data_"], [0.09349391190467637, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function which takes two tuples and returns all the elements which are unique in one of the two tuples.\nQuestion #00001: 00000\nQuestion #00002: 00000\nQuestion #00003: 00000\nQuestion #00004: 00000\nQuestion #00005: 00000\nPost a solution on github and share the link on whatsapp group shared by master shyna(https://www.linkedin.com/in/shyna-"], [0.09349391190467637, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns the elements present in one of the two sets.\nfrom pylab import *\nfrom matplotlib import dates\ndef bill_period(min_hours, max_hours):\n    hour = input(\"Please enter the total number of hours worked. (from 0 to 168)\")\n    if 0 <= hour and hour <= int(min_hours):\n        print(\"minimum commitment\")\n    elif int(min_hours) < hour"], [0.09317113289059441, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is python function for subtracting two tuples and returns a tuple.\nsubarr.show()\nsubarr.select((substring(subarr['salary'], 4, 4).alias(\"no\"))).collect()\nsubarr = subarr.withColumn(\"salary\",substring(subarr.salary, 5, 11))\n"], [0.09315415660087242, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " contains a python function that takes in two tup\u00adles of length 1. The function returns a tuple containing the elements in each the tup\u00adles that are dissimilar.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code contains a python function that takes in two t"], [0.09307079311794045, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " returns points of dissimilar elements from two given tuples.\ndef isPalindrome(n, base):\n  tmp = n \n  ret = 0\n  while (n):\n    print(n % base)\n    ret = ret * base + n % base\n    n //= base\n    print(ret)\n  return ret == tmp\nThe above code returns whether the given num is palindrome or not.\n"], [0.09284335495574746, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function that will take in two tuples and return the elements that are not common between the tuples.\ndef search_triplets(arr):\n  arr.sort()\n  res = []\n\n  for i in range(len(arr)):\n    if i > 0 and arr[i] == arr[i-1]:\n      continue\n    search_pair(arr, -arr[i], i+1, res) \n\n "], [0.09225173517652317, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function which takes two tuples of the same length and returns a tuple consisting of all elements which are dissimilar in both tuples.\n@staticmethod \ndef factorial(n):\n  import math\n  return math.factorial(n) \nThe above code is a static method that is used with the Decorator @staticmethod. Static methods unlike regular or class methods don\u2019t have references to class states or instance. They can be called"], [0.09212919255006655, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns a tuple of items found in the both tuple.\nStudying the shortest piece of code of the day:\n\ndef dot_product(vec1, vec2):\n    len1 = len(vec1)\n    len2 = len(vec2)\n    vec1 += vec2 * max(0, len2 - len1)\n    vec2 += vec1 * max(0, len1 - len2)\n    return"], [0.09212919255006655, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " will give you an output as to where the dissimilar letters are in the tuple.\ndef li2dic(l1):\n    d1={}\n    for ind in range (len(l1)):\n        d1[ind]=l1[ind]\n        #key:index,value:value\nreturn d1\nThe code above returns the key values from the index from the list and the values from the the lists\ndef list2anagram"], [0.09204727296605823, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns the elements that are in the first tuple that are not in the second tuple.\n\ndef factorial(number):\n    product = 1\n    for num in range(number):\n        product *= (num + 1)\n    return product\nThe above code is a function that returns the factorial of a number.\n\ndef uniques_only(test_list):\n  res = tuple(set(test_list))\n "], [0.09158934120384592, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes two tuples as arguments, finds elements present in one tuple or the other, but not in both and returns a tuple with those elements\n\nimport re\ndef get_longwords(wlist):\n\tpattern = r'\\w{3,}$'\n\tret_words = []\n\tfor word in wlist:\n\t\t\tif re.findall(pattern, word):\n\t\t\t\tret_words.append"], [0.09158186070038334, "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function in which sets of numbers are compared.\n\ndef count_vowels(str1):\n  (str1.lower())\n  vowels = \"aeiou\"\n  count = 0\n  for char in str1:\n    if char in vowels: \n      count =+ 1\n  return (count)\n\n"], [0.09152255298655444, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes in two tuples and returns the elements of both of them except the common ones.\nnum1 = (11, 22)\nnum2 = (10, 101, 110)\nprint(\"The original tuple 1 : \" + str(num1))\nprint(\"The original tuple 2 : \" + str(num2))\nprint(\"Elements of the combined tuple with refrence to keys: \" + str(substract_elements(num1"], [0.09109520043424675, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " returns a tuple containing both tuples without any duplicate elements present in either tuple and the result will also not be in either tuple  if you do not specify it to output only the base of the tuple in the function.\ndef square():\n  mylist=list()\n  for i in range(1,21):\n    mylist.append(i**2)\n  return(mylist)\n  return mylist\nThe above code is a function that returns a"], [0.0910876867411584, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes in two iterable tuples and finds the values that are dissimilar in the two tuples and returns them as a tuple.\n\ndef concatenate_all(L, start = '', sep = '-'):\n  res = start\n  for l in L:\n    res += l + sep\n  return res[:-1]\nThe above code is a function that takes in a list and concatenates all elements of the list"], [0.09108295373138917, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function that takes two tuples as input arguments and returns a new tuple containing the elements which are different from each other.\n#Please leave a like if you enjoyed the content, thanks for viewing."], [0.09043231014293467, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to check whether two tuples are dissimilar.\ndef max_consecutive(items):\n  groups = groupby(items)\n  result = 0\n  longest_group = None\n  for key, group in groups:\n    group_length = len(list(group))\n    if group_length > result:\n      result = group_length\n      longest_group = key\n  return(result)\nThe above code"], [0.09029218729671627, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function which returns tuple of elements not present in other tuple.\n\n\ndef cyclic_nums(test_tuple):\n  for test_num in test_tuple:\n     i = (test_num + 1) % len(test_tuple)\n     if test_tuple[i] == test_num - 1 or test_tuple[0] == test_num:\n        continue\n     else:\n        return("], [0.09002696599846008, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function which returns the unique elements of tuple1 and tuple2, i.e. co-ordinate(|tuple1\u2229tuple2|), +ve means the entries present only in the first tuple, whereas -ve means the entries present only in the second tuple.\ndef find_symmetric_pairs(stream):\n   t1, t2 = {}, {}\n   res = [] \n   for x in stream:\n     "], [0.0898817511545755, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function which takes two tuples as input and returns a difference between the two tuples.\nList1 = [1, 4, 5, 6, 5] \nList2 = [4, 6, 7, 8, 9]\n \n \nres_list = list(set(List1) ^ set(List2)) \nres_list\n\ntest_list1 = [(1, 'Naveen', 27) , (4"], [0.08969208116418383, "def my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that determines whether two input tuples contain dissimilar or identical items. It uses XOR. This function checks if two lists are totally different that is if the items in both lists does not match and returns the items that do not match\ndef distance(str1,str2):\n    z =len([i for i in range(len(str1)) if str1.startswith(str2[:i+1])])-1\n    return"], [0.08968021596231712, "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes two tuples as arguements and returns a new tuple which includes dissimilar elements.\n\n\n\n>>> block = '<a href=\"http://foo.com\" target=\"_blank\">Is it really spam? Click here!</a>'\n>>> start = block.find('target=\"_blank\">')\n>>> end = block.find('</a>', start)\n>>> block[start+len('target=\"_blank\">'"], [0.08953708682604156, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " will return the symmetric difference between two given tuples.\ndef find_flatten(nested_list):       \n    # inbuilt reduce function \n    final_list = list(reduce(lambda x, y: x+y, nested_list))  # we are getting a seperate list of all the values in order\n    return final_list \nIf its nested list of lists and we need it flattened.\ndef find_expand("], [0.08935458027639394, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function to generate a tuple of items not found in both tuples given in parameters.\n\ndef fizz_string(n):\n\tif((n % 3 == 0) and (n % 5 == 0)):\n\t\treturn \"FizzBuzz\"\n\telif n%3 == 0:\n\t\treturn \"Fizz\"\n\telif n%5 == 0:\n\t\treturn \"Buzz\"\n\telse:\n\t"], [0.08926558928689664, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes in any two tuples as arguments, and returns a tuple containing the values that are present only in one of the tuples.\ndef replace(initial_str, old_str, new_str):\n  output_str = initial_str.replace(old_str, new_str, 1)\n  return output_str \nThe above function is a function that takes in a string and replaces its substring with a new substring."], [0.0890973606121723, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns a tuple of uncommon numbers between two itegers such as (9,3)\n\ndef check_subset(subset, fullset):\n  #subset contains only integers\n  #fullset contains only integers\n\n  freq_subset  = [subset.count(elem) for elem in subset]\n  freq_fullset = [fullset.count(elem) for elem in fullset"], [0.08884932053270035, "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is function to check for dissimlarity in two sets of tuples.\n\n# Program6\ncond = True\nsel_op = 1\nlist_test = []\nwhile cond:\n  op = input('Enter your option ('+ ','.join(['1. Add Element', '2. Get Numbers', '3. List Division', '4. End']) + '): ')\n  def list_division(numbers, divisor"], [0.0887421263452011, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that accepts two tuples of size and returns a tuple that contains uncommon elements.\ngetattr(api_client, method)(resource, **data) or getattr(x, 'y') and return x.y().\n>> api_client.query_items(query, fields=\"id,name,website,account_balance,created_at\")\n>> api_client.query_items(**{\"query\": \"query { items { id,"], [0.0886026223462696, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes in a two tuples and returns the dissimilar elements.\ndef near_thousand(n):\n  return ((abs(1000 - n) <= 100) or (abs(2000 - n) <= 100))\nThe above code is a function that takes in n and returs true if n is within 100 of 2000 and within 100 of 1000.\ndef sum1(a, b, c, d, e):\n\t  res = 1"], [0.08836461748166886, "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that returns a tuple of dissimilar values in both tuples test_tup1 and test_tup2. geeksforgeeks.org/python-tuple-dissimilarity/\n\ndef is_list(test_list):\n\n  return \"Yes\" if type(test_list) == list else \"No\"\n\nThe above code is short-hand way of testing if the specified value is an instance of list data structure in Python"], [0.08836461748166886, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " returns the middle two elements as res and produce two sets using set operator ^.\n\ndef minnovel_1(tupl):\n  if(len(set(tupl)) == 3):\n    return True\n  else:\n    return False\nThis code will return True if the given set contains 3 unique elements\ndef maj_median(myfile): \n  import csv \n  tmp = []\n  no_maj = [] "], [0.08809742686685036, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function return the tuple where there is no common elements between the given tuple.\n\ndef find_primefactors(n):\ninput: An even number\n output: The first four multiples of the square root of the number; if they are not prime, than we find the smallest prime factor thats divisible using a nested list\nA = prime_factors(28)\nprint (A)\nThe above code return all the prime factor of the number."], [0.08803531769358451, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " return the elements that are not identical in two given tuples.\ndef tuple_add(tup1,tup2):\n    res = tuple()\n    for i in range (len(tup1)):\n        for j in range (len(tup2)):\n            res += (tup1[i]+tup2[j],)      \n    return res\nThe above code tuple with elements are added together.\n\n\nclass Student"], [0.08789922672202222, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " returns a tuple that are dissimilar and unique in two tuples.\n\ndef hex_to_rgb(hex_colour_code):\n  x = int(hex_colour_code ,16)\n  r = x >> 16\n  g = x >> 8 & 0xFF\n  b = x >> 0 & 0xFF\n  rgb = (r,g,b)\n  return rgb\nThe above code converts a hex color format(upt"], [0.0877967425265131, "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function to get a unique tuple by De Morgan's law.\n\n# End of challenge\n\n# Please make sure you have visited the area Extra Materials for this challenge. You can find it under the tab Challenge Assignments. You will find a tutorial there that will explain the #ExtraMaterials.\n# You can also visit the forum for this challenge, to see if somebody else has already asked the question you have.\nimport os\nimport sys # Allows us to work"], [0.08779411772372561, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes two input tuples and a lambda function that uses the ^ operator.\n\ndef common_elements(tup1, tup2):\n    result = []\n    for x in tup1:\n        for y in tup2:\n            if x == y:\n                result.append(x)\n    return tuple(result)\nThe above code is a function that takes two tuples and returns a tuple with the common"], [0.08754332549746435, "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " sets the dissimilar letter and returns it as an answer.\ndef mergeToLenLeft(s,p, j):\n    x = len(s)\n    val = list()\n\n    i = 0\n    \n    while(i < len(s)-1):\n        tmp = s[i:i+2]\n        \n        if(ord(p[j]) == ord(tmp[0])):\n            val.append(tmp[0"], [0.08745200290121356, "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function of Tuple dissimilarity that subtractaises set A from set B and then subtracts set B from set A to find dissimilarities of test_tup1 and test_tup2 i.e. (setA - setB) - (setB - setA)\n\nfrom functools import reduce \n \n\ndef multiplyList(myList) : \n \n    # Multiply elements one by one "], [0.08739435988441797, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is actually returns the slice of two sets which are dissimilar in the two sets.\ndef smallest(lst1):\n  return (min(i for i in lst1 if i%2 !=0 or i == 2))\n  ### Write your code here\nThe above code return the approximate binary gap in an Integer N.\ndef compute_quadrant_size(quadrant):\n    res=0\n\n    if quadrant == 1:\n        res ="], [0.08714208103005662, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is write a function that, given two strings, finds the shortest substring that contains the first seven characters of the first string and the last seven characters of the second string.\ndef least_sum(nums):\n  res = [x for x in nums if x < 12]\n  return sum(res)\nThe above code is write a function that, given a list of values between 0 and 100, returns the sum of the two smallest values. \ndef"], [0.08702642006680146, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " takes two tuples as inputs and does a binary operation of the two tuples to produce output.  \n\ndef list_info(list_):\n  temp=list_.copy()\n  temp.reverse()\n  print('Original list: ',list_)\n  print('Forwards: ',list_)\n  print('Backwards: ',temp)\n  print('Max: ',max(list_))\n  print('Min: ',min(list"], [0.0870083109849067, "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function that takes two tuples as arguments and returns the item from the second tuple that is not present in the first one.\ndef find_all_subsets(main_set):\n  return (list(subset) for subset in chain(*map(lambda x: combinations(main_set, x), range(0, len(main_set)+1))))\nThe above code is a python function that takes a list as an argument and returns all the"], [0.08695849847205608, "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " returns a tuple of all elements present either in test_tup1 or test_tup2 but not both.\ndef is_swear(word):\n    return word.lower().replace('s', '$') in ['schei$', 'sperm', 'shithead', 'skank', '"], [0.08664610223844374, "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes as input two tuples t1,t2 (with the same length) and returns a tuple containing those elements that either appear in one and not the other, or appear in just one of them, or appear in both but with a different number of occurrences.\n\ndef filter_on_length(dict, n):\n  values = tuple(value for value in dict.values() if len(value) == n)\n  return (values)"], [0.08663527025860564, "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function called find_dissimilar returns the elements that are in the first but\nthe not in the second and the second but not in the first. But since te tuple elements are non-mutable and mutable\nindex assignment into a tuple are not possible there is a slightly modified code for \n\ndef find_dissimilar(test_tup1, test_tup2):\n  test_tup1 = list(test_tup"], [0.0860638806889791, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function which takes two tuples or lists as inputs, and returns a tuple containing the elements of tuples separately as elements.\n\n\ndef find_duplicates(test_lst): \n    res = []   \n    for i in range(0, len(test_lst)): \n        k = i + 1\n        for j in range(k, len(test_lst)): \n            if test_lst"], [0.08599766783308262, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function which takes two tuples and return a set of element that are present in both the set.\nsum_up(int=9, **{'1':2, '2':1}) = int + sum([2,1]) => 11\n\nThis program converts the int type number to string, to perform the\nsum of the int and sum of the list. The default value of the int is\n9, which is then converted to string and appended"], [0.08547161555990723, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function that takes in two tuples as arguments and checks the similar elements between them. It prints those dissimilar elements.\ndef get_square(val):\n    sum = int(val) * int(val);\n    print (sum)\n    return;\nThe above code is a python function that takes in an argument, multiplies it with itself and prints the square of that value.\ndef find_divisibles (inrange, div_by"], [0.08480962641324631, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes two tuples as input and returns the tuple containing the values which are present in only one of the input tuples. Please note that both the tuples entered should be of simple data types such as int, string, float and not of other composite data types such as list, dictionary etc.\nt = int(input()) \ncomp = list()\nfor i in range(t):\n    with open('tree.txt') as fp:\n"], [0.08463425754224342, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " would return xor value of two test tuples.\n\n\ndef get_and_element(a):\n    res = a[0]\n    for i in a[1:]:\n        res = res & i\n    return (res)\nThe above code would find and of the tuple, the code above does what teh expected output is asking us to do.\nuse_mpg_ratio = False  # (default, if not using alternative method"], [0.08449710373199906, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is groupby function to take one group or tupple as input and return the other group or tupple as output.\nfunction ListPrime(n)\nListPrime2=[3,17]\nfor i in ListPrime2\n    if i is not n:\n      if n%4==0:\n        print(\"It is not Prime\")\n      else\n        print(\"It is Prime\")\n\nThe above code contains 2 iterables ListPrime and List"], [0.0844007434195675, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a program that takes two lists and returns the elements that are not in both.\n\nstring1 = input(\"Enter string: \")\n#This function replaces certain substrings in a string.\ndef replace_str(str, lst_str):\n    res_str = ''\n    str1 = str.split(\" \")\n    s = ' '\n    while s in str1:\n        str1.remove(s)\n    for i"], [0.08408685770052782, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function which takes two tuples and return elements which are not in common of that numbers.\nimport itertools\nfrom itertools import dropwhile,takewhile\n\ndef f1(seq):\n    takewhile(lambda x: x<2, seq) \n\ndef f(*seq):\n    takewhile(lambda x: x<2, seq)\n    \nf([0, 1, 2, 3, 2, 3, 2"], [0.08408685770052782, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " returns the symmetric difference of elements of tuples test_tup1 and test_tup2, i.e. all the elements that are unequal\n\ndef max_consecutive(items):    \n  if '--' in items:                          \n    items.remove('--')                 \n  items = [int(x) for x in items]                     #Convert the strings in items list to int type values.\n  return max(list("], [0.08408685770052782, "def armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is used to return a non similar element of two sets. \ns = {1,1,3,3,5,1,7,7,9,9}\ns = list(s)\nprint(s)\nThe above code is used to remove the duplicates from an unsorted list.\n\ndef compress_dict(dict1):\n    temp = {k: dict1[k] for k in dict1 if not dict.fromkeys"], [0.0840490798064403, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that takes in two tuples and returns the items that the tuples share in common, the intersection. and items that are different,the symmetric difference.\nsquare_list = [x ** 2 for x in range(10)]\nThe above code is a list comprehension that squares every number between zero and nine(that includes both of these numbers).\ndef custom_sum(*args):\n total = 0\n for i in range(0, len(args)"], [0.08331427725548556, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " checks whether two sequences are dis-similar, and prints the discrepancy.\n\ndef reverse_dict_lookup(d, v):\n  test_set = set(d)\n  for i in test_set:\n    if d[i] == v:\n      res = i\n  return res\nThe above code revises the second element of a given dictionary by checking whether the dictionary key is associated with the provided value.\n\"\"\""], [0.08325715542648948, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a function that inputs two tuples and checks whether both tuples contain the same elements within them. If they have, then it determines and returns a tuple containing all elements which they share. If they have different elements within them, it returns the tuple containing unique elements within each Inputting the above tuple and the below but similar tuple produces the following result:\ndef dim(lst): \n  demi = 0\n  kk = False\n  for k in lst"], [0.08265421815509631, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function takes in two tuples and removes the similar items from both tuples and returns the result as a new tuple.\ndef max_min(*args):\n  print(\"Input: \",args)\n  ans = list(args)\n  ans.sort()\n  res = (ans[0],ans[-1])\n  return tuple(res)\n\nThe above code is a python function that returns the maximum and minimum out of a variable number"], [0.08217084822433852, "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function which takes two tuples of sizes n and n+1, and returns the first element of the tuple (t1) when the second tuple (t2) has a different element of the same index.\n\n\n# <span class=\"graffiti-highlight graffiti-id_vc779df-id_z9ijl86\"><i></i><button>Show Solution</button></span>\n\n# Test your function by running these code cells."], [0.08174740429359661, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " gives the union of two tuples after removing the common elements.\nimport collections\ndef convert_repeated(given_tuple):\n   repeated = [item for item, count in collection.Counter(given_tuple).items() if count > 1]\n   print(repeated)\nThe above code is to remove repeated elements from the tuple.\nBlackjack: Given three integers between 1 and 11, if their sum is less than or equal to 21, return"], [0.08153469542739665, "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a the tuple dissimiliarity function that compares tuple 1 with tuple 2 based on element-wise differences.\ncountry_codes = [\"USA\", \"fRoa\", \"austr\"]\ncountry_dict = {}\nfor letter in string.ascii_lowercase:\n  country_dict[letter] = [c for c in country_codes if re.match(letter, c, re.I)]\ntup = list(country_dict"], [0.08136654885035528, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function that returns the numbers that are present in one tuple but not in the other.\n\ndef fixed_point(tupl1):\n  tupl2 = [i for i,j in enumerate(tupl1) if j == i]\n  return tupl2\nThe above code is python function that returns the numbers or a list, where the number and the index in the list are the same for all numbers that appear at least once in the"], [0.08066569782323385, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " returns the tuple of differing values from tuple of tuples even if similar values are present at more than one positions in tuple of tuples.\ndef find_closest(str1,str2):\n    for i in range(0, min(len(str1),len(str2))):\n        if(str1[i] != str2[i]):\n            return (ord(str1[i])-ord(str2[i]"], [0.07994937624894936, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function that returns a tuple from the set from set difference of two tuples containing ints.\nThe set difference of two sets A, B is a set that contains all elements of A but not elements of B. An empty set is returned if A is a subset of B.\n\ndef remove_digit(str1):\n  new_str = \"\"\n  for i in range(len(str1)):\n    if not str1[i]."], [0.07978667604559621, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python function that takes in two tuples of strings and determines the number of strings they share.\ndef check_even_list(n_list):\n  new_list = [item for item in n_list if item%2==0]\n  if len(new_list)==0:\n    return False\n  else:\n    return True\nThe above code is a list comprehension that takes in a list of numbers and returns a boolean value for"], [0.07885992167407196, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " return the tuple as which has all the elements of tuple1 and tuple2 but no duplicate.\nfrom collections import Counter\nfrom collections import OrderedDict\nd1 = {'a': 200, 'b': 300, 'c':400, 'd':100}\nod1 = OrderedDict(sorted(d1.items(), key=lambda t: t[1]))\nnewDict = dict(od1)\nlistnewDict"], [0.07821233554491769, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a python program that takes two \n\ndef change(l_one, l_two=[]):\n  if len(set(l_one) == len(set(l_two))):\n    set(l_one).add(\"Rahul\")\n  print(\" \".join(l_two))\n  print(\" \".join(l_one))   \nThe above code is a python program that takes a list and adds element \"Rahul\""], [0.07785396380000544, "import sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is found dissimilar.\n\ndef find_duplicates(test_tup):\n dup_items = set()\n unique_items = set()\n for x in test_tup:\n   if x not in unique_items:\n      unique_items.add(x)\n   else:\n      dup_items.add(x)\n return(dup_items) \nThe above code finds and returns the duplicates from an array."], [0.07731972973999558, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " returns the pairs of tuple1 and tuple2 that are not common.\ndef largest_sum(list):\n max = sum = 0\n for i in list:\n  sum += i\n  if(sum<0):\n    sum = 0\n  if(sum>max) :\n     max = sum\n return max\nThe above code returns the sum of numbers in a sequence, provided the sequence is either in incrementing or decrementing order.\n\n#"], [0.0768755681593068, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\nfrom operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a tuple that computes a set_symmetric_difference in 'test_tup1' and 'test_tup2'\nCode smell is a term we use in software engineering to describe the characteristic of the code which indicate there is something wrong with it. Smell Code is the micro commit with respect to a piece of code in a system. Smell Code is any piece of code that is hardware and software dependent. A Refactoring is an approach you"], [0.07528102991107477, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " is a module that takes two tuples as inputs and returns a tuple as output.\ndef decompose(test_tup):\n  res = []\n  for k in test_tup:\n    n = 0\n    while n < k[1]:\n      res.append(k[0])\n      n +=1 \n  return res\nThe above code is a module that takes a tuple as an input and returns another tuple as output, containing all"], [0.0749745052491819, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " correctly gives result but it is optimal approach.\nReplacing set with tuple, the above code will become O(n).\n\ndef return_Sum_Closest(test_tup1, test_tup2): \n  s1 = sum(test_tup1) \n  s2 = sum(test_tup2) \n  abs_diff = abs(s1-s2) \n  return (min(s"], [0.07143333968988452, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " takes as input 2 tuples (t1_1, . . . , t1_m) and (t2_1, . . . , t2_n) and returns one tuple t of distinct elements from tuples t1 and t2.\n\ndivide into separate modules \nRepresent Graph \nRecursive DFS\ndistance matrix\ndfs distance matrix\nhyperstring creation\ndfs of hyperstring creation\n          \n\"\"\""], [0.062251505004046796, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code", " gives the result of intersection between two tupes. \n"]]}
