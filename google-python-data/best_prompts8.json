{"prompt": {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 724, "prompt": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.", "code": "def power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])", "test_imports": [], "test_list": ["assert power_base_sum(2,100)==115", "assert power_base_sum(8,10)==37", "assert power_base_sum(8,15)==62", "assert power_base_sum(3,3)==9"]}, "queries": [[0.31589850449984025, "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the sum of the digits of the specified number raised to the specified power.\n"], [0.2995580299728786, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that takes in a base and the power, and returns the sum of the digits of the base raised to the power.\n\n\nimport re\ndef aba_validator(n):\n    return bool(re.search(r'^(?!(000|666|951))^[1-9][0-9]{3}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}$',"], [0.29611516996798076, "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function that accepts a base and the power and returns the sum of the individual digits raised to the specified power.\n"], [0.2943685308030297, "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of the base to the power of that base power.\n'''"], [0.2787025293507767, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that takes Two positive integers, base and power and returns the sum of the digits in the base raised to the power.\nprint(sum_double(2,2))\nprint(sum_double(3,1))\nprint(larg_nnum([3,3.9],1))\nprint(otherside_rightangle(5,5))\nprint(power_base_sum(2,2))\n"], [0.2650551971881707, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that takes a base and a power and returns the sum of digits in the number of 2 raised to k.\n'''"], [0.2486834369021255, "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to return the sum of all the digits of base that are raised to the power of power.\n"], [0.2464742593681647, "import math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of all natural numbers which are the digits of the base to the power. \n\nimport collections\ndef rank(hand):\n    rank_list = ['--23456789TJQKA'.index(r) for r,s in hand]\n    rank_list.sort(reverse=True)\n    return [5, 4, 3, 2, 1] if (rank_list == [14, 5, 4"], [0.24322324445014834, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function which calculates the sum of all digits of the base^power and returns the sum.\n\ndef cipher(map_from, map_to, code):\n    for k in (list(map_from.keys()) if len(map_from) > len(map_to) else list(map_to.keys())):\n        if code.find(str(k)) != -1:\n            return False\n    return True\nThe above"], [0.24287520577979124, "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the sum of the digits in the number equals power of the base number.\n"], [0.2257000084162729, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of all digits of the base digital raised to the power.\ndef power_recursion(base, power):\n    if power == 1:\n        return base * base\n    if power == 0:\n        return 1\n    return base * power_recursion(base, (power-1))\nThe above code is a function to find the base digital raised to the power(recursion version).\n\ndef check_mirror"], [0.2250987767957034, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that takes in a base and a power and returns the sum of the digits that appear in the result of the base to the power.\n\nimport math\ndef travel_price(distance, litres_100kms, price):\n    litres_traveled = math.floor(100*distance)\n    money_spent = litres_traveled // litres_100kms * price\n    return money_spent         \nThe above code is a function"], [0.22336036929134415, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the sum of digits of the base to the power of the power where the input values are the base and the power. i.e. input 123, 4 would be (1*(1*(1*1))) = 6\n\ndef product_one_to_n(n):\n    p = 1 \n    while(n != 0):\n        p *= n\n        n -= 1\n    return p \nThe above code"], [0.21811946644175592, "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that finds the sum of all digits of a power of a number.\nimport functools\ndef even(a):\n    if a % 2 == 0:\n        return True\neven_list_of_numbers = list(filter(even, [i for i in range(1,101)]))\nprint(even_list_of_numbers)\nprint(functools.reduce(lambda a, b: a + b"], [0.21810432074298217, "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\n\ndef sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function that finds the sum of all digits of the number base^power.\ndef unique_triplets(l):\n    return sum([len(list(group)) for key, group in groupby(l)])\nThe above function returns the number of unique triplets given a list of sorted integers.\ndef check_rotation(arr1, arr2):\n    if len(arr1) != len(arr2):\n       return False\n"], [0.21636363578096077, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " returns the sum of all the digits of the number base raised to the power power.\n"], [0.21410858019423312, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " creates a function that takes a base and a power and returns the sum of each digit in the result of the base to the power.\n\ndef starts_with_vow(string):\n  return re.findall(r'\\b\\w+', string)[0].lower() in ['a', 'e', 'i', 'o', 'u']\nThe above code is a function that takes a string, converts it to lowercase and returns true if the"], [0.2100360451896757, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function that takes in a base and a power and returns the sum of the digits in the number formed by raising by the specified base to the specified power.\ndef num_jewels_in_stones(J, S):\n\t\n\tstones = set(list(J))\n\treturn sum([1 for i in S if i in stones])\n\t#return len(stones.intersection(S))\nThe above code is a function that takes in"], [0.2087123213851169, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to calculate the sum of the digits of a power of a given base.\ndef sum_of_all_friends(person):\n\tadd(person);fri(person);inp(person);\n\tnop=len(gm[person]['frndz'])\n\tfor frnd in gm[person]['frndz']:\n\t\tnop+=sum_of_all_friends(frnd)\n"], [0.19735661811311567, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a pyhon function to find the sum of the exponent of an integer.\ndef total_digit_sum(n):\n         return sum([int(i) for i in str(n)])\nThe above code is a pyhton function to find the sum of all digits of an integer.\ndef is_hack(n):\n         binary_n = bin(n)[2:]\n         is_palindromic_orignal = is_"], [0.19541322002294004, "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of all digits in the base raised to the power.\ndef count_triplets(arr, r):\n    initial = []\n    count = 0\n    for i in range(len(arr)-2):\n        initial.append([arr[i], arr[i+1], arr[i+1]])\n    initial = merge(initial)\n    initial = initial[0]\n    while(len(initial"], [0.19421683332120038, "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to calculate the sum of digits of a base raised to the power power - https://www.geeksforgeeks.org/sum-digits-power-number/.\ndef ip_to_integer(ip): \n    o1 = int(ip.split(\".\")[0]) \n    o2 = int(ip.split(\".\")[1]) \n    o3 = int(ip.split(\".\")[2]) \n"], [0.19365337235571717, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the sum of the digits of the original number raised to the given power base. The return value of the function is the addition of the digits of the calculated number.\n'''"], [0.1892042247426965, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to compute the sum of the digits in the result of the base to the power = power.\ndef is_number_balanced(number):   \n    numbers = str(number)\n    length = len(numbers)\n    left_part = numbers[0:length//2]\n    if length % 2 == 0:\n        right_part = numbers[length//2: ] \n        left_value = 0\n        right_"], [0.1885407986321329, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function that takes in base and power and powers the base to the power and returns the sum of the digits of the resultant number.\n\ndef binary_arr_to_int(arr):\n    s = \"\"\n    for i in arr:\n        s += str(i)\n    n = int(s)\n    return n     \nThe above code converts an array of binary elements to an integer.  \n\ndef check_binary_palind"], [0.18717014551602879, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that returns the sum of the digits of base^power.\nRecursion is a cool tool for solving many mathmatic problems including certain forms of combinatorics.\n\"\"\""], [0.18665796803901044, "from itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that  takes the base/exponent and returns the sum of the digits of the number base raised to the power.\nIn [79]:\ndef repeated_word(text):\n    word_freq = {}\n    unique_words = []\n    repeated_words = []\n    text_split = text.split()\n    for word in text_split:\n        if word in word_freq:\n            word_freq[word"], [0.18421115735419294, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that returns the sum of the individual digits of a given number. In other words, it calculates the sum of the base to the power of the exponent.\ndef larger_than_X(list, x):\n    largerThan = []\n    for i in list:\n        if i > x:\n            largerThan.append(i)\n    print(largerThan)\n    \nThe above code is a function that returns True if"], [0.18161571311547842, "def sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the sum of the digits of in power(base number, power number).\n\n\"4 5\".split()\n[4, 5]\nival = int(\"4\")\nival **= 2\nThe code is to calculate the power of a number."], [0.18013188357756257, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that returns the sum of all the digits in the given base to the power of the given power.\t\ndef fizz_buzz(n):\n    for i in range(1,n+1):\n      if i % 2 == 0 and i % 4==0:\n        print('FizzBuzzWoof')\n      elif i % 2 == 0 and i % 3 == 0:\n        print(('FizzBuzz'))\n"], [0.17994247270287064, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that returns the sum of all the digits in a power of a base number. \nSample Input\nbase = 2, power = 10\nSample Output\n7\nusr_input_base = int(input(\"Enter the base number:\"))\nusr_input_power = int(input(\"Enter the power:\"))\npower_base_sum(usr_input_base,usr_input_power)\n\u5217\u8eca\u306e\u6642\u523b\u8868"], [0.1755613184779645, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python script to find the sum of the digits of the base to the power.\nmatrix = [[int(i) for i in input().split(' ')] for j in range(N)]\nThe above code is used to take an N*N matrix as an input from the user in the form of space seperated numbers.\nimport pprint\nmatrix1 = [[2, -4, 1, 2 ],\n           [1,  2,"], [0.17254197496459592, "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the sum of the digits of a number raised to the specified power. \n\n\"\"\"\n\"\"\"\nimport random\nnum = (random.ranint(1,10))\nwhile num!=20:\n  print (num)\nprint ('yay')\n\nThe above code is to print a random number between 1 and 10. The above should continue until a number between 1 and 10 is chosen.\n\nchars = 'abcdefgh"], [0.16881908730484005, "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to sum the digits of a string representation of the base to the power to the power. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-25.php\ndef makes_twenty(n1, n2):\n    return n1 + n2 == 20 or n1 == 20 or n2 == 20\nThe above code is a lambda expression for the checking a condition for the makes_"], [0.16857704575817836, "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is in response to the practise of a function that takes a base (integer) and power (integer) and returns the sum of the digits of the number base raised to the power. (e.g.; 9^5 = 59049 => 9^5 = 36 )\ndef vol(rad):\n        return  ((4/3)*(3.14)*((rad)**3))\nThe above code is a function that calculates the volume of a sphere from its radius"], [0.16854974728197322, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to calculate the sum of all digits in a number raised to a given power\ndef fibonacci(range):\n  a = 0\n  b = 1\n  for i in range(0, range):\n    temp = a\n    a = b\n    b = temp + b\n  return a\nThe above code is function for notation fibonacci, to display that is:\n\nfibonacci(range)\nSo, the"], [0.16643527097428198, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that returns the sum of digits of the base to power value where the power value should always be greater than or equal to 0.\n\nimport sys\nimport urllib\ndef download_file(url, num_retries):\n    main(url, num_retries)\nThe above code is a high order function that downloads a file specified by the url and returns the average size of the numbers in the file.\n\nimport os\ndef file_"], [0.16425114871849342, "import re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to sum up the digits of the number base to the power power.\nimport re\ndef words_count(english_string):\n    return len(re.compile('\\w+').findall(english_string))\nThe above code is a function that returns the count of words in a given text\nimport re\ndef type(text1):\n    text1=text1.lower()\n    if re.compile('ivalid\\"], [0.16327756925601072, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of power of each digit in  of power.\ndef calcSum(cards):\n    ans_set=set()\n    card_dict={'A':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'T':10,'J':11,'Q':12,'K':13}\n    for c in list(cards"], [0.16288773325169068, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that takes in two integer values and returns the sum of digits in the number formed on taking base raised to the power.\nimport re\ndef word_count(fname):\n    fvar = open(fname, 'r')\n    words_list = re.findall(r'\\w+', fvar.read().lower())\n    return len(words_list)\nThe above code is a function counts no of lines, words and"], [0.16223191477820775, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that takes in a base and power and calculates the sum of digits in the resultant number.\ndef max_binary_sum(n):\n\tdp = [i for i in range(n + 1)]\n\tfor i in range(3, n + 1):\n\t\tdp[i] = max(i, dp[i // 2] + dp[i // 3] + dp[i // 4])\n\treturn dp"], [0.16204109178847992, "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the sum of the base raised to the power of the list element.\ndef get_least_numbers(array, k):\n    number_list = []\n    for x in array:\n        for y in array:\n            if(y<x):\n                number_list.append(y)\n                array.remove(y)\n    return number_list\nThe above code is the function to find the least K numbers"], [0.16130458930043456, "import cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of the digits of the power of base numbers.\n\n#@title String incrementer\n#Given an input string, write a function that increments a string i.e. the next string is obtained by incrementing the previous string\n\ndef str_increment(my_string):\n    my_string=my_string.replace('9','a')\n    my_string=my_string.replace('z','A')\n"], [0.16127897254211573, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that takes in two inputs, base and power and returns the sum of the digits in the number base**power. \ndef calc_letter_grade(percentage):\n    if percentage >= 90:\n        return \"A\"\n    elif percentage < 90 and percentage >= 80:\n        return \"B\"\n    elif percentage < 80 and percentage >= 70:\n        return \"C\"\n    elif percentage < 70 and percentage >= 60:"], [0.16117876899651798, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " takes takes a base to the power of the power and computes the sum of digits in the number. \ndef is_transversal(transversal, family):\n    fam_dict = {}\n    for fam in family:\n        curr_fam_set = set(fam)\n        for key in fam_dict.keys():\n            if not curr_fam_set.isdisjoint(fam_dict[key]):\n               "], [0.15997678862433232, "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", ", again a function which takes base and power, and returns the sum of the digits of base raised to the power.\n\n# **Answer**\nclimb_dict = { 1: 'first', 2: 'second', 3: 'third', 4: 'fourth', 5: 'fifth', 6: 'sixth', 7: 'seventh', 8: 'eighth', 9: 'ninth', 10: 'tenth', 11: 'eleventh' }"], [0.15985873780605078, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of all the digits of the base raised to the power.\nBuilding list comprehensions\nWrapping the previous activity in a for loop that goes through a sequence of numbers, 0 through 9 as an example,\nlets us practice building a flat list from an iterable:\nnew_list = []\nfor x in range(10):\n  new_list.append(x*5)\nUsing a for loop, let\u2019s build"], [0.15955823593205787, "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to return the sum of digits of the result of raising base to power.\ndef lowest_product(nums, amount):\n    biggest, smallest = [nums[0]], [nums[0]]\n    for v in nums[1:]:\n        smallest_appendleft = smallest[0] * v\n        smallest[0:1] = [smallest_appendleft]\n        smallest.append(v)\n        biggest"], [0.15955024909741045, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of digits of the result, of the base to a power.\n'''\n\n\nfrom functools import reduce\ndef tupleToInt(a):\n    values = list(a)\n    n = 0\n    for i in reversed(values):\n        n = n * 10 + i\n    return n\n    \nA = tuple(map(int, input().strip().split()))\nB = tuple(map"], [0.15923785906020063, "import bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to sum all digits of a given base raised to the specified power\ndef sum(str1,str2):\n    new_str1 = \"\"\n    new_str2 = \"\"\n    for i in range(len(str1)):\n        if((i%2==0)==True):\n            new_str1 += str1[i]\n        else:\n            new_str2 += str1[i]\n    for"], [0.15763603912775204, "def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function which computes the sum of the digits of a positive number base ^ power. Example: base_sum(3,3) = 27 - 6 = 21.\nimport re\ndef check_character_groups(string):\n    #pattern = re.compile(r'[A-Za-z]+\\s[A-Za-z]+.[-^A-Za-z0-9]+@[A-Za-"], [0.15720309273255886, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the sum of the digits of a given power of a given base.\n\ndef find_connected_areas(screen,width,height):\n    connected_areas = 0\n    screen2 = screen.split('')\n    x = 0\n    while x in range(0,height):\n        y = 0\n        while y in range(0,width):\n            if screen[x,y][0] == 0"], [0.1560052491539962, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to calculate the sum of the digits of the given base raised to the given power.\nfrom itertools import combinations\n\ndef round_robin(teams):\n    sides = []\n    for team_one, team_two in combinations(teams, 2):\n        sides.append((team_one, team_two))\n    return(sides)\nThe above code is a python function to generate all of the possible match up"], [0.155841973862882, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\ndef large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the sum of base raised to the power.\nnums = [i for i in input().split()]\ndef power_sum(nums):\n    return sum([int(i) for i in nums])\n\ndef get_pan(n):\n    return ''.join(sorted([c for c in str(n)]))\n    \ndef all_pans(m, n):\n    return sorted([get"], [0.15423859535792409, "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\n\ndef catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is to find the sum of powers of individual digits of a number.\ndef rev_number(numb):\n    return int(str(numb)[::-1])\nThe above code is a function to reverse a number.\n##"], [0.15423500654590416, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the sum of powers of an integer list.\ndef crazy_string_function(string):\n    return ''.join([o[0]*o[1]*len(o) for o in re.findall(r\"(.+?)(\\d+?)\\1+\", string, re.IGNORECASE)])\nThe above code is a function to find the non-repeating characters in a string.\n'''"], [0.1541950740513532, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function which takes a base and power (base^power) and returns the sum of the digits in the base power.\n#fibonacci function \ndef fibonacci(n): \n\t \n\ta = 0\n\tb = 1\n\tif n < 0: \n\t\tprint(\"n must be greater or equal to 0\") \n\telif n == 1: \n\t\treturn a \n\telif n"], [0.1536865066327793, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that takes in the pow(base, power) and returns the sum of all the numbers\nself_describing_numbers()\nThe above code outputs the total count of self describing numbers in a given input.\nfix_tags()\nThe above code will tell how many words have illegal punctuation.\nnums_to_chars(s, n)\nGiven 2 strings, s and n, create a function that returns the string created by\ninter"], [0.15219369818921274, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that returns the sum of each character in a given power of a number, supplied to the function as parameters.\ns = 'a6b' ############kryptic################################3\ns = 'f6hix'\ndef find_substring_return_index(string, substring):\n    index = string.index(substring)\n    return index\ntry:\n    find_substring_return_index(string,substring"], [0.15165999789068163, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the digit based sum of the sum of power of a given number.\n"], [0.15129318399362246, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of the digits in a hexadecimal number as stated in the question.\ndef intsum(data,sum):\n    while True:\n        number=re.findall(r'\\d', data)[0]\n        if(str(sum[:len(str(sum))]) in str(data)):\n            return 1\n        sum=int(number)+sum\n        data=data[len(number"], [0.15119405201992925, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to return the sum of the digits of the 'power'th power of the given base number.\ndef get_continuous_chunks(text):\n    chunked = ne_chunk(pos_tag(tokenize(text)))\n    prev = None\n    continuous_chunk = []\n    current_chunk = []\n    for i in chunked:\n        if type(i) == Tree:\n            current_chunk"], [0.15039860228133983, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that takes in a base and a power and returns the sum of the digits of the value after calculating base raised to power.\ndef insert_each(l, new):\n    l1 = l + [new for i in range(len(l))]\n    return l1\nThe above code is a function that takes in a list and a value, and returns a nested list where each element of the original list is appended to the new list, resulting"], [0.15018994939980643, "from itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is to find the sum of all digits returned by a given formula.\ndef dup(variable):\n  if type(variable) == list:\n    variable = variable[:]\n    variable.pop(0)\n    return variable\n  else:\n    variable = variable[:]\n    variable = variable[1:]\n    return variable\n  \n\nThe above function is to return the list with the first element removed. If type is passed, the function returns the"], [0.14980625532361677, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of digits of the Product of base, base^power.\n\ndef friday_years(start, final):\n    \n    \n    \n    \n, 2020, )\n    \n    \n\n    \n    \n    \n    \n2020maxyear, 5)\n[each for ex, min(2020,years), week, 5 in years >= 50,]\n)\n    \n    \n    \n    \nThe above code is"], [0.1492864236892315, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that takes in a base, raised to the power, and returns the sum of the values in the resulting number.\n\ndef list_product(L):\n    return 1 if len(L) == 0 else int(L.pop(0)) * list_product(L)\nThe above code is a function that takes in a list of elements, and returns their product, a recursive approach.\ndef count_doubles(n):\n    number"], [0.14925384748032117, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function that takes in two non-negative integers base and power. It returns an integer - the sum of the digits in the number base raised to the power power.\ndef count_Repeats(txt,k):\n  if txt is None or k is None or k == 0 or txt=='':\n    print(None)\n  else:\n    if len(txt)<=k:\n      print(0)\n    else:"], [0.14783892403994742, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that sums up the digits of the base raised to the power of a given digit eg: power_base_sum(2, 10000) = 1366\ndef input(): return int(input())\ndef power(base, power): return base**power\ndef isZero(number):\n    if number == 0: return True\n    elif number != 0: return False\ndef isNegative(number): return number < 0\ndef isPositive("], [0.14757475856764443, "import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the power of all the digits and sum of digits of a number to the given power, this code is lifted from https://www.geeksforgeeks.org/program-to-sum-of-the-digits-of-the-power-of-the-number/\n\ndef vowel_removal(string):\n    vowel_space_group = \"aeiouAEIOU\"\n    return ''.join([v if"], [0.14729203723807538, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to give the user the power of their base plus the sum of the digits of the resulting raised number.\nFind the biggest consecutive sum of a given list of integers:\n\ndef biggest_sum(li):\n    max_sum,curr=0,0\n    for i in li: \n        curr=max(curr+i,0) \n        max_sum=max(max_sum,curr)\n    return"], [0.14727343589399425, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to raise the base to the power( power ), add all the digits of the resultant number, and return the total sum created by the inbuilt function.\ndef binary_search(number_list, left, right, number):\n    if right >= left:\n        mid = (left + (right -1)) // 2\n        if number_list[mid] == number:\n            return mid\n        elif number_list[mid] > number"], [0.14672261597048913, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\ndef rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function taking two numbers as parameters base and power returning the sum of the digits originating from the result of the power of the base.\ndef even_check(num):\n    if num%2 ==0:\n        return True\nThe above code is a function to check if a number is even or not\n'''"], [0.14585482605874517, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of digits in the given integer raised to the specified power.\n\ndef all_indices(arr, x): \n    return [ i for i in range(len(arr)) if arr[i] == x]\nThe above code is a function to find all indices of a given element in a sorted array.\n\ndef turn_off_the_lights(arr, dim):\n    for i in arr:\n       "], [0.14470861045968497, "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\n\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the sum of unique digits in the powers of the specified base upto the specified power.\ndef find_unique(arr):\n    unique = [i for i in arr if arr.count(i) == 1]\n    return unique[0] if unique != [] else -1\nThe above code is a function to find the element occurring exactly once in the given set of integers.\ndef list_min_max(nums_list):"], [0.1443035899459145, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the the sum of digits of the given power of the given base.\ndef coin_sums(target_sum):\n  \tcoins = [1, 2, 5, 10, 20, 50, 100, 200]\n  \tways = [1] + [0]*target_sum\n  \tfor coin in coins:\n    \t\tfor i in xrange(coin, target_sum+1):\n      \t\t\t"], [0.1441907540293847, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the sum of powers of the base.\ndef odd_numbers(arr):\n  odd_list = [i for i in arr if i%2!=0]\n  if(len(odd_list)<1):\n    return -1\n  else:\n    return max(odd_list)\nThe above code is a function to find the maximum odd value from the given list.\ndef number_plate():\n "], [0.14327156219065298, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of digits of the said power of the said base.\n\ndef sum_of_numbers(list):\n    new_list=[]\n    sum = 0\n    num = ''\n    for i in range(0, len(list)):\n        if list[i].isdigit():\n            num += list[i]\n            if i == len(list)-1:\n                new_list.append"], [0.1424992351444884, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of powers of the base number i.e. x^y = xyy.\ndef find_common(a,b):\n    a_set = set(a)\n    b_set = set(b)\n    if (a_set & b_set):\n        print(\"\\nIntersection : \",a_set & b_set)\n    else:\n        print(\"\\nNo common elements\")"], [0.14242700605910893, "import re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to sum of individual digits of a raised to the power of given a number.https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-15.php\ndef decimal_to_binary(n):\n  while n>1:\n    n=n/2\n    if n== int(n):\n      print(n)\n    else:\n      print(1)\n"], [0.14165534506096855, "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the sum of the power of particular base upto a given power value.\n\ndef fold_paper(width, height, folds):\n    s = (width, height)\n    for x in range(folds):\n        t = (sum(s)/2, max(s[0], s[1]))\n        s = t\n    return s[1]\nThe above code is a function which of calculates the size of"], [0.14151035454070907, "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function which accepts two integers base and power, and returns sum of all the digits of base ^ power.\ndef faltu_function(args, **kwargs):\n    print(type(args))\n    print(type(kwargs))\n    return\nThe above code is the wrapper function which accepts an arbitrary values of the arguments and converts them to tuples and dictionary.\ndef function(n):\n  if n > 5:\n    print(\""], [0.14131187130358583, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is used to find the sum of digits of the number base raised to the power.\ndef findpairs(lst, K):\n    i, j, ct = 0,1, 0\n    while i < len(lst):\n      while j < len(lst):\n        if lst[i] + lst[j] == K:\n          ct+=1\n        j+=1\n      i+=1\n      j ="], [0.14107299016177302, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to take input as a base and power and evaluate the sum of the digits in their values respectively.\nnames = {'Liam': 20, 'Olivia': 30, 'William' : 40, 'James' : 12 }\ndef common_elements_dic(dict1, dict2):\n    x = dict1.copy()\n    y = dict2.copy()\n    result = {}\n    for key, value in dict"], [0.1410399801568226, "def rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find sum of digits of the result of an expression \"base\" raised to the power \"power\".\n\nfrom heapq import heappop, heappush, heapify\ndef sort_k_messed_array(arr, k):\n    heap = arr[:k+1]\n    heapify(heap)\n    for i in range(k+1, len(arr)):\n        arr[i-(k+1"], [0.1405281415307818, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of digits in the base raised to the power.\ndef sum_fifth_powers(num):                                                                                        \n    nums = [int(i) for i in list(str(num))]                                                                     \n    digits_powed = [i ** 5 for i in nums]                                                                     \n    return sum(digits_powed)                                                                               \nThe above code is a"], [0.1404666694851612, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find a sum of digits of the value of base to the power power.\n'''\n\n\ndef happy_prime(n):\n  count = 0\n  n = str(n)\n  n = n.replace('^', '**')\n  n = n.replace('!', '')\n  while count < 50:\n    n = eval(n)\n    print(n, end=' + ')\n    count"], [0.14039646203264242, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\ndef snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the total sum of digits in a given base raised to the specified power.\ndef values_comparison(l):\n    res = [int(i) for i in l[1:]]\n    res = [int(l[0])] + [i for i in res if i<int(l[0])]\n    return res\nThe above code is a function to find and print those numbers from a given list of numbers"], [0.1402362374430698, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to return the sum of digits in the result of base raised to power.\n\ndef fun(li1, li2, l):\n    l=[li1[0] if li1[0]>li2[0]  else li2[0]]+[fun([li1[i] if li1[i]>li2[i]  else li2[i]],[li1[i+1] if li1"], [0.1389348159011792, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of digits of the power of a given base raised to a given power.\ndef word_to_int(word):\n  letter_val = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"H\": 8,\n\"J\": 1, \"K\": 2, \"L\": 3, \"M\": 4,"], [0.13832748895400052, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to return the sum of the digits of a number with the given base raised to the given exponential value.\nnum = int(input('Enter the value'))\ndef func3(num):\n    if num > 0: \n        func3(num // 10)  \n        print(num % 10,end = \"\")\n    else:\n        print(num)\n        \n\u4f9d\u6b21\u8f93\u51fa\u6570"], [0.13809339010202518, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " to find the sum of digits in the base raised to the power\ndef is_abundant_number(number):\n    _sum_proper_divisors = sum(get_proper_divisors(number))\n    return _sum_proper_divisors > number # other way: return not number<sum\nimport requests\nfrom urllib.parse import urlparse\n\ndef get_domain_name(url):\n   "], [0.13808194037997015, "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of digits of the given base power number'.\ndef Xbonacci(signature,n):\n    if len(signature) == n: return signature\n \n    for _ in xrange(n - len(signature)):\n         signature.append(sum([signature[_+i] for i in range(0, len(signature) - _)]))\n\n    return signature\nThe above code is a"], [0.13767195154748796, "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " returns the same signature as that of x**y. But differing in a few things, including the output. If a different base and power are provided, it'll return a different sum of digits.\n\ndef get_word_score(word):\n  l1=['A','E','I','O','U','L','N','R','S','T']\n  l2=['D','G']\n  l3=['B','C','M','"], [0.13673192447378957, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is code to power 'base^power' and then return the sum of digits of obtain the required result.\ndef reverselookup(dictionary, value):\n    return list(filter(lambda k: dictionary[k]==value, \n         dictionary.keys()))\nThe above code is a function to return the key in given dictionary having value equal to the given value.\n"], [0.13625772942180298, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to add up all the individual digits of the exponentiation given base and power\ndef first_under(input_dict, limiting_value):\n  check = False\n  for k, v in input_dict.items():\n    if v == limiting_value:\n      print(\"first found: \"+k)\n      check = True\n  if not(check):\n    print(\"not found\")\nHere we checked if limiting_value (a value"], [0.13625772942180298, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\nimport re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of base to the power.\ndef same_frequency(num1, num2):\n  return sorted(str(num1)) == sorted(str(num2))\nThe above code is a function to check Whether the two numbers contain the same frequency of digits.\ndef find_the_duplicate(arr):\n  mj = max(arr)\n  while mj != 0:   \n    cnt = 0"], [0.13613569361180725, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " takes in a base and power and returns the sum of the given base raised to the power.\n# Scipy is built on 'numpy' objects, (which are multidimensional arrays like 1D,2D or 3D arrays)\nimport scipy.cluster.hierarchy as hier\n# Agglomerative clustering: it is similar to hierarchical clustering but computes all the distances between clusters\n# gradually but forms a tree that is called"], [0.13584389289784674, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that calculates the sum of the digits of a number raised to a given power.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\n The above code is a function that returns the sum of the digits of a number raised to a given power.\nprint('------------task1-------------')\ndef task5_square(base):\n    return pow(base"], [0.13546636722529304, "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a  function which takes a base and power and returns the sum of the digits of the given base power.\n## Part 2\n'''\n1. \nAn updatecuboid is a cust defined class that contains some useful methods like:\nget length: It returns the length of the cuboid.\nget width: It returns the width of the cuboid.\nget height: It returns the height of the cuboid.\nget volume: It returns the volume"], [0.13534139259260775, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " takes in a base and power and print their power_base_sum.\n\ndef recur_factorial(n):\n    if n==1:\n        return n\n    else:\n        return n*recur_factorial(n-1)\nThe above code is a recurssive function that takes in an integer and returns the factorial.\n\ndef recur_colors(l):\n    final = []\n    combinations = ["], [0.13517755413135513, "def last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of power of the digits of a given number.\ndef max_product(num_list):\n    num_list.sort()\n    a=num_list[0]\n    return (a*num_list[len(num_list)-2])\nThe above code is a python function to find the maximum product of all numbers of a given list.\nf = open(\"text.txt\",'r')\nf"], [0.13443039217329583, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to sum up the digits of the result of an integer raised to an exponent.\n\ndef is_anagram(s1,s2):\n    L1=[0]*26\n    L2=[0]*26\n    for i in range(len(s1)):\n        pos=ord(s1[i])-ord('a')\n        L1[pos]=L1[pos]+1\n    for i in"], [0.13407822840717193, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " finds the sum of digits of base raised to the power power.\n\nSample Input:    97, 5\nSample Output:\t      635\ndef multiply(num1, num2):\n zeroes = abs(len(str(num1)) - len(str(num2)))\n if zeroes > 0:\n \tif zeroes % 2:\n \t\tnum_str1 = '0'*zeroes + str(num"], [0.13358787834644703, "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of the digits of base raised the power power.\ndef mantissa(number): \n    x=1\n    while x<number:\n        x=x*10\n    x=x/10\n    return x\n    \nThe above code is a python function to find the mantissa of a given number.\n\n\ndef factors(number):\n    l=[]\n    i=1\n    while(i<"], [0.13340228996050613, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate the sum of the digits of a given base raised to the power of a given value.\n\ndef fact_nk(n, k):\n    res = 1\n    for i in range(k + 1, n + 1):\n        res *= i\n    for j in range(2, n - k + 1):\n        res = res // j\n    return res\nThe above code is a function to calculate the factorial"], [0.13329159338539323, "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\n\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that returns the sum of individual digits of a base raised to a power.\ndef union(a, b):\n    return list(set(a) | set(b))\nThe above code is a function that returns the union of two lists as a list. Order of elements doesn't matter.\ndef print_formatted(number):\n    for i in range(1,n+1):\n        dec = str(i)\n        oct_"], [0.13293487606320592, "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function which takes a base and a power and return the sum of the digits of the numerical value of base raised to power.\ndef gcd(num1,num2,num3):\n    a = num1\n    b = num2\n    c = num3\n    while a != 0 and b != 0 and c != 0:\n        if a > b:\n            remainderAB = a % b\n            if remainderAB == 0:\n"], [0.13233624045032497, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is to find the sum of digits in the value of base raised to power. \ntup=(1,2,3,4)\ntup2=(7,8,9,11)\ndistance between one tupple to another if exist\ndef calculate_k_distance(array,element):\n    return abs(array.index(element) - array.index(element,6))\n\nnumber_count_in_list([6, 13,"], [0.13202871611962558, "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to sum of all the digits in a power of a base where we need to calculate the power of a base.\n\ndef sum_of_two_lowest_positive(numbers):\n    new_list = [x for x in numbers if x > 0]\n    new_list.sort()\n    return sum(new_list[:2])\n\nThe above code is a function for finding the sum of only two lowest numbers in an"], [0.13080308567400561, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of the digits of a power of a given number.\ndef Convert(tup, di): \n    for a, b in zip(tup, tup): \n        di.setdefault(b, []).append(a) \n    return di \nl = [(2,'a'),  (3, 'b'),  (4, 'a'), (7, 'b'), (8, 'c"], [0.13080308567400561, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of the digits of a given power of a given base.\ndef bad_char_freq(pat, alpha):\n\tn = len(pat)\n\tbadChar = [-1] * (alpha)\n\tfor i in range(n):\n\t\tif badChar[ord(pat[i]) - ord('a')] == -1:\n\t\t\tbadChar[ord(pat[i]) -"], [0.13030069384068219, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to get the sum of all numbers present in the given power of the given number.\nimport re \nstr = \"xyz, ABCD, 1234, 0987 \"\nregex = '([0-9]+)'\nmatch = re.findall(regex, str)\nprint (match)\nPython is a program language where the above function helps us to find the number of digits present in the given string.\nimport re \n"], [0.1297442656309989, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of digits of the result of a base raised to the power of the base.\ndef no_add(li):\n  total  = sum(li)\n  res = []\n  No, numel = li[0], 1\n  while 1:\n    if total % 10 == 0:\n      res.append([0, numel])\n      break\n    while (total - No) % 10 != 0 :"], [0.1295823098831551, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is to sum the digits of the given base raised the given power\n    \ndef power_sum(num, pow):\n    return sum(list(map(lambda y: int(y), list(filter(lambda x: x != '', str(num**pow).split('.'))))))\nThe above code is a function to return sum of the digits of the given number raised to the given power\nnum= int(input())\npow_num="], [0.1293688181175807, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of digits from the power of a base number.\n\ndef findTheDifference(self, s, t):\n        return list((collections.Counter(t) - collections.Counter(s)))[0]\nThe above code is a function to find the missing letter of the new string.\n\nclass Solution:\n    def differentSquares(self, matrix: List[List[int]]) -> int:\n        \n"], [0.12895167530910917, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate sum of digits in the given power of the base.\ndef edit_dist(str1, str2, m , n): \n    if m==0: \n         return n \n    if n==0: \n        return m \n    if str1[m-1]==str2[n-1]: \n        return edit_dist(str1, str2, m-1, n-1)"], [0.1283206425070022, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is to find the sum of digits of a base raised to a given power.\ndef sum_of_digits(number):\n    return sum(list(map(int, str(number))))\nThe above code is to find the sum of digits in a given number.\ndef decimal_to_octal(dec): \n    return oct(dec).replace(\"0o\",\"\") \nThe above code is a function to print the octal value of the"], [0.12776253682820896, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of digits of a given base to the power given to it.\ndef first_missing_positive(A):\n  s = set(A)\n  i = 1\n  while True:\n    if i not in s:\n      return i\n    i += 1\nThe above code is a function to find the first missing positive value from a given list of integers.\ndef merge_lists(llist1, llist2"], [0.1276990333974754, "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to caluclate the sum of digits of a number that is raised to a certain number.\ndef calculate_distance(first, second):\n    first1 = first.split(\", \")\n    second2 = second.split(\", \")\n    X = (float(second2[0]) - float(first1[0])) ** 2\n    Y = (float(second2[1]) - float(first1[1]"], [0.1270025760186205, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of digits of a number that is a power of another number.\n\ndef subtract_sum_digits(n):\n  smod = n - sum([int(i) for i in str(n)])\n  return smod\nThe above code subtracts the digital sum of its arguments from its argument and returns the result.\ndef is_negative_power_of_two(n):\n  while n!=1"], [0.12652827150339102, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is to check the sum of digits in a power of a number.\n\ndef binary_to_decimal(binary_inp):\n  revrsd_inp = binary_inp[::-1]\n  decimal_out = 0\n  for i,val in enumerate(revrsd_inp):\n    if val == '1':\n      decimal_out += math.pow(2,i)\n\n  return decimal_"], [0.12647226788566976, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of the base raised to the power.\n\ndef diamond(rows):\n    for i in range(0, rows):\n        print('' * (rows - i - 1) + '*' * (2 * i + 1))\n    for i in range(rows, 0, -1):\n        print('' * (rows - i + 1) + '*' * (2 * (i - 1) -"], [0.12624921065429265, "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " extends any base and returns the sum of base in power of the given base until autonmous.\nimport math \ndef isPerfect(num):\n    fact = []\n    for i in range(1, int(math.sqrt(num))+1):\n        if num % i == 0:\n            fact.append(i)\n            if num/i != num:\n                fact.append(num//i)\n    return sum("], [0.12615323962938185, "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of power of each digit of base number to the power.\nclass Test(object):\n    def assert_equals(self, left, right, text = None):\n        if left == right:\n            print('Passed \\t\\t %s' %text)\n        else:\n            print('Failed \\t\\t %s' %text)\n    def assert_true(self, boolean_value"], [0.1257711225397517, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of digits if the base raised to the power.\n\ndef remove_dup(test_list):\n    \n    res = ''\n    for ele in test_list:\n        if ele not in res:\n            res += ele\n    \n    return res\nThe above code is a function remove duplicates from the list.\n\ndef count_digits(num):\n    return len(str(num))\nThe"], [0.1257711225397517, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to sum of the digits of the given number to the power of a power digit.\n\ndef combination(n, r):\n    return factorial(n)/(factorial(r)*factorial(n-r))\nThe above code is a function to return the factorial of get_factorial(n) divided by factorial(r) multiplied by factorial(n-r)\n\nThe code below is cool. So I didn't write"], [0.1256208952326658, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function that takes in a base and a power, then returns the sum of digits formed after taking the exponent.\ndef print_pattern(n): \n    for i in range(1, n + 1): \n        for j in range(i): \n            print(n - j, end = \" \") \n        print() \nThe above code is a python function to find the required pattern by summing the previous row's pattern."], [0.12547461743839441, "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\n\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of integers in power of given base.\n\ndef return_array(no):\n    odd = []\n    if no == 1:\n        l = [int(no**2 -no +1),int(no**2 -2*(no-1)),int(no**2 -3*(no-1)) ]\n        b = [x for x in range(l[0],l[1]+1)]"], [0.1252716601020214, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the power of the base, then it returns the sum of the digits.\ndef ascii_sum(string):\n    index = 0\n    sum_index = 0\n\n    while index < len(string):\n        sum_index += ord(string[index])\n        index += 1\n\n    return sum_index\nThe above code is a function that returns the sum of the ASCII of each character in the word (wow). \n"], [0.12509595764633222, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is function to find the sum of power of a number equal to given power.\nclass rectangle():\n    def __intit__(self,breadth,length):\n        self.breadth=breadth\n        self.length=length\n    def method_area(self):\n        return self.breadth*self.length\nArea is not computed, syntax error.\nclass rectangle():\n    def method_area(self, breadth, length)\n       "], [0.12466393480040613, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\nimport math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of the digits of the required base raised to the power.\ndef Sum_Implementation(a, b): \n    sum = 0\n    carry = 0\n    #define int var as names\n    while a != 0 or b != 0:\n        sum = (a&b)%10 + carry\n        a = a >> 1\n        b = b >> 1\n        sum = sum >> 1\n        carry ="], [0.12409984335942473, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of digits of a powered number.\ndef what_is_in_a_name(collection, source):\n    return list(filter(lambda item: not all(i in item.values() for i in source.values()), collection))\nThe above code is a function to calculates intersection of two given dictionaries and keeps the \nintersection the same.\ndef list_manipulation(lst,cty,val"], [0.12345728945522301, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", ", returns the sum of all the digits in a number, base ** exp where base is an integer, exp is a positive integer POW is implemented by Python.\ndef square(x):\n    return x * x\n\ndef main():\n    for i in range(10):\n        print(\"Square is:\", str(i), \"is\", square)\nif __name__ == \"__main__\":\n    main()\nThe above code is the implementation of Python"], [0.12319583109432108, "def Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of the digits of a number raised to the power of another.\n# Map function\na = arr.map(lambda x : 3*x)\n# add function\na = arr.add(2)\n# flatMap function\na = arr.flatMap(lambda x:[1,1,1])\n# A reduce() function which calculates the addition of all the elements in a list.\ndef add(a,b"], [0.12268747822530737, "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to return the sum of the digits in a number after raising it to the power of another number.\ndef factorial_num(num):\n  if num == 0:\n      return 1\n  elif num < 0:\n      return None\n  else:\n      return num * factorial_num(num-1)\nThe above code is a function to calculate a factorial of a number.\ndef binary_conversion(dec):\n"], [0.12240969590780382, "import cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of the given number\ndef sum_of_powered_digits(number, power):\n    if number < 0 :\n        return None\n    try:\n        return sum([int(i)**power for i in str(number)])\n    except:\n        return None\nThe above code is a python function to find the sum of digits of a number raised to a given power.\ndef is_perfect_cube("], [0.12151891264490215, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to compute the sum of digits powered with the given base.\ndef string_letter_count(s): \n  a = s.lower().split(s[filter(str.isalpha, s)][1])[0]\n  return ''.join([x*a.count(x) for x in set(a)])\nThere are two parts to this function.\nA, which is a function filter() and B, which"], [0.12149920264630414, "import re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is returning the sum of a base raised to power list.\n\nsums=0\nfor char in expression:\n    if(char.isdigit()):\n        sums=sums+int(char)\nprint(sums)\nThe above code is returning the sum of digits in an expression.\n\ndef string_alternative():\n  print(raw_input()[::2])\n  return\nThe above code is printing only the even positioned"], [0.1213755529335118, "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " does the following:-\n  1. it gets the base: No of times a number i.e. base is repeated upto the powerth power, eg base would be 3 and power 10, that means 3,4,5,6,7,8,9 and 10 would be repeated in the powerth number.\n  2.then the sum of elements of the above gotten list is returned.\ndef Fun_name(num):\n      n=str(num"], [0.12074380280537804, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that returns the sum of each individual integer in a string of numbers, e.g. 2930 in 2930 = 2+9+3+0+2 = 16\nAbout the same problem\n\nNaN\n\ndef get_min_max(ints):\n    \"\"\"\n    Return a tuple(min, max) out of list of unsorted integers.\n\n    Args:\n       ints(list): list of integers containing one or more integers"], [0.12024264970750931, "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \nThe above code is a function to determine if the sum of the divisors of two integers are the same.\n\ndef flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that returns the power of a given base to a given power.\ndef task_scheduler(tas):\n    li = [int(i) for i in tas.split()]\n    while len(li) > 0:\n        first_data = li.pop(0)\n        diff = 360 - first_data\n        task = \"tiger{}\".format(diff)\n        time_length = diff + 20"], [0.11994152694225463, "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " uses python functions sum(), list comprehension and int() to find the sum of the power of base.\n\ndef minimum_distance_sort(arr): \n    # Sort all element and get MIN  \n    smallest = min(arr) \n    arr.remove(smallest) \n    newArr = [] \n  \n    # Traverse the array and get  \n    # element whose value = MIN \n    for item in arr: \n"], [0.11950434333420008, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is to find the sum of digits in value of base raised to the power.\nimport re\ndef mirror_string(str1):\n    return re.sub('([a-z])', lambda m: m.group().upper(), str1) + re.sub('([A-Z])', lambda m: m.group().lower(), str1)\nThe above code is to construct a mirror image of given string.\n\nimport re\ndef remove(str"], [0.11950434333420008, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of digits in base raised to power of digits in base.\n\ndef ghost(word):\n    word_len = len(word)\n    word1 = word[:word_len // 2]\n    word2 = word[word_len // 2:]\n    for i in range(word_len // 2):\n        if word1[i] != word2[i]:\n            return False\n    return True\n"], [0.11950434333420008, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate and return the sum of each digit in the given number.\ndef third_greatest(num):\n    num = sorted(num, reverse=True)\n    return(str(num[2]) + \" \"+str(num[2]) +\" \"+str(num[2])) \nThe above code is a python function to find 3rd greatest number in given length of numbers.\ndef buff_bad(str1):\n "], [0.11906031462363396, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function that returns the sum of digits of base num^power.\ndef nearest_palindrome(number):\n    number += 1\n    s = str(number)\n    for i in range(len(s)//2, 1, -1):\n        s = s[:-1]\n    return number\n\nThe above code is a python function to find the nearest palindrome whose difference from given and earlier number . Function should return None"], [0.11906031462363396, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is to find the sum of digits of a power of the given base number.\ndef recur_factorial(num):\n    if num == 0 or num == 1 :\n        fact = 1\n        return fact\n    return num * recur_factorial(num-1)\nThe above code is a recursive function to find the factorial of a given number.\ndef binary_sum_recur(a,b):\n    if b == 0:"], [0.11885557413053151, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to return the sum of the number list which contains the digits in the given base raised to the given power.\n\ndef list_product_even():\n    \n    \n\nThe above code is a function to return the product of the numbers from m to n which are divisible by 2.\n\ndef clean(arr):\n    return arr.replace('$','').replace('!','')\n'The above function Splits the string by"], [0.11864029944252273, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " uses an in-built python function pow() to find the power of a number and then the built in reversed() function to reverse the number before using the above function to calculate the sum of its digits ( for example, in the case of 9^7: pow(9, 7) is calculated as 1534 , and then reversed as 513 and after adding each digit, we get 1534+1+3+3 = 1544).\nPython script to print the first N triangular"], [0.1184907087831953, "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\n\ndef convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find a base to the power sum as a result.\n----------\nimport re\ndef vow_cons_count(sentence):\n  c, v = 0, 0\n  for i in str.split(sentence.decode(\"utf-8\").lower()):\n    if re.match(\"[aeyuio]\", i): v += 1\n    elif i in \".;:,?!-\" : c, v = c,"], [0.11835761498831165, "def even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function where we have to demonstrate our understanding of nested functions. In this function named power_base_sum, we have defined two nested functions one is named inner_fun,another is outer_fun. Here the inner_fun is a lambda expression that returns the sum of the digits of base ^ power.  \ndef olympic_codes(ListOfGames, ListOfResults):  #Please note that ListOfGames consist of two individual lists. So, this function"], [0.11785638632426934, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to generate the sum of digits in the integer square.\n\nfrom itertools import groupby\ndef group_equal(els):\n    return list(zip(*[(k,sum(1 for i in g)) for k,g in groupby(els)]))\nIn Python,Groupby method helps to group similar data in to dictionary as key + value pair.Eg. [[1,2,3,4],[2,2,2"], [0.11784285626251764, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the the sum of the digits of a number to the power of another number.\ndef encrypt(plain):\n    # we encrypt n - 1 plaintext digits and are left with the last digit\n    # which we keep.\n    return ''.join([chr(int(d) + 97) for d in plain.split()])[:-1]\nThe above code is a function to encrypt a message being sent by Julius Caesar. He"], [0.11763370843891982, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " returns the sum of all the integers in a given number.\ndef gcd_iter(a, b):\n    ans = 1\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n    for i in range (1, smaller+1):\n        if((a % i == 0) and (b % i == 0)):\n            ans = i\n    return ans\nThe above code uses a loop to find"], [0.11679984316989388, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of digits of a given base to the given power.\u200b\n\u200b\n\"\"\"\n\n\"\"\"\nThere are undoubtedly a good number of problems that require info from the Fibonacci sequence. \nSquare-free numbers are unique in that they don't share many properties that the Fibonacci sequence shares with other integers. \nEven numbers, though also not unique in certain properties, have more properties that make using the Fibonacci sequence less helpful."], [0.1167392685297368, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of digits in a base raised to a given power.\ndef prime_eratosthenes(n):\n    prime_list = []\n    for i in range(2, n+1):\n        if i not in \n         \nJoining List Elements with Character:\n\ncharacter_list = ['P', 'y', 't', 'h', 'o', 'n']\nword = ''.join(character"], [0.1167392685297368, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to add sum of every digit of a given power of a base number.\ndef sum_of_numbers_in_string(test_str):\n    return sum([int(i) for i in re.findall('\\d+', test_str)])\nThe above code is a function to find sum of all numbers within a string by regular expression.\n\ndef second_biggest(test_list):\n    try:\n       "], [0.1167392685297368, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " will give the sum of a raise number to the power n. n=13 in the above condition, will give 1+0+4 = 5\nFibonacci series for the range of 1 to 1000\na=0\nb=1\nfor i in range(1,10):\n    c=a+b\n    a=b\n    b=c\nprint (c)\ndef find_FPT(n): \n    total = 0\n"], [0.11616457517444317, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to calculate digit sum of a number, given base and power. \n\ndef int_to_Roman(num): \n    val = [1000, 900, 500, 400,  \n        100, 90, 50, 40,  \n        10, 9, 5, 4,  \n        1] \n    syb = [\"M\", \"CM\", \"D\", \"CD\",  \n        \"C\", \"XC\", \"L"], [0.11613141266144308, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of base ^ power.\n\ndef matrix_addition(mat1, mat2):\n    return [[sum(row) for row in zip(*t)] \n                for t in zip(mat1, mat2)]\nThe above code is a function to add two matrices.\ndef three_sum(num):\n    import itertools\n    res_tuples = set()\n    n = len(num)"], [0.11605766680487133, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to compute the sum of digits in base raised to power.\n\ndef descending(arr):\n    return all(x>y for x, y in zip(arr, arr[1:]))\nThe above code is a function that returns True if list is descending, False otherwise, in one line logical expressions.\n\nGood tutorial on list comprehensions in Python\n\ndef descent(arr):\n    arr = [i == j for i,j in zip"], [0.11566858071291396, "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of power of integers in based number when exponent is given power.\n\ndef print_cubes(n):\n        for w in range(1, n):\n                yield w**3\nThe above code is a function to print cube from number 1 to n. \ndef print_calendar(month):\n        import calendar\n        calendar.setfirstweekday(firstweekday=6)\n        y=2019\n       "], [0.1150588182961227, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of a base raised to the power of a given base.\ndef power_sum(base, power):\n    if power == 1: return base \n    return base**power + power_sum(base, power-1)\nThe above code is a python function to find the sum of a base raised to the power of a given power.\ndef word_split(phrase,list_of_words,output = None):"], [0.11503244860824628, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of the the base raised to the power to the given power.\ndef fibbonaci(n):\n    count = 0\n    a = 0\n    b = 1\n    c = 0\n    while True: \n        c = a + b \n        a = b \n        b = c\n        count += 1\n        if count == n:\n            break\n    return a\nThe above code is a"], [0.11502852915743186, "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is function to find the sum of powers of their digits.\ndef get_all_substrings(string):\n  length = len(string)+1\n  return [string[x:y] for x in range(length) for y in range(length) if string[x:y]]\nThe above code is a function to extract all subtrings of a given string.\ndef find_longest_word(lword):\n    return max(len"], [0.11467348581441478, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to return the sum of the digits of base raised to the power power.\na, b, c, d, e, f, g, h, i, and j. Please print 'absent' if any person is not present otherwise print 'not-changed' for any number of parameter presence not equal to nine else print the alphabet associated with the person at that index if the present parameter is true. Please print 'same', if the transferred control was originally associated"], [0.1146645814260494, "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\n\ndef is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to sum the digits of a number raised to the next power.\ndef comparator(s1, s2):\n    if isinstance(s2, str) == False:\n        return -1 \n    s2_split = re.split(r'[^a-zA-Z]', s2)\n    if (s1.upper() in s2_split):\n        return -1\n    else:\n"], [0.11413116437615851, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " converts a given base to the sum of digit of its power.\n"], [0.11398540526237333, "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to add all the digits of a number raised to the n power.\n"], [0.11397553532995731, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that return the digit sum of a given number of power.\ndef num_buses(n):\n  import math\n  return math.ceil(n/50)\nThe above code is a function to find the number of buses required for a group of people depending on the number of people.\n\ndef prime_sum(x):\n  sum1 = []\n  for j in range(x+1):\n    if j>1:"], [0.11394268102107248, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function that returns the sum of digits in the result of a^b. \ndef split_and_join(line):\n    return \"-\".join(line.split(\" \"))\nThe above code is a python function to split the string of a list, containing multiple words and return a string containing all the words in the sentence in the form of a list and separated by a hyphen. \ndef print_even(s):\n    return [c"], [0.11374084517747092, "def check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that generates a list containing the digits from the pow of given power.\nimport itertools\ndef product_except_self(nums):\n    res = list([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    left = list(itertools.chain(*[i for i in itertools.combinations(res, 3)]))\n    print(left)\n    right = left[:]"], [0.11372016662309538, "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that returns the sum of base^power.\ndef checksum(numbers):\n    return sum(numbers) % 11\nThe above code is a function to calculate a check digit for numbers where the checksum is the last digit. If the number is a string, convert each digit to a integer before applying the function.\ndef digit_sum(n):\n    total = 0\n    while n > 0:\n        total += (n % 10"], [0.1131050809833756, "def add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that basically powrs a base number 'base' and adds the individual digits raised to the power of \n'power'\ndef binary_array_to_number(arr):\n    return int('0b' + ''.join(map(str, arr)), 2)\nThe above code is a function that converts a binary array to an integer. For example, [1, 0, 1, 1] is 11, which is 3 in \ndec"], [0.11274637869079909, "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of the digits in an integer.\n"], [0.1122650385025686, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to get the sum of digits of an integer supposed to be the result of a power operation.\ndef nth_root(radicand, n):\n    return round(radicand ** (1 / n))\nThe above code is a python function to take the nth root of a number.\ndef anti_vowel(text):\n    newstring = \"\"\n    vowels = ('a', 'e', 'i', '"], [0.11216164028752432, "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\n\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python script to find the sum of powers of individual base elements.\n\ndef power_base_sum_loop(base, power):\n    r = list(range(1,power+1))\n    s = 0\n    for i in range(1,power+1):\n        s += base**i\n    return s\nThis script is a recursive function to find the sum of powers of individual base elements.\n\ndef factorial_loop("], [0.11198913916614049, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " iterates through the powers of 2 until it reaches the input argument, returning the sum of the digits in each power of 2. E.g. 2^5 returns 2^4 =16 =1+6 = 7. The sum of the digits = 7.\ndef div_7not5(start,finish):\n    return [(i,j)for i in range(start,finish)for j in range(start,finish)if i%7"], [0.11131294860547947, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find summation of powers of number.\ndef power_of_2(n):\n s = 0 #when I see all the digits of a number, I think  \"oh, it must be the sum of its divisors, if I could only find them.\" \n while n > 0: #That's what I do, sum the divisors = sum of the powers of 2, excluding myself.\n  if n % 2 == 0"], [0.11115918031599581, "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is called power_base_sum which returns the power of given base and power.\ndef filter_lucky(nums):\n  res = filter(lambda x: x%10 == 7, nums)\n  return list(res)\nThe above code is Filter out the lucky numbers from a list of nums.\nThe filter() method filters the given sequence with the help of a function that tests each element in the sequence to be true or not.\ndef"], [0.11089592930304822, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of digits in the number conrresponding to given base and power.\ndef leap_year(year) : \n    if year % 4 == 0 and (year % 400 ==0 or year % 100 != 0) : \n        return True\n    else : \n        return False\nThe above code is a function to find whether a given year is a leap year or not.\ndef adding_string(str) : "], [0.11071494004718942, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\nThe above code is a python function to remove odd numbers from a given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of digits powered with its respective digits.\ndef deepest_node(root):\n    if root == None:\n        return 0\n    return depth_of_node(root, 1)\n    \ndef depth_of_node(node, level):\n    if node == None:\n        return level - 1\n    return max(depth_of_node(node.left, level + 1), depth_of_node"], [0.11058903302550109, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that returns each no. of a power of a given base as summed number.\n\ndef compress(text1):\n  res = \"\"\n  leng = len(text1)\n  count = 1\n  res += text1[0]\n  for i in range(1,leng):\n    if text1[i] == text1[i-1]:\n      count += 1\n    else:\n      res += str(count"], [0.11054245142721293, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function power_base_sum which return sum of the base-digits in the given power of the base. \ndef same_diff_line(lines):\n    firstline = lines[0].split()\n    mainlist = []\n    b_num = len(firstline)\n    for i in lines:\n        k = len([a for a, j in zip(firstline, i.split()) if a == j])\n       "], [0.11049379870060716, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the sum of digits of a number base^power.\ndef squareroot(n):\n  res = n\n  LIM = 5 * math.e ** (-5)\n  while abs(res * res - n) > LIM:\n    res = (res + n / res)/2\n  return res\n  The above code is a function to find the square root of a number.\ndef sum_3digits(number): "], [0.1102129514623363, "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\n\ndef Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of base raised to the power power.\nWhat is lazy evaluation in Python? Write a code snippet with syntax, which when executed will \ndisplay the first 20 elements in the Fibonacci sequence.\n\n# First 20 elements in Fibonacci Sequence\ndef fib():\n    a, b = 0, 1\n    for _ in range(20):\n        yield b\n        a, b = b, a + b\n\n"], [0.10970963772471443, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python program to calculate all the digits raised to the power of range of the given integer.\n\ndef gcd_of_strings(str1, str2):\n  shortest = str1 if len(str1) < len(str2) else str2\n  longest = str1 if len(str1) >= len(str2) else str2\n  for i in range(len(shortest)):\n    if shortest[i] !="], [0.1092199317908285, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of the given numbers after finding their powers and converting them into strings.\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\nThe above code is a python function to find the factorial of a number using recursion.\ndef odd_nums(nums):\n    count = 0\n    for i in range(len(nums)"], [0.10870364429030124, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function that uses **kwargs. **kwargs allows one to pass keywords to functions.\ndef sort_test_score(test_score = [('2005-06-01', 12),(\"NA\", 0),(\"NA\", -11),(\"ai\", 13)]):\n    return sorted(test_score)\nThe above code sorts a list of values by the second entry in the value.\ndef square_dict(s_dict = {2 : 3"], [0.10862593118917313, "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the digit sum of power of the base.\n\ndef video_stitching(clips, T):\n    clips = sorted(clips, key = lambda x: (x[0], -x[1]))\n    idx, end, times = 0, -1, 0\n    while idx < len(clips):\n        if times >= T: break\n        if clips[idx][0] > end: return -1"], [0.10859948719400718, "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to calculate the summation of digits of base raised to the power.\n\n( def find_email( s ):\n  # Enter your code here\n  import re \n  l = re.split(',|\\.',s)\n  res = []\n  for email in l:\n      if '@' in email:\n          res.append(email)\n  return res)\nGiven a string representing a word, write a"], [0.1085738145675878, "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to execute 1st and 2nd number & return to third number within base and power.\n'''"], [0.10789216312586379, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to sum the digits in a given power of a base number.\n\ndef move_zeros(list_a):\n    while 0 in list_a:\n        list_a.remove(0)\n    l = len(list_a)\n    for i in range(0, l):\n        if list_a[i] == 0:\n            list_a.insert(i, 0)\n    return list_a\n"], [0.1077170303517099, "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\n\ndef count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to return the sum of digit of base raised to powers.\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\nThe above code is the simple implementation of prime number code.\n\nfrom statistics import median,mean\nfrom math import sqrt\ndef simple_standard_deviation("], [0.10753798318935934, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to determine the sum of each digit in a number. \ndef fibonacci(up_to, seed1=0, seed2=1):\n    result = [seed1, seed2]\n    a, b = seed1, seed2\n    while a + b < up_to:\n        a, b = b, a + b\n        result.append(b)\n    return result\nThe above code generates a fibon"], [0.10554851548006429, "import re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to evaluate power digit sum of a given base number raised to a given power.\ndef maximum(n1, n2, n3):\n    n1=str(n1)\n    n2=str(n2)\n    n3=str(n3)\n    max_num = max(n1,n2,n3)\n    if n1 == max_num :\n        return n1\n    elif"], [0.10480799923716644, "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to calculate sum of digits in a power of a number.\ndef Unusual_sort(a_list):\n    n = len(a_list)\n    i = 0\n    while i != n:\n        if (len(str(a_list[i])) < 2):\n            a_list.pop(i)\n            n = n - 1\n            continue\n        a_list[i] = list(str"], [0.10445330378285174, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a funtion to calculate sum of digits, for the given number and its power.\n\nNOTE: - All the Python exercises are contributed as a Staff.\n    Repo link:\n    https://github.com/rajk2277/python_portfolio\n    repo link: https://github.com/tingabuss/python_portfolio\n\nInformations are provided above the funtions by question.\nAll the questions are test on Python 2"], [0.10308533002699703, "def toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function which takes base, power and returns sum of powers of every digit.\ndef mxdiflg(a1, a2):\n    if not a1 or not a2: return -1 \n    return max([(max([len(x) for x in a1]) - min([len(x) for x in a2])), \n                (max([len(x) for x in a2]) - min([len("], [0.10287629487564084, "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " returns the sum of each digit in a given base raised to a given power.\n'''\n\n\n\n'''\n#2)\nget_lhs(red, green, blue):\nred_blue = red + blue\nred_green = red + green\ngreen_blue = green + blue\nmake_int = lambda x,y: x+y\n\nlhs = (red | blue) - (red & blue)\n'''\n\n''"], [0.10269309709926884, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to add those numbers in the given base raised to the given power.\ndef repfree(s):\n    \"\"\" Check if there arerepeated elements in a string.\n    >>> repfree(\"abcd\")\n    True\n    >>> repfree(\"aabcd\")\n    False\n    >>> repfree(12345)\n    True\n    >>> repfree([\"aabcd\"])\n    False\n\"\"\"\n\n    if type(s)"], [0.10190441232634943, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to find the power of the mentioned base number by summing of its digits.\ndef fifth_powers_sum(number):\n    return sum([int(x) ** 5 for x in str(number)])\ndef alt_nabs(n):\n  return sum([(i + n // i) * (i - n // i) for i in range(1,(int(n**0.5) + 1)) if n %"], [0.10158603108858359, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to sum of digits of n raised nth power.\ndef greatest(a, b, c): \n  \n   if (a >= b) and (a >= c): \n       largest = a \n   elif (b >= a) and (b >= c): \n       largest = b \n   else: \n       largest = c \n  \n   return largest \nThe above code is a python function to find"], [0.1014673762831643, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to compute the sum of the digits for given two numbers. \nYou are given a string . Suppose a character '' occurs consecutively  times in the string. Replace these consecutive occurrences of the character '' with  in the string.\n\nFor a better understanding of the problem, check the explanation.\n\nInput Format\n\nA single line of input consisting of the string .\n\nOutput Format\n\nA single line of output consisting of the modified string.\n\n"], [0.10140344204905129, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to that return a sum of the digits in an integer.\ndef detectlimit(number):\n   INT_BITS = 32    \n   limit = True     \n   out = 0       \n   while (number > 1):\n       number = number >> 1\n       out += 1\n   if (out <= INT_BITS):\n       limit = False\n   return limit       \nThe above code is a function to find the no of digits left at"], [0.10050189870778674, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to add the digits of a number obtained by the power of another number.\n\nclass Solution(object):\n\tdef getSkyline(self, buildings):\n\t\tif not buildings: return []\n\t\tlst = sorted([(L, -H, R) for L, R, H in buildings] + list(set((R, 0, None) for _, R, _ in buildings)))\n\t\tres, heap, pre ="], [0.10050189870778674, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to add the digits of a given integer raised to the power of given second number.\nThe code is not optimized yet.\nimport functools\nfrom functools import reduce\n\ndef product_of_array(M, k):\n    \"\"\"M%2 * k/2 * M[0]%2 * k/2 * M[1]%2 * k/2 * ... , M[0]%2 ==0, M"], [0.10020694630967818, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to perform the basic sum operation. It returns the result in integer format.\nimport pandas as pd\ndf = pd.read_csv('CommonData_CSV_TechM_Enriched.csv', index_col=0)\ndf.assign(**{\n    'GVI/VPP': lambda _: df['GV([QG]P'],\n}.items())\nThe above code is a function to assign a"], [0.09942093992272814, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to determine sum of digits in the number raised to a given power.\nNote: The code is a one liner operation, so i have added and explained each line for the better understanding of code.\n\n# **1.2. Write a program to reverse a string.**\n# \n# Input format :\n# \n# Enter a string : greenfox\n# \n# Output format :\n# \n# reverse of greenfox is: k"], [0.09890684270068889, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find the sum of powers of a given integer.\na = int(input(\"Enter a number: \"))\nfact = 1\nfor i in range(1, a + 1):\n    fact = fact * i\nprint(\"Factorial of \", a, \" is : \", end=\"\")\nprint(fact)\nThe above code is a python function to find the factorial of a given number.\ndef every_other_digit_rem"], [0.09767287537560389, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to return the calculated of base^power.\u2211aibit (pow(base,power)).\n\ndef my_function(m, s=0, e=0, w=0):\n  m = int(m)  \n  return [[\" RIGHT\", \"LEFT\"], [m, abs(m)][e > 0], [m - abs(m), abs(m) - w][abs(m) - abs("], [0.09690306012043975, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to sum an integer raised to a power by the same base.\ndef isLucky(n):\n    n = str(n)\n    split = len(n)//2\n    part_one = n[0:split]\n    part_two = n[split:len(n)]\n    n = n[0]\n    for p in part_one:\n        l_digit_part_one = int(p)"], [0.09686769621247962, "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\n\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to add the squares of the each digit of a power number. \n\ndef count_letters(word,letter):\n    return sum(i==letter for i in word)\nThe above code is the function to count the letter in the given word.\n\ndef Cartesian_product(list1, list2):\n    return [(i,j) for i in list1 for j in list2]\nThe above code is a function to check"], [0.09641108972075735, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to return the sums of bases and powers of a integer/float as strings.\nimport re\ndef tokenize(text, types):\n    typetoken = \"\"\n    for m in re.finditer(types, text):\n        typetoken += ('%d-%d: %s ' % (m.start(), m.end(), m.group(0)))\n    return typetoken\nThe above code is a function to to"], [0.0949886027395558, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " returns the sum of digits in the given number x raised to the given number y.  \n#my solution that works.\n\ngiven_list = ['08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08'.split(), \n'49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00'.split(), \n'81 49 31 73 55 79 14 29 93 71 40 67 53 88 30"], [0.09481201639761283, "def split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find sum of digits in the power of any base.\n\ndef powers_of_two(num):\n  for x in range(num):\n    list1 = [2**i for i in range(x)] \n    yield list1\nThe above code is a python generator function which yields multiple power of two numbers up to a given number.\n\ndef make_dict(list1, list2):\n  zip_list ="], [0.0945933435565966, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function to sum up individual digits in a power of a number for example if we pass\nbase = 2, power = 15, then we sum up 1 + 7 = 8\nimport re\nnum = re.compile('[0-9]')\ndef sum_digits(str1):\n    if (str1.isdigit()):\n        return sum([int(i) for i in str1 if i.isdigit()])\n"], [0.09403324522053291, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function which will return the power digit sum of given base raised to a certain power.'''\ndef isPalindrome(n):\n    revert = 0\n    temp = n\n    while(n > 0):\n        a = n%10;\n        revert = (revert*10)+a\n        n = n // 10;\n    return revert == temp\n\ndef generate():\n    stng = \"1023\"\n    print ["], [0.09403324522053291, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find base raised to power sum .\ndef insert_end(str):\n    sub_str = str[-2:]\n    return sub_str * 4\nThe above code is a python function that returns a string made of its first two characters three times.\n\ndef num_spl_char(str): \n  \n    special_char = False\n    digit = False\n  \n    for i in range(len(str)"], [0.09310001305368823, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " returns the total of digits of the calculated power of the given numbers\n"], [0.09059145199201835, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python function to find sum of base powers.\n# Python3 code to demonstrate  \n# to map values of two lists  \n# using list comprehension \n  \n# initializing lists \ntest_list1 = [1, 4, 5, 6] \ntest_list2 = [4, 5, 6, 7] \n  \n# printing original lists  \nprint (\"Original lists are : \" + str(test_list1) +"], [0.09054908455143902, "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " slices the given number into digits and then converting it to integers and returning their sum.\ndef reverseWords(Input): \n    \n    InputWords = Input.split(\" \") \n    \n    InputWords=InputWords[-1::-1] \n \n    output = ' '.join(InputWords) \n    \n    return output \nThe above code is the most straight-forward version that comes to mind when thinking about reversing the words in"], [0.09032644823989493, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a function for addition of digits of a given number base raised to a power.\ndef get_distinct_elements(lis):\n    return list(set(lis))\nThe above code is a function to find distinct elements in a list.\n\nQ:You have a list of n integers, where each value represents number of chocolates in a packet. All packets are kept in a line.\n'You can perform two operations on this packet line - swap"], [0.08895862409230779, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is a python program to sum the integers in a string of a number.\nPivot word puzzle 2:\n    Can you think of something that asks a tough recursive question?\n    After pondering, you come up with a idea to use some code to determine whether a string is a \u201cpivot word.\u201d\n    Your challenge is to solve the problem in Python. We have gone ahead and made you a function to get you started called pivotEnds(word),"], [0.07029328127243227, "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " sums up int(i) for i in string format of pow() of a base n^k power.\n\n\n\"\"\""], [0.05993964146167729, "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code", " is to sum of the given digits of a number.\n"]]}
