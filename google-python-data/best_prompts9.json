{"prompt": {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 115, "prompt": "Write a function to check whether all dictionaries in a list are empty or not.", "code": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit", "test_imports": [], "test_list": ["assert empty_dit([{},{},{}])==True", "assert empty_dit([{1,2},{},{}])==False", "assert empty_dit({})==True"]}, "queries": [[0.6129933495602269, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether the remaining elements in a list are empty or not\n\n"], [0.5894989336652584, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all the dictionary keys in a list are empty or not.\n"], [0.5784007158003035, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if all the dictionaries in a list are empty or not.\n'''"], [0.5476241582979693, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find whether all dictionaries in a list is empty or not.\n\t\n\n'''"], [0.5272449713272812, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether all the dictionaries in a given list is empty or not.\n"], [0.4043233772883337, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a dictionary is empty or not.\n"], [0.38671802232885943, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function in Python to check if all the dictionaries in a list are empty.\n"], [0.3481234182915915, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether all dictionaries in a list are empty or not.\ndef to_camel_case(text):\n return ''.join(x.capitalize() or '_' for x in text.split('_'))\nThe above code is a python function to convert a string from snake_case to camelCase.\ndef diamond(number):\n  h=number-1\n  for i in range(1,number+1"], [0.34780980553756313, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all the dictionaries are empty or not in a list.\n"], [0.3397594401751938, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether all the one's and zero's are in the same order from the given input.\n"], [0.332572105286365, "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a given dictionary list or not an empty dictionary list.\n'''"], [0.33093991355390623, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether a dictionary is empty or not.\n'''"], [0.32884522371753877, "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\n\ndef list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to return the checks whether all dictionaries in a list are empty or not .\n}\ndi = { \"Divya\"  :    True,\"Tanagra\" : False}\ndi\ndict1 = {'Ten':10,'Twenty':20,'Thirty':30}\ndict2 = {'Thirty':30,'Fourty':40,'Fifty':50}\ndictionary = dict1.copy()\ndictionary.update(dict2)\n"], [0.3254304885456316, "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a given list is empty or not.\n"], [0.3254304885456316, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether a dicionary is empty or not.\n\n\n            \n"], [0.3165188394203927, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to determine if all the dictionaries in a list are empty\nimport re\ndef find_matches(*args):\n  list1=args[0]\n  list2=args[1]\n  matches=(re.findall(r'\\b(?:%s)\\b'% '|'.join(list1),' '.join(list2)))\n  matches2=len(matches)\n  return (matches2)"], [0.31568175926048936, "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\n\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether the dictionary contains empty or not.\n"], [0.3065945312580015, "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if all the dictionaries in a list are empty or not.\n\ndef list_concat(list1,list2):\n    concatList = list1 + list2  \n    return concatList\nThe above code is a python function to concatenate the given lists.\n\n"], [0.30119789884689885, "def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether all dictionaries in a given list are empty or not. \t\ndef add_list(list1,element,position):\n  list1.insert(position,element)\n  return list1\nThe above code is a function to insert an element into a given list at a specified position.\ndef list_contain_element(list,element):\n  return any(elem == element for elem in list)\n"], [0.2993940650755787, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether all the dictionaries in a list are empty? https://www.geeksforgeeks.org/python-check-for-empty-dictionary/\n\ndef panda_bikeshed(stolen_bikes, A=2500, B=1500, C=1100, D=700, E=350):\n return min([A if list1 else E for list1 in stolen_bikes])\nThe above code is a"], [0.2810948300395591, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all the elements in the list are empty or not.\ndef a_scramble(str_1,str_2):\n    sec_word=str_2.lower()\n    sec_word=set(sec_word)\n    for char in sec_word:\n        if char in str_1.lower():\n            str_1=str_1.lower().replace(char,'',1)\n            sec"], [0.27854844066369594, "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a list has only empty dictionaries and returns whether all dictionaries in a list are empty or not.\n\ndef palindrome(x):\n if (x[::1] == x[::-1]):\n\t print(\"True\")\n else:\n\t print(\"False\")\nThe above code is a function to check if a string is palindrome or not and it prints wether the string is palindrome or not."], [0.2706361539889298, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether all the elements in a list are empty dicts or not. \n\ndef decimal_to_octal(n): \n    return oct(n).replace(\"0o\",\"\") \nThe above code is a function to convert the given decimal number to its octal equivalent, represented as a string with no leading zeros.\n"], [0.2701241508801565, "def binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if all the vaues of list are empty or not.\n\ndef first_10_digits_of_sum_of_nth_term_fibonacci_series(n):\n s=str(int(fibo(n)))\n j=0\n for i in range(0, len(s)):\n     j=j+int(s[i])\n str1=str(j)\n"], [0.2675475760151574, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether all dictonaries in a list are empty or not.\ndef is_non_decreasing(lst):\n valley = peak = True\n i = 0\n while i < len(lst) - 1 and valley and peak: \n  valley = lst[i] <= lst[i+1]\n  peak = lst[i] <= lst[i+1]\n i += 1\n return"], [0.26262104782086476, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to track if a list is empty or not.\n'''"], [0.26253541009661197, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\ndef long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether all the dictionaries in a list are empty or not.\ndef big_char(name,letter):\n return [each for each in name if each==letter]\nThe above code forms an output list selectively when certain function conditions are met.\ndef vowels(text):\n    vowels=\"aeiou\"\n    return [each for each in text if each in vowels]\nThe above code is a function to check using REG"], [0.25746948846283896, "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to check whether all of the layers in the given multilevel tuples are empty or not\n\n\n# In[ ]:"], [0.25541075696460797, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether all the input elements in a list are empty or not.\n\ndef sort_list_last(input):\n  return sorted(input, key=last)\nThe above code is a function to sort all the sublists in a list by the elements in sublists present at the last.\n\ndef unique(integers):\n\tunique_nums = []\n\tfor integer in integers:\n\t\tif integer not in unique_"], [0.25430748783070956, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether the empty dictionary is present in the given list of dictionaries.\ndef dictionary_lookups(dic1,dic2):\n check=set(dic1).intersection(set(dic2))\n \n set1=set(dic1).difference(set(dic2))\n \n set2=set(dic2).difference(set(dic1))\n \n print("], [0.25408369547455645, "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all the dictionaries in the list are empty or not.\nimport copy\nApni_List=[1,2,3,4,5]\nF_list=copy.deepcopy(Apni_List)\n,2,3,4,5\nThe above code is a function to make a copy of a list.\ndef is_listsub_empty(test_var):\n if(len(test_var[0"], [0.25241519155311776, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a list is empty\n\n '''"], [0.2516200750281272, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to verify whether all the dictionaries are empty in a upper direcotry.\n'''"], [0.2490012926706254, "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if a dictionary is empty or not.\n"], [0.24698787759519059, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check all empty dictionaries in the list of dictioneries or not.\n"], [0.24557656928125096, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to test if a given dictionary is empty or not.\n'''"], [0.2444830054465241, "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function in python to check dictionaries are empty or not. It uses 'not' and 'all()' keyword functions in return."], [0.24428511650766674, "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to test if the all the keys in a given list are empty or not.\ndef file_python(filename):\n counter = encoding_counter(filename)\n test = encoding_test(filename,'ABCDEFGHIJKLMNOPQRSTUVWYZabcdefghijklmnopqrstuvwyxz01234567890,;:.')\n group = group_encodings(test)\n index = str"], [0.23989407986252792, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to return whether all dictionary in list are empty or not.\nnums = [1,1,1]\ndef nums.dic(nums):\n    return (all(nums[i] == nums[i + 1] for i in xrange(len(nums) - 1)))\nThe above code is a function to check whether all list elements are having same elements or not.\nSamle input:\nnames=['"], [0.23986986642049216, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find whether the given dictionary is empty or not.\n"], [0.23632844559033064, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check wether the given list of dictionaries is empty or not. https://www.geeksforgeeks.org/python-check-whether-list-of-dictionaries-empty-not/\n\ndef max_kis(li):\n maximum_kis={li[0]:len(li[0])}\n for i in range(1,len(li)):\n \tk=len(li[i])\n"], [0.23497644145964455, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether all the dictionaries are empty or not.\ndef isFilled_pos(rows,columns,tileSize):\n block=(rows-rows%tileSize)/tileSize\n booleanList=[]\n for i in range(tileSize):\n  for j in range(columns):\n   column=(j)*block\n   return column%block==0\n   \n   \nThe above code is a python function to find the inner"], [0.23367014862216462, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether the dictionary is empty.\nThe above code is a function to check whether the dictionary is empty.\n\"\"\""], [0.23128234440643983, "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all dictionary are empty or not.\n\n'''\n############ SEC FUNCTIONS  ###############\ndef analyze():\n    import matplotlib.pyplot as plt\n    import numpy as np\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    cm = plt.cm."], [0.22905161738761196, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check all the elements in a list are empty or all keys are are the none values.\ndef monotonic_function(hour, minutes):\n\tresult_str=('hour + minutes')\n\n\tif '+' in result_str:\n\t\tresult_values=('+')\n\t\treturn result_values\n\n\tif result_str in-':':\n\t\tresult_str='-'\n\t\treturn(( abs("], [0.2257642877005575, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find if all the dictionaries in a list are empty or not.\n\n if all(d.items() == [] for d in list1):\nreturn True\nelse:\nreturn False\nThe above code is a function to find if all the dictionaries in a list are empty or not.\n\nfor  l in zip(*sorted(zip(cols, df), key=lambda x: -x[1][colname])):\nl"], [0.2248045820998414, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a one line code to check whether all the element of a list are empty or not. \n\ndef remove_dup(test_list):\n    final_list = [] \n    for num in test_list: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n\nThe above code is a python script to remove the duplicates from a list. \n"], [0.22373341296002908, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether all items in the list are emppty or not\ndef average_list(list_num):\n   list_num = [12, 40, 45, 54, 88, 90, 909]  \n   sum=0\n   for count in list_num:\n    sum=sum+int(count)\n   avg=sum/len(list_num)\n   print(avg)\nThe above code is a"], [0.2207136578935127, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether the given dictionary is empty.\ndef second_largest(list_a):\n    max=max(list_a[0],list_a[1])\n    second_max=min(list_a[0],list_a[1])\n    for i in range (2,len(list_a)):\n        if list_a[i] > max:\n            second_max=max\n            max="], [0.21991440357665812, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if the input dict is empty\n"], [0.21991440357665812, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to  check if a dic has no keys\n"], [0.21919994639467325, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to return the indices of all dictionaries in a list of dictionaries that are completely empty.\n\ndef front_code(str1):\n dig_str=','.join(filter(lambda el:el.isdigit(),str1))\n\nList=[]\nif len(List)!=0:\n List=[]\n if len(dig_str)!=0:\n     for elm in str1.split(','):\n if"], [0.2177682089502576, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that that returns whether all the dictionaries in a list are empty or not.\nimport functools\ndef reducer(list_val):\n  reduce_val = functools.reduce(lambda i, j: i + ',' + j, list_val)\n  return reduce_val\nThe above code is a function that concatenates a given list which is a string  of names, separated by a comma.\n# Assignment 6"], [0.21576638114389424, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all the values inside a dictionary are empty or not.\n\ndef compute_string_decimal_value(test_string):\n num = {'D':500,\n   'V':5,\n    'I':1,\n     'L':50,\n      'C':100,\n       'M':1000}\n m = 0 \n for i in range(len(test_string)):\n  if i"], [0.21466267809828588, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a given list is empty when all its elements are set to None.\n\nimport re\nlist1=[\"1David\",\"0Sara\",\"0Kanwal\",\"1Kanwal\",]\nlist2=[]\nfor i in range(len(list1)):\n    if list1[i][0].isdigit()== True:\n        list1[i]=re.sub(\"0\",\"\", list1[i"], [0.21443314311681202, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check all the empty dictionaries in the given list1.\n"], [0.21300804835938308, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether all dictionary keys are empty or not.\ndef odd_num(range1,range2):\n  results = list(range1,range2)\n  return filter(lambda x : x%2 != 0,results)\n  if results % 2 == 0:\n    return 'true'\n  else:\n    return 'false'\nThe above code is a function to print odd numbers between the range provided.\ndef underscore_"], [0.2122383004808323, "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is an empty dictionary function checking if all the new dictionaries in the list are empty or not.\ndef row_index(index_count):\n row_index=[\"ABC\",\"DEF\",\"GHI\"]\n row1=row_index[:index_count]\n return  str(\"\".join(row1))\nThe above code is a function to return the row index A,B,C.\n\ndef col_index(index_count): \n col"], [0.2117768197847772, "import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether the given dictionary is empty or not.\ndef prime_num(x):\n  for i in range(2,x):\n    if x%i==0:\n      return False \n  else:\n    return True\n"], [0.20828493143123095, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function which is to check if a given list is empty or not.\n'''"], [0.2078912589245868, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to determine whether all dictionaries from a given list are empty or not.\ndef concat_dic(dt1, dt2):\n   for k in dt1:\n      dt1[k].update(dt2[k])\n   return dt1\nThe above code is a function to add the same key-value pairs of two dictionaries.\nlist1=[(10, 20, 40), (40, 50,"], [0.20787221788408647, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks if all of the dictionaries in the given list  are empty or not,then it returns True or false based on this.\n\n"], [0.20715918764867947, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function that returns TRUE if all the dictionaries in a list are empty else FALSE.\n\ndef lastNumber1(l,r,k):\n    number=0\n    for i in range(l,r+1):\n        if(i%k==0):\n            number=i\n\n    if (number==0):\n        return(\"not found\")\n    else:\n        return(number)\nThe above code is a python program"], [0.20671429906927738, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check the dict is empty or not.\nimport matplotlib.patches as mpatches\nC1 = mpatches.Patch(color='none', label=('max(20, x[2]*((x[0]/10)**2+x[2]))+(x[0]<20)*(-10/x[0])'))\nc1 = '#4B088C'\nc2 = '"], [0.20629923078477985, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all elements of the list are empty dictionaries i.e empty.\ndef maximum(list1):\n maximum=max(list1, key=list1.get)\n return maximum \nAlso I have covered dictionary in python.\n"], [0.20553893205925933, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python program to check that a given dictionary is empty or not.\n"], [0.2053027452921041, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a dictionary is empty.\ndef isPhoneNumber(r):\n  for i in range(len(k)):\n   if re.search(phone_regexp,k[i]):\n    return k[i]"], [0.2051290153473682, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a list is empty or not.    \ndef swap(list):\n for i in range(len(list)):\n  if list[i] % 2 != 0:\n   list [i]+= 1\n  else:\n    list[i]+= 2\n      return(list)\n  print(swap([13, 2, 3, 4, 5, 6, 7, 10, 11]))\n  print("], [0.20437977483351155, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether all the dictionaries in a list has no key or not.\ndef all_star():\n\tresults = []\n\tfor i in map(str, range(1000)):\n\treturn i\nThe above code is a function to return a list of all formatted codes of numbers from 0 to 1000 inclusive.\ndef all_star():\n ans=[]\n for i in range(1000):\n   s=str(i)\n  "], [0.20370608996731288, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to identify whether all the dictionaries in the list are empty or not.\nimport hashlib;\n\ndef getHash(fileName):\n f = open(fileName, 'rb');\n sha1Hash = hashlib.sha1(f.read()).hexdigest();\n f.close();\n return sha1Hash\n\ncontent = getHash(\"File_01.exe\")\nprint(\"SHA1 hash of the file is"], [0.2033709553363693, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\nimport math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a dictionary is empty or not.\ndef add_dict(dict1,dict2,dict3):\nadd_dict={**dict1,**dict2,**dict3}\nreturn add_dict\nThe above code is used to merge a given dict with an user entered dictionary.\ndef seq_sqr(str,int1,int2):\nfor i in range(int1,int2):\n print(\"{}"], [0.20315806122130586, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all the dictionaries within a list are empty or not.  It returns the boolean value true or false.\nclass Name:\n  def __init__(self):\n    self.nm = ''\n  def get_nm(self):\n    self.nm = input()\n    return self.nm\nThe above code is a python constructor to take input from the user String variable.\nclass Euro:\n  def __init__("], [0.20171599301454585, "import re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function which checks if all the elements in a list are empty dictionary or not.\n\nitems=[{},{},{}]\nif empty_dit(items):\n print(\" list is empty \")\nelse:\n print(\" list not empty \")\n \nelse:\n print(\" list have elements \")"], [0.20153026572237184, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether a given ordered dictionary is empty or not. \n'''\nf3(\"physics\",'math', 'chemistry')\nfor i in range(0, random.randint(0,15)):\n  a = [random.randint(1,15) for a in range(0,i)]\n"], [0.20080272662777682, "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a functions that determines whether a given items are empty dictionaries in a list. \n\nN/A\n"], [0.2001469995515612, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether all the elements in the given set are empty dicitonaries\ndef seq_num(test_seq):\n res1=all(any(test_seq[k]<=test_seq[k+1] for k in range(j-1)) for j in range(1,len(test_seq)))\n return res1\nThe above code is a function to check whether the given sequence is lexicographic order or not"], [0.19995868481324103, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a given dictionary is empty or not.\ndef encrypted_msg(string):\nstring=str(input())\nstring.split()\nprint(''.join((msg[::-1])))\nThe above code is a function to encript the given message. \n\ndef listic(list1,val):\nif val in list1: \n    index=list1.index(value)\n    return index\nThe above"], [0.19963795394417466, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if the dictionary is empty.\n"], [0.19707716078444795, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether the list is empty or not. https://www.geeksforgeeks.org/python-find-whether-a-given-key-already-exists-in-a-dictionary/\ndef count_str(str1):\n    result = 0\n    for i in range(1, len(str1)):\n        if i%2 == 0 :\n            if len(str1[i])%"], [0.19696496055904564, "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether input list is empty.\n#Which are not present in the first list.\ndef missing_element(list1,list2):\n list1=input(\"enter list 1 elements:\").split()\n list2=input(\"enter list 2 elements:\").split()\n list_set=set(list1).difference(set(list2))\n if len(list_set)>=1:\n   print(\"missing element:"], [0.1953255207331647, "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check for empty list.\n\n\"\"\""], [0.19484565184885722, "def sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to check whether all the deques are empty or not in a given list1.https://stackoverflow.com/questions/3844801/check-if-all-elements-in-a-list-are-zero\nfrom collections import namedtuple\nn=int(input(\"Enter no of Students: \"))\nStud = namedtuple('Stud','Name,Age,Percent')\nstud_list=[]\nfor i in range("], [0.19484565184885722, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to return whether all the elements in a list are empty.\n\n\ndromes=(\"demigod\",\"rewire\",\"madam\",\"anutforajaroftuna\",\"kiosk\") #an array of dromes with stop words\npalindromes=list(filter(lambda z:(z==\"\".join(reversed(z))),dromes)) #remove stop words by reverse the string\nprint(palindromes)"], [0.19405743339902187, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether all the items of given list are empty or rot.\nbool empty_list_check([{},None]))\nFind all Pairs with a given sum\nGiven an array of distinct elements and a number x, find all pairs whose sum is equal to x.\n\nExamples:\n\nInput: arr[] = {0, -1, 2, 3, 4, 5}, x = 5\nOuptut: (0, 5)"], [0.19181909863884877, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)\nThe above code is Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a list contains any empty elements.\n\ndef normal_match(b_string,a_string):\n  match=bool(re.match(b_string,a_string))\n  return match\n  The above code is a function to check whether the given regular expressioon matches the given string.\nmore:\nhttps://www.geeksforgeeks.org/domain-name-checker/?ref=lbp\n"], [0.1917758016759767, "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that checks if a list is empty using all function or not.\n\n"], [0.1878789263709393, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if dictionaries are empty or not.\ndef depth_using_strings(string):\n    n= string.count('\\n')\n    return n+1 \nThe above code is a function to find the depth of a string.\ndef dict_depth(dict1):\n\t\n    for k, v in dict1.items():\n        if type(v) is dict:\n            return (1+dict_depth("], [0.1878770600502832, "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\ndef maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether the values of a dictionary are empty or not.\n\nd = {1: [],'list': [1,2,3], 3: None}\nempty_dit = all(not d[a] for a in range(len(d)))\nprint(empty_dit)\nThe above code is a program to find if there are no elements in a given dictionary that is empty.\n\ndef probability(events):\n    return round"], [0.18742492216833784, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if any dictionaries of a list are empty in Python.  \ndef suma_listas(inicio, fin):\n    contador=inicio\n    lista=[]\n    while contador<=fin:\n        lista.append (contador)\n        contador=contador+1\n    return lista\n    return sum(lista)\nThe above code is a function to list numbers between two values in"], [0.18702388188284025, "def add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that check whether the given list contains empty disctinary or not.\n"], [0.18572284299624808, "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a dit is empty or not.\ndef strintg_for_dgit(list1):\n    try:\n     int(list1)\n     return \"True\"\n    except ValueError:\n     return \"False\"\nThe above code is a function to check whether the list contains strings only or not.\ndef counts_element(lst):\n  return [lst.count(item) for item in l"], [0.18532558652365322, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\ndef next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether a dictionary is empty or not.\ndef pypart(n): \n  \n     \n    for i in range(0, n): \n      \n       \n        for j in range(0, i+1): \n          \n            \n            print(\"* \",end=\"\") \n       \n        print(\"\\r\") \n\nn = 5\npypart(n) \n def add(*arg1):"], [0.18519905712339388, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a given list is empty or not. and for checking empty dictionary we need all() method.\n\n# <h1> LIST and DICTIONARY COMPREHENSION </h1>\n#list()  and dict() \nlist1 = [1,2,3]\nnew_list = list(map(lambda x: x+1, list1))\nprint(new_list)  \ndict1 = {"], [0.184742915473088, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to check whether all data structures are empty or not. \nr_num= range(10,20) \n    l_num = list() \nfor i in r_num: \n    t = pow(i,3) \n    l_num.insert(i,t) \nprint(l_num)\nThe above code is to create a list of cubes of number within a given range from 10 to 20 using loop.\n"], [0.18319864552445017, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\nimport math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether the input list is empty or not.\nfrom datetime import date \n  \ndef number_of_days(date1, date2): \n    return (date2-date1).days\nThe above function is a function to calculate the difference between the two given dates.\ndef three_tuple(arr):\n sum_t=0\n for i, *t in arr:\n  print (tuple(t)["], [0.18263583582007686, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether the given list is empty or not.\n\ndef missing_no(list1):\n shuffled=numpy.random.shuffle(list1)\n return shuffled\nThe above code is a function to shuffle noramally the given list.\n\ndef single_sort(list1):\n result=sorted(list1, key=lambda x: x[0])\n return result\nThe above code is a function to sort"], [0.18247583029233663, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all the dictionary in list are empty or note using ternary operator.\ndef empty_dit1(list1):\n list1=all(d for d in list1)\n return list1\nThe above code is a function to check if any of the dictionary in list is not empty.\n"], [0.18177918607743632, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to check whether all the elements in a dictionary are empty or not.\ndef count_Anagram(arr):\n cnt = 0\n for i in range(0, len(arr)): \n    for j in range(i+1, len(arr)): \n        if sorted(arr[i]) == sorted(arr[j]): \n            cnt += 1\n return cnt \nThe above function is to count the number of"], [0.18151025468821916, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check dictionaries are empty or not.\ndef get_duplicates(list1):\n    new=set([i for i in list1 if list1.count(i)> 1])\n    return  new\nThe above code is a function to get unique values in a list\ndef create_number(x,y):\n    return x*n\n    \nThe above code is a function to create a list of multiplication of \"n"], [0.18046140064785957, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a dictionary is empty.\na = [[[],[]],[], []]\nprint(empty_dit(a))\n \nres_dict = unique_sublists(l)\nprint(res_dict)\n \nempty_a = [[[],[]]]\nprint(empty_dit(empty_a))\n"], [0.17846152898143988, "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether the dictionary is empty or not.\ndef remove_all(list1, key):\n return list1.remove(key)\nThe above code is a function to remove all the occurences of a particular value in list.\ndef add_key(dict1, key1, key2):\nreturn dict1.update({key1:\".\".join([key1, key2])})\nThe above code is a function to add"], [0.1775909158737504, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \nThe above code is a function to determine if the sum of the divisors of two integers are the same.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if a given list is empty or not.\ndef diagonal_difference(list2):\n pd=0\n sd=0\n l=len(list2)\n for i in range(0,l):\n  pd=pd+list2[i][i]\n  sd=sd+list2[i][l-i-1]\n difference=pd-sd\n return abs(difference)\n \n"], [0.17742964075135487, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a ditctionary is empty or not.\ndef empty_list(T):\n   return len(T) == 0\nThe above code is a function to check whether a list is empty or not.\ndef count_str(str1):\n dic = { 1 : {'G', 'C', 'A', 'T','U'},\n         2 : {'D','E'},\n\t\t3 : {"], [0.17630733031400198, "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether the given list is an empty dictionary or not.\ndef find_missing_element(A):\n missing_element=len(A)\n return missing_element\nThe above code is a function to find the missing element in given list.\nimport math\ndef prime_mino(n):\n x=[True]*(n+1)\n x[0]=False\n x[1]=False\n for i in range(2,"], [0.17487442519440632, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether the hashmap is empty or not.\n\ndef prime_list(n):\ndef isPrime(n):\n    flag = True\n    for i in range(2, n // 2):\n        if n % i == 0:\n            flag = False\n            return flag\n    return flag\n    primeList=list(filter(isPrime, range(1, n + 1)))\n    return primeList\n\nThe above"], [0.17480106941325957, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether the dictionary is empty or not.\ndef list_of_chess(l):\n if len(l)==8:\n  check=True\n  for i in range(8):\n   if not(l[i]==101 or l[i]==102 or l[i]==103 or l[i]==104 or l[i]==105 or l[i]==106 or l[i]"], [0.17480106941325957, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether the given dictionary is empty or not.\ndef timeit_loop(N):\n    correct=0\n    wrong=0\n    for n in range(N):\n        \n        try:\n            a=int(input(\"enter first number: \"))\n            b=int(input(\"enter second numner: \"))\n            assert a%2==0 and b%2==0\n            a,b=b"], [0.17375095485791062, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function which takes list as an argument and returns if all elements of the list are empty or not\np_list=['' for x in range(0,10)]\np_list[0]=['A','B','C','D']\np_list[1]=['E','F','G']\np_list[2]=['H','I','J','K','L','M']\np_list[3]=['N','O','P"], [0.17341442132765203, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a dictionary is empty or not.\n\ndef most_frequent(List):\n    counter = 0\n    num = List[0]\n    \n    for i in List:\n        curr_frequency = List.count(i)\n        if(curr_frequency > counter):\n            counter = curr_frequency\n            num = i\n\n    return num\nThe above code is a function to find the most frequent number"], [0.17259712735202137, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether a dictionary is empty or not.\n\n# Extract duplicates from the dictionary Values\ndef extract_duplicates(input_dict):\n  new_dict={}\n  for keys,values in input_dict.items():\n    if values not in new_dict:\n         new_dict[input_dict[keys]]=keys\n  return list(new_dict.keys())\n  \n\n# Reducing by"], [0.1724115776180623, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function which is used to check whether all the items in the given list are empty or not.\n\ndef results(ends):\n res = [[] for i in range(3)]\n for tup in ends:\n  res[tup[1]].append(tup[0])\n return res\nThe above code is a Python function which tests whether the element at position 0 of each tuple matches a digit 1, 2, or 3 in the "], [0.17133020421585682, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether all dictionary are empty in a given list.\nlist_of_list=m if n[i] in range(0,30)  else  n \nreturn list_of_list\nThe above code is a python function to check whether all argumetns in a nested list are withing a given range.\narr=[3,4,5,6,7]\na=0\nagg =0\nfor i"], [0.17098980411476108, "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to verify if all dictionary items in a list are empty.\n \ndef foo():\n\"\"\" Input file verification\"\"\"   \n    if len(sys.argv)!=3:\n        print(\"Usage: ./test.sh <ip> <port>\",file=sys.stderr)\n        sys.exit(1)\n\n    # Set up a TCP/IP socket\n\"\"\"try:\ndef fizzbizz(number):\n "], [0.17062899411290855, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a list is empty or not.\ndef list_to_string(list1):\n new_string = ''\n for element in list1: \n  new_string += str(element)\n else:\n  return new_string\nThe above code is a function to convert a list to a string.\nThe bottom code returns all the prime number from 1 to a given number\ndef get_primes(input_list):\n"], [0.16977622669935805, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns True if all the dictionaries in a list are empty and False otherwise.\ndef check_even(l):\n return [num for num in l if num %2 == 0]\nThe above code is a function that returns the list of all even number in the given list.\ndef return_list_dicts(list1,list2):\n  return [{'first':elem} for elem in list1]       \n\n"], [0.16816097564713128, "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\n\ndef issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a specified list is empty or not.\n\ndef check_cols(board, N, i, j, number):\n    if \".\" not in [board[k][j] for k in range(N)]:\n        return True\n    else:\n        return False\nThe above code is a function to check whether a row is full or not.\n\ndef check_rows(board, N, i, j, number"], [0.16806203942387365, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to check whether the given list of dict is empty or not.\n\ndef numofletters(list_list):\n    list_list[0].upper()\n    list_list[1].upper()\n    first=list_list[0]\n    second=list_list[1]\n    return (first,second)\nfor word in list2:\n    sum1=Counter(list2[0] + list2[1])\n"], [0.16678314843149147, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether it is true whether dict is empty.\ndef bubble_sort(arr):\n     l = len(arr)\n     while l:\n         for i in range(l-1):\n             if arr[i] > arr[i+1]:\n                 arr[i], arr[i+1] = arr[i+1], arr[i]\n         l-=1\nThe above code is a number list sorting function"], [0.16633711126176892, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a python dictionary is empty or not.\n\nimport itertools \ndef sub_lists(list1): \n\tsublist = [[]] \n\tfor i in range(len(list1) + 1): \n\t\tfor j in range(i + 1, len(list1) + 1): \n\t\t\tsub = list1[i:j] \n\t\t\tsublist.append("], [0.16633711126176892, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a given dictionary is empty or not.\ndef twoSum(nums, target):\n    nums_dict={}\n    for i,num in enumerate(nums):\n        n=target-num\n        if n not in nums_dict:\n            nums_dict[num]=i\n        else:\n            return [nums_dict[n],i]\nThe above code is a function to return"], [0.16611264600987313, "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if there are empty dictionaries in a list of dictionaries.\n\nfrom heapq import heapify,heappop,heappush\ndef min_heap(arr):\n heapify(arr)\n for i in range(len(arr)):\n  print(heappop(arr))\nThe above code is a function to convert a regular list into a min heap and return the various node popped from the heap and printing.\n"], [0.1659201209927305, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns True if all dictionaries in a list is empty.\nprint ('The solution is i=%s'%num)\nStoring solution in a variable that  prints the entire path. Using %s as a placeholder for string and % .2f as a placeholder for floats\n"], [0.1654084590447041, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check is list is empty or not.\ndef is_palindrome(word):r hemadeep fni neve ri taerg gniap ,tsaif hguorht gnitaelp rasmihca eno sa\n iword=word.replace (\" \", \"\")\n sredne=[iword[len(word)::-1]]\n if imem tselle :\n return True\n else:\n   return"], [0.1654084590447041, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check dictionary is empty or not.\ndef key_value_list(list1,list2):\n kv_list=zip(list1,list2)\n return list(kv_list)\nThe above code is a function to combine two lists using keys and values.\n\ndef list_of_list(list1,list2):\n\n join_list=list1+list2\n return join_list\nThe above code is"], [0.16496884469806397, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check that all the elements of a dictionary are empty or not.\ndef isEven(n): \n    return n / 2 == n // 2 \ndef isOdd( n): \n    return n % 2 != 0\nThe above assigns even and odd as conditions for numbers\ndef IsPrime(n): \n    c=0\n    for i in range(1,n+1): \n        if(n%i=="], [0.1648061939294241, "def min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function that receives list as input and return true if all dictionaries in the list is empty or false otherwise.\n"], [0.16456361181546084, "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check empty dictionary.\n\"\"\"\n\"\"\"\ndef letter_histogram(word):\n  letter_histogram={\"a\":0, \"b\":0, \"c\":0,\"d\":0,\"e\":0,}\n  for letter in word:\n    letter_histogram[letter]+=1\n  for letter in sorted(letter_histogram):\n    print (\"{} : {}\".format(letter, letter_histogram"], [0.16373679616705983, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns True if dictionaries in a list are empty, False if not empty\"\"\"\n\"\"\"\nstring1 = \"abcabcabcabcabcabcabcabcabcabcdef\"\nstring1 = input(\"Enter the the string\")  \ncount =0  \n#for i in range(0, len(string1)): \n#  count +=1\ncount = len(string1)/3\n\nmin_difference = 0\nstring1 +"], [0.1632081833660828, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to tell whether a dictionaries are empty or not.\n\n\nimport math\ndef ratio(dict1):\ncount = len(dict1)\nfor d in dict1:\nfor g in dict1:\nd = (dict1[g])/ math.sqrt(((dict1[e])**2)+((dict1[f])**2))\ncount-count+1\nreturn d\nThis code gives the shortest distance between the points"], [0.16242983022697824, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to identify if all the elements in a given list are empty or None.\n\ndef min_index(list1):\n    result_min_index=min(range(len(list1)), key=list1.__getitem__)\n    return result_min_index\nThe above code is a function to find the index of the minimum element from a given list.\ndef max_index(list1):\n    result_max_index"], [0.1615412287385986, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a list is empty or not.\n\nimplementation of stack\nclass Stack:\n\n    def __init__(self, maxSize):\n        self.maxSize = maxSize\n        self.stack = [None] * maxSize\n        self.top = -1\n\n    def push(self, element):\n        if not self.isFull():\n            self.top = self.top + 1\n            self.stack["], [0.16120159561392428, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether the given nested list is empty or not.\ndef dif(x,y):\n return x-y\nThe above code is a function to find difference between two numbers.\ndef cor_pr(nums,k):\n    return len(set(nums) & set(n + k for n in nums))\nThe above code is a function to count number of correletad primes upto a number nums"], [0.16087239007352327, "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a dictionery is empty or not i.e. returns a boolean whether the dictionery is empty or not that is if all the elements in the list are used or not that is the condition is true or returns false.\n def speciality(str1):\n s=str1.split(',')\n a=len(s)\n b=[]\n for i in a:\n  b.append(list(i))\n str1"], [0.16060200876745065, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all elements in a given list are empty dictionary or not.\ndef count_num(list1):\n c_num = [i for i in s if isinstance(i, dict) and len(i) == 0]\n return (len(c_num))\nThe above code is a function to count number of empty dictionaries in a given heterogeneous list\n\ndef merge_char(str1):\n length = len(str"], [0.16038405337427067, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a given list is empty or not.\ndef empty_list(list1):\n     return list1\n     print(list2)\nThe above code is a function to check whether a given list is empty or not. If list is not empty we are mapping a function to print all items of the list.\ndef my_square(f):\n    print('my_square')\n    return f * f\ndef do_square("], [0.1599739332222968, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " defines a function to find if a list is empty(or), if any key,value pair is present it returns False.\n\n\n\n\"\"\""], [0.15989991439909984, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to fi1d d1t2 is empty or not.\ndef isValidSudoku(self, board):\n  return (self.is_row_valid(board) and\n          self.is_col_valid(board) and\n          self.is_square_valid(board))\n\t\t\t\t\t\ndef is_row_valid(self, board):\n  for row in board:\n    if not self."], [0.1590980899768732, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if dictionary is empty or not.\ndef unique_list(list1):\n            final_list = [] \n            for i in list1:\n              if i not in final_list:\n                final_list.append(i)\n            return final_list\n            \nThe above code is a function to return unique values present in first list."], [0.15908229869313661, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether a list is empty or not.\n\ndef arr_padding(arr):\n minmax_obj=MinMaxScaler()\n minmax_res= minmax_obj.fit_transform(arr)\n return minmax_res\nThe above code is a python function to subtract minimum value from every element and divide by the range of values in the array\n\ndef arr_sum(arr):\n arr_sum=np.sum"], [0.1584977041439909, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether list contains any empty dictionary.\nx=int(input(\"enter a first number\"))\ny=int(input(\"enter a second number\"))\nif(y<x):\n    print(\"second number is less\")\nelif(y==x):\n    print(\"both are equal\")\nelse:\n    print(\"second number is greater\")\nThe above code is test case to evaluate whether the second number is greater, less or equal"], [0.1583304621860267, "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a list is empty or not .\n\ndef check_kuplet(number, kuplet):\n count = 0\n if number % 100 == kuplet:\n     count += 1\n while number > 0:\n     number //= 10\n     count += 1\n if count == kuplet:\n     return True\n return False\n'''\nfind_k=int(input(\"enter the number (0 to 100)"], [0.1582734471104347, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to identify whether all the pairs of string has been assigned value or not.\n  \n\"\"\""], [0.15790254609224655, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a simple function to check whether a given list is empty or not using for loop.\ndef dictionary_valueandkeyswap(dictw):\n keylist = []\n valuelist = []\n for key, value in dictw.items():\n  keylist.setdefault(value, []).append(key)\n valuelist=dict(zip(keylist, valuelist))\n return valuelist\nThe above code is a function to swap"], [0.15790254609224655, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all the entries in the sublist n times dictionaries are empty or not?\n\ndef wave(str1):\n i = 0\n for k in range(len(str1)) :\n    if(str1[k]==' ') :\n        j=k\n        while(j <len(str1)):\n            if((str1[j] != ' ' and j != k)):\n                str1"], [0.15790254609224655, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check all dictonaries are empty or not.\ndef is_valid_password(password):\n    rules = [\n    lambda s: any(x.isupper() for x in s),\n    lambda s: any(x.islower() for x in s),\n    lambda s: any(x.isdigit() for x in s),\n    lambda s: len(s) >= 10\n    ]\n\t\n"], [0.15770144839597663, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\ndef min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all the dictionaries within the given list is empty or not.\ndef get_attribute_pyramid(str1):\n for i in range(len(str1)-1, -1, -1):\n    for j in range(0,i):\n     print(str1[j],str1[i])\n return\nThe above code is a function to print the following pattern of statements\n \n *\n * *\n"], [0.15691205026577, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a dictionary is empty or not.\n%%writefile logical.py\ndef logical():\n  from google.colab import files\n  uploaded = files.upload()\n\n  lines = spark.read.text(\"logical.txt\").rdd\n  errors = lines.filter(lambda line: \"ERROR\" in line)\n  warnings = lines.filter(lambda line: \"WARN\" in line)\n  badlines = errors."], [0.15560086751752283, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to tell whether all the keys in a Python dictionary are empty or not.\n\ndef is_locked(door):\n door.locked=not door.locked\nThe above code is used to toggle the boolean value.\n\ndef alternate_name(original_name) : \n    names = original_name.split(\" \") \n  \n    return names[1] + \" \" + names[0] \nThe above code is a function"], [0.15555215353851795, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that checks if all the items in a dictionary are empty.\n"], [0.15547565676748742, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all the elmenets of given list are empty.\nnumbers = [1, 2]\nresult = all([True, False])\nThe above code is a test case to check the working of above function.\n"], [0.15519423786138545, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\ndef dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns True if all of the dictionaries in a list are empty.\ndef find_dict_keys(d,n):\n try:\n    keys = d[n]\n    return keys\n except KeyError as e:\n    print(\"Not found\")\nThe above code is a method that returns the highest two values in a dictionary. (sorted by value).\n\ndef list_sorting(lst):\n lst.sort("], [0.15484151127866078, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check all the items under the list is empty or not.\nthreading.Thread(target=thread_task)\nThe above code is a thread to do thread task.\n\nthread1 = threading.Thread(target=worker, args=(i,))\nThe above code is a thread without non-argument way.\n\nthreads = [threading.Thread(target=worker, args=(i,)) for i in range(4)]"], [0.15382913578708213, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find whether the dictionary is empty or not.\n\n\ndef menu_price(dishes):\n    price=0\n    for name,price in dishes.items():\n        price=price+price\n    return(price)\nThe above code is a function to calculate total price of a menu."], [0.15382913578708213, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if all the elements of a given list are empty dictionaries.\n\ndef flatten(lst):\n  return list(itertools.chain(*lst))\nThe above code is a python function to flatten an irregular nested list.\n"], [0.15343832461983645, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether a list of dictionary is empty or not.\n\ndef has_key(list1, k):\n  new_dict=dict((k,None) for k in list1)\n  return new_dict.key()\nThe above code represents a python function to check whether a given key exists in the dictionary or not.\ndef check_dict(dict1, list1):\n    this_dict={}\n    while ("], [0.1519764961400906, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find if all the dictionary in the list are empty or not\ninput d: {'PC': 378, 'PS4': 46, 'Switch': 86, 'VITA': 21}\nexpected out: {'PC': 378, 'Switch': 86, 'PS4': 46, 'VITA': 21}\nThe above code is a function to sort a given dictionary\n"], [0.15174336658183987, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\ndef filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check a dictionary is empty or not.\ndef reverse_list(list1):\n list1 = list1[::-1]\n return list1\nThe above code is a function to reverse a list.\ndef hello(string): \n print(\"Hello \"+string) \ndef hire_mp(emp_name,emp_exp):\n if(emp_exp > 2):\n hire_emp = \"Employee Named \" + emp"], [0.15090177486099643, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if the list contains an empty dictionary.\n'''\nfrom itertools import combinations\nprice = [0,1]\n\ndef food_cal(price):\n    sum1=0\n    for l in range(len(price)+1):\n        lth_combo= list(combinations(price,l))\n        sum1= sum1+sum(lth_combo)\n    print sum1\n''"], [0.15080654726702894, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a dictionary is empty.\n\nimport functools\ndef get_max(list1):\n list1.sort(reverse = True)\n max_1= list1[0]\n return max_1\nThe above code is a function to find the maximum value in a list.\n\ndef get_sum(n):\n s = 0\n while n > 0:\n     s += n\n     n -= 1\n return s"], [0.15074966245128038, "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check empty dictionary in a list or not.\ndef nested_lists(list2):\nf{i: j for i in range(1, 3) for j in range(10, 12)}\nThe above code is convert a list as compound dictionary.\ndef list_to_set(list3):\n duplist = set([x for x in list3 if list3.count(x) > 1])\n print(list(dupl"], [0.15016707174083377, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether the dictionary is empty or not.\nfor i in (x1, x2, x3):\n    find_lcm(i)\nThe above code is a python function to find the lcm of 3 numbers.\ndef rotatematrix(mat):  \n    for layer in range(len(mat) // 2): \n        first = layer \n        last = len(mat)-1-layer  \n       "], [0.15007056744476854, "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a defined dictionary is empty.\ndef print_jumps(filename):\nfile = open(filename)\nfor line in file:\n    strings = line.split()\n    for string in strings:\n        for x in range(len(string)-1):\n            if ord(string[x]) = t = ord(string[x+1])+1  \n The above code is a function that prints values of a variable +"], [0.14991172951342485, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if the dictionaries are empty in a list or not.\ndef to_upper_case(l):\n    return (list(map((lambda x : x.upper()), l)))\nThe above code is a function to convert the list of strings to uppercase in python.\ndef mat_md(m1, m2):\n\n    if m1 != 4 and m2 != 4 and type(m1) != list and type"], [0.14945234713610073, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a given list(i.e. dict_keys) is empty or not.\ndef dict_list(dict1):\n  return sum([value for key,value in dict1.items()])\nThe above code is a function which takes the input in form of a dictonary and outuput is the list of all its values.\ndef dict_plus(dict1):\n  return sum(dict1.values())\n"], [0.14938327650235267, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that checks if all items in the list are empty or not.\ndef check_double(list1):\n for i in list1:\n  if(len(i)<=3):\n    return False\n  return any(i[0]==i[-1] for i in list1)\nThe above code is a function that checks if the strings with 3 characters or less contain the same character at the beginning and end of the string."], [0.14897837316172202, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find 'empty_dit'\n\ndef date_of_fall(day1,month1,year1,day2,month2,year2) :\nb=date(year2,month2,day2)\na=date(year1,month1,day1)\nl=(b-a)\nprint(\"No. of days between \"+str(day1)+\"/\"+str(month1)+\"/\"+str"], [0.14888111994205122, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check empty dictionary or not.\ndef index_element(list1):\n     index_element=max(set(list1),key=list1.count)\n     return index_element\nThe above code is a function to the element(11 in the list ) that has occurred more than once in the given list.\ndef dict_diff(dict1, dict2):\n dict1={'a':1, 'b':2}\n"], [0.1487428722689438, "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\n\ndef get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if  dictionary is empty or not.\ndef even_master(list_t):\n for i in list_t:\n    if i%2==0:\n         return \"Even\"\n     else :\n return \"Odd\"\n\nThe above code is a function to find if number is even or odd.\n\n\ndef gen_wor(n):\n    \n    \n     g=(''.join(choice(lower"], [0.14843595267375218, "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check empty list and dictionary.\ndef key_not_find(list1):\n for key in list1:\n     val=  list1[key]\n     sortedVal = sorted(val)\n     i =0\n     while i < len(sortedVal) -1:\n        if sortedVal[i]  == sortedVal[i + 1]:\n            print(key+\" \"+sortedVal[i])\n           "], [0.14829522417362695, "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\n\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that takes in a list and returns True if all dictionaries are empty.\ndef dic(list1):\n sup_val=[]\n sup_val.append(list1[-1])\n i=-2\n check=-1\n while i>=-len(list1):\n     if list1[i] >= sup_val[check]:\n         sup_val.append(list1[i])\n         check-=1\n    "], [0.14793932616350344, "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a list is empty.\nIn [150]:\nstring1=['Hello world', '', '']\nIn [151]:\nempty_dict([string1]) \nOut[151]:\nTrue\nIn [152]:\nIn [152]:\nstring2=['Mak', '10']\nIn [153]:\nempty_dict([string2]) \nOut[153]:\nFalse\nIn [154]:\nIn ["], [0.147714634024806, "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a dictionary is empty or not.\n\nHow to sort a Python list by the key of another list\nLet\u2019s say you have two parallel lists (list with names&list with number can also be used to create the dictionary, below example is without creating the dictionary)\n\nlist1 = [10, 2, 8, 2, 1, 2, 7]  #original list\nlist2 = ['v1', 's1',"], [0.1476702601956141, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a list contains any empty dictionaries.\ndef extract_dict(list1):\n dict1= dict((key,d[key]) for d in list1 for key in d)\n return dict1\nThe above code is a function to extract dictionaries from a list of non-empty dictionaries.\n"], [0.14764465893817846, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to see if a list is empty or not.\n\ndef sorted(string): \n  \n  str1 = string \n  quest_stake = 0\n  for i in range(0, len(str1)):   \n    if (str1[i] == '?'): \n      quest_stake = quest_stake + 1\n     \n  str2 = str1.replace(\"?\", \"\")\n  l"], [0.14735933309172777, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if dictionary is empty or not.\ndef printit(DictPract):\n    print(\"The original dictionary:\",DictPract )\n    print(\"After removing the key-value pairs of a character,\")  \n\nThe above code is a function to remove one key's values from all keys.\n#5\nprint(\"Saving The Three Files::\")\n\nwith open(\"Book1.txt\",'wb+') as f:"], [0.1471786575109929, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all the items in a list are empty.\ns = '  I am trying to get empty tuples in python '\nlist = s.split()\na_list=[]\nfor i in list:\n\ttuple = i ,\n\ta_list += [tuple]\nprint a_list\nThe above code splits a string into a words and the puts the words into tuples.\n\nf = open(\"test."], [0.146898270739792, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a dictionary has only zero valued keys. More methods can be used to check this and since it doesnt asked in the question, I didnt mention it here.\n"], [0.14666123234644735, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to judge whether a dictionary is empty or not.\n# Method #3 Using XOR\nlist1=gst_list=[1,2,3,6,7,6]\nxor_list=list1[0]\nfor index in range(1,len(list1)):\n xor_list^=list1[index]\nreturn xor_list\nThe above code is a Python program to find XOR\nvalues"], [0.14658432183766545, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to find whether a dictionary is empty or not.\nword1=[\"aba\", \"bab\",\"abab\",\"abcabc\",\"abaabc\",\"abcabc\",\"aabbcad\",\"aabbcadaabbbca\"]\nlenth1=[len(i) for i in word1] \ntupple_list=list(zip(word1,lenth1))\nprint(tupple_list)\nfrom functools import reduce\nfrom"], [0.146229930631307, "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all dictionary with keys and value in a list is empty.\ndef dict_filter(suitable_list,non_suitable_list):\n new_list=list(filter(lambda x: x not in non_suitable_list, suitable_list))\n return new_list\nThe above code is a function to remove all the non-suitable list in a list of dictinary.\n\ndef required_only(required_"], [0.14620729392068527, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to check whether all the elements in the list are empty dictionaries or not?\ndef prime_number(n):\n  for i in range(2,n//2):\n    if n%i==0:\n      return False\n  return True\nThe above code is to check whether a number is prime or not?\ndef binary_search(arr, ele):\n    first = 0\n    last = len(arr)\n    index = -1"], [0.1454083618924577, "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether every element in a list is empty or not.https://www.geeksforgeeks.org/python-list-all-empty-lists/\n.format \u2014\u200aFormatted string literals\nThere are many approaches to formatting string in Python. Classic approach uses the % operator to format strings.\n>>> \n>>> amount = 327.68\n>>> print (\"Rs. \" + str(float(amount)) + \" \" + \""], [0.1453086289621873, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether a list is an empty dictionary or not.\ndef convert_into_number(list1):\n    l=map(str,list1) \n    sw=0\n    for k in list1:\n        sw=sw*10+k\n    return sw\nThe above code is a python function to convert a list of numbers into a sequential number.\nHigh order function\ndef add_all(list1):\n   "], [0.14523667194003922, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find whether the list is empty or not.\n!apt-get install -y -qq software-properties-common python-software-properties module-init-tools\n!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null\n!apt-get update -qq 2>&1 > /dev/null\n!apt-get -y install -qq google-drive"], [0.14516721721283282, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a dictionary is empty or not.\n\ndef close_dit(dict):\n    return all(not d for d in dict.values())\nThe above code is a function to check if a dictionary is empty or not. Logic is return all (not d for d in dict.values())\n\ndef date_split(date):\n    date_split=date.split('-')\n    return date_split[0],date_"], [0.14454615089530748, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a given dictionary is empty or not.\ndef reverse_word(word):\n    revw=word[::-1]\n    return revw\nThe above code is a function to reverse a string.\ndef recursive_power(number):\n    if number==0:\n        return 1\n    else:\n        return number*recursive_power(number-1)\nThe above code is a function to calculate power of a"], [0.14452516132336857, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to determine if all the dit in the list is empty or not.\ndef Join(list1):    \n    new_list=[]\n    for i in range(1, len(list1)+1):        \n        new_list.extend(x for x in itertools.combinations(list1, i))      \n          \n    return new_list      \nShowing 'abc' combinations\n\nl1 = ['a"], [0.1444137141451872, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is an instructor function to check whether a dictionary is empty or not.\ndef List_Index(items, lst): \n    s=None\n    for i, x in enumerate(items): \n        if x == lst: \n            s = i \n            break\n    return s\nThe above code is a python instructor code to find the index of a particular number in a list.\ndef sum_num(lst):#code to"], [0.14433381708131454, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\nimport math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a given given set of non-empty tuples contains a dictionary as its an element.\n\ndef sum_of_list(list1):\n add =list1[0]\n for i in list1:\n    for j in list1:\n        add = i+j\n return add\nThe above code is a python function to find the sum of all elements of a list made of positive integers.\n            \n    \ndef even"], [0.14419644488213176, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a list/dit is empty.\n'''\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n#\n# Complete the 'predictAnswer' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. STRING_ARRAY emails\n#  2. STRING_"], [0.1441907540293847, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " returns whether all the dictionaries in a list is empty or not, a dictionary is empty if none of its key-value pair is defined.\ns=\"python\"\ns.replace(s[1],'*')\nto print vishnu\ncan't be fixed\ns=\"python\"\nfixed_s[1]='*'\nfixed_s\n't*py'\nThe above code is invalid as the string is immutable. \ndictionary1={"], [0.14374008593555498, "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether the given list is empty.\n\ndef san(test_list):\n  return not list1\nGiven below is the final function to use in this task: \ndef ao_list(list1, list2):\n  return any([(a in list1) for a in list2])\n\n\"\"\"\n\"\"\"\nThe following code is supposed to perform a refactoring of function append_to_list where the element \""], [0.1428447007237998, "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether a given list is empty returns True or False.\n\ndef song(name):\n n=(\"Happy birthday to you Happy birthday to you Happy birthday to \")+ name +(\" Happy birthday to you\")\n return n\nThe above code is a function to wish a person Happy Birthday in a song.\nSong(\"John\")\n\"\"\"\nsong(\"John\")\ndef main():\n    name = input(\"What's your name?\")\n    print"], [0.14275810950894874, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check whether we have any element in the dictionary having its values as null.\ndef crazycase(s): l=len(s)//2 if len(s)%2: return s[:l].lower() + s[l:].upper()  else: return s.lower() return s.upper()]\nThe above code is for Swapcase() but this code is wrong, because the output for following example will always be \u201cV"], [0.14211446017407914, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " contains a python function to check if all the elements in a list are equal to None or not.\nsquar=lambda num: num **4\n\nThe above code is a single line python lambda function to square the number.\n\n\n# TASK TWO\n\n\n# 1. Write a function which accepts a list of strings and returns the list with the duplicate strings removed.\n#  METHOD I : Using list comprehensions\n\ndef remove_duplicate(string"], [0.14192880545642445, "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\n\nimport re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check the dictionary is empty or not.\n\ndef avg_level(list1):\n   for i in list1:\n     x=0\n     for j in i:\n       x+= j\n     x= x/len(i)\n     print x\nThe above code is a function to calculate the average level of concentration in a given list.\n\ndef print_pattern(w):\n  print w * 2\n w * 2"], [0.1416945449390457, "def armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is function to check if all the given dictionary is empty or not.\ndef panagram(a):\n n=0\n letters=\"abcdefghijklmnopqrstuvwxyz\"\n for i in letters:\n    if i in a:\n     n+=1\n    else:\n     return False \n if n==26:\n     return True\nelse:\n     return False\nThe above code is a function to return True if all"], [0.14138150867995042, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a list if empty using list comprehension\ndef deep_reverse(L):\n    L.reverse()\n    for eachList in L:\n        eachList.reverse()\n    return L\nThe above code is a function to take in a nested list and reverses the elements in a list in reverse order.\ndef ThirdGreatest(l1,l2,l3):\n l.sort(reverse=True)\n return l["], [0.14131187130358583, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a short Python program to check whether a list is empty or not.\ndef dict_key_value_list(list1, list2): key_list =keychain\n    for item in list1,list2:\n        key_list[item[0]]=item[1]\n    return key_list\nThe above code is a python program to combine two lists into dictionary key-value pairs.\ndef get_str(x1, x2"], [0.1410474871337119, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if any lists in the passed list of lists is empty or not.\n\ntry:\n  pass\nexcept expression as identifier:\n  pass\nelse:\n  pass\nfinally:\n  pass\nThe above code is an example of try-except-else-finally statements. \nPython Programme SHA256 program\nimport hashlib\n \ndef hash_file(filename):\n   \"\"\"\"This function returns the SHA-1 hash"], [0.139854679430337, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check empty dictionary.\ndef check_lowest_value(list1):\n list1.sort()\n if(len(list1)>0):\n  return list1[0]\n else:\n  return 0\nli = [int(i) for i in input().split()]\nprint(check_lowest_value(li))\nThe above code is to take user input as list and find the lowest value.\n\n"], [0.1395084937083572, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function that returns true if all the dictionaries in a list are empty.\n\n\ndef two_oldest_ages(ages):\n  ages = sorted(ages)[:2]\n  return ages\nThe above code is a python function to get the closet age of two ages, but I found it is much simple to do it one liner in python.\n\nI use two generators to read two files in parallel.\n\n\ndef two_oldest_ages"], [0.13942705812254794, "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all dictionaries are empty in the list or not.\ntup = ('a', 'e', 'i', 'o', 'i', 'u')\n# Preparing set ((-1) * each element of tuple)\nprep_set = {(-1 * element) for element in tup}\nprint(prep_set)\n\n\nThe above code is a function to find the set difference of two sequences.\ndef str_"], [0.13935307290478255, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether a given list is empty or not.\ndef reverse_list(n): \n    return n[::-1]  \nThe above code is a python function to find the reverse of a given list.\n\n# Check the output of the followin program:\n'''def func_1 (temp = []):\n temp1 = [1, 2, 3]\n return temp.extend(temp1)\ndef func"], [0.1391102220590268, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to test whether a given dictinary is empty or not.\n\n\ndef square_root(coff):\n square_root=1/abs(1/coff)\n return float(square_root)\nThe above code is a function to find square root of the numerber.\n\n\ndef num_followers(nmbr):\n   try:\n     if nmbr!=0:\n          print(\"Success!\")\n          return int("], [0.1382687140520549, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is the python way of wdetermining if all values in a list are boolean false.\ndef sev(math1):\n import numpy as np\n for i in range(len(math1)):\n  matrix=np.asarray(math1[i])\n  print(matrix,i+1)\n  print(\"the determinant of this matrix is\",np.linalg.det(matrix))\nThe above code is a"], [0.13805815067523927, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check the empty dictionary.\n\ndef to_first(dishes,sort_list,idx,length):\n n1=length\n m=0\n x=0\n for i in range(idx,length):\n     for m in range(0,length):\n         if dishes[sort_list[m][0].name]>dishes[sort_list[i][0].name]:\n             x=sort_"], [0.13782225304233123, "def Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to check whether all dicttuinary elements are empty\nx,y=0,0\nx=5\nprint(\"1\", id(x))\nx,y=5,5\nprint(\"x referebce id\",id(5),\" copying the value now, it doesnot have any impact on original reference id\", id(y))\nx=x+1\nprint(\"x increamenting by 1 and new id is\",id(x))\ny"], [0.13760150493683862, "def count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " to check if all days in a given dic are empty or not.\n\ndef removeDuplicate(listnum):\n  # function to remove adjacent duplicates\n  # new List\n  newList = []\n  # Traverse through List\n  for x in listnum:\n    # check if current element\n    # is present in new List\n    if x not in newList:\n      newList.append(x)\n  return newList"], [0.13740222915988673, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function that is used to check if a given dictionary is empty.\n"], [0.13732171442102672, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a given list is empty or not using for loop.\n#\t---------------------------#\n#   S E M I\tA -- V A L L - E #\n#                              #\n#                              #\n# ---------------------------------------------------------------#\ndef  prep_str(s1):\ns1=s1.upper()\ns1=s2[:2]+s2[-2:]\nreturn (s1)\nThe"], [0.1369181050739333, "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a given list is empty or not.\ndef single_dit(list1):\n \"\"\" \n It returns a single valued list of condition checking variable.\n \n \"\"\"\n if len(list1) != 1:\n     return 'Error'\n else:\n     return list1[0]\nThe above code is a function to check if a given list is single valued or not.\n\ndef dit_modify(dit1"], [0.1364739508572457, "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if any dictionary of a list is empty or not.\ndef convert_tuple_list(list1):\n    list1=[(ord(t[0]), t[1]) for t in list1]  \n    return list1\nThe above code is a python function to convert tuple to list i.e. [(34, 'a'), (40, 'b'), (41, 'c')] ---[34, 40,"], [0.13643345248020047, "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to judge if all the elements in a given list are empty.\n\ns = 'aabcdabccabcaa'\n\ni = s.find('a')\n\nfor i != -1\n\ns.replace(\u2018a\u2019, \u2018aa\u2019, 2)\n'''\n\n\nsum1=str(2**1000)\nmysum=0\nfor i in range(0,len(sum1)"], [0.13609645782277235, "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\n\ndef extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " \"Output\" function when used in a if-statement checks to determine if the list is empty (False) or not (True).\n"], [0.13600558870425758, "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check and returns a empty value if the list is empty.\ndef con_char(string):\n  if len(string) == 0:\n    return ['']\n  result = []\n  for i, v in enumerate(string):\n    result.extend(string[:i] + x + string[i:] for x in con_char(string[:i] + string[i+1:]))\n  return"], [0.13584209403368047, "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to find out whether a given list is empty or not.\nPython logger in a class\n\nfrom logging.handlers import TimedRotatingFileHandler\nfrom logging import FileHandler\nos.mkdir(log_path)\nos.makedirs(log_path, exist_ok=True)\nfile_handler = TimedRotatingFileHandler(file_path + '/test.log', when='s', interval=10, backup"], [0.13557908412276834, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " given a list, check whether all the elements are empty dictionaries or not.\n\"\"\"\nfrom operator import itemgetter\ndef max_dict(a_dict):\n    values=list(a_dict.values()) # gets the list\n    max_num=max(values) # finds the max in the list\n    max_keys=[]\n    for key in a_dict:\n        if a_dict[key]==max_num: #"], [0.1355046152859106, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if the element in a dixtionary is zero or not.\ndef remove_x(word):\n'''Remove letter x from word.\n\nremove_x('mississippi')\n \u2192 'mississipp'\nRemove duplicate letters from a string.\n\nremove_adjacent_characters('badxx')\n \u2192 'bad'\nThis is like the previous programming problem. \nNot sure how you go about solving. But"], [0.13535087954358743, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if the given dictionary is empty or not using recursive function.\n\ndef vowels(user_input):\t\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if user_input in vowels:\n        print('True')\n    else:\n        print('False')\nThe above code is a function to check if the input with string as parameter has vowels or not. \n\n"], [0.13534139259260775, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find whether the elements in the given list is empty or not.\nclass Solution:\n    def arraysIntersection(self, arr1, arr2, arr3) -> List[int]:\n        return list(set(arr1) & set(arr2) & set(arr3))\ndef intersection2(arr1, arr2, arr3): \n\n     i, j, k = 0, 0, 0\n     \n     res"], [0.1353090618073452, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to check whether a dictionary is empty or not.\ndef multiple(list1):\n return [lambda x:i*x for i in list1]\nThe above code is a function to create list of functions according to condition.\ndef q1(num):\n return num**2\nThe above code is to take an argument and return square of it.\ndef q3(str1):\n for i in str1:\n    s=\"\"\n    s="], [0.13481969607264754, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is used to check if a dictionary is empty or not.\nprint(all (dict((v, k) for k, v in dictonary(key,values ).items()))\n'''\nl=list(range(1,100))\ndirctionary={}\nfor values in dicto:\n    dict((values,l))\nresult= largest_neg(l)\nprint(result)"], [0.134503019213756, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a given list is empty.\n\ndef get_unique(list1):\n list1=set(list1)\n list1=list(list1)\n return list1\nThe above code is a function to return the unique values in numerical and string based list.\ndef boundary_values(list1):\n false_boundary_values=[]\n binary_values=(0,1)\n if max(ssn) < 5"], [0.13434406206707655, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a list contains any absent students or not\ndef student_and_expenses(filename):\n row = 0\n while (row<1000):\n student,expenses = row[0],row[1]\n row += 1                                                                                                                      \n return student,expenses\nThe above code is a function to read student and expenses from a file.\ndef fraction(numerator_denominator,simplify="], [0.13314323093550287, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a list is empty or not.\n\ndef is_decagonal(n):\n condition1 = n < 1\n condition2 = n - int(math.sqrt(24 * n + 1) + 1) == 0\n condition3 = n - int(math.sqrt(24 * n + 1) + 7) == 0\n return condition1 and condition2 or condition3\nThe above code is a function to check if list"], [0.13291845536923663, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to Check Empty Dictionary\ndef check_keys(data, required_keys):\n    return (len(data.keys() & required_keys) >= len(required_keys))\nThe above code is a function to check intersection between two dictionaries.\n\"\"\"\n\ndef sum_of_n(n, N):\n\treturn n * (N*(N+1)/2)\n\ndef sum_of_N(n, N):"], [0.13265334618224572, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function returns true when all the keys of a dictionary are empty.\n"], [0.1326495787949875, "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to return True if a dictionary is empty else returns False\ndef sort(list1):\n list1.sort()\n return list1[-1]\nThe above code is a function to sort a list in ascending order.\n"], [0.1324395442438321, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find whether dictionary is Empty or not.\nParameters : list1 (A list of integers)\nReturn : True if the list contains no elements or all the elements are zero, \n         False otherwise.\n'''"], [0.1324395442438321, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to find if given list of dictionaries is empty or not.\n\ndef calcNext(num):\n count=0\n n=1\n temp=num\n while not(num==1):\n  if num%2==0:\n   num=num/2\n   count=count+1\n  else:\n   num=3*num+1\n   count=count+1\n return count,temp\nThe above code is a"], [0.13225634803609432, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if dict is empty or not.\ndef reverse_each_word(Sentence):\n  return ','.join(s[::-1] for s in Sentence.split(' '))\n\nThe above code is a python function to reverse the words in a string.\ndef Checkprime(lower,upper):\n  for num in range(lower,upper + 1):  \n   if num > 1:  \n       for"], [0.13203645978928863, "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if every dictionary in a list of dictionary is empty.\n# importing a module\nfrom math import floor, ceil\ndef input_float(prompt):\n    value = float(input(prompt))\n    return value if str(value).count('.') == 1 else ceil\nThe above code is a function to check if the input is a float.\ndef manual_incrementing_matrix(n):\n # Creating"], [0.13102451108838256, "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether the given list is empty or not using all and for loops\n\n# Question 4:\n# Define a function to merge the characters of two strings alternatively. The remaining characters\n# \n# of the longer string are printed in the same order at the end.\n# \n# Sample Input    : \"Sunday\", \"Monday\"\n# Expected Output : \"SunMon\"\ndef mer(str1,str2):\n "], [0.13099167148578364, "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to whether all values in a list are None.\nq) Given a non-empty string and an int n, return a new string where the char at index n has been removed. The value of n will be a valid index of a char in the original string (i.e. n will be in the range 0..len(str)-1 inclusive).\n\ndef missing_char(str, n):\n  start=str[:n]\n "], [0.13076194470399297, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a one line function to check if dicitionary is empty or not.\ndef max_unique(array):\n    dic = {}\n    for key in array:\n        if key in dic:\n            dic[key] += 1\n        else:\n            dic[key] = 1\n    dic1 = list(dic.values())\n    m = max(dic1)\n    return m\nThe above code"], [0.1307175463483324, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to check whether the given dictionary is empty or not.\ndef is_Anagram(s, t):\n    list_s = list(s)\n    list_t = list(t)\n    list_s.sort()\n    list_t.sort()\n    return (list_s == list_t)\nThe above code is to check whether the given strings are anagrams or not.\ndef divisable(a,b):\n"], [0.1306259121226315, "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if a iterable contains an empty dictionary or not.\nUsing if conditional     \ndef three_digits_ctr(str):\n      if len(str)>=3:\n          ctr=0\n          for i in range(len(str)):\n            if str[i]>= '0' and str[i] <= '9':\n              ctr=ctr+1\n      else:\n          ctr"], [0.13013619135109958, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check hwther the given list is empty or not, if empty returns True else returns False.\ndef dict_included(test_dict1, test_dict2):\n  for key, item in test_dict1.items():\n      for k, i in test_dict2.items():\n        if k == key and i == item:\n           return True\n        else:\n            return False\nThe above code is a function"], [0.1299678147613354, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that checks if all the dictionaries in a list are empty.\n''')\n\"\"\"\nWrite an app to take course messages from either a file or random quote generator below(whichever you like)& parse them \nand store them into a dict & print that dict. This code can be used for any message or dialog driven app or parts(or all) \nof a gui or cli app. You can use other names for functions & variables provided except"], [0.1299440484322761, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check wheather the given dictionary is empty or not. if it is empty then returns true else returns False.\ndef float_check(list2):\n float_list= all(type(i) == int or type(i) == float or type(i) == complex for i in list2)\n return float_list\nThe above code is a function to check wheather the given list contains sequencial floats, complex or int elements. if"], [0.12961916076030933, "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a dictionary is empty.\n\"\"\"\nmy_list2 = [1, 2, 3, 4, 5]\n \nmy_list3 = [1, 2, 3, 4, 5]\n \nmy_list4 = [1, 2, 2, 1, 2, 3, 2, 4]\n \nunique_list(my_list4) == [2, 4, 3]\n \nuniqueSet"], [0.12928900102564236, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns true if a given dictionary in the list is empty and false otherwise.\n\"\"\""], [0.1291334802088754, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if all elements are empty lists in a given list of lists.\ndef sq_sum(list1):\n  diff= list(map(lambda s:pow(int(s),2),list1))\n  sq_sum= sum(diff)\n  return sq_sum\nThe above code is a function to round orders of magnitude to the nearest integer and other parameters and return the total summed square difference from the square of natural numbers up"], [0.12881208732659521, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to find if the dictionary is empty or not.\n\ndef remove_dup(list1):\n    for num in list1:\n        if list1.count(num) > 1:\n            list1.remove(num)\n    return list1\nAbove code is a python function to remove duplicate elements.\n\n"], [0.12881172751257938, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether the given parameter make a empty dictionary or not using list comprehension.\n\ndef atomic_weights(elements):\n atomic_weights=(dict(zip(elements, [i for i in range(1, len(elements) + 1)])))\n return atomic_weights\nThe above code is a python function which return dictionary with elements and weights using dictionary comprehension.\n\ndef is_isogram(word):\n\n is_isogram"], [0.128715773328305, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check for empty dictionaries within a list.\ndef inverse_listcomp(t1, t2):\n    return_list = any([(element) for element in t1 if(element in t2 and element%5==0)])\n    return return_list\nThe above code is a function to check if atleast one element in the list is repeated.\n\n# PRACTICE PROBLEMS\ndef check_condition("], [0.12833489052631453, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to determine whether a list is empty or not. \n\n\nfrom sys import maxsize  \n  \n# Function to find the maximum contiguous subarray \n# and print its starting and end index\ndef maxSubArraySum(a,size): \n    \n    max_so_far = -(maxsize - 1) \n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n"], [0.12833489052631453, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to check whether a list is empty or not.\n*/\n// returns the minimum j-i \n// such that arr[j] > arr[i] \nstatic int getMinGap(int arr[]) \n{ \n// Sort array to make sure \n// elements are from small \n// to large \nsort(arr); \n\n// Find maximum of array \nint mx = arr[arr.length-1];"], [0.12830167272869122, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that checks if all the values in a list are False or not.\nTwo algorithms xoring an item be its oddness/evenness against all items are:\n\u00a0 \u00a0 XOR vis a vis consecutive values ===> A==A  B==B\n \u00a0 XOR vis a vis odd and even was ===> (A\u00d7B)\u00d7or(A\u00d7not B)\nThe above code is two different algorithms to check if a number is even or odd.\n"], [0.12803280950790724, "def Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if a dictionary is empty using zip. https://www.geeksforgeeks.org/python-program-to-check-if-a-dictionary-is-empty-or-not/\n\nclass Foo(object):\n    def __init__(self, a):\n        self.a = a\n\n    def methodA(self):\n        print(self.a + '_1')\n\n\nif __name__"], [0.1278420254851279, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether the given dictionary has empty dictionary or not.\ndef list_count_4(nums):\n  count_4 = 0\n  for num in nums:\n    if num == 4:\n      count_4 += 1\n  return count_4\nThe above code is a python function to count number of times 4 appears in the given list.\ndef check_palindrome():\n  sentence = str(input(\"please"], [0.12737971728886363, "from itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to know the dictonary is empty or not in a dictionary\ndef to_combine_prop(test_list, val):\n  return (combinations(test_list, val)) \nThe above code is a function to know the combinations and combination of proper factors of a data.\n"], [0.12663856875078425, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find if a list is empty based on the elements of the list.\n\ndef switchcase(function_1):\n if callable(function_1) == True:\n   def func(list2):\n     count=0\n     switcher={\n         'a': lambda list2:print(abs(max(list2)-min(list2))),\n         'b': lambda list2:print(abs(max(list_"], [0.1262608248817762, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if any dictionary in the list be empty ot not.\ndef common_num(list1, list2): \n res1 = False\n for x in list1: \n  for y in list2: \n   if x == y: \n    res1 = True\t \n    return True\n    break     \n  if res1 == True:\n   break \n return res1 \nThe above code is a function"], [0.12554916315953074, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a given list has nested dictionary key.\n\ninv={'rope':1,'gold coin':2}\ndragon_loot = ['gold coin', 'dagger', 'gold coin', 'gold coin', 'ruby']\n inv = add_to_inventory(inv, dragon_loot)\ndisplay_inventory(inv)\nCode Analysis from Screen-shot -->> Dynamically print the content of a tuple\nIt is a function"], [0.12547714535248974, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns true if all the elements of a list are false.\ndef value_1(L):\n all_compare_1= all(val == 1 for val in L)\n return all_compare_1\nThe above code is a function that returns true if all the elements in a list are equal to 1.\ndef d_word(word):\n return word[0] == 'd' or word[0]  =='D"], [0.12518081997841068, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to find if a dictionary is empty or not.\ndef factorial(n):\n if n==0:\n    return 1\n else:\n    return n*factorial(n-1)\nThe above code is a python function to find factorial of a number n.\n"], [0.12453053436796944, "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is the function to check empty list. https://www.geeksforgeeks.org/python-check-whether-list-empty-not/\ndef dic_count(li, di):\n count=0\n for x,y in zip(li,di) :\n  if x == y : \n  \tcount+=1\n return count\nThe above code is a function to find the matches between tagged and un-tagged words. If a word"], [0.12431845563297719, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a given list is empty or not.\nprimenumber\nA prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. It's not prime(or a composite) number if it is divisible by a natural number other than 1 and itself.\n\nnoprimes = [j for i in range(2, 8) for j in range(i * 2, 50, i)]\n"], [0.12426513757213138, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check for empty dictionary.\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d =="], [0.12416579527750034, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a given list contains items or not \ndef converter(list1): \n res=sum(d * 10**i for i, d in enumerate(list1[::-1])) \n return res\nThe code above is a python function to convert a number into binary.\nThe get_pkcs7_padding function derives the value of the padding to be used in a block.\n\ndef get_pkcs"], [0.12355359665172357, "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if the list is empty or not.\ndef empty_list(list1):\n   empty_list = all(not d for d in list1)\n   return empty_list\nThe above code is a python function to check if the list is empty or not.\ndef primes_sieve(limit):\n    limitn = limit+1\n    not_prime = set()\n    primes = []\n\n    for i"], [0.12339064986977051, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check empty dict in list.\n\ndef myfunc(**kwargs):\n for k,v in kwargs.items():\n  print(k,v)\nThe above code is a function to pass multiple arguments in python.\n\ndef sum(a,b):\n return a+b\nThe above code is a function to add two numbers.\n\ndef mult(a,b):\n return a*b\nThe above code is"], [0.12310941580912915, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a given list is completely empty or not\ndef listtodict(list1,list2): dic=dict(zip(list1,list2)) return dic\nThe above code is a function to convert two lists into a single dictionary\nimport os \nimport commands\nThe above code is a module that is used to create a directory.\ndef filefilter(file1,matchstring): with open(file1) as f"], [0.12301620256901387, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check that if your list is empty or not.\ndef dic(i):\n if len(dic) == 0:\n   return 0\n else:\n   lens = len(dic[0])\n   count =0\n   for x in dic:\n    if lens == len(x):\n      count += 1\n   return count\nThe above code is a python function to check the length of the strings in a dictionary"], [0.12292537364839534, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that checks whether all the nested list are empty in a given list of list of objects.\nimport itertools\nlst = [20, 16, 20, 10, 16, 20]\ndef most_frequent(list):\n    return max(set(list), key = list.count)\n\ndef count_frequency(list):\n    dictionary = {}\n    for num in list:\n        dictionary[num] = dictionary.get("], [0.12279927065336835, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a dictionary is empty.\ndef odd(dt):\n odd=list[filter(lambda x: x%2!=0,list1)]\n return odd\n The above code is a function to filter out odd numbers from a list of numbers.\ndef common(list1,list2):\n common=all(elem in list2 for elem in list1)\n return common\n The above code is a function to check if common"], [0.12261659831527066, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " arranges a python function to traverse through a list, list1 to check whether the sequence is empty.\ndef list_cmp(list1,list2):\n crecyle = any(a==b for a,b in zip(list1,list2))\n return crecyle\n\nThe above arrange is used to find whether two lists A, B are equal or not.\ndef rooter(arr,n):\n  l=0\n  h="], [0.1225995469458422, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that takes in a list of dictionaries and returns True if and only if all the dictionaries in this list are empty.\ndef is_all_items_are_\u02c6(list1,value1):\n all_items_must_have_value=all(d[value]==value1 for d in list1)\n return all_items_must_have_value\nThe above code is a function that takes in a list of dictionaries"], [0.12259508640367364, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\nfrom copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find if a dictionary is empty or not.\n\nclass node: \n    # A utility function to create a new node \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n(graph) is a default dictionary to store graph.\n def find_empty_nodes(graph):\n  parent_child = defaultdict()\n "], [0.12224758593532782, "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \nThe above code is a function to determine if the sum of the divisors of two integers are the same.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if the list is empty.\n\ndef anagram(n,m): \n    n = len(set(n))\n    m = len(set(m))\n    return (n == m)\nThe above code is a function to check if a string is a permutation of other.\ndef main():\n  result = make_list()\n  for i in result:\n    if empty_dit(result) == False"], [0.12176049702168461, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\nimport cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to verify all values in a dictionary are not True.\n\ndef list_triangle(n1,n2,n3):    \n    if n1==n2==n3:        \n        print(\"Equilateral Triangle\")    \n    elif n1==n2 or n2==n3 or n3==n1:       \n        print(\"isosceles triangle\")    \n    else:       \n        print(\"sc"], [0.12172778667100233, "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\n\ndef unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if input dictionary is empty or not.\ndef reverse(s):\n    if len(s) == 0:\n        return s\n    else:\n        return reverse(s[1:]) + s[0]\nThe above code is a python function to reverse the string.\n\n        \nTask 1\n\n1.1\n\nWrite a Python Program(with class concepts) to find the area of the triangle using the below\nform"], [0.1215453814353366, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find whether a dictionary is empty.\nprint(type(34))\nprint(type(34)==int)\nprint(type([12,34])==list)\nprint(type({\"A\":[12,23]})==dict)\n\nThe above code is a program to check what the type of particular variables.\nclass Animal:\n   def user_input(self):\n      self.fp=input(\"enter the food preference:"], [0.12144064117716465, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that takes in a list and returns True for empty dictionaries, else it returns False. \n\ndef nested_list(list1):\n  nested_list=True if len(list1)==sum(isinstance(i, list) for i in list1) else False\n  return nested_list\nIn the above code, the function takes in a list and checks whether the number of items in a list are equal to the total number of diction"], [0.12072174246389188, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a dictionary is empty\ndef square(num):\n  y = None \n  try : \n    y = num**2\n   \n  except : \n    pass\n  return y   \nThe above code is a function to find the square of a\nnumber and returns None if any exceptions occur.\n \ndef sqrt_list(list1):\n sqrt_list=[math.sqrt(n) for n"], [0.12072174246389188, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a dictionary is empty?\ndef coin_change(coins, amount):\n    m = len(coins)\n    table = [[0 if j == 0 else float(\"inf\") for j in range(amount + 1)]\n             for _ in range(m)]\n    \n    for i in range(m): \n        for j in range(1, amount + 1):\n            currentCoin = coins[i]\n            if"], [0.12070544769029991, "def min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks whether a given list is empty or not.\n\nl1=list()\nReturn the list of all possible sublists from a list of numbers.\n\ndef combi(lst):\ncombi = [lst[a:b] for a in range(len(lst)) for b in range(a+1,len(lst)+1)]\nreturn combi\nThe above code is a python function to generate the list of all possible sub"], [0.12058745829976156, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\ndef sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " converts a list into a boolean value based on whether that value is empty or not.\ndef bg_index(text,k):\n    l, r = 0, len(text)-1\n    while l <= r:\n        mid=(l+r)//2\n        if (k==text[mid]):\n            return mid\n        if k > text[mid]:\n            l=mid+1\n        else:\n            r=mid-"], [0.12045520735678632, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks of a dictionary is empty or not.\ndef to_all_substr(str):\n output=[]\n for i in range(1,len(str)+1):\n  for j in range(len(str)-i+1):\n   output.append(\"\".join(str[j:j+i]))\n return(output)\nThe above code generated all the substrings for any string.\ndef to_all_subs_ob"], [0.11996910958447338, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether a given list has empty dit or not.\n\n\n# <h1> Lambda </h1>\ndef add(a, b): \n    return a + b\n    The above code is a simple function to add two numbers.\n\n# Now let\u2019s write the same function using lambda:\nadd = (lambda a, b: a + b)\n    The above code is a simple lambda function to add"], [0.11920956613400548, "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to create a list of empty dictionaries.\n'''\n#example 1 counting rotations\ndef count_rotation(arr):   \n   for i in range (1,len(arr)): \n      if (arr[i] < arr[i - 1]): \n         return i  \n   return 0\n\narr = [10, 15, 1, 3, 8]\nprint(count_rotation(arr))\n"], [0.11916463429843534, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is used to find if all the lists in the list of lists are empty.\n\n\n"], [0.11914324708296066, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if the dictionary is empty or not.\n\ndef list(a): \n a = [1, 2, 3, 4, 1, 2, 3, 4] \n rv = list(map(lambda x: x * 2, a))\n print(rv) \nThe above code is a python function to double each element in the list.\n\ndef reverse(string):\n index = -1\n for i in"], [0.1184907087831953, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to find if a nested list is empty or not. \n\ndef minimum_length(list1):\n return len(min(list1,key=len))\nThe above code is to find the length of shortest string of the elements in a list.\ndef swap(array, first_index, second_index):\n temp = array[first_index]\n array[first_index] = array[second_index]\n array[second_index]"], [0.11837060137282035, "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to tell if a list is empty.\n\ndef flatten(l):\n a = []\n for i in l:\n  if isinstance(i,list):\n   a.extend(flatten(i))\n  else:\n   a.append(i)\n return a\nThe above code takes in a nested list and flatten it.\n\ndef can_make_triangle(sticks):\n a = sorted(sticks)"], [0.11829583924143454, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is nested dictionary checker that if dictionary is empty in python.\n\ndef extract_positive_dict_key(list_of_dicts):\n     result = [k for k in list_of_dicts if k > 0]\n     return result\n\nThe above code is a function to return positive key elements from a list of dictionaries in python.\n\ndef print_dictionary(d):\n sorted_d=sorted(d.keys())"], [0.11809130874750336, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\nimport cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check whether the above dictionary is empty.\n\n    # To print the dictionary        \n    print (\"\\nDictionary after deletion : \")        \n    for key in dict1 :        \n        print (key, \" = \", dict1[key])      \nThe above code is a python program to delete last 3 elements from the dictionary.\nimport cmath  \ndef convert(numbers):     \n    if isinstance(numbers,int"], [0.11808164002029714, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if an empty dictionary is present.  \ndef filter_list(list1):\n filter_list = all(type(el) == int for el in list1)\n return filter_list\nThe above code is a functio to filter an array, extract integer values from it and print True \nif all elements are of type int. Otherwise print false\n\ndef filter_list(list1):\n filtered = [x for x in"], [0.11804245090371553, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\nfrom math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a simple one-liner python function to check if a passed list is empty or not.\ndef add_to(element, to=[]):\n  to.append(element)\n  return to\nThe above code is a python function which adds an element to a list, unless if the list  is given.\n\nelem is a function specifically designed to work on lists containing numbers. \ndef elem(item, l):\n  return True if item"], [0.11789885987053163, "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to judge whether the given dictionary is empty or not\n\n\n\n# **Copy.deepcopy**\ns = [1,2,3]\nit = iter(s)\nprint(it)\nprint(repr(it))\nprint(type(it))\nmax(it), next(it), next(it), next(it)\n\n# Imported module\n# \n# The `requests` library is a very popular library"], [0.11789885987053163, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is used to check if a given dictionary (list1) is empty or not.\nMemory is O(n).\n\ndef print_fun(list1):\n print (list1)\n \nThe above code is used to perfrom task in list.\n\ndef fun(list1):\nEmpty_list=[]\nx=['A','E','I','O','U']\nfor (i,j) in list1 :\n if i%2"], [0.11783307474157016, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check the empty dictionary.\ndef fib(n):\n a, b = 0, 1\n while a < n:\n    a, b = b, a+b\n        print(a)\nThe above code is a function to find fibonacci numbers upto n.\nnums = [0,1,2,3,4]\ndef incr(x): return x+1\nprint(map(incr,n"], [0.11774721839493724, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check for an empty dictionary in a given list.\ndef max_key(words):\n  letter = max(words.keys())\n  return words[letter]\nThe above code is a function which finds the letter with the highest frequency in a string.\ndef words_changing(words,test):\n\n\nThe above code finds a list of words from the user which starts with a specific letter or the words that have a specific number or symbols between them"], [0.11729407503180136, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python code to check whether given list is empty or not.\n(y-1)^n + (y+1)^n\nThe above code is a python expression that provides the sum of above series given y as the input.\ndef max1(a,b,c): \n if( a > b and a > c):\n        return a \n elif( b > a and b > c): \n        return b \n else"], [0.11728430203165306, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to determine whether a complete opperation can be performed in the given data or not.\ndef multiple_sevn(num):\n while(num%7==0):\n    num=num/7\n num=num%7\n return num\nThe above code is a function to determine whether a given number can be divisible by 7 or not.\n"], [0.11719369157345945, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to delte all the empty elements in a disordered nested alist.\n\n3.5.5 list comprehension \ndef Matrix(n,m):\n    row= [0]*(n)\n    Matrix= [row]*m\n    return Matrix\nThe above code is a function to generate a list of matrices with n rows and m columns.\n\n3.6.1 Lists\ndef init(size):\n    PQueue"], [0.11718627898778712, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to empty dictionary.\n\ndef concat_dict(dic1, dic2):\n    temp = dic1.copy()\n    temp.update(dic2)\n    return temp\nThe above code is to concatenate two dictionaries.\n\ndef intersection_diff(dic1,dic2):\n    set(dic1) & set(dic2)\n    set(dic1) -"], [0.1168876194191253, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if the given list of dictionaries is empty or not. \n\nWork Efficient BST\nAn efficient implementation must consider one thing- pre-pending elements in the tree.\n\nIn order to demonstrate the implementation, we will use the same examples that we have used for the \npre-pend implementation in order to handle tasks with list:\n\na.prepend(12), b.prepend(5), c.prepend("], [0.116804927419169, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find if the given list is empty of all dictionaries. \ndef number_sevens(list1):\n return list1.count(7)\nThe above code is a function to count number of the value 7 in a given list.\ndef remove_duplicate_count(list1):\n    return list(dict.fromkeys(list1))\nThe above function is a function to remove the duplication of the elements in a list and"], [0.116804927419169, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\ndef neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if stack is empty or not.\n\nclass Node:\ndef __init__(self):\nself.data=None\nself.next=None\n\ndef push(self,data):\nreturn\ndef pop(self):\nreturn\nThe above code is a simple node class as we dont want it to take too much of inputs.\n\ninterview qs:\nsum of N number and take inputs dynamically\nasking the quotient"], [0.11674408845339551, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function which checks if all values in a dictionary is empty or not. The function accepts a list of dictionaries as an argument.\nclass Foo(object):\n    def bar(self):\n        print('bar')\nclass Foo_again(Foo):\n    def spam(self):\n        pass #pass to not generate an error\nclass Eggs(Foo_again):\n    pass #pass to not generate an error\nThe above code is a"], [0.11673024944011817, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " gets the false output if a list is empty. It returns true if it is not.\n"], [0.11666619862030064, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to tell if dictionary is empty.\n\ndef right_word(word):\n    return all(word[i].sort()==word[i+1].sort() for i in range(len(word)-1))\nThe above code is a function to tell if all words are anagrams.\n\ndef great(op):\n    op=[int(x) for x in str(op)]\n    op=[len(op[:x"], [0.11665050127784302, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to find whether given dictionary is empty or not.\nimport pygame, random, sys\npygame.init()\nscreen = pygame.display.set_mode((640, 480))\nClock = pygame.time.Clock()\nBall = pygame.image.load(\"intro_ball.gif\")\nBall_y = 0\nBall_x = 0\nSPEED = 6\nGravity = 1\nwhile True:\n "], [0.11648483725612394, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to return False if given dictionary is empty.\ndef break_two_word(word):\n    words=word.split()\n    first_word=words[0]\n    second_word=words[1]\n    print('//', first_word, '\\n//',second_word)\nThe above code is a function to show two given words in alternate order"], [0.11609750533746539, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to list out dictionary elements which are empty. \ndef dir_func(element):\n    return [attr for attr in dir(element) if not (attr.startswith('__') or attr.startswith('_'))]\nThe above code is a function to list out the the elements in any given python object.\n\n"], [0.11588050884930508, "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if the list is empty.\ndef check_duplicate(str_inp):\nimplement the whole enter;y\ncount=1\nfor i in str_inp:\n    if i==\"(\":\n        count+=1;\n    else:\n        count*=-1\nif count==1:\n    print(\"not nested\";\nelse:\n    print(\"Nested with level;    count\"\n    "], [0.1156749378873324, "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a given list is empty.\ndef find_what(data,what):\n try: \n   return data[what]\n except KeyError as e:\n   return \"{} not found\".format(e)\nThe above code is a function to find value at a given key and if that key is not present, it returns a message that key not found.\ndef num_of_char(string):\n list(map(lambda"], [0.11566858071291396, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function that takes a list and checks whether any dictionary in the list is empty or not.\n\ndef filter_odd_even(l):\n    even, odd=[],[]\n    for i in l:\n        if (i % 2)==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    output = [even, odd]\n    return output\nThe above code is a python function"], [0.11504524648656585, "def reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to identify if an empty dictionary was passed to it through boolean value.\ndef is_odd(num):\n if num%2==1:\n    return True\n return False\nThe above code is a function to check if a given non decimal integer(greater than 0) is odd or even by boolean return value.\ndef get_powers(power):\n return [num**power for num in range(0,10)]\nThe above code is a"], [0.11502852915743186, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\nimport re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that check if a given list is empty or not.\ndef create_board(n):\n count=n\n while count!=0:\n         print(\" ---\" * n)\n         print(\"|  \" * (n + 1))\n         count-=1\n return\nThe above code is a function that create a NxN number triangle.\ndef get_available_moves(S):\n if speed<=S:\n        "], [0.1146414662747253, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function that returns True if all key value pairs in d1 are also present in d2 and False otherwise.\n\ndef mab2str(dir):\n words=dir.split(\"\\\\\")\n nb=words[1].split(\".\")\n ok=os.path.exists(str(nb[0])+\".txt\")\n return ok\nThe above code is a function to convert the file name of extension to just file name and check whether"], [0.11442681180778128, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if all the Nested Dictionaries are empty in a given list\ndef max_consecutive_ones(num):\n n = bin(num)\n count = 0  # max counter\n m = 0\n for j in n[2:]:\n     if j == '1':\n         count += 1\n         if count > m:\n             m = count\n     else:\n         count = 0\n return m\nThe"], [0.11432369973070734, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to conditionally return True, if all sublist of a list is empty.\nprint(list.digits)\n\nGiven an integer value in Python, return a list of the individual digits across the integer value.\ndef count_upp_low(s): \n    s=list(s)\n    t1,t2=0,0\n    for i in s:\n        if i.isupper():\n            t1+=1"], [0.11423800238997062, "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if the list is empty in python.\ndef is_Unique(x):\n bool = False\n unique = x - set([x1 for x1 in x if x.count(x1)> 1])\n return unique\nThe above code is a function to tell if the list is unique in python.\ndef lambda_test(N):\n  \ns = \"string\"\ns = [num for num in s if s not num"], [0.11325502534108078, "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", "s checks if all elements in a list are zero.\nThe Cartesian product of two sets $A = [a_1, a_2, \\ldots, a_n]$ and $B = [b_1, b_2, \\ldots, b_m]$ is defined as the set of all possible $(x, y)$ where $x \\in A$ and $y \\in B$ More generally, the Cartesian product of two sets"], [0.11323211829558474, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to determine if the list contains at least one empty dict\n\ndef dict_forbidden(dict_small,dict_big):\n count=0\n dict_small_key=sum([all(key in dict_small for key in k) for k in dict_big.items()])\n for k,v in dict_small.items():\n     for m,n in dict_big.items():\n         if dict_small_key:"], [0.11318206936471671, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find whether a provided directory is empty or not. Function should return True if empty and False if not.\ndef dict_reverse(dict1):\n dict1.reverse()\n return dict1\nThe above code is a function for dictionary reverse lookup. Function should return False if the provided key does not exists in the dictionary else function should return the value of key from the dictionary.\n"], [0.11318206936471671, "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to find whether a given dictionary is empty or not.\n\ndef order_tube(bill):\n amount=3*bill\n return(amount)\nAbove codes is a function to print the bill amount of the order with the three different tube stations\nThe Print function can be used when the value need to be printed is already present in the code\ndef find_type(var):\n    ty = type(var)\n    return print(ty)\n"], [0.11296021101667382, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function that return if a list is empty or not.\n\ntry:     \n    num1 = float(num1)    \n    num2 = float(num2)    \n    print(num1/num2)    \nexcept (ValueError, TypeError):    \n    print(\"Do not Enter string of values.\") #The code will only ouput pass if the provided numbers are not string inputs.\n    \nTypeError - value error"], [0.11295953239043283, "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find if a list is empty or not using all() function.\n\n\ndef removeElement( nums, val):\n  while(val in nums):\n      nums.remove(val)\nThe above code is a function to remove all the occurances of a particular number in the given list.\n\ndef myfnction(string):\n    count = 0\n    for i in string:\n        \n        if i in \"aei"], [0.11260384912886816, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find if a dictionary is empty or not.\ndef diff_sq_sum(List1):\n    square1 = sum(map(lambda x: x ** 2, List1))\n    square2 = sum(List1) ** 2\n    return square2 - square1\nThe above code is a function to find an difference between the sum of square of the first list with the sum of squares of the second list.\ndef check_password("], [0.11224779224730963, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is the function to check if all the dictionary values are empty.\n\n#these are all dictionary functions\nimport operator\ndef minm(l1):\n\tt=min(l1.items(),key=operator.itemgetter(1))[0]\n\treturn t\n#12. Find Three Largest Numbers\ndef m3(arr):\n arr.sort()\n temp=arr[-3:]\n temp.reverse()\n return temp\n"], [0.11214437015273354, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns true if all the dictionaries in the list are empty. \nWhat are some ways to check the emptiness of a dictionary?\ndef concatenate_three_lists(list1, list2,list3):\n  conc_list=list1+list2+list3\n  return conc_list\nThe above code is a function that returns a list which is the concantenation of the three lists mentioned in the function.\nfrom"], [0.11210841659761582, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that takes in a list of tuples and checks if the first element of th tuple is present, if not, it returns false else all empty or missing elements are flagged.\ndef common(words): \n    word = []\n    first_word = words[0].split()\n    for x in first_word:\n        for y in first_word: \n            if x == y:\n                word.append(y)\n    print"], [0.11200964108789635, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function o find the empty dictionary in the given list.\n\ndef find_duplicate(list1):\n    n=(list(set([a for a in list1 if list1.count(a)>1])))\n    return n\nThe above code is a function to find the single repeated items in an given list.\n"], [0.1117921206224686, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find whether a nested list(anything mostly arrays) contains all empty arrays.\n\n\ndef merge_arrays(a, b):\n merged_array = []\n i = 0\n a_len = len(a)\n b_len = len(b)\n while True:\n     if i == a_len:\n          merged_array.append(b[i])\n          break\n\n     else:\n          if a[i] <"], [0.11159311305824718, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to determine if all the keys in list of dictionaries is true then it returns empty dictionary otherwise it returns false.\ndef list_comprehens (item1, item2):\n    return [item for item in item1 if item in item2]\nprint list_comprehens([1,2,3],[1,2,3,4])\ndef dict_creation(list1, list2):\n    return {list1[i]:"], [0.11101201845835432, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\nimport math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to determine whether a given dictionary object is empty or not.\n\nprocess = True\nwhile process:\n if (process == True)\n break\nThe above lines provides the ability for a user to terminate the operation at runtime.\nimport math\ndef area_circle(r):\n a=math.pi*r*r\n return a\n The above code is a function to find the area of a sphere,we are importing math into the script.\ndef"], [0.11083219917728274, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check a list empty.\ndef gen_squares(list1):\n return [x**2 for x in list1]\nTesting to see what is in the list - When you put \"s.isprintable()\" it returns true for all letters and for sentences, but for a word it only returns true if the word is a \"string\" like \"ant\". In this case you have the text file saved and read in all at once and you"], [0.11082335212650678, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function which finds if a dictionary contains all empty dictionaries or not.\nimport re\ndef string_match(text1,text2):\n return bool (re.search(r'\\w+\\s\\w+',text1) and (re.search(r'\\w+\\s\\w+',text2)))\nThe above code is a python function to find whether the text1 and text2 match or not.\ndef a_"], [0.11059717305227416, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to find if a given list or dictionary is empty or not.\ndef rotate_list(list1,n):\n list=list1[-n:] + list1[:-n]\n return list\nThe above code is a python program to rotate a list by n elements.\ndef Fibonacci(n):\n def fib(n):\n  if n == 0 or n == 1:\n   return n\n  elif n < 0"], [0.11045836292838199, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is python function to check whether the list contains nan or not.\n\n\nIn the Fourteenth chapter ,the conversation between Topic One and two were talking about two python function. Numpy.linspace() function takes the start and end point,number of points required and the sequence for which the same of points to be given.\nIn Numpy.sort() function,we can sort a list of element. We can reverse the list as well. It can be used to sort arrays by"], [0.11016074891187587, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that checks wether the given dictionary is empty or not.\ndef string_keys(input1,key):\n return_string=input1[key]\n return return_string\nThe above code is a function that returns the value associated with the key present in string to the program.\ndef string_values(input,value):\n return_string= None\n for k,v in input.items():\n  if v == value:\n   return"], [0.10985056905218965, "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find dictionary is empty or not\ndef count(anyTypeDict, k):\n counter = 0\n if anyTypeDict != None:\n  for anyTypeVal in anyTypeDict.values():\n   if anyTypeVal == k:\n    counter = counter + 1\n return counter\nThe above code is a function to count occurrences of an item in a dictionary(values).\ndef merge_lists(lst1, lst2"], [0.10978917792325996, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to find whether all the given values <N> are empty dictionaries or not.\ndef add_100(list1):\nfor i, v in enumerate(list1):\nlist1[i] = (v + 100)\nprint(list1)\nreturn list1\nThe above code is a python function to add 100 to each dictionary values in the given list whose key value is matched with the given argument..     \nimport collections\ndef"], [0.10968653760775243, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to empty dictionaries of a given dictionary list.\nThe functions below helps to split a string and iterate over it:\ndef string_to_array(int_string, size = 5):\n    return [int_string[i: i + size] for i in range(0, len(int_string), size)]\n\ndef iterate_over_string(big_string):\n    big_array = string_to_array("], [0.10956354671120812, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\nimport sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function check that all the items in a dictionary are empty strings and returns True if so.\nRemember to return the value.\nsample_passwords = ['Hello', 'Hi', 'good', 'BYE', '@21', 'WAP in hindi', 'start',\n                   'bitch', 'white', 'race', 'stop', '152', '21103', '567',\n                   '123', '911', 'police', 'family"], [0.1092199317908285, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to find whether a given list is empty or not.\ndisplaylist = [110, 10] \ndisplaylist = [x+10 for x in displaylist] \nprint(displaylist)\nThe above code is a way to add a value 10 to each element of a given list of integers.\nlist1 = [(-1, 2), (0, 4), (0, 5), (1, -1), (1, 4),"], [0.10903490430351488, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function that takes in a list and checks if the list is empty or not.\ndef largest_num(list1):\n print(max(list1))\nThe above code is a python function that takes in a list and prints the largest value present in the list.\ndef smallest_num(list1):\n print(min(list1))\nThe above code is a python function that takes in a list and prints the smallest value present in the list."], [0.10881173093386572, "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \nThe above code is a function to determine if the sum of the divisors of two integers are the same.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to determine that if a given list1 contains all empty dictionaries or not.\ndef valid_dict(nums):\n nums = list(nums)\n for i in range(len(nums)-1):\n     if nums[i]>nums[i+1]:\n        return False\n     return True\nThe above code is to check if a given dictionary is valid or not.\n\ndef sort_dict(my_test):"], [0.10870584096570017, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to determine if all the dictionaries are EMPTY IN A LIST\ndef to_camel_case(text):\n    text = \"\".join(x for x in text.title() if not x.isspace())\n    return text[0].lower() + text[1:]\nThe above code is a function to convert Cameled case into PASCAL CASE.\ndef truncate(n, decimals=0):\n    multiplier ="], [0.10866176148914083, "def triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to return true if the given input is not none an empty ditionary .\n\ndef find_consecutive_sequence(input_array):\n if len(input_array) == 0:\n   return -1\n if input_array[-1] - input_array[0] == len(input_array)-1:\n   return input_array\n else:\n   for i in range(0, len(input_array)"], [0.10863269771044673, "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", "s is a function that accepts a list of strings and returns true(sequence is empty or all dictonary are at empty state) or false(sequence is not empty or all dictonary are not at empty state).\n\nimport os\ndef recycle(file_name):\n fp=os.path.join(\"C:/Users/\",\"Recycle Bin/\"+file_name)\n if  os.path.exists(fp):\n  os.remove(fp"], [0.10847493045834042, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is used to find whether the given list is empty or not.\n\ndef ard(n) :\n    ar = 0\n    ai = 1\n    for i in range(0, n) : \n        print(ar, \",\" ,ai,   end = \" \") \n        ai = ar - ai\n        ar = ai + ar \n  \n    return    \nThe above code is a simple lambda function to do immediate"], [0.10843297470211424, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns True or False if the ditctionary is empty or not. \ndef xyz_there(str):\n return bool(re.match(r'(?<![\\.])[\\.]{0}[xyz](?![\\.])',str))\nThe above code is a function that returns True or False if the strings start with 'x', there is an occurrence of 'y' followed by 'z', ignoring occ"], [0.10836741336255225, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a given list contains empty dictionaries. [Or: Does every element of the list contain a dictionary?]\nstr\nThe above code variable is the variable storing the string \"6.00x\".\nfactors\nThe above code variable is the list [2, 3, 4, 6]\ns\nThe above code variable is the string \"MIT\"\nd\nThe above code is the dictionary. The dictionary has MIT as a key and a list"], [0.10782676518750417, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that checks whether all the entries of the dictionary are either None, an empty string, or 0.\ndef check_val(key, val)\n  employee = {\"name\":\"John\",\"age\":31,\"salary\":25000,\"city\":\"New York\"}\n  key = key.lower()\n  list = [i.lower() for i in list(employee.keys())]\n  if (not key in list):\n    print(\"Key"], [0.10776851951128819, "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks whether all the elements of a given list are empty.\nfrom urllib.parse import parse_qsl\ndef parse_application_exclusive(s):\n    pairs = parse_qsl(s, keep_blank_values=True)\n    for key, value in pairs:\n        print((key.decode(\"utf-8\"), value.decode(\"utf-8\")))\nThe above code is to return a tuple containing the decoded key"], [0.10767084637653955, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns True is all entries in the list are empty dictionaries, and false if there is even one dictionary with keys.\ndef clense_list(list1):\n list2=all([type(i)!=list for i in list1])\n return list2\nThe above code is a function that filters out elements that are lists from the list.\ndef valid_triangle(a,b,c):\ndef valid_triangle(a"], [0.10758947134774992, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns True if all the elements of the list are empty.\n\n#code\ndef find_solution(a, b, c, d):\n    for p in range(10000000, 0, -1):\n        if (p*p-1)%(a*c)==0 and (p*p-1)%(b*d)==0:\n            gcd = math.gcd(a,b)+"], [0.10758554979430339, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if the input dictionary is empty.\n      d={}\n      listwt = [{'a': 1, 'b': 2}, {'a': 0, 'b': 3}, {'a': 1, 'b': 4}]\n      emptylist = []\n      emptylist=all(d==[] for d in listwt )\ndef max_index(list1):\n  return max(range(len(list"], [0.10698510578154562, "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\ndef lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that checks whether a given list is empty or not.\ndef traingle_auval(S, A, B, C): \n  traingle_len= math.sqrt( (S - A) * (S - B) * (S - C) * S ) \n  return traingle_len\nThe above code is a function that returns the area of the traingle, when the length of its three sides are given.\n\n"], [0.10682331843461267, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to check whether a dictionary is empty or not and store the result in a boolean value.\ndef empty_str(str1):\n if str1:\n return False\n return True\nThe above code is to check whether a string is empty or not and store the result in a boolean value.\n\ndef num_times_digit(n,digit):\n count = 0\n for num in range(n,10**digit):\n if \"4\" in str("], [0.10680032895333263, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that checks if a dictionary passed is empty or not.\ndef blank_square (num):\n n = num\n k = num\n l = []\n count = 0\n while k!=0:\n  for i in range(n):\n    for j in range(n):\n     if (i\u662f+j)**2 < num:\n      l.append([i , j])\n    k = k - 1\n  return l\n"], [0.10680032895333263, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns true/false if a list is empty/non empty.\nPlease post your suggestions.\n\nReference:\nPython List\nFunction to empty a dictionary\n\n\nSolution:\n\ndef empty_dit(list1):\n    return all(not d for d in list1)\nimport math\ndef small(b,c):\n  area=(b*c)/2\n  return area\nThe above code is a function to find the area of"], [0.10672817598761103, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a Python user defined function to check for dictionary emptiness.\ndef zip_string(str): \n  result = \"\"\n  for x in str:\n    if x.isupper():\n\t    result+=x.lower()\n    elif x.islower():\n\t  result+=x.upper()\n    else:\n\t    result+=x\n  return result\nThe above code is a Python user-defined function to shuffle characters of a string"], [0.1063969246768826, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to find whether given input is empty or not\ndef buggy(arg, result=[]):\n print(\"result_before :\", result)\n result.append(arg)\n print(\"result_after :\", result)\n test=buggy(\"a\")\nprint(\"result_end :\", test)\ndef buggy(arg, result=[]):\n print(\"result_before :\", result)\n result.append(arg)\n print(\"result"], [0.10635261168245286, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to compare two different lists.\ndef no_Of_Digits(n):\n    if(n==0):\n        return 1\n    ans=0\n    while(n):\n        ans+=1\n        n//=10\n    return ans\nThe above code is a function to fint out length of the given list.\ndef contains_Digit(num, digit):\n digit=str(digit)\nnum=str(num"], [0.10628961812242532, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is python function it checks whether a given dict is empty or not.\nThe Dict comprehension contains an expression to create key-value pair.\nWe iterate over a sequence of key-value pair in dict1 and create a new dict based on the mapping \ndef tripletTuple(a,b,c):\n    return [(x,y,z) \n            for x in range(a) \n            for y in range(b) \n"], [0.1062778342066531, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is used to check if all dicitionaries in the list is empty or not.\n\nimport copy  \nold_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \nnew_list = copy.deepcopy(old_list)\nThe above code is used to make deep copy of a list. The difference between \nshallow and deep copying is only relevant for compound objects (objects that contain other"], [0.10615825679078573, "def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is return true if the given dictionary contains all empty strings.\ndef sort_list(liste):\n  sort=sorted(liste,key=len)\n  sort.reverse()\n  return sort\nThe above code is a function for sorting the given list with the length of the element in it.\ndef is_unique\n[*map(sorted,li)]\nThe above code is a function to find the unique elements from a list by storing every"], [0.10615658830057817, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\nimport re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find if all the dictionaty elements are empty.\ndef double_list(list1):\n list2=[i*2 for i in list1 ]\n return list2\nThe above code is a function to change all elemets in second list by multiplying by 2.\ndef concat_list_to_string(list1):\n string=''.join(str(i) for i in list1)\n return string\nThe above code"], [0.10599945283079128, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find (if any of the list in given list has all its elements as empty).\n\ndef len3_string(list1):\n re1=[]\n for str1 in list1:\n  if len(str1)==3:\n   re1.append(str1)\n return re1\nThe above code is a function to find string which contains only 3 characters.\n\ndef Greater4(list1):\n re1="], [0.1058120650202803, "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if there is any key with vaue as True. nd automatically convert non empty lists in false.\n\ndef long_words(n, str):  \n    word_len = []  \n    txt = str.split(\" \")  \n    for x in txt:  \n        if len(x) > n:  \n            word_len.append(x)  \n    return word_len   \nhas"], [0.10569896735241426, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that takes in a nested dictionary and returns a boolean value indicating if all of the nested dictionaries in the dictionary are empty.\ndef std_fl(numlist):\n meannum=statistics.mean(numlist)\n stanlist=list(map(lambda x: (x-meannum)**2,numlist))\n q=sum(stanlist)/len(stanlist)\n return q\nThe above code is a function that takes in"], [0.10530719395892162, "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks if the given list contains any empty dictionary or not.\n"], [0.10526596419311846, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is used to check if a Dictionary is empty or not.\n\ndef get_capital(city):\n  old_cap = city[\"capital\"]\n  country = city[\"country\"]\n  new_cap = \"President \" + old_cap[0].upper() + old_cap[1:] + \", \" + country\n  return new_cap\nThe above code is to return the full name of a person along with his father name and so on.\n\n"], [0.10517120574935265, "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to determine whether the given input is an empty.\n  \n\nSolution\nInterview Google\nSatya Narayana\na=list('ABCDE')\nprint(a) \nb =map(list,a)\nprint(b)\n\n8\nList Methods\n\n\n\nMethod\tDescription\nappend()\tAdds an element at the end of the list\nclear()\tRemoves all the elements from the list\ncopy()\tReturns a copy"], [0.10447982132459546, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is python function to check if a given list is empty or not . \nNote : \nHere we are using list 'not' as we should take list for appending.\nAnd we are using  all with boolean values for checking if the list is empty or not..\n  \n\ndef twopow() :\n  n = 6 #users imputed number\n  num_list = [2 ** y for y in range(n+1)]\n  return"], [0.10429199811599073, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\nimport re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to identify if all the dictionaries in the given list have none of the items.\nJAN 31\nWhat is strabgified?\na=\"apples\"\nif a:\n print(\"Is true\")\nelse:\n print(\"Is false\")\n here my string is False in boolean because it has none space inside.\n similarly I can check that all digit or albhabetic and special charecters to my string\n so ,if I"], [0.10374144958134329, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to check if a dictionary is empty. We have been asked to do another dictionary exercise where we will keep track of the values from 0 to n in the dictionary. \n\nint the function we will check if the value exists in the dictionary and increment the count by one. If %2 is 0, Odd otherwise, even. \n\ndef important_printing(num):\n  count = 0\n  res = 0\n  for i in range(1"], [0.10361149175101227, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks whether a given list is empty or not.\ndef double(n):\n     a= [] #creates an empty list\n     i=0   \n     while i<=n:\n     #while i is less than or equal to given integer\n        a.append(i) # append element values to list\n        a.append(i)  # append element value to second time,shows repeated values \n        i = i+1\n     return"], [0.10345714776779726, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that takes in a mixed typed list and checks if all values in the list are dictionaries and returns true if so, else it returns false.\n\ndef palindrome(num):\n patterns1 = '^1?2?3?4?5?6?7?8?9?0?$'\n if re.search(patterns1, text):\n return True\n\n The above code checks if a given number is a palidrome,"], [0.10313611346003065, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks whether a list1 is empty or not which returns True or False.\ndef more_than_n(list, item, n):\n  if list.count(item) > n:\n    return True\n    else:\n    return False\n\n    The above code checks if a list item is present more than n times in a list.\n\ndef same_length(list1,list2):\n  return len(list1)==len(list2"], [0.10264869490866821, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " shows a function which accepts a list and returns true if the dictionaries in the list contains empty dictionary.\ndef multiple_3_5(num):\n    count=0\n    for i in range(1,num):\n        if i%3==0 or i%5==0:\n            count=count+i\n    return count\nThe above code is to show functions which accepts a number and returns cumulative sum of all the numbers matching the criteria of the condition"], [0.10254206940413807, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function which return True when all dictionary values in list division are 0.\ndef subtract_the_mean(arr):\n    arr=list(map(int, arr.split(',')))\n    new_list = list(filter(lambda x: (x!=min(arr)), arr))\n    sum_of_values = sum(new_list) \n    arr=sum_of_values / (len(new_list) - 1"], [0.10251913732010343, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks if a dictionary is empty or not. It is implemented in the following way:\n\nIt new in Python 3 so you'll have to make sure you have Python 3 before trying this at home.\n\ndef add_to_dict(a_dict, key, value):\n    a_dict.update({key:value})\n    print('value', value)\n    print('key', key)\n    print(a_dict)\nThe above code is"], [0.10251913732010343, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function is similar to the all() method. all() returns True if all of the items are True, otherwise it returns False.\n\ndef remove_duplicate(list1):\n  return list(set(list1))\nThe above code is a function to remove duplicate from a given list.\n\ndef max_frequent_element(list1):\n  return max(list1,key=list1.count)\nThe above code is"], [0.10251107959012029, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " return a boolean value if list of dictionary contains empty dictionary.\n\ndef too_hot(temp, is_summer):\n    if is_summer == False:\n        return (temp>60) and (temp<90)\n    else:\n        return (temp>60) and (temp<100)\nThe above code is a function to return a boolean value whether it is too hot or not, based on a temperature and whether it is summer or not"], [0.10235225262842854, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to check if the dictionaries in the list are empty.\n\n\nList of frequent hashing :\nMurmurHash3 : \nIt is not part of a standard library\n\n\n\nimport sklearn\nfrom sklearn.feature_extraction.text import CountVectorizer \nvectorizer = CountVectorizer()\ncorpus = [\"This is the first document from heaven\"]\nX = vectorizer.fit_transform(corpus)\nprint(vectorizer"], [0.10216862090313149, "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check empty dictionary.\ndef insert_end(string):\n  sub_str = string[-2:]\n  return sub_str * 4\nThe above code is a python function to get a string consisting of the last two characters of a specified string\n  \nimport itertools\ndef perbandingan():\n hasil_pertama = [(x, y, z) for x, y, z in itertools.product("], [0.10213898621898873, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\ndef kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a functiuon to find whether all the given nasted dictionaries are empretory or not\n\nlist1=[{},{},{}]\nDictionary checked with all function is {}.\nempty_dict(list1)\n\n# The above result can be verified by checking with the given list of dictionaries\ndef remove_special_characters_from_unix(string, pattern = '[^a-zA-z0-9"], [0.1019947384543661, "def check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function which returns the boolean value that says whether all the dictionaries in list1 are empty.any(bool(d) for d in list1)\n\n# Python Program to Replace the Using map() and lambda() along with iter()\ntest_list = [(\"gfg\", 1), (\"is\", 2), (\"best\", 3),(\"for\", 4), (\"CS\", 5)]\ntest_list = [(\"gfg\", 1), (\"is\", 2"], [0.10188974762247777, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function return True if a given list is empty else returns False.\n\nlist=[]\nlist.append(list)\ndef sum_freq(list1):\n    res=0\n    length=len(list1)\n    while True:\n        if not boolean(list1.count(1)==list.count(False))\n        return False\n        if not boolean(list1.count(length)==list.count(False"], [0.1018312766155562, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that finds an empty dictionary in a list, indicated by an all of the values being false.\ndef duplicate_items(list1):\n     st=set(numbers)\n     duplicatest=set(numbers)-m\n     list.append(list(duplicatest))\n     list.extend(list(st))        \nreturn list\nThe above code finds a set of duplicate items in a list, with the unique"], [0.10177760788048595, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to test if all objects in the list have values that evaluate as false.\nfrom sys import path\npath.append(\"/home/user/Desktop/python/generic\")\nfrom basic import BasicOperations\nfrom string import string_functions\nfrom advanced import advanced_operations\nfrom operation import operations\nfrom stringops import str_operations\n#print(\"Hello World\") \nprint(\"Type objects from numeric_operations download below:\")\n"], [0.10177760788048595, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if the given list contains element if not then it return true.\n def server_check(a,b,c):\n        if (all(s >= 90 for s in [a, b, c])):\n                return \"bittorrent\"\n        if (any(s >= 90 for s in [a, b, c])):\n                return \"icmp\"\n        return \"udp\"\nThe above code is"], [0.1017259899754218, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function checks whether all the dictionaries in the list argument are empty. \n \nprovided main function, that iterates through the x01 list, tests each dict item with the \npack_consecutive_duplicates function and reports on the number of empty dictionaries.\n\n# Sample Application\n# \nScientist had developed a scheduling application (unintrusive type) to tackle the ISI problem. \nThey invited an external consultant for a"], [0.1014878977509605, "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a to check the if all of elements of a are exist keys of a list return True else False.\nimport sys\n\nINPUT = sys.stdin.readlines()\n\nlines = int(INPUT[0])\n\nfor i in range(1,lines+1,1):\n\tstring = INPUT[i]\n\tresult = [1 if string[j]!=string[j+l] else 0 for j in range("], [0.1013189972013108, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that checks if a list is empty and returns True if the list has no elements, and False if the list has one or more elements.\n\ndef duplicate():\n l1= [1,2,3,4]\n l2=[5,6,7,8]\n result=list(map(lambda x:x,l1))\n result.extend(list(map(lambda x:x,l2)))\n return result\n\n\n"], [0.10107106655011486, "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that cheks if a boolean list is empty.\n\ndef hourclock(hour,minute):\n if (hour>=12 and minute>0):\n  hour=hour-12\n elif (hour<10 and minute>0):\n  hour='0'+str(hour)\n fin_min=minute*6\n hour=int(hour)\n fin_hour=(hour*30)+(minute*(6/10))\n difference"], [0.1010649070567267, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find the empty distinct value from a list.\ndef list_stage1(lst,i):\n  res=[]\n  lst=[x for x in lst if cor(x)==i]\n  for i in lst:\n    res=res+i\n  print(res)\nThe above code is a function to access numbers of a list. If you give the \nfive element of an string as 'xyz"], [0.10100812513355444, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that return True when all dictionary elements in the list are empty.\ndef min_diagonal(N,N,matrix):\n  diag=sum(matrix[i][i] for i in range(N))\n  return diag\nThe above code is a function that returns sum of diagonal of given matrix, adjusted size is N by N.\n"], [0.10100812513355444, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function which verifies if a given set has a empty dictionary or not.\ndef sum_dict_values(list1,dict2):\n  sum_dict_values=sum(dict2.get(c) for c in list1)\n  return (sum_dict_values)\nThe above code is a function that returns the sum of the values in the dictionary word_counter.\ndef split_string(line1,c):\n line1"], [0.1005812378256181, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to return True if empty, otherwise False.\ndef solution():\n # Write code here \n print yes \n\n\n# solution()\n# This is the solution of the problem\nn = int(input())\nall_prime=[1]\nfor num in range(2, n + 1):\n    if num > 1:\n       for j in range(2,int(pow(num,0.5))+1):\n           if"], [0.10055038295598683, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\nimport sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a empty_dit function whichcheck if all values in dictionary is false or not.\ndef revers_listelment(list2):\n list2.reverse()\n return (list2)\nThe above code is to reverse the element of a given list\n\nfrom collections import Counter \ndef duplicate_count(text):\n text = text.lower()\n dict1 = dict(Counter(text)) \n return (len(dict1)-sum(x is"], [0.10049577551746534, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to find whether an input list is empty or not using list comprehension.\n\ndef sort_inputs(in_list):\n in_list.sort ()\n in_list = tuple(in_list)\n return in_list\n\n\nThe above code is a function to sort the input tuple elements in the given order and return the tuple.\n\nThe rest of the code is for illustration purpose only for the above functions.\nThis is for the basic inputs to understand"], [0.10047641733843574, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is Given the Python list l, that contains only numbers in the range from 1 to l.length, return the only number in the list that does not have a pair. The function should return \u22121 if the list does not contain such number.\nThe above code is A function to check whether a given list contains any duplicate number. The function should return \u22121 if the list contains any duplicate number. Else it should return the only element which occurs once in the list.\ndef check"], [0.1004275973606034, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that will remove all dictionaries from a list that are empty.\n\n\n# Final Program\nimport string\nNo_1 = input(\"Please enter your first number, this number can include decimals or whole numbers: \")\nNo_2 = input(\"Please enter your second number, this number can include decimals or whole numbers: \")\nfor x in (float, int):\n\ttry:\n  \t\tx(No_1)"], [0.10022107477626317, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\nThe above code is a python function to remove odd numbers from a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function which returns True if all d in a given dictionary are empty else returns False.\n\nfor i in range (MAX_TRIES):\n    num_count = 0\n    guess = input(\"Guess \" + str(i+1) + \"? \")\n    #Check if guess contains an integer\n    if(not re.match(\"^\\+?[1-9][0-9]*$\", guess)):\n       "], [0.10002888420186103, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if the given list contains empty dictionaries.\n \nIf the value of the keys is 0 then the answer is false otherwise true.\ndef adding(dict):\n dict_test=lambda d:all(val + 1 == d[val + 1] for val in d)\n return adding(dict)\nThe above code is a python function to print the sum of dictionaries.\ndef dictionery(list1):\n dit="], [0.10001924379203349, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to delete empty dictionary from the given list of dictionary.\n\ndef string_list(list_):\n p=[]\n for i in range(len(list_)):\n  for j in range(len(list_[i].split())):\n   p.append(list_[i].split()[j])\n return p\nThe above code is a python function to convert all the elements in the given list into a list of a"], [0.0998151843573129, "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find emty dictionary and print a boolean value based on the condition.\n\ndef freq(input,data=input):\n freq=data.count(1)\n return freq\nThe above code is a function to count a item in a given dictionary and return the length.\n\ndef find_new(list1):\n list_ele=[el for n in list1 for el in n]\n return list_ele\nThe above code"], [0.09965183850253495, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " returns True if all dictionary values are empty lists in the given list of dictionary. Given any list containing dictionaries, the code returns false if atleast one dictionary contains atleast one item.\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"], [0.09962224067951468, "def filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is used to check if the given sit is empty by content or length is zero or not.\nn_unique= len(user_col2.unique())\nn_unique\ndef findDuplicate(List): \n return [x for x, y in collections.Counter(List).items() if y > 1]\n   \ndef palindrome(s):\n    return s == s[::-1]\n   \ns=\"nurses run\""], [0.09951489899935705, "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns True if all the dictionaries in the list are empty, otherwise False. If an empt\nimport numpy as np\nlst = [[1, 0, 0], [1, 0, 1], [1, 1, 0], [0, 1, 0], [1, 1, 1], [1, 0, 0]]\nprint(\"Original lists:\")\nprint(lst)\nprint(\"Unique rows:\")\ny = np"], [0.0990837455736251, "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is function which checks that a given dic is empty or not.\n\ndef alphabatic_sort(word1):\t\n list1 = word1.split()\n list1.sort(key = lambda s: s[0])\n res = [' '.join(list1)]\n print(res)\nThe above code is a python function which gets the first alphabet of each element (understood as letter) of a string, applies sorted and puts it back"], [0.09902227382772355, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to return True if all the items in a dictionary are in the list, False otherwise. \n\ndef menu_selection():\n menu='''(a) show inventory\n(b) show an amount cheaper than than a given value.\n(c) show which department has a given amount of items.\n(d) the average price of any given number of items.\n(e) quit the program\n'''\nwhile (a not in menu):"], [0.0988322309978814, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is used to check if a list is the empty.\n\ndef construct_dict(list1):\n c = dict()\n for i in range(len(list1)):\n  \n   c[list1[i]] = i\n return c\nThe above code is used to create a dictionary of a given list of values.\ndef dict_to_tuple(dictionary):\n dic={}\n dic['a']=[1,2,"], [0.09878279943055876, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns True when all items are empty in a given list else return False.\nfrom datetime import date\ndef days_past(d,m,y):\n    for_today = date(2018, 10, 29)\n    date1 = date(y, m, d)\n    delta = for_today - date1\n    return delta.days\nThe above code is a function that calculates the given date past days present.\nfrom collections"], [0.09851671675598163, "def digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is the python function to check on empty dictionary.\ndef check_dict(dict1,dict2):\n    return all(val in counter2.keys() for val in counter1.keys()) and all(val2 == val2 for val in counter1.keys() for val2 in counter2.keys())\nThe above code is The above code is the python function to check on dictionary keys.\ndef recursive_reverse(inlist):\n    if len("], [0.09842214274933363, "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to see if a dictionary has attribute or not, as in if an empty dictionary is passed then it will give True otherwise false.\nPython program to make the dictionary where the value adds up to 30 with the key which is not a list.\ndef dict1(n):\na,b,c=0,0,0\nwhile a!=90 and b!=90 and c!=90:\n    a=int(input('plz enter"], [0.09805406275700107, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is All dictionaries in the list1 are empty, then return True.\n\ndef concat(list1):\n result = ''\n for i in list1:\n \tresult += str(i)\n return int(result)\nThe above code is convert the given elements from a list to an string and finally a int . \n  \ndef get_mean(list1):\n length=len(list1)\n total=sum(list1)\n"], [0.09801960661304539, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is illustrates how to check if a given set is empty or not. \nThe following code is an example based on the above empty set explanation.\nlist1 = {'G', 'E', 'E', 'K', 'S'}\nprint(empty_dit(list1))\nThe above example outputs True because the length of the set is 5 and the length of the set with distinct elements 'G', 'E', 'E', 'K' and 'S"], [0.09774486649401017, "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function that returns it's script true if all the dictionaries are emplty in a given dict. \n\ndef sum_key_values(x, y, z):\n return x+y+z\nThe above code is a python function that return the sum of the values of the dictionary.\n"], [0.09735603157584785, "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\n\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to check if a given dictionary is empty or not in python.\n\n\nflatten_dict = {'a': 1, 'b': {'x': 2, 'y': 3}, 'c': 4}\n\ndef flattenDict(d, result=None):\n\nif result is None:\nresult = {}\nfor key in d:\nvalue = d[key]\nif isinstance(value, dict):\nflattenDict("], [0.0971095897084351, "def last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function checks whether everything in a given list is empty (False) default\n\ndef isglobal(s):  \n return 'global' in s\nThe above code is a python function to find whether a given string contains \"GLOBAL\"\n\ndef latestRome(population,landArea): return max([population,landArea])\n\nThe above code is a python function to find what is the smallest parameter between population and land area\n\ndef highest_growth"], [0.09705029804954647, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python script to check the size of the dictionary. \n"], [0.09675788056886482, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to detect whether a python dicitionary is either completely empty, or contains any key-values pairs. We will have it return a Boolean value (True / False)\ndef splitlist(list):\nsplit_list=list.split(',')\nreturn split_list\nThe above code is a function to convert a serries of names seperated by commas, into a nested list- I.e. Jeanie, Jolly, Joyce, Henry"], [0.09643826197874106, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function which takes a list and returns a true value if the list is empty.\ndef intersection(lst1, lst2): \n    lst3 = [value for value in lst1 if value in lst2] \n    return lst3 \nThe above code is a python function to find the intersection of two given lists.\ndef intersection(lst1, lst2):\n new_list=()\n '''for"], [0.096315855178051, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to find the empty dictionary.\nThe code created a dictionary with 10 keys with different string name. Assigned values to the keys using random,method.Now empty dictionary is created using comprehension technique. We pass created dictionary to condition, which decides according to the input values that the condition is true or not. \nNow it checks if all the keys in the dictionary are having value False, True, None return true. If true then empty dictionary is completed, which is being"], [0.09583166137380168, "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\n\ndef check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to define if the specified dictionary is empty or not.\n\ndef factorial(N):\n    # Python program to find the factorial of a number provided by the user.\n\n    # change the value for a different result\n    num = N\n    \n    # uncomment to take input from the user\n    #num = int(input(\"Enter a number: \"))\n\n    factorial = 1\n\n    # check if the number is negative, positive or"], [0.09561793110513483, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function given list1 is empty.\n seq=\"gttcgatgtacgtgga\"\n for i in range(1,len(seq)-1):\n     n.edges.append(seq[:i])\n     n.edges.append(seq[-i:]\nThe above code it generates the 2D array of all possible DNA assembly.\nn=input()\nfor i in ['c=','c-','dz="], [0.09516248254319153, "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function which returns True if all items in the given list are empty.\ndef square_index(N,index):\n return [i**N for i in range(index+1)]\nThe above code is a complex loop statement to print the squares of numbers N with the given index value. In short command is **.\ndef celsius_fahrenheit(C):\n     return (C*(9/5))+32\nThe above code is the"], [0.09511961573326358, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that takes a list and returns the truth value of whether all the the values are 0.\n\ndef cookie_list(list1,biscuits):\n count=0\n while cookies:\n  list1.pop()\n  count=count+1\n return count\nThe above code is a function that takes two lists as arguments and removes the last item from the list passed as second argument until there are no almost any itemts left in it; then,"], [0.09509853739223906, "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " has the purpose to see if its the empty dictionary or not. Assuming that it is dict or not.\n'''\nimport os\nimport pandas as pd\nld=os.listdir()[:]\nfor i in ld:\n\tcon=os.path.splitext(i)[0]\n\tif \"Normalised\" in con:\n\t\tos.remove(i)"], [0.09505382567297993, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks if all items (dictionairies) in a list contains an empty dictionary or is an empty dictionary itself. It returns true if there are no elements (no dictionairies) in the list or no elements in the dictionairies.\n\ndef all_keys(list1):\n\treturn all(key for d in list1 for key in d)\nThe above code takes in a list and checks if every list element is empty (the element is all keys in"], [0.09503284029782733, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to return true when the given dictionary is empty else returns false.\ndef fun1(a,b):\n   if a<b:\n    a,b = 2*a, 2*b\n    return a , b\nThe above code is a function which gets two integer values as an input and returns its half.\n\ndef sort_name(names):\n    names = sorted(names, key = lambda x : x[1] )\n"], [0.09498013000525124, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " to check the list is empty or not based on the value of list1 whether it is empty(True) and not empty (False) if it is empty(True) then it returns true, otherwise, false.\n\ndef print_duplicate(list1):\nempty_dit=all(list1)\nlist2=[if i in i+1 list1]\nreturn list2\nThe above code to print duplicate values of list1 in list2.\n"], [0.09498013000525124, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks if the list is empty which comes out to be a boolean.\ndef count_list(list2): \n    all_words = {}\n    for words in list2:\n        if words in all_words:\n            all_words[words]+=1\n        else:\n            all_words[words] = 1\n\n    return all_words\nThe above code is a function that takes a list and converts it into a dictionary to find the distinct"], [0.09445147210443226, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to return true if all the items of a dictionary are empty else false.\n\nFunctions\nThese are some of the important functions that can come handy to manipulate Python data types.\n\nabs(): The abs() method returns the absolute value of the given number.\n\nbin(): The bin() method converts the specified integer number into the binary format.\n\nbool(): The bool() method converts the specified value into a bool type.\n\neval(): The eval()"], [0.09432902640774138, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function which returns true when the dictionary is empty but it returns false when Dictionary have some items or we can say if items present in the dictionary it returns false and show result in boolean.\n\n\n"], [0.09432876903897662, "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to print the empty dictinary in string format.\ndef dict_list():\n return  [(v, k) for k, v in zip(range(5), \"stas\")]\nThe above code is a python function to convert the given list into an dictonary with even values.\ndef dict_diff_13(start, end,dic):\n dict_diff_13={v:start + (end-start)*dic"], [0.09406068661812499, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function to return output as True if the given dataset is empty, otherwise return False.\n\ndef conditional_check(list1):\n return all(any(l == i for l in list2 if l != i) for i in list1)\nThe above code is a python function to get test inputs to check if the dataset belongs to a single class or two or more classes depending on the total sum of one-hot vectors (Nth vector for N unique values"], [0.09390473589832755, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks if a list has none of the element, meaning we are dealing with an empty dictionary.\ndef common_elements(list1, list2):\n common_elements = [element for element in list2 if element in list1]\n return common_elements\n\npython function to find elements common in two lists and remove intersection.\ndef empty_dict(list1):\n empty_dict = all(not d  for d in list1.keys())"], [0.09361255387709895, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to check if list contains empty dictionary.\nNote that this problem was also user in an Insight Segment 3.\n\"\"\"\n\n\"\"\"\nInterview Questions:\nRecursive Solution:\n1. When m = 1, possibilities = 4.\n2. When m = 2, possibilities = 14.\n3. When m = 3, possibilities = 34.\n4. The first number after \"3\" that does not follow the pattern is m = 4, "], [0.09335998859769228, "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that shows empty dictionaries\ndef mod_inverse(number1):\n    return 0\nThe above code is a function that Shows multiplication over p without (p being prime)\ndef fibonacci_prime(m):\n    def nth_fibonacci(n):\n        f0, f1 = 0, 1\n        for _ in range(n-1):\n            f0, f1 = f1 ,f0+"], [0.09308058976016656, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " returns True if all the dictionary in list1 are empty.\n\ndef di_con(list1):\n return all(type(l) == int for l in list1)\nThe above codechecks the elements in the list are int.\n\ndef n_num(string, n):\n return re.findall(r\"(?<![a-zA-Z0-9.])\\b[+-]?[0-9]+(?"], [0.09303718293581169, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " helps us to know whether passed list is empty by checking the values in there.\nNote: all() return True if all items in a given dict are True, else it returns False\nThe above code tells us whether all the element in a dictionary are Krraui.\n*/\n#define static static\n#define _type(x) type(x) \n#define done(x) do { switch (x) { case 0:; break; }} while (0"], [0.09260143217272566, "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to find if the passed list contains empty dictionaries.\nmy_list = [1, 2, 4, 4, 2, 5, 2, 4, 5, 4, 2, 5, 4]\nlist1 = [] \nfor i in my_list: \n    if i not in list1: \n        list1.append(i) \n  \nprint (list1) \nThe above code is a python function"], [0.09253964788332855, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function that returns true if all the keys of a dictionary are empty.\ns=int(input())\nl=[i for i in input().split()][:s]\nlist=[]\nfor i in l:\n    list.append(int(i))\nprint(min(list))\nprint(max(list))\nprint(len(list))\n#palindrome string\nn=input()\nrev=''.join(revers"], [0.09168975846814509, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " returns True if all the items of the given list are empty (\u201c\u201d or []) otherwise it returns false.\nPart C\n\nIn this part, I take two lists of the same length L (the length L will returned by the function square_Sum in Part B). The two lists are named in1 and in2. I split both lists into two parts by using the meothod of split_two_parts (defined above) where the first part of each"], [0.09133556217888511, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks whether a dictionary is empty or not.\nState whether the dictionary is empty. If it is empty, then it will return true; otherwise false.\n\ndef f(n):\n    x = 0\n    while x < n:\n        yield x\n        x += 1\nSome people believe that generators use less memory. They do not occupy any memory space as they are not initialized at the time of calling.\nIf you want to use some computed value for the next"], [0.09109559632977952, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that takes as input a list and returns a Boolean value as an output.\n '''\n\n#3.1\nprint('3.1')\n\nstr1 = 'A string is a sequence of zero or more characters.' \n\nlst = tuple(str1.split()) #we convert the string to a list and then to a tuple\ntup = ('allowable', 'incomprehensible')\nnew = lst + t"], [0.09107143917859249, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function which will return whether the given dictionary has all its values as none or not, it is equivalent to all([not d for d in list1]), but it works for dictionaries unlike \nall as all only works for lists.\ndef maximum_concat(list1,list2):\n res = [(a[i] if i < len(a) else None) for i in range(max(len(a), len(b)))]\n res"], [0.09104731775673656, "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a funtion to check if all the values of a given list is zero\nimport numpy as np \nfrom keras.preprocessing import sequence \nfrom keras.models import Sequential  \nfrom keras.layers import Dense, Dropout, Embedding, LSTM \nfrom keras.datasets import imdb\nfrom keras.utils import to_categorical\nmax_features = 20000\n# cut texts"], [0.09093554813329228, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " returns true if a List is empty and false otherwise.\ndef enqueue_dequeue(list1):\n actual_list=list(list1)\n \nprint(\"Enqueuing and Dequeuing in a Queue :\", end =\" \")\n empty_queue=True \n for i in range(14):\n  if  empty_queue :\n   print(\"The queue is Empty \",end=\" \")\n   if(((actual_list"], [0.09067894806830078, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " returns true when there are no more elements in a dictionary.\nWrite a program that takes an array A and an index i into A, and rearranges \nthe elements such that all elements less than A[i] (the pivot) appear first, \nfollowed by elements equal to the pivot, followed by elements greater than the \npivot.\nimport c\ndef dutch(a, pivot_index): \n\tpivot = a[pivot_"], [0.09067894806830078, "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function which takes a list of dictionaries and returns true if a dictionary is empty.\ndef vowels(string):  \nstr = 'aeiou'\nstrng = [i for i in string if i in str] \nreturn (strng)\nThe above code is a function which takes a string and returns a list of all the vowels in that string.\ndef isCryptSolution(crypt, solution):\n    solution = {key:value"], [0.09059145199201835, "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to determine whether all the dictionaries are empty, just like the code:\n all(not d for d in dicts)\n\n def check(func, numbers):\n    result = func(numbers)\n    if not isinstance(result, (int, float)):\n         raise TypeError(\"The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\")\n    return result\nThe above code is"], [0.09021349396844157, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " enables a function which returns True if all the given dictionaries are empty.\n\ndef lists_compr1(n, values):\n return [y for x in range(n) for y in values]\nThis is a pyhton comprehension which combines all list values of values together into single list multiplied by the number of its value repeatedly.\n\ndef lists_compr2(n, values):\n return [values[x % len(values)] for x in"], [0.09002696599846008, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function which has a list as an input, and it checks so that every key has a value associated with it, if all keys have a value associated with it, then it returns True, if not, it returns False.\n\ndef distance(str1,str2):\n    distance=len([str1[x]-str2[x] for x in range(0,min(len(str1),len(str2)))if abs(str1"], [0.08955189461344985, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to verify whether a given list is empty. If empty, it returns True. If not empty, it returns False. \n\ndef bigram(s,n):\n\tres=[]\n\tcount=0\n\tfor i in range(len(s)-1):\n\t\tif s[i]==s[i+1]:\n\t\t\tcount+=1\n\t\telse:\n\t\t\tif count>=n-2:\n"], [0.08935458027639394, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " will return True if all the dictionaries in the given list is empty and False otherwise.\ndef max_consecutive_1(numbers):\n list1=[]\n for i in numbers:\n  if 1==i:\n   list1.append(1)\n  else:\n   continue\n for h in list1:\n  count=list1.count(h)\n return count\nThe above code will return the maximum number of consecutive 1s"], [0.0891754542485401, "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that finds an empty directory of list.\n"], [0.0891682445743427, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns true if all the items in the dictionary are None.\nThe most brief way is to actually print the output.\ndef foo(t,tree):\nout=\"\"\nfor x in t:\n if x in tree:\n out+=\"yes \"\n else:\n out+=\"no  \"\n return print(out)\nThe above code is a function that goes through all the elements of tuple t and returns whether or not all of them are in"], [0.08908345582054471, "import re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that matches an integer that is more than or equal to '0'.\n\nimport re\ndef text_starta_endbc(text):\n    return re.search(r\"^a.*?b$\", text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b', with a single c after it.\n\nimport re\ndef text_startabcc(text):\n"], [0.08869548523242408, "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to find whether the given list1 is having the giben element or not,if not returns true otherwise returns false.\n\n#Reference\n[1]https://github.com/user119334/examples\n[2]https://www.geeksforgeeks.org/finding-length-of-a-list-in-python-set-1/\n[3]https://stackoverflow.com/questions/493386/how-"], [0.08820833684299528, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function that returns True and False if all(iterable is empty or not).\ndef execute(a, b,  add, subtract, multiply):\n  print(add (a, b))\n  print(subtract (a, b))\n  print(multiply (a, b))\nThe above code shows three arguments which are two numbers and three function names which are to perform addition, subtraction and multiplication\ndef execute(a,"], [0.08812566173135587, "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function.\n\nprint 12*'#','\\n',35*'-','\\n','12*#','\\n'\nThe above code will print the elements in a particular format.\n\nprint'\\n',35*'-'\n\n\n\nprint 45*' reem '\nThe above code will display the output,45*' reem ', with particular format.\n\nprint'''\n\nkastina eker\\n\nterser"], [0.08801095798791009, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks whether the data is minial, empty or full. If the data is empty, it returns true. If it returns false, this means that the data contains stuff used for other processor calculations.\ndef var_int(*args):\n  init_array=list(args)\n #print(init_array)\n  for i in range(len(init_array)):\n     init_array[i]=0\n #print(init_array)\n "], [0.08779411772372561, "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function returns True if passed dictionary is empty else it returns False.\ndef Except_Value(list1,key):\n  for keys , values in list1.items():\n    if keys == key:\n      del list1[keys]\n  return list(\"{}\".format(k) for k in list1.values())\nThe above code is a function that accepts a dictionary and an integer as input. Removes all the\n totples of the"], [0.08761091738044019, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to determine if all the dictionary pairs are empty.\nFile[\"citynumber\"]\nthe city assigned to the corresponding number.\ncd c:\nprompt PC>\n\npython ex3.py\ncheck in the program file to find the data preparation phase first.\n\n\"\"\""], [0.08745172630030672, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to check if a directory is empty.\n\n# **K-th Problem**\nThere's a staircase with N steps, and you can climb 1 or 2 steps at a time. Given N, write a function that returns the number of unique ways you can climb the staircase. The order of the steps matters.\n\nFor example, if N is 4, then there are 5 unique ways:\n\n1, 1, 1, 1\n2, 1, 1\n1"], [0.08701867980404966, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function using the python all() which uses the for loop and the for loop convert's the list into the NOT(!) which means empty . return(list)\n\ndef devide_list(list1):\n x=len(list1)\n splitLen=1\n while (x > splitLen):\n  splitLen = splitLen * 2\n while (splitLen<(x/2)):\n  x=(x-splitLen)\n return ("], [0.08701867980404966, "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that checks wether a dictionary is empty.\ndef non_unique_dict_check(some_dict):\n Orignal = Counter(some_dict)\n Orignal=dict(Orignal)\n Storage = {k:v for k, v in Orignal.items() if v > 1}  \n return Storage   \nThe above code checks wether a dictionary has key that is not unique.\ndef list_duplicates"], [0.08663527025860564, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " returns true if a dictionary is empty, false if not.\ndef two_add(a, b): \n    return a + b\nThe above code will add the two many words are stored in a list.\ndef removed(lis, element):\n del(lis[lis(element)])\n return list\nThe above code will solve the multiple elements that contain the same variable.\ndef Average(lists):\n  i = 0\n  x = 0\n "], [0.08655404593900339, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " returns whether all dictionary keys in the iterable are empty.\n\"\"\"\nfrom string import ascii_lowercase \nfrom itertools import count, product \ndef complete_domains(domains): \n    return {var: [val] if var[0] == \"#\" else [val \n        for val in domains[var]] for var in ascii_lowercase \n           if var not in domains} \ndef get_"], [0.08620916933057549, "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks if a list contains any elements or not and returns True if the list is empty and returns False if otherwise.\nimport collections\ndef rearrange_digits(input_list):\n    \"\"\"\n    Rearrange Array Elements so as to form two number such that their sum is maximum.\n\n    Args:\n       input_list(list): Input List\n    Returns:\n       (int),(int): Two maximum sums\n    \"\"\"\n    list1=col"], [0.08610865034627765, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns true if the input list is empty.\n\"\"\"\nimport io\nimport string\nimport ast\nimport itertools\nimport math\nimport random\n\n# Complete the sockMerchant function below.\ndef sockMerchant(ar):\n    no = 0\n    for key, value in itertools.groupby(sorted(set(ar))):\n        no += len(list(value))//2\n    return no\nif"], [0.08595378703869806, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function that check for empty dictionary. \n    #a=[]\ndef compare_str(str1,str2):\n\n[1,2,3] == [1,2,3]\nThe above code is a python function that compares two list.\n\ndef compare_list(list1,list2):\n\n[1,2,3] == [3,2,1]\nThe above code is a python function that compares"], [0.08582482382050943, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a function that returns True if all the values in the list is False (empty) else False\nimport numpy as np\n\ndef main():\n    print(\"\\nThis program evaluates the famous quadratic equation:\\n\")\n    print(\"   (a * x^2) + b*x + c = 0\\n\")\n    a, b, c = eval(input(\"Pls provide the coefficients a, b and c: \"))\n\n   "], [0.08568130627484105, "import math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is a python function to find the empty dictionary.\n\"\"\"\n\"\"\"\nArthmetic methods\n\"\"\"\n\ndef multiply(num1, num2): #wrong\n   return num1 * num2 if (num1 >= 0  and num2 >= 0) else \"Wont be able to multiply\"\n\nans=multiply(34,5)\nMy ans 14 170\nCorrect ans 70\n\ndef multiply(num1, num2) :\n    "], [0.0852709232810149, "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " will extract the list of all dictionaries among the given list\n\ndef print_duplicate_integer(array):\n\tfor k, v in (element, count) for element, count in Counter(array).items() if count > 1\n\tprint(k)\nThe above code will print out the integer that appears more than \nve = set(new_array)\n\n\nfor i in range (1,len(new_array)):\n\t"], [0.08526074654836263, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " finds  the given dictionary is empty.\n>>> comprehension = [ i * i for i in range(100) if i % 2 == 0 if i % 5 == 0 ]\n>>> print comprehension\n#The above code prints the list containing squares of all even numbers which are also multiples of 5\ndef tuple_con(tuple1): \n  list1=list(tuple1) \n  return tuple(list1)\nThe above code is a function"], [0.08487649761370195, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks if all the lists in the list is empty.\ndef missing_char(text):\n\ts = []\n\tl = list(text)\n\tfor i, e in enumerate(l):\n\t\ts.append(text[:i] + text[i + 1::])\n\t\treturn s\nThe above code removes all the characters of the string and returns a list of the removed strings.\ndef count_hi(text):\n   "], [0.0840247455757895, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks if the list contains empty dictionaries or not so that it can pop them out of the fuutre.\n\ndef make_dictionary(iterable):\n    user_key_value = {}\n    for i in iterable:\n        for j in i:\n            user_key_value[j] = j\n    return user_key_value\nThe above code makes a dictionary from an iterable and returns the dictionary.\n\n\n\nbuild_"], [0.08376832431850444, "def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " return true if a Dictionary or List is empty or false if contain values\nCreate an Acronym. Take first letter of each word for this function\nFor Example \"MS for Microsoft\" \nBecause A Acronym is created from the first letter of each word. It needs to convert the given string into a list by splitting it. Then run through each word and taking only the first letter of every word and creating a new list that it append to original empty string such as \"\"."], [0.08327191172509207, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\ndef check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to fetch all the empty dictionaries within a lists.\ndef check_copy_list(list1,refe):\n from copy import deepcopy\n copy_list = deepcopy(list1)\n if copy_list == refe:\n    return True\n else:\n    return False\nThe above code is used to test the working of deepcopy module.\ndef check_copy_tup(val,refe):\n from copy import deepcopy\n"], [0.08261169679075427, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " will check if the list is empty and all the values are false.\n\nA dictionary is a mapping from key to values. Keys are unique within a dictionary while values may not be.\u00a0The values of a dictionary can be of any type, but the keys must be of an immutable data type such as strings, numbers, or tuples.\n\nAn empty dictionary without any items\u00a0is written with just two curly braces, like this: {}.\n\nKeys:\n'mutable"], [0.08252301452243646, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " searches and returns true if a dictionary is empty.\ndef int_con(string):\n    x=string.isInteger()\n    print(x)\nAn integer is a whole number, positive or negative, without decimals, of unlimited length. The function above checks the string and returns the value of the string whether it is an integer.\ndef str_change(val):\n    val1=val[-1:]+val[1:-1]+val"], [0.0817236423913079, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " returns the True if a list is empty and false if a list isnt empty.\nTo make the function return a boolean value we must use the function all() that return True if the list is empty and false if the list isnt empty.\n\nCreate a dictionary of keys - student names and values - shirt sizes. Use these two dictionaries to return a list of student\nnames but dont return duplicate names. \nobjective: Create a dictionary then use it to create 2"], [0.08035363634798354, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is used for empty dictionary or nested dictionary. It takes nested dictionary as input and return true if input dictionary is empty and false when dictionary is non empty.\n\n\n"], [0.08026811531570383, "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is an inbuilt one that returns True if all members of a dictionary is empty.\nseq=['07895462130','919875641230','9195969878']\n[list(filter(lambda x: (len(x)==10 and x.isdigit()),seq))]\nFiltered the list for phone numbers containing only 10 digits and no alphabets.\ndef abc(alphabet):\n  if (alph"], [0.07984733261465657, "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks whether a given dictionary is empty.\n\nEx: l={60: 'B', 70: 'C', 80: 'D', 100: 'A', 65: 'A', 55: 'B'}\n>>>output: it will give all the key values along with their frequency in the dictionary\n{'B': 2, 'C': 1, 'D': 1,'A': 2}\nimport os\ndef num_files(a):\n    return len"], [0.07972287758131578, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is used to pop an element of a dictionary.\nNOTE:Every method used must have a return statement.\n\"\"\"\n\"\"\"\n8)Python modules\nNote:A python module is a normal python file having a class,function or variable defined tob execution in another file.\nA module is accessed using the import statement as in P4 Q4script(modulename.classname/function name). \nThe modules are filtered according to parser to decide the compiler which is"], [0.07859126257157543, "def list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks if a dictionary object is empty.\nimport copy\nimport numpy as np\ndef makeZero(mx):\n c=copy.deepcopy(mx)\n for x in mx:\n     for y in mx:\n             a=int(y,16)\n             np.binary_repr(a, width=8)\n             b=np.binary_repr(a, width=8)\n return c\nimport requests\n\n"], [0.07824810874311128, "def Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is Return True if dictionary is empty\n\ndef check_elem(list1): \n  if list1[:2] == [-2, -1]: \n    return True \n  elif list1[-2:] == [1, 2]: \n    return True \n  else: \n    return False\nThe above code is Assign True if list1 contain [-2,-1] as a subsequence or if list1 contains ["], [0.0782222967536855, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " will remove the items from the list where there is an empty dictionary.\ndef remove_even(list1):\n res =[val for i, val in enumerate(list1) if i % 2 !=0] \n print(res)\nThe above code will remove the even numbers from a given list of numbers.\nCourse 5 Functions List Loop Exercises 01\n        1\n       21\n      321\n     4321\n    54321\n    \n"], [0.0782222967536855, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is using all not keywords to find empty list.\nx=5\nx += x-x \nThe above code is doing initializing x to 5 and then, updating the x to 5 again, i.e., initializing x to 5.\nn=5;\nfor i in range(n):\n  for j in range(i):\n    print ('* ', end=\"\")\n  print('')\n  for i in range (n,0"], [0.07669514353459422, "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " will return True if all the keys of the dict arempty and value of dict is None and returns False if any one keys of dict not empty.\n#selecting the greates number from list while keeping the order(smallest to largested)\ndef large_num(a):\n a=sorted(a)[::-1]\n print(a[0])\nprint(large_num([1,2,3]))\nThe above code will produce"], [0.07625396072081346, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to create an empty dictionary.\n\ndef comp(array1, array2): \n  try: return sorted([i**2 for i in array1]) == sorted(array2)\n  except: return False\nThe above code is to compare two arrays and match the squares of it of whatever has the same value with each other.\ndef uni_total(string1):\n  return sum(ord(i) for i in set(string1))"], [0.07591857749703701, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " returns the boolean value.\ndef dic_key(dict1):\n return sorted(dict1)\ndef dic_key(dict1):\n data_key=[]\n for keys in dict1:\n  data_key.append(keys)\n print data_key\ndef key_empty(dict1):\n key=[]\n for c in dict1:\n  key.append(dict1[c])\n return key\n empty_dict="], [0.07449537625589495, "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is to find if the given dictionary is empty.\ndef common_item_in_list(list1, list2): \n    common_item = [item for item in list1 if item in list2] \n    return bool(common_item) \nThe above code is used to find if the intersection of the two given lists is empty.\ndef \ndef first_last6(list1):\n    if (list1[0] =="], [0.07412626107031543, "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " checks for empty dict containing dict().\ndef add_values(dict1, dict2):\n\tdict3 = dict()\n\tit = dict(zip(dict1, dict2.values()))\n\tfor k, v in it.items():\n\t\tdict3[k] = v\n\treturn dict3\nThe above code places the existing values of dict2 in dict1 if the keys in dict1 match the keys in dict2, else assigns value"], [0.07330001034495082, "def pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " is boolean logic. It returns true if all dictionary value is null\ndef check_bool(var1,var2):\n print bool(var1) is bool(var2)\n check_bool(0,2)\nThe above code determine if both parameters have the same boolean value\ndef s2u16(No):\n  return chr(No%256) + chr(int(No/256))\nprint s2u16(110)\n"], [0.07257127474932171, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code", " returns the non empty set with numbers not divisible by 3,5,7 \nfrom collections import namedtuple\nBook = namedtuple(\"Book\", \"author title genre\")\nbooks = [\n           Book(\"Pride and Prejudice\", \"Austen\", \"romance\"),\n           Book(\" leaves of grass\", \"Whitman\", \"poetry\"),\n           Book(\"A Jury of her Peers\", \"Twain\", \"fiction\"),\n           Book(\""]]}
