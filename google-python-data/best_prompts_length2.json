{"prompt": {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 293, "prompt": "Write a function to find the third side of a right angled triangle.", "code": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s", "test_imports": [], "test_list": ["assert otherside_rightangle(7,8)==10.63014581273465", "assert otherside_rightangle(3,4)==5", "assert otherside_rightangle(7,15)==16.55294535724685"]}, "queries": [[0.3745817970303361, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\ndef rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenus of a right angled triangle.\nx=tf.Variable(5)\ninit=tf.global_variables_initializer()\ny=tf.map_fn(lambda x:x*x,x)\nwith tf.Session() as sess:\n  init.run()\n  print(y.eval())\nx=tf.Variable(5)\nz=tf.Variable(158,trainable"], [0.16856619219065655, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right angle triangle. Look at the code...look..look carefully.Whao there is a mistake , right?.\n\nCan you resolve the mistake and find the required code?\n\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt(w*w+h*h)\n  return s\nThe above code is a function to find the hypotenuse of"], [0.16981504401771377, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the side of a right angle triangle when the length of the other 2 sides are known.\n\ndef all_starts_with_x(lst): \n\tif [x for x in lst if not x.startswith(\"x\")]: \n\t\treturn False \n\treturn True\nThe above code is a function to check whether all the elements of a list start with the letter x.\n\"\"\"\ndef nearest_"], [0.1410474871337119, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\nimport cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to print the missing side of a right angle triangle.\n50.The following code snippet print squareroot of a negative number,how do you fix it?\nimport cmath\nprint (cmath.sqrt(-9))\nThe above code is a function to print the 'None' value.\nimport math\ndef square_val(n):\n  square=math.pow(n,1./3)\n  return square\nThe above code"], [0.19130709653759026, "def last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is to find an oposite side of a right angled triangle.\ndef sum_list(nums):\n  result = sum(nums)\n  return result\nThis is a python function to calculate sum of all elements of the list.\n\ndef new_word(word):\n  word = word[::-1]  \n  return word\n\nnew_word(\"Morning\")\nThe above Python function reverse the given string word.\n\ndef new_"], [0.08750384592780018, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes in the hypotenuse and the adjacent side and returns the opposite side\n\ndef no_Stars(n):\n  for i in range(0,n) :\n    for j in range(0,n) :\n      if i==0 or i==n-1:\n        print (\"*\")\n      elif i==n//2 :\n        print (\"*\")\n      elif j==0 or j==n-"], [0.17385017983312798, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function which finds the length of the hypotenuese side of the right angled triangle.\n\ndef round3(f):\n    return str(round(int(f),2))[:3]\nThe above code is a function to round a given float to exactly three decimal places.\n\ndef firstword(word): \n    return word[:word.find(\" \")]\nThe above code is a function to find the first word(string) of"], [0.1606576606957368, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the side of a right angle triangle that is not the hypotenuse.\n\nimport datetime\ndef date(Monday,Tuesday,Thursday,Saturday):\n  d = Monday + 2 * Tuesday + 2 * Thursday + 2 * Saturday\n  h = d % 30\n  m = (d / 30) + 2\n  if h > 29:\n      h = h % 29\n      m += 1\n      d = m * 30 +"], [0.1677461145580428, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the other side of a right-angled triangle, given the two other legs of it.\n\n#**CHAPTER 6 EXERCISES**#\n\n#Programming exercise #1\nThis is a programme to horizontally flip the image imagefile.jpg\nfrom PIL import Image\nmyimage = Image.open(\"imagefile.jpg\")\npixels=myimage.load()\nwidth, height= myimage.size\nfor i in range"], [0.16662546319572683, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right angle triangle.\nimport math\ndef radius1_sphere_g(V):\n  radius = math.pow((3 * (V / (math.pi))), (1. / 3))\n  return radius\nThe above code is a function to find the radius of the given sphere using the volume.\nimport math\ndef radius2_sphere(r):\n  volume = (4."], [0.08684076132913195, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that returns the sum of the lengths of the two lines that are opposite of each other on a right triangle sitting on a circle.\n\ndef est_py_trips(n, s):\n  return math.ceil(n/s)+1\nThe above code is a function that returns an estimate on the number of python programming competion trips one takes to get from the start count to a final count (assuming the trips back to the starting point are included"], [0.1740045556834312, "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\n\nimport sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the fourth side of the right angle triangle\nimport datetime\ndef calc_fine(retdate,duedate):\n  if retdate == duedate or retdate<duedate:\n\t  return 0\n  elif retdate.year > duedate.year:\n\t  return 10000\n  elif retdate.year == duedate.year and retdate.month > duedate."], [0.07953025851330141, "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " checks wether the line fits inside one of the triangles that's completely inside a square. \"w\" is the expanded length and \"h\" is the corresponding heights\n\ndef changepi(frac):\n  return (1-float((1-float(frac))/(1+float(math.pi)) ))\nThe above code changes PI.\n\ndef gcd(x,y):\n the_gcd=x\n while(y!=0):\n  "], [0.15375344228484733, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to which calculates the hypotenuse of a right angled triangle when given the length of the other two sides.\ndef stringListSum(stringList):\n return \"\".join(stringList)\nThe above code is a function to add together all items in a given list of strings.\n"], [0.15229759990235595, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the value of adjacent side in right-angled triangle.\nimport math\ndef findsqrboltlength(r):\n s=r*.0174*2\n return s\nThe above code is a function to find out the square bolt length when the (Bolt's head radius + Bolt's shank radius) = 0.0174.\n\ndef reverse_string(x):\n s=\"\"\n for a in x:\n  s=a"], [0.10188974762247777, "def Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function that turns a right angle triangle.\ndef max_seq(mat):\n  sols=[0 for _ in mat]\n  for r,row in enumerate(mat):\n    currmax=[row[0]]\n    for v in row[1:]:\n      curr=currmax[-1]+v\n      if curr>v:currmax.append(curr)\n      else:currmax"], [0.10656158743655936, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is function to find hypotenuse for the given given side measures.\ndef  gen_dashes(w): \n  return ('-'*w)\nThe above code is function to generate many unending dashes.\ndef not_poor(string):\n  not_str = string.find('not')\n  poor_str = string.find('poor')\n  if poor_str > not_str and not_str>0 and poor_str"], [0.19042246925799428, "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\n\ndef split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the missing side in a right angled triangle.\ndef sorter(val):\n  return sorted(val)\nThe above code is a function to sort in alphabetical order the list given as the function argument.\ndef not_string(v):\n  if v.startswith('n') and v.endswith('g'):\n    return v\n  else:\n    return 'not '+v\nThe above code is"], [0.1789599756656214, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the other side of a right angle one side of whose length is known\n\nimport math\ndef area_circle(r,pi):\n  area = (pi * (r * r))\n  return area\nThe above code is a function to find the area of a circle.\nimport math\ndef sin60degrees(r,a):\n  sind=r*(math.sin(a))\n  return s"], [0.155479389834573, "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse of a right triangle with equal length sides of length w and h.\ndef txt(name):\n f = open(name, 'a')\n f.write(line)\nThe above code is a function that adds a line to the end of a .txt file named name.\ndef write_string_v1(path, word):\n f = open(path, \"w\")\n f.write"], [0.16662546319572683, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right triangle using Pythagoras' theorem. You must import the math library for this to work.\n  \nimport math\ndef third_side_rightangle(w,l):\n  a=math.sqrt((w*w)+(l*l))\n  return a\nThe above code is a function to find any of the sides of a right angle triangle.\n  \nimport math\ndef area_"], [0.27789178041538165, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotneuse is a right angled triangle.\nimport math\ndef freq_recurring(str1):\n  x=len(str1)\n  count=0\n  arr1=[]\n  i=0\n  while i<x:\n    z=str1[i]\n    count=0\n    j=i\n    while j<x:\n      if z==str1[j]:\n       "], [0.19582943273087453, "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\n\ndef multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the missing side (hypotenuse)of a right angle triangle if two sides of it are given as input.\n'''\ndef run_calc_on_input(calc_func, x, y):\n  #s=\"Hello \" +func\n  return calc_func(x,y)\nvalue=run_calc_on_input(float_square,6,7)\nprint value\nvalue=run"], [0.16283546390567738, "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the value of the hypotenuse of a right angled triangle\nimport cmath\ndef cmath_operations(a,b):  \n c=cmath.phase(complex(a,b))\n r=abs(complex(a,b))\n return (c,r)\nThe above code is a function to perform cmath operationsaddition,subtraction,multiplcation and division. \nimport re\ndef check_sent"], [0.18008994973653383, "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to calculate the length of the other side of a right angled triangle.\n  \nimport math\ndef math_toast(calorieInput):\n  add=2*calorieInput\n  return add\nThe above code is a python function to calculate the amount of energy gained by eating a toastie.  \n\n\n# \n# \n# P3.PY\n# \n# \n\"\"\"\nBuild a Triangle\n\"\"\"\n\n"], [0.10933512686106173, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that gives the side length of a right angle triangle from the other two given sides.\n\nimport math\ndef unpack_args(f):\n  return f[0],f[1]\nThe above code is a function that accepts two arguments (a and b) and returns them as a tuple.\n\nimport math\ndef area_triangle(s1,s2,s3):\n  s=(s1+s2+s3"], [0.12533629401151494, "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of the hypotenuse of a right triangle.\n   \ndef name_and_age(name, age):\n  if age < 0:\n    return \"Error: age < 0.\"\n  else:\n    return name+\": \"+str(age)\nThe above code is a function to return name and age.\n\ndef mem(name, membership):\n  if bool(membership):\n    return name+\""], [0.1539678141509673, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the missing side of a right-angled triangle given the other two sides.\nThe example input for this code is otherside_rightangle(4,8)\nimport os\ndef remove_files(files):\n  for name in files:\n   os.remove(name)\n  return\n\n#The above code is a function to delete a list of files on the system.\nThe example input for this code is remove_files(['"], [0.13552603469384475, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to get the hypotenuse of a right angle triangle.\nMore or less, the above code can be written as:\n\ndef hypothenuse(w,h):\n  return math.sqrt((w*w)+(h*h))\n#or\ndef hypothenuse(w,h):\n  import math\n  return math.sqrt((w*w)+(h*h))\nThe above code without the square root is"], [0.11981504089649732, "def Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the right angle triangle.\n\"\"\"\n\"\"\"\nDevanshi is new to the city and she is trying to adjust to her new house and school. She decides to buy furniture and found that her budget is limited. After viewing the different prices of the furniture, she browses into the different shops and finally shortlists a shop at a marginally low cost, deciding to buy the furniture. The shop owner creates a bill in her name and Devanshi is asked to"], [0.13396634756930606, "def last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python code to calculate the Hypotenuse of a right angle triangle\nimport re\ns='ABCDEFGHIJKLIMNO'\nregex='(.{4})'\ni=re.findall(regex,s)\nThe above code is a function to format the string into four parts in an array(i)\nimport math\ndef circle(r):\n  C=2*math.pi*r\n  area=math"], [0.17899581870909032, "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the longest edge from the right angle.\n\n\nclass NewList(DQ):\n  def append(self,x):\n    DQ.append(self, x)\nThis question requires you to use DQ methods.\n\nclass NewList(): \n  def __init__(self,DQ):\n    self.DQ= DQ\n    self.DQappend(x)\n    print(self"], [0.17953875804069702, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the missing value and calculate the hypotenuse of a right angle triangle.\nimport fractions\ndef lcm(n1,n2):\n  l=fractions.gcd(n1,n2)\n  l=n1*n2/l\n  return l\nThe above code is a function to find LCM of the two given integers.\nimport math\ndef float_int(n):\n  a = float("], [0.12581998865012178, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function.The function takes in two integers  and returns the length of the hypotenuse of a right angled triangle with dimensions w,h.\n\ndef evennumber_factorials(posnum):\n while posnum >= 2:\n  posnum=posnum-2\n  fact1=fact1*posnum\n posnum=posnum+2\n return fact1\nThe above code is a python function.The function takes in a positive integer"], [0.23401970056869037, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of the hypotenuse of a right angled triangle.\n\nimport pandas as pd\ndef missing_data(test_csv):\n  ds=pd.read_csv(test_csv, skiprows=1)\n  print(sum(ds.isnull().values.ravel()))\n  print(sum([True for idx,row in ds.iterrows() if any(row.isnull()"], [0.11136019694736536, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to read one dimension of triangle from the user and cony is to find out the lengths of the other sides.\ndef open_para(string):  \n  count=0  \n  for i in string:        \n      if(i == \"(\"):      \n          count = count + 1  \n  return count  \nThe above code is a function to find out number of opening parenthesis in an expression given by the user.\ndef round"], [0.13090945050473596, "import re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to get the answer of the right angled triangle.\n\ndef float_string_number(num):\n  num=float(num)\n  return (num-int(num))\n\nThe above code is a function to round down the given integer and then find the decimal value.\n\nstring = 'Indonesia'\n\nfor x in string[3:7]:\n  print(x)\n\nThe above code is to extract characters from"], [0.09063533392797621, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " determines the right angled triangle, using the Pythagoras Theorem.\ndef rever(s):\n return s[::-1]\nThe above code is a way to reverse any string given by the user.\ndef times(n):\n product=1\n for i in range(1,n+1):\n  product=product*i\n return product\nThe above is a python function that takes in an integer n and returns the product of the series from 1 to"], [0.132302276606924, "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the length of the opposite side of a rightangled triangle when the length of the adjacent side(hypotenuse) and length of the opposite side is given.\n\ndef leetspeak(str):\n    q=str.upper()\n    for n in q:\n        if(n=='A'):\n            q=q.replace('A','4')\n        elif(n=='E'):\n            q="], [0.25002383776867554, "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\n\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate hypotenuss of a right angle triangle using the Pythagoras Theorem.\n"], [0.12107985368690878, "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\n\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python program to find the hypotenuse in a right angle triangle.\nimport math\ndef s_area(b,h):\n  s=0.5*b*h\n  return s\ndef area(b,h):\n  a=math.sqrt((h*h)+(b*b))\n  return s\nLet s be the semi perimeter of triangle; Then using the below formula area = sqrt(s*(s-"], [0.1586665412969919, "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotnuse of a right angle triangle given the other two sides.\n\ndef scale(n):\n  if n==0:\n    return 0\n  else:\n    return n+scale(n-1)**1.5\nThe above code is a code to find the sum of a geometric series when the common ratio is 1.5.\n\n\ndef pattern(n):\n    for i in range(1"], [0.18159313319752823, "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the other side of a right angle triangle.\n\nimport math\nimport datetime as dt\ndef month_feb(y):\n  days=0\n  for i in range(1,y+1):\n    if i % 400 == 0 or (i % 4 == 0 and i % 100 != 0):\n      days+=29\n    else:\n      days+=28\n  return days\nThe above code"], [0.16235672200592027, "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of the the opposite side of a right angle triangle.\ndef swap_first_last(input):\n  return input[-1:] + input[1:-1] + input[:1]\n  The above code is a python function to swap first and last character of the input string.\ndef namoney(amount, no_of_people):\n   money = [100, 50, 20, 10, 5,"], [0.15031884483136482, "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the values that satify the Pythagoras' theorem of a rightangle triangle using the given two side lengths.\nimport math\ndef leftside_rightangle(w,h):\n  s=math.sqrt((h*h)-(w*w))\n  return s\nThe above code is a function to find the values that satify the Pythagoras' theorem of a rightangle triangle using the side measures.\ndef change_"], [0.156363373488245, "def last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a Python function to find the hypotenuse of a right angled triange given the other two sides.\ndef factors_list(n):  \n    for i in range(1, n + 1): \n        if n % i == 0: \n            print(i, end=\" \") \n    return\nThe above code is a python function to print the factors of a given number.\nfactors_list(100)\ndef rem_v"], [0.15029877215476886, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the square root value of a right angled triangle, given the right angle & hypotenuse values.\n#This code is to check whether the given value is odd or not\ndef find_odd(x):\n  if x%2==0:\n    print(\"Its Even\")\n  else:\n    print(\"Its Odd\")\n#This code is to check whether the number lies in betwween 20 and 50\nlower=int("], [0.09100787099124732, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is to compute the hypotenuse of a rightangle triangle.\ndef Count_Pos_and_Neg_nos(numList):  \n    countPos = 0\n    countNeg = 0\n    for num in numList:  \n        if num >= 0:  \n            countPos = countPos + 1\n        else:  \n            countNeg = countNeg + 1\n              \n    print(\"Positive numbers in the list: \", countPos)  "], [0.13846106402249145, "def sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the hypotenuse of a right angle triangle, given it's two legs.\nimport math\ndef side_rightangle(n): \n  return ( (2 * n) * (math.sin(math.pi/n)) ) \nThe above code is a function to calculate the length of a side of a right angle triangle, given it's height.\ndef side_isosceles(l,p): \n  sides"], [0.11447938690472814, "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python code to find the hypotenuse for a right triangle where w and h are the sides.\ndef abc_triangle(a,b,c):\n  if a+b>c and b+c>a and a+c>b:\n    return 'Yes'\n  else:\n    return 'No'\nThe above code is a python function to check if triangle is valid.\ndef digits_letters(text):\n  digits"], [0.10585473590019655, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function which takes in base and height of a rightangled triangle and computes the length of the other side.\ndef numlist(list1):\n state1=all(element==element[0] for element in list1)\n if state1==True:\n  for i in range(len(list1)):\n   print(list1[i][0])\n return state1\n The above code is a function to get the condition in a 2"], [0.14407659615818272, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse of a right angle triangle with side length as w and height as h.\n  \ndef sum_all_div(Num):\n  Division = []\n  counter = 1\n  temp = Num\n  while counter < Num :\n    if Num % counter == 0:\n      Division.append(counter)\n      counter+=1\n    else:\n      counter+=1\n  return sum(Division)\n"], [0.10569896735241426, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes two numbers, width and height and then calculates right angled triangle's hypotenuse.\nimport math\ndef sides_rightangle(w,l):\n  s=math.sqrt(((w*w)+(l*l)))\n  result={'hypotenuse':s,'side':math.floor(s)}\n  return result\nThe above code is a function that given one side and an angle of a triangle calculates all sides"], [0.12931517364220813, "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python program to find the hypotenuse of a right angle triangle.\n\nimport functools\ndef repetition(x,y):\n  number=0\n  rep=functools.reduce(lambda a,b: a+b,x)\n  return any(rep.count(i)>y[i] for i in y.keys())\nThe above code is a program to check weather repetition of a number without repetition of elements of"], [0.19309949842740623, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of the hypotenuse of a right angled triangle when the lengths of other two sides is given as input.\n'''\nw=70\nh=48\nz=math.sqrt((w*w)+(h*h))\nprint('Heigth: ',h)\nprint('Width : ',w)\nprint(\"Hypotenuse = \",z)"], [0.11535411123557059, "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a program to calcuate hypotenuse of a right Angled triangle.\ndef odd_numbers(mi,ma):\n  print(\"Odd Numbers between the given margins\\n\")\n  rang=range(mi,ma)\n  even=lambda n: n%2!=0\n  return list(filter(even, rang))\n\n\nReturns the odd numbers between a specified range\nimport functools\ndef average(*args):\n    return"], [0.13056928484213584, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function returns a value for the hypotenuse given base and height of a right angled triangle.\n\n# Mini-Challenge - 1\n\n# Varible Consumption Query\n# In this challenge, you have to establish if a character string is an anagram. Recall that an anagram is a new word created by reorganizing all the letters of an existent word. if anagrams are made from the word \"Buckethead\", the permutations they could be are"], [0.24002454180354207, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\ndef issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse from a rightangled triangle, with the two shorter sides having lengths width & height.\n\n\n"], [0.17953875804069702, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate hypotenuse of a right angled triangle.\nimport functools\ndef fun_reduce(nums, sign= None):\n    result = functools.reduce(sign, nums)\n    return result\nThe above code is a function to realize the classical \u2018reduce\u2019 function.\nfrom fractions import gcd\nimport functools\ndef fun_lcm(a,b):\n    result = fun"], [0.17852691123078054, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function for unequal sides of a right angled triangle.\ndef perfect_rectangle(points):\n  one, two=0,0\n  for x, y in points:\n    if(x>one): one=x\n    if(y>two): two=y\n  for x in range(one+1):\n    if(x*one==two*two):\n      return True\n  return False\nThe above code is a python"], [0.18807171724687458, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse from the given dimensions (w,h).\nimport itertools\nnum9=(1,2,3,4,5)\ndis_num=itertools.combinations(num9,3)\ndis_list=list(dis_num)\nfor p in dis_list:\n   print(''.join([str(s) for s in p]), end=\" \")\nThe above"], [0.1288064735242749, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse of a triangle.\ndef remove_duplicates(list1):\n  return set(list1)\nThe above code is a python function to create a unique list.\nimport math\ndef last_kthdigit_cube(n):\n  p=n%10\n  return p\nThe above code is a python function to get the last digit of a cube.\ndef find_winner(A):\n"], [0.13731350212925006, "def is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to calculate the perimeter of a right angled triangle.\n\ndef two_powers_series(n):\n  t = 0\n  while n != 0:\n    q = n % 2\n    t = (10 * t) + q\n    n = n // 2\n  return t\n \nThe above code is a ptyhon function to calculate the sum of each digit of the binary number with its power of 2.\n\ndef reverse"], [0.16882823612851303, "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse when the length of the other two sides are given.\n\ndef thirdangle(a1,a2):\n  a3 = 180 - (a1+a2)\n  return a3\nThe above code is a function to find the third angle in a triangle, when the other two are given.\n\ndef sine_of_angle(a,opposite):\n  s = opposite/math"], [0.29608553234331675, "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\n\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the third side of a right triangle.\nimport math\ndef period(w, h, D):\n  t=d/(math.sqrt(w*w-h*h))\n  return t\nThe above code is a function to find the time period of a pendulum of length d.\nimport math\ndef logdob(vn, ve):\n  r=math.log10(vn/ve)\n "], [0.17328487005909718, "def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse of a right angled triangle given the two legs with the formula.\nTypes of Polygons\nQuadrilateral-4 vertices\nDuplicate elements\nThe abbr. () can be used to abbreviate the text.\n\"\"\"\n\nimport urllib\nimport ast\nimport json\nimport sys\nimport os\nimport re\nimport string\nnormalization_table = dict((ord(char), None)"], [0.13206637590562517, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of the hypotenuse if the length of the other two sides of a right angle triangle is given along with the different sides of the triangle.\n\n\ndef covertreeinch(t):\n  r=3.14*(t/2)*(t/2)\n  return r\n The above code converts a tree from feet measured to inches and then coverts it back to feet\n\n\ndef  velocitykmh(s,t"], [0.08547193218040006, "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " returns the square root of the sum of two numbers squared.\ndef calcul(n):\n  fact=0\n  temp=math.factorial(n)\n  while temp%10==temp:\n    fact+=temp%10\n    temp=math.floor(temp/10)\n  return fact\nThe above code returns the sum of the digits of a number made by factorial of that same number.\ndef find(n1,n2,n"], [0.10847493045834042, "def Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function that takes two arguments and find the sides of right angled triangle.\ndef pythtriple(): target = int(input(\"Input your target number \")); 0 < target: pythagoras = [1] * target range(2, target - 1): pythagoras.append(0) i = range(2, target): a = i range(2, target): b = i range(2, target): c = i a*a"], [0.19320609024070326, "import re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the Hypotenuse of the Side they\nhat is wrong and the height of the right angled triangle.\n\ndef multiples3_5(x):\n  add=0\n  mul=0\n  for i in range(x):\n    res=i*3\n    add=add+res\n  for c in range(x):\n    res=c*5\n    add=add+res\n "], [0.15349902747297048, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of hypotenuse in right-angled triangle given its two sides.\ndef testing_substring(mainstring,substring):\n  return substring in mainstring\nThe above code is to test whether a string is the substring of another or not.\n\nS = int(input())\ndef eggdropping(floors):  \n    test=[]\n    for i in range(1,floors+1):\n       "], [0.18884314199919627, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\nimport re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the missing right angle triangle side value.\n#sum\ndef sumEven(nums):\n l=[];\n l1=[];\n s=0;\n for x in nums:\n  if x<0:\n   s+=0;\n  else:\n   l1.append(x%2);\n if 1 in l1:\n  s=0;\n else:\n  s=sum(nums)/2"], [0.2116895432821293, "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the side opposite to right angle in a right angled triangle.\ndef first_vowel(w):\n  a=[]\n  a=w.split()\n  c=len(a)\n  print(c)\nif __name__==\"__main__\":\n  w=input(\"enter a string \")\n  first_vowel(w)\nfor i in range(c):\n  print("], [0.17487442519440632, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the hypotenuse of a right angled triangle.\ndef list_sum(num_list1):\n sums = 0\n for i in num_list1:\n  sums+=i\n  return sums\nThe above code is a python function to sum a given list of numbers.\ndef three_n_cubes(l,w,h):\n for i in range(l,w,h):\n  for j in range(w"], [0.014700256410786485, "def find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " return the length\n'''"], [0.10870584096570017, "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find sides of right angle triangle with the help of given base and height.\n\ndef fizz_buzz():\n  for i in range(1,101):\n    if i%2==0:\n      print(i,':','fizz')\n    else:\n      print('bbuzz')\nThe above code is a Python function to Display \u201cfizz\u201d if the number is divisible by 3,\nDisplay"], [0.15955528622672752, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the value of the side of a right angled triangle when the length of the other two sides are known.\ndef longest(aa,bb,cc):\n\tif aa>bb and aa>cc:\n\t\treturn aa\n\telif bb>cc and bb>aa:\n\t\treturn bb\n\telse:\n\t\treturn cc\nThe above code is a function to calculate the value of the longest length"], [0.12547461743839441, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\nfrom copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes in the width and height of a right angle traIangle and returns the length of the side opposite to the right angle.\n\nfrom copy import deepcopy\ndef comma_tuplex(tuplex,n):\n  tuplex_comma=deepcopy(tuplex)\n  n=[n]\n  tuplex_comma=tuplex_comma+n\n  return tuplex_comma"], [0.14735933309172777, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python code to find the length of the hypotenuse of a right angle triangle when given the other sides of the triangle.\n\ndef fac(n):\n  s=0\n  for k in range(1,n+1):\n     s=s+1/k\n  return s\nThe above code is a python function to find the factorial of a number.\n"], [0.1252613594374086, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes the values of the sides of a right angled triangle and calculates the length of the hypotenuse of that triangle.\n\ndef delete_middle(list,num1,num2):\n  list=list[:num1]+list[num2+1:]\n  return list\nThe above code is a function that deletes the middle elements of a list even on odd numbers of elements in list.\n\ndef ele_add(list):\n"], [0.16295962923165186, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right angle triangle.\n\ndef string_sorted(str):\n  split_it = wlist(str).split()\n  sorted_string = sorted(split_it)\n  return sorted_string\n  Join the sorted words into a string\nThe above code is a function to sort a string and return the sorted string.\nfrom datetime import datetime\nfrom datetime import date\nfrom datetime"], [0.1149893957936998, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the hypotenuse value.\n###Here we have to prepare a function GeometricConstant().\n    ###return ?\nimport math\ndef GeometricConstant(a):\n    if a==\"square\":\n        l=5\n        peri=20\n        b=(l*l)\n        c=8\n        sum=b+c\n        return sum\n    elif a==\"rectangle\":\n        l="], [0.24334905392437742, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the third side of a right-angled triangle of given sides w and h. \ndef factor_number (n):\n  result = []\n  for i in range(1,n+1):\n    if n%i==0:\n      result.append(i)\n  return (result)\nThe above code is a function to find the factors of a number.\nimport random\ndef count_num(l1):\n"], [0.1341948193308683, "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the side opposite to right angle given base w and perpendicular h returning the hypotenuse.\n\nIf Program starts from here it means it imports all the modules of the functions which we have mentioned above.\n\n#converting user input into float so that we can work on numbers as decimal points\nwid=float(input(\"Enter the wid: \"))\ndep=float(input(\"Enter the dep: \"))\nhig=float(input(\"Enter"], [0.11613640525679111, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is to find length of the last side of right-angled triangle if two sides are given. \ndef check_arith_prog(list):\n  return\"Arithmetic\" if (list==sorted(list)) else \"Non-Arithmetic\"\nThe above code is function that detects arithmetic progression in an array.\ndef sort_list(list2):\n  return (sorted(list2))\nThe above code is a function to sort a list"], [0.18584122112988954, "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse of a right angled triangle given a base length and height.\nimport math\ndef permimeter_recangle(s1,s2):\n  p=(s1+s2)*2\n  return p\nThe above code is a function to find the permimeter of a rectangle given two side lengths.\nimport math\ndef simple_pass(a,b):\n  accept=a or b\n  return"], [0.10870364429030124, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function for finding the hypotenuse value of a right angle triangle.\ndef DifNLT(n):\n    d=0\n    for f in range(n-1,1,-1):\n        if(n%f==0):\n            g=n/f\n            d=abs(f-g)\n            break\n    return d\nThe above code is a python function for finding the difference of the nearest largest natural numbers ("], [0.22485484878483356, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a program to find the length of the other side of a right angled isosceles triangle.\n\ndef find_next_square(sq):\n    root = sq ** 0.5\n    if root.is_integer():\n        return (root + 1)**2\n    return -1\nThe above code is a function to find the next perfect square\n@app.route(\"/login\",methods =[\"GET\",\"POST\"])\ndef login"], [0.169156483085435, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of the vector that makes right angle in space with vector (w,h)\n\ndef knop(a,b,c,point,Kneeling,Crouching):\n  x=a+b*c\n  d=B\n  b=Kneeling*Crouching\n  y=x+d\n  return y\nThe above code is a function to find the area of a square with a piece"], [0.17660743670866372, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the side of right angle triangle, which is not the right angle, given the two other categorical sides.\nimport random\ndef answer(nick):\n    seed = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    answer = \"\"\n    while len(answer) < 4:\n        index = math.floor(random.random() *"], [0.1146414662747253, "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of the second side of the right angle triangle.\ndef convertoint(str):\nIntger_Num = \"123\"\nIntger_Num = int(Intger_Num)\nreturn Intger_Num\nThe above code is code to convert a string data type integer and return the integar value\ndef calculator(a,b,operation):\nState=[1,-1]\nif(operation == \"+\"):\n   "], [0.10307212818782431, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python code to find a hypotenuse of the right angle triangle when it is given the length of other sides.\ndef shortWordList(long_string, threshold):\n  destroySentence=\" \"\n  list_of_words=long_string.split(destroySentence)\n  short_list=[]\n  for w in list_of_words:\n    if len(w)<threshold:\n      short_list.append("], [0.10558611944776874, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of the hypotenuse of the triangle if the perpendicular is known.\nimport math\nprint(math.sqrt(4))\n\nprint(math.sqrt(20))\n\nprint(math.sqrt(28))\n\nprint(math.sqrt(50))\n\nprint(math.sqrt(42))\n\nThe above code is to output the squareroot of the numbers with which it is being called,"], [0.15754485687512504, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to print the side of the right angled triangle from it's values.\ndef wamma(opposite,hypotenuse,adjacent):\n    m=math.sqrt(((opposite**2)+(hypotenuse**2))\nimport random\ndef exclusive_random(dice):\n\n  if dice==6:\n      print(random.randint(1,6))\n  elif dice==12:\n     "], [0.10270612096144921, "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that calculates the hypotenuse of a right-angled triangle that has legs of length w and h.\n\nclass dog:\n    def sound(self):\n        print(\"bowbow\")\n\nclass cat:\n    def sound(self):\n        print(\"mewwww\")\n\nfor object in (dog(),cat(),cat(),dog(),cat(),dog(),dog()):\nobject.sound()\n'''"], [0.09675184816928697, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes in two no.s, width and height of a triangle and returns the 3rd side\n#Python program to backward compatible code by following from from Python 2 to Python 3.\ndef compatible_code(value):\n  if isinstance(value,str):\n    print(\"python3\")\n  else:\n    print(\"python2\")\n  print(\"hello\")\ncompatible_code(\"python\")\n#Python program to calculate area and circumference"], [0.1851524372407891, "def _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the third side of a right angle triangle, when the other two sides are given.\ndef frog(n,m):\n  for i in range(n):\n    for j in range(i%2,m,2):\n      print('* ',end=\"\")\n    print('\\n')\nThe above code is a program to print a particular pattern which is of a really interesting shape.\ndef snail(n):\n  a"], [0.12533629401151494, "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is used to calculate the hypotenuse of a right angle triangle.\n\ndef remove_negative(lt):\n  return list(filter(lambda x:x<=0, lt))\npass\nThe above code is a function to remove all negative numbers from the given list.\n\ndef remove_o(arg):\n  return list(filter(lambda x:x!='o',arg))\npass\nThe above code is a function to remove 'o"], [0.14982331756782297, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the missing side of a right triangle given its two sides.\n\ndef volume_cone(r,h):\n  return str((r*r*h)/3)+\" cu.cm\"\nThe above code is a function to return the volume of a cone given its radius and height.\n\ndef volume_cube(s):\n    return \"{0:.2f} cu.cm\".format(s*s*s)\nThe"], [0.11448063427515867, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find out the length of the hypotnuse of right angle triangle.\n\ndef hypo_of_rightangle_triangle(h,w):\n  x= (h*h) + (w*w)\n  return math.sqrt(x)\nThe above code is a python function to find out the length of the hypotnuse of right angle triangle.\n\ndef dome_surfacearea_sphere(r):\n"], [0.11234907955422127, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function which finds the missing side(hypotenuse)of a right angle triangle.\nn=int(input())\ndef otherside(height,base):\n    hyp =math.sqrt(height**2+base**2)\n    return (hyp)\nwhile n>=0:\n  base=int(input())\n  height=int(input())\n  print(otherside(height,base))\n  n=n"], [0.10506228205895093, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function will give the length of the other side of a right-angled triangle if we provide the base and height.\n\ndef  get_even(numbers):\n   even_num = list(filter(lambda x: x%2 == 0, numbers))\n   return even_num\nThe above code is a function  get all even numbers from a list.\n\ndef  get_max_number(random_list):\n  return max(random"], [0.14178040105313397, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that calculates the length of the opposite side when the width(**w**) and height(**h**) of a right angle triangle are given as arguments to find the length of the hypothenuse. \nimport re\nnum=int(input())\nfor i in range(num):\n  string=input()\n  start=re.compile(r'^hackerrank')\n  end=re.compile(r'.*hack"], [0.22007080130256548, "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the missing side of a right angle triangle.\n\ndef camels(n):\n    if n==0: return ' '\n    res = ''\n    while n>0:\n      if n>1: res = res+' ABCDEFGHIJKLMNOPQRSTUWVXYZ'[ (n-1) % 26 ]\n      else: res = res + 'ABCDEFGHIJKLMNOP"], [0.19320609024070326, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse of a right angle triangle.\ndef area_circle(pi,a,w,h):\n  if(pi==3.142):\n    pi=a\n  elif(pi==1.414):\n    pi=w*h\n  return pi\nThe above code is a function to find the area of a circle.\nfrom google.colab import drive\ndrive.mount('/content"], [0.12442023400619368, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of the triangle's hypotenuse.\n\ndef hypotenuse(leg1,leg2):\n  side=math.sqrt((leg1*leg1)+(leg2*leg2))\n  return side\nThe above code is a function to calculate the length of the triangle's hypotenuse.\n\ndef weight_on_moon(w,r=])\n  c=w*r/8;\n "], [0.09367056323468, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to compute the length of the side of the right angle triangle when the \nsquared width and the squared height of its triangle area as arguments.\n\ndef check_vowel(ch):\n  if ch.isalpha():\n    return ch.lower() in 'aeiou'\n  return None\nThe above code is a python fucntion to check whether a character passed is a vowel or not.\n\ndef capitalize_all"], [0.12980022782058384, "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the hypotenus of a right angled triangle with provided sidelength lengths (w and h).\n\ndef easter_egg(n):\n  s=2* 2**n\n  return s\nThe above code is a function to calculate the final shebang of a rope of length n where 2 is repeated with itself twice for every number once.\n\ndef max_prod(a):\n  prod= max(a*b for a"], [0.22692206802304332, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of rightangled triangle based on the given dimensions.\nProgram\nheight_in_cm\ttower_height_with_fefotage_metres\tradius_of_the_parabola_with_the_horizontal_sugandh_metres  height_of_the_harshad_point (Fluid mo\nuter height_of_the_harshad_point (Flu"], [0.11512127522019266, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a program to find the three side of right angled triangle using functions.\nimport math\ndef area_circle(r):\n  s=r*r\n  area=math.pi*s\n  return area\nThe above code is to find the area of circle using function.\nimport math\ndef greet(name,sault=25):\n  print(\"Welcome! \",name)\n  return salut\nThe above code is to say \u201cGood Morning"], [0.11879255943553557, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to pass the w and h and retturn value for other side of right angled triangle\n def rightangle_triangle_func(a,b)\n   s=a*b\n  return s\nThe above code is a function to pass the a and b value and return area of rightangled traingle\nimport math\ndef draw_rightangled_triangle(l1,l2,l3)\n  result=True\n  test=("], [0.2007577121258094, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a math function to find the hypotenuse of a right angled triangle.\n\nfrom collections import Counter\nTest_String = input(\"Enter statement\\n\")\nctr = Counter(Test_String) \nprint(\"Pairs: \" + format(sum(ctr.values())/2))\nThe above code counts the number of pairs in a statement.\n\n\nfrom itertools import combinations\ndef comb_str(strval):\n    return sum([1"], [0.0895461647686601, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to return the right angle of the other side.\nkth term of the series \ndef sumOfSeries(n, k=1): \n      \n    sum = 0\n      \n    # Loop to iterate k times  \n    for i in range(0, k): \n        add = 1 / (((2 * i) + 1) * (k)); \n        sum = sum + add; \n          \n   "], [0.1877985001956628, "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return hypotenuse of right-angled triangle.\nFind the digit frequency in a number\n"], [0.13643345248020047, "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function which gives the length of the opposite side of right angled triangle.\ndef output(inp_str, i, o):\n    if len(inp_str) <= (i+1) or ord(inp_str[i]) < 97:\n        return inp_str\n    while inp_str[i].isalpha()==False and ord(inp_str[i])>=97:\n        if ((ord"], [0.14982331756782297, "def Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\n\ndef interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the hypothenuse of a right angled triangle given the 2 legs of the triangle as parameters (the other parameter would be the angle of the triangle constituting the two legs).\n\ndef unicodetoascii(text):\n\n    TEXT = (text.\n    \t\treplace('\\\\xe2\\\\x80\\\\x99', \"'\").\n    \t\treplace('\\\\xc3\\\\xa9', 'e').\n    \t\treplace('"], [0.1726856298782682, "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the Hypotenues of a right angle triangle.\ndef pythagorean_theorem(w,h):\n  s=math.sqrt((w*w)+(h*h))\n\n\n  \n\n# In this assignment,your task is to use a list and run few functions that are associated with it.\n# \n# Procedure:\n# \n# 1.Create a list that contains one integer value and another"], [0.08367058773353993, "def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is the function which gives the hypotenuse.(hypotenuse is square root of sum of squares of the other two sides)\n\nimport random\ndef toss(reps):   #Defining a new function in python.\n  attempt_count=0  #Set counter to zero\n  head_count=0\n  tail_count=0\n  result= \"\"\n  result_string_complete = \"\"\n\n  for x in range(1,re"], [0.11210841659761582, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a logic to find the right angle side across the given two input numbers, w=entrance wall width and h=wall height.\n\ndef Reverse_num(list_num):\n  for i in range(len(list_num)-1, -1, -1):\n      return num_list\nThe above code is a python function to reverse the order of a given list variable, i.e., from the some input like '2345', the output"], [0.146229930631307, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the hypotenuese side of a right angle triangle, based on the given width and height.\ndef sum_fibonacci(n):\n\n    a,b=0,1\n\n    s=a+b\n\n    while a+b<=n:\n\n        a,b=b,a+b\n\n        s+=b\n\n    return s\nThe above code is a function to calculates the sum of all numbers which are add up"], [0.09247304818737878, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is function that calculates the length of the opposite side of right angle triangle. It is given the width of right angle triangle as input.\nfrom random import shuffle\ndef randomize_list(item_list):\n   shuffle(item_list)\n   return item_list[0]\nThe above code is function made to randomly shuffle inputted items into a new random list.\ndef VLOOKUP(lookup_value, lookup_array):\n  for i"], [0.0855878745246035, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that returns the length of the hypotenuse of right angle triangles.\na = int(input())\n\n\n\ndef perfect_number(n):\n    sum = 0\n    for x in range(1, n):\n        if n % x == 0:\n            sum += x\n    return sum == n\nprint (perfect_number(a))\nThe above code is a function that returns true if the sum of factors of the number is the"], [0.17162853322869193, "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find out the hypotenuse of the right_angled triangle.\ndef intersword(l1, l2):\n  res = sum(set(l2).difference(set(l1)))\n  return res\nThe above code is a function to find the count of two sublist of the given list.\n\ndef sort_last(test_list):\n  new_test_list=test_list.copy()\n  sorted"], [0.09336897781372552, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to compute the length of the hypotenus from given two sides.\nprint (str(otherside_rightangle(4,5)))\n\n# - Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.\nclass Shape(object):\n    def __init__(self):"], [0.18136790713833137, "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\n\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the Opposite angle of a right angle; we have given height here.\n\ndef synonyms(x,y):\n    r=set(x).intersection( set(y) )\n    return(r)\nThe above code is a function to find the sets of a wordssynonyms.\n\ndef meninone(list2):\n    max_name=max(list2, key = lambda x: len(set("], [0.1153522725834295, "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\n\nimport re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calcute the length of the hypotenuse of a right angle triangle when the other 2 sidea are inthe function call.\n\nimport math\ndef vertical_distace(w,h):\n\ta = math.sqrt((w*w)+(h*h))\n\tb = w/2/a\n\treturn b\nThe above code is a function that calculates the height of an object thrown at an angle.\n\n\ndef time"], [0.16940676899810625, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse of a right angled triangle using the other 2 sides.\n\ndef Circle_Area(r): \n  s=math.pi*(r*r)\n  return s\n\nThe above code is a python function to find the area of a Circle using the radius when given by the user.\n\ndef sphere_volume(r):\n  s=4/3*(math.pi*(r**3"], [0.1358509935610277, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the otherside of the right angle triangle.\ndef remove_special(yourname):\n  yourname = ''.join(e.upper() if e.isalnum() else ' ' for e in yourname  )\n  print(yourname)\nThe above code is a function to remove the special characters from the given name and make it uppercase.\ndef coolfunc(index):\n  cool_list = ['"], [0.2116528580691546, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\ndef union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to pass parameters as width and height of a right angled triangle and output the length of the hypotenuse which will be the longest side of the right angled triangle.\n"], [0.10465574420825785, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " calculates the hypotenuse of a right angle triangle using the Pythagorean theorem.\ndef circle_area(r):\n  ar=math.pi*pow(r,2)\n  return ar\nThe above code calculates the area of a circle given the radius as input.\nimport math\ndef future_value():\n  p=float(input(\"etner the amount currently deposited:\"))\n  r=float(input(\"specify interest rate:\"))"], [0.21293729385340399, "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " calculates the square root of sides of a right angled triangle from a user input of width and height."], [0.1708697118299562, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of other side in a right angle triangle.\non_line = sorted(input('Enter data:').split(','), key=int)\nprint(', '.join(on_line))\nThe above code is a function to sort numbers Entered as strings.\n\ndef convert_str_to_int(string):\n    value = ''\n    for char in string:\n        if char.isdigit():\n            value"], [0.1266062252835165, "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\n\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the side of a square pyramid, which is perpendicular to the right angle trigonometric angle, of a given width and height\ndef list_of_lists(data):\n try:\n      for d in range(len(data)):\n     try :\n        for da in range(len(data[d])):\n            if(data[d][da] >= 0):\n                return True\n            else:\n                raise Exception('"], [0.18838448507786312, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is to find the Length of the other side of a right angled triangle.\nimport math\n\nw=int(input(\"Please enter your number for find function: \"))\n\n\ndef factorial(n): \n    fact = 1\n    for i in range(5,0,-1): \n        fact = fact * i \n    return fact \nThe above function is to find Factorial of a number using FOR LOOP.\n\nimport math\n"], [0.15092930046566322, "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse of a right angle triangle.\n\ndef highest_even(list1):\n    high=0\n    for i in list1:\n        if high>i and i%2==0:\n             high=i\n    return high\n        \nThe above code is a python function to find the highest even from the given list.\n\ndef lesser_than(nums):\n    res2=[]\n   "], [0.14155012245470625, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is to calculate the value of the opposite ket of a right angle.\n\ndef add_month():\n  month_names=r\"January,February,March,May,April,June,July,August,September,October,November,December\"\n  months=month_names.split(',')\n  return months\nThe above code is a function to validate the quantity of months entered.\ndef check_special_word(word):\n   return any("], [0.1043000805403622, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that returns the length of the hypotenuse of a right angle triangle given the lengths of the other two sides.\n\ndef triangle_Type(a, b, c): \n    if a == b == c:\n        print(\"Equilateral triangle\")\n    elif a == b or b == a:\n        print(\"Isoceles\")\n    else:\n        print(\"Scalene\")\n        \nThe above code takes the values"], [0.13206637590562517, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function that takes in the perimeter of a right angle triangle and outputs the side opposite the angle specified by the user.\nimport math\ndef dtr(l,k):\n  angle=k*(3.1415/180)\n  cos=math.cos(angle)\n  d=l/cos\n  return d\nThe above code is a python function to find the distance covered by a car moving in a curve with radius r and constant angular"], [0.21008228471249007, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes a right angled triangle side and gives the other side.\n"], [0.1476626877467138, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to process the Pythagoras theorem, a^2 + b^2 = c^2. get the value of c by calling this function and use that in the other side of a right angle triangle equation to find the missing value.\ndef powerset(arr):\n  powerset = [[]]\n  for elem in arr:\n    for i in range(len(powerset)):\n      subSet = powerset[i]\n      powers"], [0.19631442785877037, "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the side opposite the given angle in a right angled triangle when the other sides are given. \n"], [0.12024264970750931, "def find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\n\ndef round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find hypotenuse of the right angle triangle.\nn=int(input())\nfor i in range(1,7):\n  print(n,\"*\",\"%s\"%format(i,\"2d\"),'=',n*i)\n  \nThe above code is a simple python function to print a table of a given number n by combining integers from 1 to 6.\nnum1=float(input())\nnum2=float"], [0.09426136009478196, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is used in right angle triangle and returns the value of the hypotenuse when the width and height are given.\nimport time\ndef hms(n):\n  n = int(n)\n  h = n // 3600\n  n = n % 3600\n  m = n // 60\n  s = n % 60 \n  return h,m,s\nThe above code is a function to convert seconds into hours, minutes, and seconds.\n"], [0.10968653760775243, "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the hypotenuse of the given values as the sides of the triangle.\n\ndef concatenate(*args,sep=\"/\"):\n    return sep.join(args)\nThe above code is a function for String concatenation.\n\ndef itervalues(dct, **kwargs):\n    for key in dct:\n        for value in kwargs:\n            value = kwargs.get(value"], [0.2068342809139566, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right angle triangle.\nimport math\ndef day_of_week(y,m,d):\n  if (m <= 2):\n    m += 12\n    y -= 1 \n  YY=int(y)\n  a = math.floor(y/100)\n  J = math.floor(a-1)\n  JD = math.floor(365.25*Y) +"], [0.17190724337669686, "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\n\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right angle triangle given the opposite and adjacent sides.\n\nn=int(input(\"Enter a number\"))\nsum=0\nwhile n>0:\n  n=n//10\n  sum=sum+1\nprint(\"lenght is\",sum)\nThe above code is a Python program to find the length of a number without conversion into string.\n\nn=9989\none=n%10"], [0.1973268546912041, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is used to find the length of the other side of a right angled triangle.\ndef last_wordlenght(s):\n  l=s.split()\n  return len(l[-1])\nThe above code is used to find the length of the last word of a string.\ndef stringlists(n):\n  l=[]\n  for i in n:\n    l.append(i)\n  return l\nThe above code is"], [0.2186044446822701, "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right angled triangle.\nimport math\ndef rightangle_root(b,a): #assuming b and a are sides\n  c=(a*a)-(b*b)\n  math.sqrt(c)\n  return c\nThe above code is a function to find the value of the root of a right angled triangle.\nimport math\ndef multversion(*args):\n  a=80\n "], [0.2130283006565543, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of the hypotenuse of a right angled triangle.\n\ndef f(water,milk,coffee,cups):\n  if water<=cups:\n    return not (((cups-water)/2)>milk) or (((cups-water)/2)>coffee)\n  else:\n    return True\nThe above code is a python function to check if cups and resources are sufficient"], [0.07987125939991624, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\ndef unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function.\nimport math\ndef numberOfTracker(n):\n  a = 1\n  b = 3\n  if(n==1):\n    return a\n  elif(n==2):\n    return b\n  elif(n>=3):\n    k = n - 2\n    c=a+b\n    if(k>=3):\n      c=c+numberOfTracker(k)\n  return"], [0.2699390305113506, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the last side of right angled triangle given the two sides.\n\nTricky if you don't solve them individually.\n\n'''"], [0.2130283006565543, "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the missing side of a right angled triangle when its dimension are given.\nimport math\ndef righttriangle(n, a): \n  count=0\n  N = int(n)\n  for i in range(1, N+1):\n    for j in range(i, N+1):\n      k = math.sqrt((i*i)+(j*j))\n      if (i+j+"], [0.1063969246768826, "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\n\ndef unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to calculate the hypotenuse of a triangle when provided with the length of other two sides.\n\ndef myfunc(string,number):\n  output=''\n  number=number+len(string)\n  for i in range(number):\n    if(i in range(len(string))):\n      output=output+string[i]\n    else:\n      output=output+'*'\n  return(output)"], [0.18545447947300234, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to compute the hypotenuse of a right angle triangle given the two other sides.\n"], [0.12477241466485145, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the length of the hypotenuse of a right angled triangle when the length of the base and height are provided as arguments to the function.\nimport math\ndef use_math(w):\n  s=math.sin(w)\n  return s\n\nThe above code is a python function which returns the value of the sin(w) and in particular it shall be useful in finding the SOHCAHTOA.\ndef archana(string"], [0.2549170131929102, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the other side of a right angled triangle.\ndef median_triangle(s1,s2,s3):\n median = ((s1+s2+s3)/2)\n return median\nThe above code is a function to find the median of a triangle when given the length of the sides.\ndef hypotenuse_pyth(h,b,c): \n s=math.sqrt((h*"], [0.25746948846283896, "def split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a program to find the diagonally opposite sides of a right angled triangle when two sides lengths are given.\n"], [0.5673395305407729, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the second side of a right angle triangle.\n"], [0.0836493847906839, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " finds the length of the hypotenuse of the right angle triangle, given it\u2019s two sides width and height.\nimport math\ndef perfect_check(s): \n    l=len(s)\n    fs=0\n    for i in range(1,s+1):\n        if s%i==0:\n            fs=fs+i\n    if fs==s:\n      print(s, \"is a Perfect Number\")\n"], [0.1295530109910533, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\nimport re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the other side of the right-angled triangle from the length of the two sides on which the sides of the triangle are opposite to it.\nimport math\ndef simple_interest(amount, rate, period):\n  return (amount*period*rate)/100\nThe above code is a function to calculate the total amount of interest on a principal amount over a given period of time at a given rate of interest.\ndef list_product("], [0.1928507330150341, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the other side of a right angle triangle.\ndef score_grading(n): \n    if (n < 40):\n        return n\n    else:\n        m = (((n // 10) + 1) * 10)\n        return m\nThe above code returns marks scored based on the grading policy in Class XII for a student.\n"], [0.16346411779255662, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is  a function to find the hypotenuse\nimport math \ndef area_circle(r): \n  area = r * r * math.pi \n  return (area) \nThe above code  is a function to find the area of circle\nimport random\ndef dice(num):\n  r=0\n  for i in range(1,num):\n    val=random.randint(1,6)\n    r=r"], [0.17386467104942113, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is to find the length of the other side of a right angle triangle when two given sides(base & perpendicular) are given.\ndef Sum_Natural(n): \n    return (2*n)*(n+1) \nThe above code is a python function to find the sum of first n natural numbers.\n\n# ***Hassan call Back!***\n"], [0.14275810950894874, "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse for any given other two sides.\n#Question-2:\nA list of 10 values -- [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nfor num in range(0,10,1):\n  print(num, end = \" \")\nThe above code generates the desired list.  \nfor num in range(10):\n  print(num, end ="], [0.10753798318935934, "def Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the hypotenuse of a right-angle triangle if its base and height is given.\ndef randslist(nums):\n  lst = set()\n  while len(lst) < nums:\n    lst.add(random.randint(1,nums))\n  return list(lst)\nThe above code is a function that create a list of random numbers with length N.\ndef dot_product"], [0.1597382430562432, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of the hypotenuse of a right angled triangle given the lengths of other 2 sides.\nimport math\ndef sixth_digit(n):\n  n=str(n)\n  s=n[-5:-5]\n  return int(s)\nThe above code is a python function to read the sixth digit of a given no.\nimport numpy as np\ndef int_to_binary(length,index,"], [0.18483370498046106, "import math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the missing side of a right angle triangle.\n\ndef pascal_triangle(n):\n  x,y=0,0\n  for x in range(0,n):\n    for y in range(0,x):\n      print(\"  \",end='')\n    for z in range(1,(2*x)+1):\n      if z%2!=0:\n        print(((x-"], [0.15121438962216735, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the missing side in right angle triangle with dimensions, w and h.\n\n# SR-11792-List-Comprehension\ndef squareReturn(n):\n lst = []\n for x in range(n):\n    tp = (x,x**2, x**3)\n    lst.append(tp)\n return lst\nThe above code is to create nested tuples of combination of all numbers for given input"], [0.18202729645976307, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse of a right triangle with side w and h.\n\ndef most_bags(pies, people):\n    result = {}\n    jj = []\n    for ik in pies:\n        kk = people//ice\n        result en\n        for i, j in enumerate(ul):\n            jj.append((i,j))\n    return ''.join(sorted([v"], [0.17487442519440632, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the square of a right angle triangle.\n\nimport datetime\n\ndef upcoming_date(number):\n\treturn datetime.datetime.today()+datetime.timedelta(number)\nThe above code is a function to find the next N upcoming dates.\n\ndef time_diff(start,end):\n  duration = round(end - start)\n  weekday = duration // 7\n  restdays = duration % 7"], [0.33047952721854995, "import re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of godlen triangle when two given side are known.\n"], [0.08898469540912568, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " has a function which finds the hypotnsue value of a triangle given both sides of the triangle.\ndef second_large(lists):\n    lists2= lists\n    lists2.sort()\n    return lists2[-2]\nThe above code is a function that returns the second largest number of the list in ascending order.\n This is when we declare that a particular class holds certain properties or functions.\nclass students(lostNRG):\n    count = 0"], [0.1931344685435267, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", "  is a python function that finds the length of the other side of a right angled triangle, given the hypothensuse length.\ndef pythagoreantriplet(n):\n  for a in range(3,n):\n    for b in range(4,n):\n      c=pow(a,2)+pow(b,2)\n      d=int(math.sqrt(c))\n      if(d*d=="], [0.18428641189602885, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse for a right angled triangle with the given primary and secondary lengths.\n\ndef smallest_num_rec(num):\n  if(str(num[0])<str(num[1])):\n    small=num[0]\n    num=num[1:]\n    return small,num\n  else:\n    small=num[1]\n    num=num[2:]\n    return small,"], [0.21474084919436157, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to print length of the opposite side of a right angled triangle.\nimport datetime\ndef which_date():\n  date = input('Which date would you like? dd/mm/yy: ')\n  day = int(date[:2])\n  month = int(date[3:5])\n  year = int(date[6:])\n\n  # print(day, month, year, ' - %02d/%02"], [0.1261326738705238, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is used to find the length of the otherside of the right triangle required.\nimport math\ndef equal_Area(w,h) :\n  s=math.sqrt((w*w)+(h*h))\n  Area= ((s*w)/2)\n  return Area\nThe above code is used to find the area of a right triangle\n\n# Classes\nclass help_commands:\n    def __init__(self):\n       "], [0.22784566923487345, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse of a right angled triangle.\nimport re\nmatch=re.findall(r'(\\w+)\\s?.?\\s?.?\\s?@\\s?(\\w+.\\w+.\\w+)','Sibhat Acharya @ boi.com')\nprint(match)\nIn the above code, a user-defined regular expression is used to extract the mail IDs from the following sentences. \n"], [0.16978416948807207, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\ndef max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right angle triangle from its two legs.\ndef plos(x):\n    s=x*x\n    return(s)\nThe above code is a function to find area of a circle from radius.\ndef temp_converter():\n  temp = int(input(\"temperature:  -  \"))\n  temp_cel = (temp - 32) * (5/9)\n  print"], [0.10408037274836314, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to calculate the other side (hypotenuse in right angle triangles) of a right angle.\n\nimport math\ndef sum_divisor(n)\n  sum = 0\n  for i in range(1, n//2+1):\n    if(n % i == 0):\n      sum = sum + i\n  return sum\nThe above code is a python function to calculate the sum of all divisors for a given"], [0.16530685346248358, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of the hypotenuse of a right angled triangle, where width (w) and height (h) are the two other sides, returned as an integer.\n\ndef sumdivisors(n):\n  r = range(n+1)\n  x=tuple(r)\n  sum = []\n  for i in x:\n    i=0\n\n  product=1\n  while n > 0:\n"], [0.10356641579622174, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to determine the hypotenuse of a right-angled triangle using the given width and height.\nimport math\ndef avg(a, b, c, d, e):\n    avg=(a+b+c+d+e)/5.0\n    return avg\nThe above code is a function to calculate the average of 5 numbers.\nimport math\ndef prime(n):\n    for i in range(2,n // 2 + 1):"], [0.17162853322869193, "def toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\n\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse in a right-angle triangle.\n\ndef hyper_mean(n1,n2,n3):\n mean = ((n1*n1)+(n2*n2)+(n3*n3))//3 \n return mean\nThe above code is a function to find the mean of the three numbers squared.\n\ndef lcm(num1, num2):\n    if num1"], [0.11270766067483382, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calulate the other side of the right angle triangle.\ndef the_math_is_right(bases, powers):\n  results = {}\n  for base in bases:\n    temp = {}\n    for power in powers:\n      temp[power] = base**power\n    results[base] = temp\n  return results\nThe above code is a function to calculate different powers of different bases.\n"], [0.14371830375289363, "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to compute the length of the hypotenuse of a right triangle, given the lengths of the other two sides.\nimport datetime\nimport pandas as pd\ndef GetComponents(elem):\n  yyyy=datetime.datetime.fromtimestamp(elem).strftime(\"%Y\") #get year\n  mm=datetime.datetime.fromtimestamp(elem).strftime(\"%m\") #get"], [0.12356680731815531, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " it is a python function to return the length of the hypotenuse of a right triangle if we already have the length of the other two sides.\ndef triple_double(num1,num2):\n  x=list(str(num1))\n  y=list(str(num2))\n  if(len(x)==len(y)):\n    l=[]\n    for i in range(0,len(x),2):\n"], [0.1991782309957368, "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse for a right triangle using its two other sides length.\ndef sum_of_squares_on_diagonals(n):\n  sum_of=0\n  r=n\n  for i in range(n):\n    sum_of=sum_of+i*4+4\n  for j in range(n):\n    sum_of=sum_of+r*2*"], [0.09847091479319922, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the hypotenuse in right angle triangle given the other sides.\ndef double_char(str):\n  new_string = \"\"\n  for s in str:\n    new_string += s + s\n  return new_string\nThe above python code is a function to double the string value.\ndef mean(a,b,c):\n  return (a + b + c) / 3\ndef get_number_word("], [0.21565611874147, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right angled triangle.\ndef otherside_rightangle(w,h):\n  s=math.sqrt(math.pow(w,2)+math.pow(h,2))\n  return s\nThe above code is a function to find the hypotenuse of a right angled triangle, with the pow2 function instead of the square root function to return the squared answer.\nimport math\ndef"], [0.10845659930363573, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\ndef decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the value of the missing hside in a right triangle, given the measures of the two sides of the right angle as arguments.\ndef concat_numbers(firstnumber,secondnumber):\n  num_1=str(firstnumber)\n  num_2=str(secondnumber)\n  output=num_1+num_2\n  return output\nThe above code is a function to combine two given numbers together, return the combination"], [0.1102500585536732, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of the hypotenuse of right angled triangle\n#Recall & Store Studentmarks into the Memory\nCIN = input(\"Please enter the Class Internal.\\nPlease enter: \")\nif (CIN==\"AH4\") or (CIN==\"L4\") or (CIN==\"FD4\"):\n  #Programming Patterns without 'ELIF'; 3 Ways to obey the alphabets\n  filename ="], [0.1822244751537554, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function of right angle triangle, i.e., hypotenuse.\ndef average(numbers):\n  return (sum(numbers)/len(numbers)) \nThe above code is a function to find average of provided numbers.\n"], [0.16237087196289923, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " prints the side of a rectangle opposite to the\n\nimport math\ndef otherside_rightangle(h,l,theta):\n  s=l * math.sin(theta)\n  d=h  + s\n  return d\nThe above code prints the final side of a right angled triangle \n\t\ndef fahren(temp):\n  far=(1.24*temp)\n  return far\nThe above code converts the temperature from"], [0.10544150404779132, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that returns the side length of the square that is formed when two squares are joined from their opposite sides.\ndef cosines_law(length, a, b):\n  side_c=(length**2 + a**2 - b**2)/ (2*a*length)\n  return 1-(side_c/math.pi)\nThe above code is a function that returns an angle in radians in a right angled triangle given its side lengths ,"], [0.1852474246945622, "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotonuse of a given square.\n\n\nimport math\ndef square_areas(h,w):\n  area1=math.sqrt((w*w)+(h*h))\n  area2=h*w\n  area3=(h*h)/2\n  return (area1,area2,area3)\nThe above code is a function to find square areas given a height, width and square side length"], [0.08191260430221396, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python program which calculates the hypotenuse of a rightangled triangle given the width and height.\ndef odd_count(n,k):\n    return(\"YES\"if k%2==0 and n%2==1 or k%2==1 and n%2==0 else\"NO\")\nThe above code is a python program, which receives a number n and k, and based on the number of odd numbers within the range of numbers between n and 2"], [0.23919225197547264, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypothenuse when given two sides of a right angled triangle.\n\ndef otherside_rightangle(s,w):\n  h=math.sqrt((w*w)+(s*s))\n  return h\nThe above code is a function to find the hypothenuse when given two sides of a right angled triangle.\n\ndef otherside_rightangle(s,h):\n  w=math.sqrt(("], [0.1469944146231954, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that returns the length of the other side of a right angled triangle when given its\nbase and height.\ndef sumof4(w,x,y,z):\n  return w+x+y+z\nThe above code is a function that returns the sum of two numbers that are given to it.\ndef matrix_in_Circle(r):\n  return ((r * 2) + 1) * ((r * 2) + 1)"], [0.1132376553935773, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of the opposite side when two sides and included angle are given.\nimport math\ndef triangle_sides_angle(a,b,c):\n  return math.degrees(math.acos(((a*a)+(b*b)-(c*c))/(2*a*b)))\nThe above code is a function to calculate the included angle of a triangle usiing its three sides.\nimport math "], [0.08252301452243646, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function that calculates the hypotenuse value of the right angle triangle\ndef checkColumn(arr, x):\n    n = len(arr)\n    cnt = 0\n    for i in range(n):\n        if arr[i][x] == 1:\n            cnt += 1\n            if cnt > 1:\n                return False\n    return True\ndef findStraight(mat):\n    for i in range(3):"], [0.11647103747932155, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a Python function finding the length of the adjecent side for a right angle triangle.\ndef get_paretheses(n):\n  left_ctr=0\n  right_ctr=0\n  answer=[]\n  left_ctr+=1\n  answer+='('\n  left_ctr+=1\n  answer+='('\n  left_ctr+=1\n  answer+=')'\n  left_ctr-=1\n  answer+="], [0.10544150404779132, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python program to find the second length between adjacent right angles of a rectangular triangle when two sides are known.\ndef string_bits(str):\n  o = \"\"\n  c=0\n  for i in str:\n    c=c+1\n    if c%2==0:\n      o=o+i\n  return o\nThe above code is a python function which returns the even index numbers of a passed string.\ndef double_char"], [0.12980022782058384, "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of the hypotenuse of a right triangle, given the lengths of the other two sides.\nimport math\ndef rectangle_from_width_and_height(x,y):\n  s1=x*y\n  return s1\nThe above code is a python function to find the area of a rectangle given its width and height.\n\nprint(len(input()))\nThe above code is a python program which accepts"], [0.14454615089530748, "def list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to return the length of the other side of a right angle triangle when the base and height are provided.\n\ndef no_vowels(name):\n  name=name.lower()\n  vowels = ['a','e','i','o','u']\n  for i in name:\n    if i  in vowels:\n      name=name.replace(i,'')\n  return name\nThe above code is a function to"], [0.10132737191527395, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the value of s for the given formula for adjacent and hypotenuse triangles.\ndef check_vector(x,y):\n  if len(x)>2 or len(y)>2:\n    return {x:'x is longer than 2 elements',y:'y is longer than 2 elements'}\n  elif len(x)==len(y):\n    return \"x and y each has 2 elements\"\n\n\nCheck"], [0.10132737191527395, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is to find the hypotenuse of right angle triangle, w and h being legs of the triangle x formula being sqrt(w*w+h*h).\n\nimport gmpy2 as gm\ndef find_GCD(n1,n2):\n  k=gm.gcd(a,b)\n  return k\nThe above code is to find the GCD of number availabe in import statement.\n\nimport itertools as"], [0.1298704327238047, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the adjacent side when width and height are given.\nThe Python3 code to add 'ing' and 'ly' after a specific word depending on whether ithasthe'ing'or'ly' ending or not: \ndef add_end(str):\n   rpt=False\n   x=len(str)\n   if x>3 :\n       if str[x-3:x]==\"ing\" : r"], [0.07898867700735618, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " will take area of rectangular triangle as input and will return the hypotenuse of that triangle.\ndef predictGrade(marks):\n  if(marks < 40):\n      return \"F\"\n  elif(marks <= 50):\n      return \"C\"\n  elif(marks <= 60):\n      return \"B\"\n  else:\n      return \"A\"\nThe above code will student marks as input and predict grade according to those marks.\n"], [0.1566702185778714, "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right angled triangle if the other sides are given.\n#Function to validate the password\nSpecifications\n1. Minimum 5 characters\n    a. The password should have at least 5 characters\n2. Maximum 10 characters\n    b. The password should not exceed 10 characters    \n3. At least 1 number between [0-9]\n    c. The password must contain at least 1 number    \n4. At least 1"], [0.35094997259246996, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenus given two legs (opposite side and adjacent side) of a right triangle. \n"], [0.1037673727048195, "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to give the value of sqrt of w*w+h*h.\nans = {\n \"Information\": [\n     {\n         \"Solution 1: \": \"Set_difference_operation\",\n         \"Objects Used\": \" Colours used are \",\n         \"Procedures used\": \" Following procedure are used ' .intersection(), .difference() , .symmetric_difference() ' \",\n         \"Value Required:"], [0.20828493143123095, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the hypotenuse of the given side in a right angle triangle.\n\n'''"], [0.12051430410877723, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find and return the length of an argument of right angled triangle, when two lengths of the sides were given.\ndef word_middle(string):\n  if (len(string) % 2) != 0:\n    return string[len(string)/2]\n  else:\n    return None\nThe above code is a function that returns the middle of the word, if the word length is even, else returns 'None'. \ndef is_"], [0.13026787697617942, "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate thr hypotenuse of right angle triangle. \n\ndef rwh_primes2(n):\n     if n==2:\n       allprimes.append(2)\n     elif n<2:\n      return []\n     s=list(range(3,n+1,2))\n     mroot = n ** 0.5\n     half=(n+1)/2-1\n     i=0\n"], [0.16034825941181136, "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the other diagonal side of a right-angled triangle when the lengths of the two legs are given.\n\ndef fac_num(num):\n   if num > 0:\n      factorial = 1\n      for i in range(1,num + 1):\n         factorial = factorial * i\n      return factorial\n   elif num == 0:\n       return 1\n   else:\n       return'NA'\nThe above"], [0.14362947950101707, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse of right angled triangle. You need to calculate the side opposite of right angle. Fill in the '0' in the following to calculate the side opposite of right angle.\n\nimport math\ndef center(x, y, width, height):\n  x1= x+width/2\n  y1= y+height/2\n  return [[x1, y],[x1+1, y1],[x1"], [0.1224714800234837, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to calculate the hypotenuse of a right angle triangle.\nimport math\ndef sides_Nint_RightAngle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return (int(w),int(h),int(s))\nThe above code is a python function to calculate the the sides of a right angle triangele.(co-ordinate system).\ndef rsum("], [0.10509390970522665, "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python program to find length of the hypotenuse of the right angled triangle.\nImplement one method of your choice with at least 10 lines of code. \nRun the code using command line arguments based on range of inputs for the function of your choise.\nLastly paste in a README file the code and a sentence explaining the function and implemention.\n\n\n# https://www.hackerrank.com/challenges/jumping-on-the-"], [0.15621389761308133, "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the missing side of right angled triangle with legs w and h.\ndef capText(string_To_Cap):\n  return string_To_Cap.capitalize()\nThe above code is a function to capitalize the first character of the given string.\ndef twoTeams(students):\n  return (sum(students[0::2])) - (sum(students[1::2]))\nThe above code is"], [0.16574248928308793, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of the right angle triangle with given width and height.\n\n\ns=input(\"enter how long the list should be\")\ns=int(s)\na=[0]*s\n\nfor i in a:\n    print(\"++\",end='')\ni=input(\"enter how long the Diamond should be\")\ni=int(i)\ndef stars(i):\n    if((i%2)!"], [0.17064292438268341, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the circumference of right-angled triangle.\n(10,\"hello\",30)\ndef remove_beforeSQL(test_tuple):\n  res = []\n  count = 0\n  for i, ele in enumer(test_tuple):\n    if ele =='SQL':\n      res = test_tuple[count:]\n      break\n    count = count + 1 \n  return (tuple(res))\nThe above"], [0.15401119151347265, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function that takes 2 integer parameters for width and height and returns the hypotenuse of the right angled triangle."], [0.09106606262109723, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a Python function to calculate the hypotenuse of the right triangle with width (w) and height (h) as sides.\nimport math\ndef otherside_rightangle(w,h):\n  return math.sqrt((w*w)+(h*h))\nThe above code is a Python function to calculate the hypotenuse of the right triangle with width (w) and height (h) as sides.\nimport re\ndef alphabet_pattern("], [0.11665050127784302, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes weight and height as arguments and calculates the length of the hypotenuse of a right angle triangle. \nfrom math import sqrt\ndef equilateral(s): return True if sqrt( (s-(s/2)*2)*(s-(s/2)*2)*3/4 ) - int(sqrt( (s-(s/2)*2)*(s-(s/2)*2)*3/4 ) ) == 0 else"], [0.13337023449680216, "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndef catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the value of square root of length of other side of the right angle triangle from given length of 2 adjacent sides of the triangle whose length of hypotenuse is known.\n\nimport math\ndef lengthofrightangledtriangle(l1,l2,hy):\n    \n The above code is a function to find the length of the other side of the right angled triangle when the length of all 3 sides of the triangle is known. where lengths of three"], [0.08487649761370195, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function for Pythagorean Triplet for which the sides other than the hypotenuse is given.\n\ndef printgreeting():\n  print(\"enter a number and I'll tell you if it's even or odd!\")\n\ndef evenorodd():\n  number = int(input(\"enter a number:  \"))\n  if number %2 == 0:\n      print(\"the number is even!\")\n  else:\n      print (\""], [0.0961384773880679, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\nimport re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function which returns the length of third side when two angles and length of other sides \nare presented to it.\nimport math\ndef max_sum(a, n):\n  L = [0]\n  maxnum = -math.inf\n  for i in range(1, n):\n    maxnum = -math.inf\n    for j in range(i):\n      if (a[i] > a[j] and L["], [0.15031884483136482, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function which outputs the value of hypotenuse of a right angled triangle.\ndef otherside_rightangle(w,h):\n\ts= (w-h) + (h-w)\n\treturn s\nThe above code is a function which outputs the value of hypopntenuse of a right angled triangle from another given pair value.\nimport numpy as np\nw= np.array([4, 6, 3, 5, 2,"], [0.18159313319752823, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the opposite side of a right angle triangle.\ndef add(num1, num2) :\n  return num1 + num2 \nThe above code is a python function to find the sum of 2 numbers.\ndef int_str(str):\n    sum = 0 \n    lst = list(str)\n    for x in range(len(lst)):\n      sum = sum + int(lst"], [0.09521013147262364, "def last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " will find the hypotenuse, when given 2 other sides. https://www.w3resource.com/python-exercises/math/python-math-exercise-14.php\n\n  import re\ndef text_match(text):\n    patterns = 'a*?b$'\n    if re.search(patterns,  text):\n                return 'Found a match!'\n    else:\n                return('Not matched!')\nThe"], [0.12399828956748968, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to compute the length of the hypotenuse, given the lengths of the other sides of the triangle.\nimport math\ndef closet_target(num,targets,hits):\n  e=[]\n  f=id(min(targets,key=lambda x:abs(x-num)))\n  g=min(targets,key=lambda x:abs(x-num))\n  t=f\n  while"], [0.19273465341838697, "import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse of a right angle triang;e when the other two sides are given.\ndef second_smallest(numbers):\nd=abs\nreturn d\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]"], [0.14460004823718106, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a triange using Pythagoras Theorem, with two parameter w and h which are always the shorter sides of a triangle.\ndef freq(lists):\n  count=[]\n  for i in range (0,26):\n    count.append(lists.count(i))\n  return count\nThe above code is a function that counts the frequency of each number in a given list.\n\n\ndef factorial"], [0.15351977303944828, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " returns the otherside of a right angled triangle given a certain width and height to base.\ndef msg_treatment(msg,opcode):\n  while 1:\n    print(\"OPCODE[1] Echo\\nOPCODE[2] Reverse\\nOPCODE[3] Extract\")\n    code=int(input(\"Please Enter Your OPCODE:\"))\n    if code==opcode:\n      break\n    else:\n      continue\n"], [0.07859126257157543, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a for checking if a rightangled triangle can be formed given two sides.\nimport numpy as np \ndef check_for_all_zeros(matrix, pos):\n\n    ### START CODE HERE ###\n\n    matrix = np.array(matrix)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n#     row = matrix[pos"], [0.12485591413554181, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function account for the hypotenuse in a right-angled triangle given the other two sides."], [0.3681832473656066, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\ndef overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find an hypotenuse in a right angled triangle.\n"], [0.11448063427515867, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find length of the missing side(opposite side) of right angle triangle.\ndef factorial(n):\n  fact=1\n  while(n!=0):\n    fact=fact*n\n    n=n-1\n  return fact\nThe above code is a python function to find factorial of the given number.\ndef countvowel(s):\n  c=0\n  for i in s:\n"], [0.13732171442102672, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to calculate the hypotenuse of a right-angled triangle.\ndef mainAdjusted(str1,str2):\n  str1 = str1.lower()\n  str2 = str2.lower()\n  total= len(str1) + len(str2)\n  return total\n\nThe above code is a python function to find the sum of length of two strings.\ndef mainVowel(ch):\n  if"], [0.14914981562945168, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a functiom to set the value of adjacent side of a right angled triangle using given width and height of the triangle.\n#12/default.jpg\n##This is a Fibo recursive program\ndef fib(n):\n    if n == 1 or n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\nnum = int(input())\nt1 = fib(num)\nprint (t1"], [0.13468192616227354, "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function which uses math.sqrt to return the sum of the squares of the legs of a right angle triangle.\nhwi\nhi\nhi\nhi\nhi\nhi\nhi\n1/0\n"], [0.22822213200701558, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenus of a right angled triangle.\nimport math\ndef derive(y, n):\n y=list(y)\n n=list(n)\n i=0\n x=0\n while i <= len(n):\n    x= x + (y[i] * (n[i]-1))\n    i= i+1\n return x\n The above code is a function to derive any function.\nfrom"], [0.24115682688052364, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the other side of a right angle triangle. The function takes the two sides as input and returns the other side.\n\ndef gcd(num1,num2):\n  c=[]\n  l=max([num2,num1])\n  s=min([num2,num1])\n  while s!=0:\n    c.append(l%s)\n    l=s\n    s=c[-"], [0.1436393984378737, "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\n\ndef check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return 3rd side of right angled triangle.\n\ndef isodd(n):\n  if(n%2==1):\n    return \"ODD\"\n  else:\n    return \"EVEN\"\nisodd(17)\nThe above code is a function to return ODD if n is odd.\n\ndef bitconvert(n):\n  if n==0:\n    return \"0000\"\n  bini=\" \""], [0.17412085849091913, "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuses of a right angle triangle, given the two other sides.\n\nimport re\ndef text_match(text):\n        patterns = '[a-z]+@[a-z]+\\.(co|in|com|net)'\n        if re.search(patterns, text):\n                return True\n        else:\n                return False\n\nThe above code is a function to match a string of words"], [0.12868765353720443, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that produces the hypotenuse of a right angled triangle, given it's legs are length w, and length h.\nimport datetime\ndef datein2014(dd=21, mm=3, yy=2014):\n  now=( datetime.date(yy,mm,dd))\n  return now - datetime.timedelta(days=1)\nThe above code is a function that gives the date of yesterday, if the day &"], [0.23647538924690753, "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse of a right angled triangle.\ndef second_or_third_word(word1, word2):\n    return word2 if word2 not in word1 else word1\nThe above code returns the word that's not in the first argument.\n"], [0.18884314199919627, "def multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypothenuse for a triangle that has a width and height equal to the parameters passed to the function.  An example would be: (w,h) = (2,2)\n\n"], [0.11432369973070734, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to compute the length of the hypotenuse from a right triangles other two sides.\n\nimport random\ndef random_random():\n  res = random.random()\n  print(res)\n  return res\nThe given code a function for a random float value.\n\nimport random\ndef random_randint(num1,num2):\n  res=random.randint(num1, num2)\n  print(res)\n"], [0.1726856298782682, "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse of a right angle triangle.\nimport string\ndef traverse_list(list,start,end,char):\n  myList = list[(list.index(start)+1):(list.index(end))]\n  print (char.join(myList))\nThe above code is a function to navigate a list of Strings between two positions where a String (no matter the length) is beginning of"], [0.13846106402249145, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the side of a right angle triangle, given the base of the triangle (w) and the perpendicular height (h).\n\ndef starting_2(string):\n  return string.startswith(\"2\")\nThe above code is to return a boolean value indicating if a given string starts with the number 2.\n\ndef count_pairs(string):\n  list=string.split(\" \")\n  list=list.lower()\n"], [0.12182460884683052, "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the hypothenuse of a right angle triangle.\n\ndef binary(lists, item):\n  first = 0\n  last = len(lists)-1\n  found = False\n  while(first <= last and not found):\n    mid = (first + last)//2\n    if lists[mid] == item:\n      found = True\n    else:\n      if item < lists[mid]:\n        last = mid -"], [0.18537018541893452, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a brief explanation of what the Euclidean Distance is. The Euclidean Distance is the distance between two points.\nimport math\ndef right_Triangle(x1,y1,x2,y2):\n  i=math.sqrt(((x2-x1)*(x2-x1))+((y2-y1)*(y2-y1)))\n  return i\nThe above code is a function to find the"], [0.214875377382678, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right angle triangle, given its width and height. \nPermutation\nimport math\ndef find_factors(n):\n  count=0\n  val=n\n  while(val!=0):\n    val=val/2\n    if val==1:\n      return(count)\n    elif val<1:\n    \n      if n>3:\n        otherside_"], [0.18358664252315976, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse.\ndef count_odd2even(start,end):\n  Odd=0\n  Even=0\n  for i in range(start,end+1):\n    if isOdd(i)==True:\n      Odd =Odd + 1\n    else:\n      Even = Even + 1\n  print(\"Il y a\",Odd,\"Nombres Impairs entre\", start,\"et\","], [0.14863607777163318, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a triangle. First the sides are square rooted.\n  This can be used almost in every right angled triangle problem to get a near exact value.\nfrom itertools import chain\ndef flatten_nested(itinerary): \n    return chain.from_iterable(itinerary) \nThe above code is a function to flatten nested lists. This is a different form of flatening than conventional methods"], [0.17986211962587997, "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " determines which side of a right angled triangle is opposite to the given side.https://www.geeksforgeeks.org/opposite-side-right-angled-triangle/\n\nvoid main() \n{ \n    int str[] = {97, 101, 105, 111, 117, 121}; \n    char array[] = \u201cgeeksforgeeks\u201d; \n  \n    // Declare a pointer variable \n    // of type"], [0.16141180371166794, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the one of the diagonal size of a right angled triangle given one side w and the other side h.\nimport math\ndef otherside_ellipse(a,b):\n  LSA = math.pi * a  * b\n  return LSA\nThe above code is a function to find the one of the diagonal size of an ellipse given the major and minor axis(a and b).\nimport math\ndef volume_"], [0.10037970163712975, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that finds otherside of a right angle associated to two sides .\na=555\nc=''.join(['%s' %a for a in range(10)])\nprint(c)\nThe above code is a way to create a string constructed from the numbers of a given integer by concatenating a given number.\nThe above code is a Python 3 program to find square of a number and also print a string (containing the square of the number"], [0.2045886618426497, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " contains function to find the third side of the right-angled triangle given two sides in a program.\ndef number_of_moves(n):\n  return ((n*n)-n)\nThe above code contains function to find the number of moves required(Manhattan moves) to reach a target position in  a Euclidean space.\ndef potential_energy(mass,g,height):\n  PE=mass*g*height\n  return PE\nThe"], [0.09161020050293275, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to calculate the length of the otherside of right-angled triangle using pythogoras theorem.\ndef is_groupDivisible(A):\n    n = len(A)\n    d = A[0]\n    mod_group = [0]*(d+1)\n    for each in A:\n      if each in mod_group:\n        return False\n      else:\n        mod_group[each % d]"], [0.11587934603836166, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " could also be written as\n\ndef otherside_rightangle(w,h): \n  return (w**2 + h**2)**.5\nYou can also use the math.hypot function which returns the hypotenuse of a right angled triangle with length w and h.\n\n \nTwo people speed down the corridor; one is aookie and the other is a raman. They both get up to 10 mph (speed includes aookie and the r"], [0.11789885987053163, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that shows the opposite hypotenuse of a right angle triangle.\ndef cowsay():\n    quote = input(\"Quote: \")\n    top = (\"\"\"\\\n         \\\\    \\\\   ^__^\n          \\\\    \\\\  (oo)\\\\_______\n             (__)\\\\       )\\\\/\\\\\n                 ||----w |\n                 ||     ||\n    \"\"\")\n    bottom =(\"-\" * len(quote) + \"OPS!\""], [0.0990837455736251, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function that calculates and returns the hypotenuse of a right angle triangle with the given base and height. \"\"\"\nimport math\ndef dict_filter(dict,n):\n    \"\"\"Returns a filter via given dictionary and integer\n    :type dict: dict\n    :type n: int\n    :rtype: dict\n    \"\"\"\n    dict = {key:value for (key, value) in dict.items() if value >=n}\n   "], [0.1610251439261458, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a calculator to find the side of a right angle triangle when the given dimensions to opposite sides.\ndef cumilative_sum(list):\n  m=0\n  for i in range(0,len(list)):\n    m+=list[i]\n    list[i]=m\n  return list\n#The above code is a function to calculate the cumulative sum of a list of values.\ndef sumofsquares(list):\nsmall="], [0.17412085849091913, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right triangle given the width and height.\nimport math\ndef circle_radius(x):\n  radius=math.sqrt(x/math.pi)\n  return radius\nThe above code is a function to calculate the radius of a circle given its area.\ndef sum_even_divide(numbers):\n  result_num=[]\n  result_add=0\n  for i in range"], [0.2686717789947167, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the missing side of a right-angled triangle,using math.\nimport numpy as np\ndef arrayblaster(a,b,c,d):\n  a=np.array(a)\n  b=np.array(b)\n  c=np.array(c)\n  d=np.array(d)\n  s=[a,b]\n  A=np.stack((a,b),axis"], [0.11729407503180136, "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the hypotenuse of the right angled triangle.\ndef is_perfect(n):\n\tres = 0\n\tfor i in range(1, n):\n\t\tif (n % i == 0):\n\t\t\tres = res + i\n\tif res == n:\n\t\treturn True\n\telse:\n\t\treturn False\nThe above code is a function to check whether the entered number is a perfect square.\n"], [0.09027568174784237, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes as input the width, w, and height, h, of a right-angled triangle and returns the length of the triangle's third side.\ndef friendly_num(a, b):\n    if a*(-1.0) > b:\n      return b*2\n    else:\n      return a\nThe above code is a function that takes as input two integers, a and b, and returns the smallest integer greater than or equal to"], [0.09063526580556104, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the length of the hypotenuse of a right-angled triangle given the lengths of the two legs.\n\n# Modules\n\n# Modules let you organize your code by grouping related code. We have already used lots of methods which are organized into a module. You will have to create quite a few modules of your own while solving some of these problems!\n\n# Reading and Writing\n\n# Find aname of the Python interpreter under which you are"], [0.25002383776867554, "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " uses Pythagoras' theorem to find the length of the hypotenuse of a right angle triangle.\n"], [0.13860220964541736, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to compute the hypotenuse of a right aggled rectangle.\ndef otherside_rightangle(w,h):\n  k=1/math.sqrt((w*w)+(h*h))\n  return k\nThe above code is a function to compute the oppesite side of a rightangled triangle.\n\nRules to win Rock Paper Scissors game:\nThe game is played between two players.\nRock beats Scissor\n"], [0.08620916933057549, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function that returns the value that is the hypotenuse for given array or sides of a tringle.\nimport math\ndef otherside_rightangle2(w,h):\n  s=math.sqrt((w*w)-(h*h))\n  return s\nThe above code is a python function that returns the value that is the adjacent for given array or sides of a tringle.\ndef letter_count(string):\n    d"], [0.17402370762205835, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse of a right angle triangle given the length of the other two sides.\nimport pandas as pd\nd ={'Relative_First_Quartile_Price' : [0.65,0.41,0.41,0.65],\n    'Square_Feet' : [12000,15000,1800,1200],\n    'Bedrooms' : [3,3,9,"], [0.15520648147378224, "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the hypotenuse of a right angle triangle.\ndef error_summation(s1,s2):\n  s=s1-s2\n  print(\"error_Summation\",s)\n  return s\n\nThe above code is a function to compute the difference of actualoutput and expectedoutput.\n"], [0.11397244183439155, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to return the semi-perimeter of a right angle triangle.\nimport math\ndef maximum_of_2(a, b): \n  return max(a, b)\nThe above code is a python function to return the maximum of two number.\nimport random\ndef random_number():\n  random_numbers_generated = 0\n  r_number = random.randint(0, 100)\n  random_numbers_"], [0.10843297470211424, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the hypotenuse of a right-angle triangle whose other sides are w and h.\n\ndef add(x,y):\n  return x+y\ndef sub(x,y):\n  return x-y\ndef mul(x,y):\n  return x*y\ndef div(x,y):\n  return x/y\nThe above code is a function that returns the evaluation of the expression"], [0.19977706027682765, "def min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to calculate the other side for a right angle triangle.\nimport math\ndef length_rightangle(height,side):\n  l=math.sqrt((side*side)-(height*height))\n  return(l)\nThe above code is a python function to calculate the length of the third side of a right angle triangle.\nimport math\ndef radius(height):\n  \n  radius=math.sqrt((height*height)/"], [0.13322676568286615, "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the missing side in a right angle triangle if the other two sides are given to you.\n\n# <h3>Question 2</h3>\n# Python is popular for its easy manipulation codes and in this question, your task is to write down the code to find the second most frequent letter in the given string.\n# Example string : 'aaaaabaaaab'\n# Expected result : 'b'\n#mehul@meh"], [0.39184246754861096, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the other side of a right triangle given the two arms.\n\n"], [0.17370064197772686, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the side diag of right angled triangle. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-8.php\n\ndef string_func(chracter):\n  print(chracter + '->' + 'This is a single character')\n  if len(chracter) > 1:\n    string_func"], [0.09449012692933281, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function for the length of the hypotenuse of a right-angled triangle, given the lengths of the two other sides.\ndef MySqrt(k):\n    if k < 0:\n        return math.nan\n    elif k == 0:\n        return 0\n    else:    \n        X = 1.0000*k\n        while math.fabs(X - k/X) > 1.00*(10**-6"], [0.2877040970814116, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find a missing part of right angled triangle.\n@\nReferences\nhttps://www.w3resource.com/python-exercises/python-functions-exercise-6.php\nhttps://www.w3resource.com/python-exercises/python-functions-exercise-8.php\nhttps://pymbook.readthedocs.io/en/latest/conditional.html\\\n\"\"\""], [0.09080911726054922, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes in two arguments w and h and return their sum of squares.\n\ndef justify_text(list_of_strings, l):\n  length=0\n  for s in list_of_strings:\n    length=length + len(s)\n  space_length=l-length\n  str1=\"\"\n  n=len(list_of_strings)\n  idx=0\n  while(n>0):"], [0.18589376191700693, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the other side of right angle triangle when two sides are given.\nimport numpy as np \nimport math\ndef points_distance(x1,y1,x2,y2):\n  cord = np.sqrt(np.power(x2-x1,2) + np.power(y2-y1,2))\n  return math.sqrt(cord)\nThe above code is a function to"], [0.11745441779828385, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to calculate the Hypotenuse of a Right angled triangle from two given negetive integers .\nfrom math import *\ndef squre_of_one_two(side1,side2,rule):\n    s=pow(side1,2)\n    b=pow(side2,2)\n    if(rule==\"A\"):\n        length=5/(2*a)\n        width=5*b"], [0.11804916922240034, "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate otherside of right angle triangle.\nimport math\ndef otherside_rightangle(w,h):\n  area = w*h/2\n  s=math.sqrt(area+(h*h))\n  p=s+s+s\n  return p\nThe above code is a function to calculate perimeter of right angle triangle.\ndef running_window_max(window_size,window_seq):\n  maxsum"], [0.14454615089530748, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of the hypotenuse of a right angle triangle, given both sides of the right angle.\nimport os\ndef listdir_file(s):\n v=os.listdir(s)\n f=[]\n for i in [ i for i in v if os.path.isfile(os.path.join(s,i))]:\n  f.append(i)\n return f\nThe above code is used"], [0.10251913732010343, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the sqrt of the provided a number.\ndef otherside_rightangle(w,h):\n  return (math.sqrt((w*w)+(h*h)))\nThe above code is a function to calculate the sqrt of the provided values.\nTrue of False if the given nuber is in the given range.\n(bonus with step)\n\nimport math\ndef in_set_range(start,stop,"], [0.17958270944110685, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find other side of a right angled triangle using Pythagoras theorem.\nSolve the above using lambda and map together.\na = lambda x, y: x + y\nprint (a(5,6))\ncalculate the sum of power of every digit of a number.\n\nCalculate the sum of power of every digit of a number.\n'''"], [0.13575735758914745, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenues of a right angle triangle given the base and height of the triangle as input.\nimport math\ndef s_tri(w,h):\n\ts=w*h/2\n\treturn s\nThe above code, when run as s=s_tri (w,h): will return the area of the triangle with base w and height h.\n\nimport random\ndk=random.sample(range(1,"], [0.12426513757213138, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " prints the hypotenuse of a right angled triangle given the other two sides.\n\nimport math\ndef hypotenuse(w ,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code prints the hypotenuse of a right angled triangle given the other two sides.\n\ndef factorial(n): \n    factorial = 1\n    if n < 0: \n        print(\""], [0.13595661277291357, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", "1 is otherside of a right angle triangle.\ndef prime_factorization(x):\n\tprint(x, \"=\", end=\"\")\n\ti=2\n\twhile(i<x):\n\t\tcnt=0\n\t\twhile(x%i==0):\n\t\t\tif(i<=x and cnt!=2):\n\t\t\t\tcnt=cnt+1\n\t\t\t\tx=x"], [0.11110885510009694, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the hypotenuse of a right triangle with width w the length of the opposite side and height h the length of the adjacent side.\ndef give_score(mark):\n    if mark >= 90:\n        return \"A\"\n    elif mark >= 80 and mark < 90:\n        return \"B\"\n    elif mark >= 50 and mark< 80:\n        return \"C\"\n    elif mark < 50 and mark >="], [0.09242853234103146, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that based on the given parameters for the right angle, prints the side of the right triangle with dimensions passed in. \n\nimport os,shutil\npath = r'C:\\Users\\giga\\OneDrive\\Desktop\\Images'\nos.mkdir(path)\nThe above code is a function that creates a new folder in the given path. This can be any path you choose. \n\nname=input('Name your directory with an extension"], [0.17386467104942113, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse of a right angled triangle with a given base,w and height,h.\n\ndiagonal=(otherside_rightangle(10,20))\nimport math \ndef find_Diagonal(w,h): \n return (math.sqrt((w*w)+(h*h))) \nThe above code is a python function that calculates the diagon of triangular,the input for the commands along with the"], [0.14134533896240534, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find out the hypotenuese of right angle triangle.\nFor example let the following triangle:-<br>\nHeight 2,  base 3 ,  hypotenuese 4\ndef reverse_sentence(sen_tence):\n  words=[]\n  space''\n  i=0\n  while i < len(sen_tence):\n    if sen_tence[i] != ' ':\n      word_start=i\n"], [0.09400394474601408, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function which takes in length of one side of the non-right angled triangle as the two arguments and return the hypotenuse (sides of the non-right angled triangle).\nlegal={\"S1001\":647,\"M1001\":578,\"W1001\":708}\nSample data\nlegal[\"S1001\"]\nResult output\nprint(legal['M1001'])\nSample data\nlegal[\"W1001\"]\nResult output\nprint(legal['W1001'"], [0.16566500531283243, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to calculate the square root of a right angled triangle. The result of the Pythagoras Theorem is calculated by using pythagoras main concept with the help of three radian angles.\n\nimport string\ndef string_test(s):\n    d={\"UPPER_CASE\":0, \"LOWER_CASE\":0}\n    for c in s:\n        if c.isupper():\n           d[\"UPPER_"], [0.15962249898813585, "def add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find hypotenuse given side lengths.\ndef group_even_odd(list2):\n  list_group = list(list())\n  for l in list2:\n    if (l%2==0):\n      list_group[0].append(l)\n    elif (l%2!=0):\n      list_group[1].append(l)\n  return(list_group)\nThe above code"], [0.13142906360726136, "def rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function which returns side of the right angled traingle using aggregrate of width and height.  \n\n# Question 5:\n# Write a function to return the cumulative price over a period of time by adding the price for each item bought per day\ndef daily_price_cumulative(path):\n  with open(path,\"rt\") as fd:\n    dict={}\n    for line in fd:\n      k=line.split(\""], [0.18519905712339388, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the side that is opposite to the right angle in a right angled triangle from the given base and height.\nhw2018 w2\n1 Find the nth(3) largest number in a list:\nnums=[77,8,99,45,-66,5]\nnum=int(input(\"enter the number:\"))\nval=nums[:num]\nanswer=heap_queue_largest(val,n"], [0.13283724776315164, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes in the width and height of a right angled triangle and returns the length of the other side.\nimport random\ndef move_zeros(list_tupl):\n  count = 0\n  list_tup = [i for i in list_tupl if isinstance(i,bool) or i!=0]\n  for j in range(len(list_tupl)-len(list_tup)):\n    list"], [0.17606344657539622, "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is another function to calculate the hypotenuse and it is completely reusable.\n\ndef long_total_length(check_list):\n    return sum([len(i) for i in check_list])\nThe above code is a function to find the total length of strings given in a list.\n\"\"\""], [0.1905557437117806, "import heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to print the hypotenuse of the right angled triangle.\ndef ins_sort_rec(test_list,i):\n    if i==0:\n        return\n    ins_sort_rec(test_list,i-1)\n    j=i\n    while(j>0 and value[j]>test_list[j]):\n        (test_list[j-1],test_list[j])=sw"], [0.12107985368690878, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a Python function to return the value of the parameter opposite to the right angle in a right angled triangle, when 2 sides of the triangle are known. \n\ndef get_primes(n): \n    n1 = next_power_of_2(n) \n    sieve = [True]*int(n1) \n  \n    for i in range(3,int(n1**0.5)+1,2): "], [0.11314603405723728, "def min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is function to solve square of hypotenuse in a right angle  triangle.\n\ndef bfs(g,start):\n  start.setDistance(0)\n  start.setPred(None)\n  vertQueue = Queue()\n  vertQueue.enqueue(start)\n  while(vertQueue.size() > 0):\n    currentVert = vertQueue.dequeue()\n    for nbr in currentVert.getConnections():\n"], [0.13293186904395962, "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the integers whose square has two digits.You have to take the integers from 100 to 200 and fill the variables in below code.Don't forget to put values in variable x and y\nimport math\ndef otherside_rightangle(w,h) :\n    s=math.sqrt((w*w)+(h*h))\n    return s\nThe above code is a function to find the integers whose square has three digits.You have"], [0.20150523184619498, "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that should take the length of the short side of a right triangle and return the length of the hypotenuse.\n"], [0.09934591529553109, "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " shows the mathematical operations.\nimport math\ndef  pythagorean(leg,hyp):\n  hyp2=((leg*leg)+(hyp*hyp))\n  return hyp2\nThe above code is a mathematical function to show the hypotenuse of the right angle triangle.\ndef perfct(num):\n  sum = 0\n  for i in range(1,number):\n    if(number%i==0):\n      sum = sum+"], [0.1076866439505787, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to sum up all other values in the right angle triangle(add hypotenuse).\n\nimport math\ndef shorting_list(list1):\n  list2=list()\n  for i in range(0,len(list1)):\n    if list1[i]>0:\n      list2.append(i)\n  return list2\nThe above code is a function to remove negative value in a given list.\n\n"], [0.13082302284082245, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function which returns the length of other side of right angled triangle.\n\ndef english_to_french(text) : \n \n    english = ['red', 'yellow', 'blue', 'green', 'white', 'black', 'orange', 'pink']\n    french = ['rouge', 'jaune', 'bleu', 'vert', 'blanc', 'noir', 'orange', 'rose'] \n    res_text"], [0.0819244934751219, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function that takes in two numbers and returns the length of the hypotenuse of the right angle triangle that has with the given numbers on his two sides.\ndef rightangle(h,b):\n  s=math.sqrt((h*h)+(b*b))\n  return s\nThe above code is a python function that takes two numbers and returns the length of the hypotenuse of the triangle given the two legs of the triangle.\ndef"], [0.19635403573686758, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the missing third side of a right angle triangle 1.\n\ndef area_pentagon(p):\n  r=(((a*a)-(.25*(math.sqrt((5*(5+(2*math.sqrt(5))))))))/2)**.5\n  return r\nThe above code is a python function to calculate the area of pentagon 1.\n\nfrom math import *\ndef findMetric("], [0.13971072406173696, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the square root of an ambrette triangle height. W is the base while H is the hypotenuse square\n\ndef atil(m,m2):\n  a=\"at\"*m+ \"il\"+ \"a\"*m2\n  return a\nThe above code is a function to make a inionnates string. m is the first each of a, l and i second is the seocnd each of a and l"], [0.13798070999046505, "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is to calculate the third side of the right angle triangle (s).\n\n#Ques8)\ndef switch_list(l1) :\n    for i in range(0,len(l1)-1,2) :\n        l1[i],l1[i+1] = l1[i+1], l1[i]\nThe above code switches adjacent elements in a list without using another list.\n\ndef binomial_(n"], [0.08116760716713906, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is used to def c for the hypotenuse of the triangle and c={\u221a(w2+h2)}\n\n# Normal Function\n#normal function\ndef square_values(value):\n  square = value**2 #**using double **-asterisks for exponential power\n  print(\"square of the number is \",square)\nsquare_values(5)\n\n# Recursive Function (tail recursion)\nsum_of_numbers = lambda"], [0.17152074800113115, "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the other side of a right angle triangle from the two given side lengths. Remember: S=math.sqrt(w^2+l^2)\n#code ...\n#HINT: Right angle triangles have two 90 degree angles. Convert the degrees of your result to radians.\ndef deg_to_radians(degrees):\n return\nThe above code is function to convert a given negative value of degrees to radians.\n#"], [0.11480827015916924, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\nfrom operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that returns the hypotenuse of right angled triangle a right angled triangle has sides of length w and h and to find the ))\n\nfrom operator import add\ndef addition2(n1,n2):\n  return list(map(add, n1, n2))\nIn the above code, map is an inbuilt two argument function that iterates over a sequence [n1,n2] and runs the two argument function specified above on each element"], [0.11667019858743154, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is used to find the length of the hypotenuse of a right angle triangle given its width ang height.\n\ndef natural(number):\n    for i in range(1,number+1):\n        print(i,end=\" \")\nThe above code is used to print natural numbers seperated by spaces.\n\ndef space(b):\n  for x in range(0,b):\n    print(\" \",end=\"\")\nThe above code is"], [0.07555940287907752, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is the calculation formula for the hypotenuse in the right and acute angle case.\n\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)-(h*h))\n  return s\nThe above code is the calculation formula for the hypotenuse in the right and obtuse angle case.\n\nimport math\ndef otherside_rightangle(w,h):\n  s=(6"], [0.0832303742161172, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function that Calculates the hypotenuse and angle on opposite side of an acute angle. Remember\nthat the number returned is an Optional because the angle that is opposite the hypotenuse may not be 90\u00ba.\n\n\n\"\"\"\n\"\"\"\nCode Wars Katas: Description\nIf nice strings are a 'necesary' part of society, wouldn't you want your Strings Accepted? If what's fundamentally\nundervalued or ignored can be dismissed as 'non-"], [0.10409605633309979, "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the hypotnuse of the reactangle from other two sides.\nimport math\ndef pi_value(nput):\n  v=math.pi/nput\n  return v\nThe above code is a function to calculate the fraction of pi to some value.\n\ndef radius_of_circle(rad):\n  r= math.pi*math.pow(rad,2)\n  return r\nThe above code is a"], [0.18844305751448995, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the value of S, where S = \u221a(W\u00b2 + H\u00b2), where W and H are the lengths of the sides of a right-angled triangle.\n\ndef get_vertex(commonx,commony,rectangle):\n  x=commonx\n  y=commony\n  if(rectangle==1):\n    y=y+1\n  elif(rectangle==2):\n    y=y"], [0.10465934386578661, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the value of 's' for a right triangle with sides 'a' and 'b' provided as arguments.\ndef factorial(num):\n  return 1 if (num == 1 or num == 0) else num * factorial(num - 1);\nThe above code is a function to determine the value of 'n!' a.k.a the factorial of a provided number.\ndef multiple_palindrome(string_n):"], [0.12031979896726422, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the value of s, the hypotenuse of a right angle triangle, using pythagoras' theorem.\nimport random\ndef is_negative_outside(i,j):\n  if i<3 or j<3 or i>=20 or j>=20:\n    return random.randint(-1,1)\n  else:\n    return 0\nThe above code is a function to give six negative values of t at"], [0.14017303269600973, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is the function to find the length of the hypotenuse of a right angle triangle given the other two sides.\ndef perfectcubes(p):\n  cubes = []\n  c = 0\n  while (c<('P')):\n    j = 0\n    for i in range(1,p+1):\n      multiply = i * i * i\n      cubes.append(multiply)\n      #if (sum == ('P')):"], [0.13205774952652788, "def cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\n\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the length of the hypotenuse (s) of a right angled triangle where other sides are of length w and h from w and h, respectively\ndef sumofdigits(test_list):\n  return sum(map(int,str(test_list)))\nThe above code is a function to calculate the sum all the digits in a integer.\ndef findthepattern(test_string):\n  for i in range(1, len"], [0.14637196772516042, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of the right angled triangle, given the two sides\ndef prime_factors(n):\n  count = 0\n  for i in range(1, n+1):\n    if (n % i == 0):\n      count = count + 1\n  return count\nThe above code is a function that prints all the Prime factors of a number. Geeksforgeeks has a better approach.\ndef is_prime("], [0.09657314401585683, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the value of hypotenuse for (right angled triangle)\nimport pandas as pd\ndef max_columnwise(spreadsheet):\n  return spreadsheet.apply(max,axis = 0)\nThe above code is a function to return the maximum of all columns of a spreadsheet. For axis = 1, it means maximum of all rows within each columns and for axis =0 , it means maximum along each of the entities of each row.\nimport"], [0.12385936874770508, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of a string \\\\(w\\\\) from the other side of a right-angled triangle if the length of the hypotenuse of such a triangle is known.\n\n#And that's all for today! We've achieved LEADER status! Hoooraaayyy! \\\\(-_-)/ \n# Next week let's try something a bit tougher! Be ready with your submissions! I'll be back next monday with a snaz"], [0.3867136011394046, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of the rightangled triangle.\n"], [0.11789885987053163, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of the hypotenuse of a right-angled triangle. The lengths of the two shorter sides of a right-angled triangle are the arguments passed to the range.\n\nsin_list=[];\nfor w in range(1,91):\n    h=(180*(10**-6))/otherside_rightangle(w,w);\n        sin_list.append(h)\nprint(sin_list)\nThe"], [0.08015704244410785, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a special case of Right Triangle Where hypotenuse is the given number(s) and the other two sides are square roots.\ndef count_occurence(test_str, test_chr):\n  test_str\n  test_ord= ord(test_str)\n  for i in test_str:\n      return test_str.count(test_chr)\nThe above code calculates the number of times a character or phrase occurs in"], [0.5646525556936538, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the side outside a right angled triangle.\n"], [0.09570996441598023, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to vote other side right angle check in the square.\n\nx : true if it is malignant tumor in all 3 docters => x =true if\n                         ((age <=50 malignant YES, malignant YES in all 3) (age <=50 malignant NO  malignant NO, malignant NO in 2 docters ) ~3~3~3~\n                         (age>50  malignant NO, malignant NO in all 3) (age"], [0.14083351340026726, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to ouput the other side of right angle triangle.\n\ndef check_anagrams(string1, string2):\n  str1_list=list(string1)\n  str1_list.sort()\n  str2_list=list(string2)\n  str2_list.sort()\n  return(str1_list==str2_list)\nThe above code is a function to check whether two strings are"], [0.19108936276076335, "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\n\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to caclulate the hypotenuse squareroot of width and height.\n"], [0.14982331756782297, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse of a right triangle having the leg lengths w and h.\nimport math\ndef main():\n    a=int(input(\"Enter length of first side: \"))\n    b=int(input(\"Enter length of second side: \"))\n    c=sqrt(a*a+b*b)\n    print(\"Hypotenuse of given right is=\",c)\nif __name__ == '"], [0.16574248928308793, "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\n\ndef large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the right angle length of an anti-clockwise turn joined at origin point(0,0) by two given lengths of legs.\n\ndef judge_babyfaces(bfteam, whetheritisbf):\n  bf_fname = [x.split()[0] for x in bfteam]\n  bf_lname = [x.split()[1] for x in bfteam]\n  return ([i["], [0.123805081708391, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of the hypotenuse of a right angle triangle using the length of the other two sides.\nfrom math import sin,cos,tan     #This code should just be in the function \ndef polygon_sides(n):            #However, running this part outside the function.\n  angle=360.0/n\n  a=sin(radians(angle))\n  b=cos(radians(angle))\n"], [0.14568429208202172, "def reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is to find the length of the other side of a right angle triangle when given 2 side lengths\ndef chkprimes(lt): return sum(lt)==22\n>>> ltt=[2,6,19,21]\n>>> list(filter(chkprimes,ltt))\nThis function is to check if the serial sum of a list is same as number\ndef histogram(itemlist): return list(map(lambda x: print('X'"], [0.14910608479395343, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function that is a right angle triangle function. The function is used to calculate hypotenuse of a right angle triangle.\n\ndef pair_xor(arr,n):\n  l=[]\n  for i in range(0,n):\n    for j in range(i,n):\n      l.append(arr[i]^arr[j])\n  return max(l)\nThe above code is a python function to find the"], [0.18844305751448995, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that returns the length of the hypothenus of a right angled triangle.\n\ndef singular_presence(string):\n    container=[]\n    contained= []\n    for i in string.split():\n        if i.endswith(\"s\") == True:\n            contained.append(i)\n        else:\n            container.append(i)\n    if len(container) == len(contained)+1:\n        return True"], [0.20366458087598852, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a Python function to find the length of the hypotenuse of a right angled triangle , when the other two sides(Legs) are given.\n \nimport statistics\ndef boxplot(data):\n  min_=min(data) # \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435\n  median=statistics.median(data) # \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043c\u0435"], [0.15844405762524638, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find other side of right angled triangle using its given two sides. \n\"\"\"\n\ndef lc(test_list):\n  if len(test_list) == 0:\n    return test_list\n  res = [highest_common(test_list[0], test_list[1])] + lc(test_list[2:])\n  return res\n\ndef highest_common(a, b):\n  if"], [0.23204497334494217, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the other diagonal side of a right angle triangle.\ndef binary_to_decimal(str1): \n    str1 = str(str1)\n    str1 = str1[::-1]\n    result = 0\n      \n    for i in range(0, len(str1)): \n          \n        if (str1[i] == '1'): \n            result += pow(2, i"], [0.07665527698762613, "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function.\ndef righttriangle(x1,y1,x2,y2,x3,y3):\n    if y1==0:\n        if y3==0:\n            if y2==0:\n                if x2!=0:\n                    print (\"false\")\n                else:\n                    if x1!=0:\n                        print (\"One point inside: (0,0) and perimeter:\", abs"], [0.16689505508021651, "def reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that returns the length of the hypotenuse of a right angled triangle.\nfrom math import factorial\n# fact=1\n# def factorial_fnc(num):\n#   global fact\n#   n=fact*num\n#   num-=1\n#   if num>1:\n#     factorial_fnc(num)                    # Recursion is applied.\n#   else: \n#     return n                             "], [0.14756368077307475, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of the other side of a right angle triangle, when the two sides and hypotenuse are known.\n\ndef sumArray(arr):\n  sum = 0;\n  for i in range(0,len(arr),1): \n    sum = sum + arr[i];\n  return sum;\nThe above code is a python function to find the sum of all the elements of the array.\n\ndef factorial"], [0.23121898799412766, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that returns the hypotenuse of a right angled triangle using the given two perpendicular lengths.\nord('d')\n"], [0.12439781469425838, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of the hypotenuse of a right angle triangle.\n\n\n#Keyword ArgumentsExample\n\ndef right_angled_triangle(side,height):\n  return 1/2*(side*height)\nThe above code is a python function to calculate the area of a right angle triangle given the length of its side and height.\n\n\ndef remove_kth_letter(word, k):\n    first_part = word"], [0.15921210878613798, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the other-side value of the right-angle triangle's hypotenuse.\n\ndef miles_to_m(miles):\n  m=miles*0.621371\n  return m\nThe above code is a function to convert miles to metres.\n\ndef temp(F):\n  return ((F-32)*5)/9\nThe above code is a function to convert temperature Fahrenheit to Celsius."], [0.10532606846406325, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to calculate the value of s using the formula s= \u221a(w2+h2). We have been asked to find sqrt function and import the math.\ndef volume(r):\n  v=(4/3)*3.14*(r*r*r)\n  return v\nThe above code is a python function to calculate the volum of a sphere ,we have been asked to find the volume of a sphere using radius.\n"], [0.14177883294457005, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find second side of right angled triangle, given base and height as parameters. \ndef second_largest(t):\n  pivot = 0\n  (second, pivot) = (t[len(t) - 2], t[len(t) - 1])\n  for idx in range(len(t) - 2):\n    if pivot <= t[idx]:\n      (second, pivot) = (t[idx],"], [0.3081587756216248, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the other side of a right-angled triangle when base and height are given.\n"], [0.07528102991107477, "import re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " gives hey:-I don't exactly need the output just that side is greater than the input.\nnum=(input(\"enter the number:\"))\nif num:\n  print (num)\nelse:\n  exit()\nprint(\"empty string\")\nIn the above code a elif statement is used implies if the given statement does not hold true it checks the other statement and then returns.\nnumb=(input(\"enter the number:\"))\ntry:\n  num="], [0.2289818572331724, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the third side of the right angled triangle \n\ndef is_perfect_sqr(x):\n  a=math.sqrt(x)\n  b=int(a)\n  if (a-b==0):\n    return True\n  else:\n    return False \nThe above code is a function to check whether the integer entered is in a perfect square or not.\n\n# 3. Least divis"], [0.11714498651216108, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function for finding the other side of a right angle.\nfrom cmath import sqrt\nfrom math import pow\ndef bass_boost():\n  ...\n  return master\nThe above code is a python function for bass boosting a sound.\nfrom datetime import datetime\nmy_brithday = datetime(1987, 2, 22, 19, 24)\nfrom datetime import datetime\nmy_brithday = datetime(1987,"], [0.09839710512892057, "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes an integer value for the width and height and calculates the value of the third side immediately to the right angle of the rectangle\nimport math\ndef str_round(w):\n  for i in num:\n    i = round(math.pi,i)\n  return i\nThe above code is a function applies to a floating point value. If the number of digits after the decimal point, or the first digit to print from the round() function."], [0.0898817511545755, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that calculates square root from a given given (w,h) as arguments and returns it.\nimport math\ndef surface_area_rectangular_box(l,w,h):\n  '''\n  Fa=2*(l*w + h*w + h*l)\n  '''\n  return 2*(l*w + h*w + h*l)\nThe above code is the function returning the surface area of"], [0.2510392939576921, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\ndef flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of the missing side of a right angled triangle.\n\ndef introTutorial(V,arr):\n    for i in range(len(arr)):\n        if arr[i]==V:\n            return i\nThe above code is a function to find the index of an element in a sorted list.  \n\ndef introTutorial(V,arr):\n    low=0\n    high=len(arr)-1"], [0.19320609024070326, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the the area using s of a right triangle.\n\n\ndef otherside_rightangle(s,b):\n  h=math.sqrt((b*b)+(s*s))\n  return h\nThe above code is a function to find the the area using h of a right triangle.\n\n\ndef circumference_cricle(N):\n  pi=3.14\n  r=N/pi\n  c=2"], [0.17182479079828983, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of the hypotenuse of a right angle triangle. The funtion gets as input the width and height of the triangle.\n\ndef rightside(w,h):\n    hypotenuse=math.sqrt((w**2)+(h**2))\n    bot=w/h\n    return hypotenuse/bot\nReference link: https://www.freecodecamp.org/news/comparing-flo"], [0.15174336658183987, "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to derive the hypotenuse of a right angled triangle, given the two left sides.\n\ndef average_grade_tofloat(g1, g2, g3, g4, g5):\n  t=g1+g2+g3+g4+g5\n  g=t/5\n  return float(g)  \nThe above code is a function to calculate the average grade, given individual grades as string inputs,"], [0.09767287537560389, "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to calculate the hypotenuse(Pythagorean theorem), given the lengths of the other two sides of right-angled triangle, w and h.\ndef arithmetic_sqrt(s,l,r):\n    number=s\n    first_value=1\n    last_value=number\n    middle=(first_value+last_value)//2\n    y=middle*middle\n    for x in range(number):\n       "], [0.08702189001836953, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function which calculates the sides given an acute triangle.\ndef find_ordinal_frequency (l1, l2):\n  res2 = ()\n  for position, element in enumerate(l1):\n    if l2.count(element) == 1:\n      res2 += (position,)\n    else: continue\n  return res2\nThe above code is a function that computes possible conditions when using the Card catalog game.\n\n#"], [0.11870178543612164, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of the hypotenuse in a right angled triangle, given the lengths of the other two sides as the inputs.\ndef number_to_string(n):\n  return str(n)\n\nThe above code is a function takes in an integer and returns it as a string.\nimport re\n def turn_uppercase(text1):\n  return (re.sub(\"[A-Z]\", \n                 lambda x"], [0.15488022263508625, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the side opposite of a right angle in a rectangle.\ndef factorial(x):\n    if x < 0 :\n        print('Unable to find factorial of a negative number')\n    elif x == 0 or x == 1 :\n        return 1\n    else:\n        fact = x*factorial(x-1)\n        return fact\nThe above function finds the factorial of a number without using recursion.\n\n"], [0.11970361754389479, "def split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to compute the leg of a right angle triangle.\nPredict the Output\n\nimport math\nrludics = get_ludic(12)\narr = []\nfor rludic in rludics:\n  arr.append(otherside_rightangle(rludic, 13))\nprint(arr[-1])\nThe above code computes the last leg in a right angle triangle whose other two sides are prime numbers with no common factors"], [0.09472884982702955, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a program to find the length of the hypotenuse of the right-angled triangle when the opposite and the adjacent sides are passed in the program.\n\ndef f2(x, y, z): \n\ta = x+y \n\tb = z/y\n\tc = z+y \n\treturn a,b,c\nThe above code is a code snippet to find three variables when two of them are given through the code.\n\"\"\""], [0.11084813820142561, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", ", is a function to calcualte the length of the hypotenuse, pythagorus theorum using hundredth place.\nimport math\ndef calculate_Speed (kms,hours):\n  speed=round(kms* hours, 4)\n  return speed\nThe above code is a function to calcualte the speed km/h in decimal place\n"], [0.1670359264092278, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is just a function to find the hypotnuse of right-angle triangle when sides are given. \nIn addition to this below codes can be added as  per complexity:\n\ndef bin_len(num):\n    res = bin(num).replace('0b', '').split('0')\n    return max(map(len, res))\n\ndef find_chr(str):\n  letters=[]\n  count=[]\n  \n "], [0.09786989107443851, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function that finds out the value s such that s is the length of the hypotenuse of a right angle triangle with sides w and h.\nNOTE : In the left sample code there is a mistake k occurs twice. Thus we have to take care and check such errors.\n\nprint(math.pi)\n\nimport random                                                      #1\nprint(random.randint(9,33))\n                                                  #2\ns=\"jju"], [0.12808799660050077, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " will calculate the length of the hypotenuse of a right angled triangle when passed the width and height.\n!pip install unidecode\nimport unidecode\na=unidecode.unidecode('\u00f1\u00e1\u00e9\u00ed\u00f3\u00fa\u00fc')\nprint(a)\nThe above code will remove accented characters from the inputted string.\n#NOT WORKING#\nmy_str='Hello world'\nwords=my_str.split()\nprint('"], [0.11136065500486025, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function for finding the hypoteneuse of a right angle from the width and height.\n\ndef is_prime(n):\n  a=True\n  for i in range (2,n):\n    if(n%i == 0):\n      a=False\n  return(a)\nThe above code is a function for checking if a number is prime or not.\n"], [0.10781664392618294, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes in a width and a height and returns the length of the side opposite to the right angle. \n#https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\ndef timecalories(a,b,c,d):\n  \n  if a - b  <= 0:\n    return 0\n  else"], [0.1332165474137174, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\nimport re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find out the the sides a right angled triangle knowing the other two given sides.\n\n\n\t\n# Python Program - Find ASCII Value of Character\n \n#print(\"Enter your name:\")\nname = input(\"Your name please: \")\n#print(\"The ASCII value of '\" + name + \"' is\",ord(name))\n\n\n# Python program to demonstrate \n# selection sort using \n# time.time() \n  \n"], [0.16251950439314689, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the other unknown side of a right angled triangle given the two known sides.\n\nThe piece of code written in web_scraper(result.text) loops through each element of the div tag with ID as resultCard and stores the findings\nin a txt file inside the folder Substring. the content which was not in the format\npreviously expected was included with a comma and a \\n, which enables a new line to be created with a comma"], [0.12356680731815531, "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is function to calculate the hypotenuse of a right angle triangle.\n\ndef tuple_val(a=0,b=0,c=0,d=0):\n  temp = [a,b,c,d]\n  print(temp)\n  return (min(temp),max(temp))\nThe above code is function to return the minimum and maximum elements in the tuple.\n\ndef sq_dict(n=int):\n  d"], [0.07846845124962276, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " will return the hypotenuse like in an :)\n\"\"\"\n\n# 1 return true if numbers less than or equal to 8 or any divisors of 12 there, false otherwise\na = [1, 2, 3, 4, 5, 6, 7, 8, 12]\nb = [22, 65, 24, 63, 22]\n\n\ndef sublist_include(num_list, divisor_list):\n\n    storage_list = []\n"], [0.10080766354817597, "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the length of the hypotenuse of a right triangles that measures w and h as its two legs.\nThere is a list of a given set of integers. Write a Python program to locate the position of the second occurrence of a given number in the list. If there is no such position, indicate it (e.g The first appearance of a given number occurs at position x and the second appearance of the given number is not present in the list.)\nimport"], [0.16283546390567738, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to compute hypotenuse of a right angled triangle, given the lengths of sides.\ndef findlast(s1,s2):\n  i=0\n  ln=len(s2)\n  while True:\n    if ln+1 == len(s1):\n        print(\"expected a substring of length %d got string of size greater than %d\"%(len(s2),len(s1)))\n       "], [0.1288064735242749, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the missing side of right angle triangle(hence the name).\nHints\nFibonacci\nYou should also practise your fibonacci number implementation in fun.\nHere\u2019s my implementation which returns the sequence from continously either smaller or larger than n.\ndef fibo_seq(n):\n  a=0\n  b=1\n  for i in range(n):\n    c=a+b\n   "], [0.20638427731758174, "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the unknown side of a right angle triangle, valid if thickness is less than length.\nimport math\npi=3.14\ndef verdi():\n height, radius, length= input(' type h, r, l followed by  comma seperated... ').split(',') #unpack values\n rad=int(radius)\n h=int(height)\n le=int(length)\n sa=rad*(rad+rad"], [0.10761232733584006, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a method to find the hypotenuse of a right-angle triangle.\nimport math\ndef minimum_sum(nums, i = 0):\n  if i == len(nums):\n    return 0\n    \n  return min(minimum_sum(nums, i + 1) + nums[i], minimum_sum(nums, i + 1))\nThe above code is a method to find the minimum sum of a list of integers."], [0.13013619135109958, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\ndef set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of the hypotenuse for a right triangle.\n\nimport math\ndef final_digit(x):\n  result = 1 + math.sqrt(5) - ((1 + math.sqrt(5))/(x+math.sqrt(5)))\n  return math.floor(result)\nThe above code is a python function to find the last or rightmost digit of the fractional part of the summation of"], [0.10710811818149828, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " returns the side lenght of a Right \nAngled Triangle given the width and the height.\nimport math\ndef cross_product(w,h,a,b,c,d):\n  d=math.acos((b*a+c*d)/(math.sqrt(a*a+b*b)*math.sqrt(c*c+d*d)))\n  print math.degrees(d)\n  return"], [0.17341442132765203, "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function with the name otherside_rightangle, to find the length of the new side of a right angled traingle if user will put the width and height of 2 sides of the traingle.\nstudent_details=[]\nstudents_data=\"\"\ntotal_students=int(input('enter the total students'))\n\nfor i in range(total_students):\n    student_details=input(\"enter the student name\")\n    students"], [0.16813256651332373, "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the value of the hypotenuse in a right-angled triangle, given the values of the other two sides.\ndef max_array(A):\n  n=len(A)\n  max_here = A[0]\n  max_so_far = A[0]\n  for i in range(1,n):\n    max_here = max(A[i], max_here + A[i])\n   "], [0.1045403323668484, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a Python function to calculate the perpendicular side of a right-angled triangle from the given base and height.\nimport math\ndef ceil_of_x(x):\n  return math.ceil(x)\nThe above code is the Python program to calculate ceil of a given number.\nimport os\ndef list_files(dir):\n    r = []\n    s = [s for s in os.listdir(dir) if os.path"], [0.20163259993917457, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse with the help of the function here the hypotenuse refers to the diagonal side of the right angled triangle.\n\ndef keys_values(list1,list2):\n  flag=-1\n  if len(list1)==len(list2):\n    flag=0\n    for i in range(len(list1)):\n        if len(list1[i])==len(list2"], [0.1931054921248592, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " helps to find the hypotenuse of a right angled triangle.\nimport numpy as np\ndef n_largest(l, n):\n  p = np.partition(l, -n)\n  return p[-n:]\nThe above code is a function to return n largest elements from the list using Numpy.\ndef change_cases(text):\n  text1=\"\"\n  for word in text:\n    if word.islower():\n"], [0.1337699759019863, "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate hypotenuse of a right triangle.\nimport re\n\nx = \"I work for India as a Data Scientist\"\ny=re.findall(r\"^\\w+\",x)\n#print(y)\nThe above code is a method to find first word of a given sentence.\ndef count_string(list1,string1):\n  count=0\n  #print(list1)\n  for x in"], [0.12874352781384255, "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that returns hypotenuse for a triangle. Users can call for square root.\n"], [0.07183787698816775, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is An integer n\u2264100 is Called an Ambiguous Number if it has more than one possible digit forms. For example, the number 18 can be expressed in 2 ways \u2014 one is 18, the other 11. The following is the list of all numbers till 100 for which the problems in each test of the problem set require finding an ambiguous number.\n\ndef print_alternate_positive_negative_integers(i,j,S):\n    for i, j,"], [0.10409605633309979, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find hypotenus of rightangled triangle using double variables.\n\ndef mergeSort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2 #Finding the mid of the array \n        L = arr[:mid] # Dividing the array elements  \n        R = arr[mid:] # into 2 halves \n  \n        mergeSort(L) # Sorting the first"], [0.1221711666044067, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the hypotenuse to right an angles with the other side provided in the arguments.  https://www.w3resource.com/python-exercises/data-structures-and-algorithms/index-3.php\ndef silabas(word):\n  lista= []\n  while len(word) > 2:\n    \n    if len(word)>=4:\n      if word[-4"], [0.13224073617849097, "import re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the hypothenous of right angled triangle.\nimport re\ndef discover_frequency(str, char):\n  return len(re.findall('(?<![%s])%s'%(char,char),str))  \nThe above code is a function to check the adjacent duplicate occurances of characters in the given string.\nimport re\ndef search_for_string(text, q):\n  for m in re"], [0.10667929872826132, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " contains a function that takes in a width and a height and returns the hypotenuse of a right angle triangle, as explained at the beginning of the question.\n\ndef coin_change(amount,total):\n\tcount = 0;\n\t\n\tif total==20:\n\t\tcount=amount%20\n\telse:\n\t\tcount=amount%20\n\t\tcount=count%10\n\treturn count\nThe above code is a function that takes"], [0.1282929018550329, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find otherside rightangle rightangle solut.\n\ndef convert_to_string(c,n):\n  return str(c)*n\nThe above code is a function to convert a character string of length n.\n\ndef get_date(num):\n  v1 = num%10\n  num = num/10\n  v2 = num%10\n  num = num/10\n  v3 = num%10\n"], [0.21843533549271718, "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a Python program to find hypotenuse of a right angled triangle.\n\ndef string_to_array(b):\n  d=list(b)\n  return type(d)\nThe above code is a function taken a string and convert it into an array.\n"], [0.2549170131929102, "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the missing side of a right angled triangle.\ndef FirstReverse(str):\n  str = ''.join(list(reversed(list(str))))\n  return str\nThe above code is a python function to reverse the order of words as given in a string.\ndef sameroots(Arr):\n  if Arr[0] == 0:\n    Arr.delete(0)\n  Arr  "], [0.3141300900538897, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is to return the other side of a right angled triangle given the width(w) and the height(h).\n"], [0.08663527025860564, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function that returns the hypotenuse of the right angled triangle whose sides are w and h.\nimport statistics # importing Statistics module \n  \n# list of positive integer numbers \nx = [2, 4, 3, 4, 5, 2, 1, 2, 3] \nmean = statistics.mean(x) \n\n# squared deviations from the mean \ndiffs_squared = [ (x-mean)** 2 for x"], [0.14523667194003922, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to define the group of angles, peripheral angles and area of any givem right angled triangle.\n# Python3 program to greet an Angkatan 13\n# https://www.codechef.com/JUNE20B/problems/CRDGAME\nfor _ in range(int(input())):\n    n,k,val=map(int,input().split())\n    x=n-k\n    a=0\n   "], [0.11306361619791776, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find hypotenuse when given other 2 sides it is base and height\nmath.sqrt(2)\nThe above code is a function to find square root. The square root of 2 is 1.414. in python this thing can be obtained directly. \nimport textwrap\ndef wordreverse(s):\n    rev = ' '.join([word[::-1] for word in s.split()])\n    return rev\nimport textwrap"], [0.13428152946102354, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the Otherside of a right angled triangle where the two shorter sides are w and h.\ndef sq_rt(n):\n  if n<=0:\n    return 0\n  return n**0.5\nThe above code is a python function using python's built in operator to find square root of the number n. Since the challenge asks to find only the integer part, the code has been modified to return the integer part of the answer"], [0.17700102615359592, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the other side of a right angle triangle from two sides.\ndef Square_Cube(num) : \n    sq = num * num; \n    print(\"Square of {0}: \",sq) \n    cube = num * num * num; \n    print(\"Cube of {0}: \",cube) \nThe above code is a function to calculate Square and cube of a number.\ndef vmain(*args) :\n   "], [0.10506228205895093, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to compute the length of the hypotenuse of a triangle when the other two non-hypotenuse sides are given.\ndef reverse_num(n):\n  return n[::-1]\nThe above code reverses a given number.\nThe difference between Tuples and List is that Tuples are immutable whereas Lists are mutable.\ndef gcd_2(n1, n2): \n    n1=n1+n"], [0.1515179414394238, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find and return the value for the missing side of a right angled triangle(hypotenuse).\n\nGlobal variable access\nWe are free to acess global variable from within a function.\nIf we change the global variable, it will be modified within the function. \nbut whatever we assign to global variable inside function will be reflected outside function as for global variable value is automatically assigned to its global variable above it.\ndef side_acces():\n "], [0.4105527030204435, "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the other side of a right-angled triangle using pythagoras theorem.\n"], [0.13121022740747373, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the other side in a right angled triangle, given the two sides.\nAlso works if the sides are negative.\nJust remember that this time you need to test if the string is the right type AND if it represents an integer. If there is a non digit character (e.g. a dot or a letter), if you try convert it, you'll get a ValueError or TypeError which is not good. You need to add an if"], [0.46057320203921087, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse of a right angled triangle\n"], [0.1677520386181877, "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the other side when the right angle hypotenuse is given. \n\nList=['loveinpy@tezy', '1234567891'] \nfor i in List:\n  if(i.isnumeric())==1: \n    print(i)\nThe above code is a python program to check and write numeric values in a list.\nList=['loveinpy@python.py', '"], [0.0852709232810149, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is used to calculate the hypotenuse in right angled triangle if the caller passes any other two side.\nimport math\ndef otherside_oppositeangle(x,y):\n  s=math.degrees(math.atan(y/x))\n  return s\nThe above code is used to calculate the opposite angle  if the caller passes any hypotenuse and any other side.\nimport math\ndef otherside_allangle(a,b,c"], [0.13076194470399297, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function finds the \"other side\" of a right triangle.\n\ndef dec_to_bin (input_list):\n  binary_list=[]\n  for z in input_list:\n    binary_list.append(bin(z)[2:])\n  return(binary_list)\nThe above code is a function to convert a series of a list of integers to its equivalent binary number.\n\ndef wordcase():\n  x=(input"], [0.18992719877708314, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse of a right angled triangle, given the other two sides.\ninitial_balance = int(input(\"Enter your balance: \"))\ninterest = float(input(\"What is the APR on the card (as a percent)? \"))\nmonthly_rate = interest/12\nmin_monthly_payment = 0.0\nnew_bal = initial_balance + (initial_balance*monthly_rate)"], [0.09215442332572699, "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a Python function to calculate the hypotenuse using Pythagoras theorem.\n\ndef arithmetic_ops(a,d):\n  values=[]\n  while d>a:\n    values.append(a)\n    a+=d\n  return values\nThe above code is a Python program that makes a list of the arithmetic series.\n\n#numpy and pandas packages\n#Q. Import the \"numpy\" and \"pandas\" packages"], [0.21064846064697032, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypothenuse of a right angle triangle from given width and height coordinates\ndef strange_sorting(ls):\n  ls.sort()\n  for i in range(len(lr)):\n    if s[i][0].isdigit() and s[i][1].isdigit():\n      if s[i][0]>s[i][1]:\n        s[i][0],s"], [0.16209322785862462, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right angle triangle by providing the width, w, and the height, h. \ndef get_tree(height):\n  cnt = 0\n  for i in range(height):\n    for j in range(i+1):\n      if i == height - 1:\n        print('* ', end='')\n      else:\n        if j == 0 or j == i:\n          print"], [0.1076866439505787, "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of the hypotenuse of the given right angle triangle assuming that the lengths of the other two sides (base, vertical) are provided as arguments.\nimport math\nimport string\nALPHABETS_ARR=[],\nVOWELS_ARR=[],\nVOWELS_FREQ=[0,0,0,0,0,0]\nfor i in range(0,26):\n  ALPHABETS_ARR"], [0.1135698271586374, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that finds the other side of a right angle triangle.\ntry:\n    # put your code in here\n    print 'Answer is:', 42\nexcept Exception as ex:\n    #ex.message has the errror\n    print ex.message\nFinally block is used finally block code is executed even if we get an error.\nThe code in the finally block is executed regardless of whether an exception exists or not.\ndef tail(filepath,window"], [0.22400055476736744, "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse in a right angled triangle.\ndef reverser(str1):\n  rstr = ''\n  for c in str1:\n    rstr = c + rstr\n  return rstr\nThe above code is a Python function to reverse a string.\n"], [0.08752560799345983, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that calculates the length of a right-angled triangle given the lengths of the adjacent side and the opposite angle.\nfrom random import randint\ndef main():\n  i = randint(0, 101)\n  j = randint(0, 101)\n\n  if i or j > 50 or (i + j) > 30:\n    return False\n  else:\n    return True\nThe above code is a function that generates two numbers between 0"], [0.20510221367599393, "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of the right angle triangle based on the width and height.\nimport math\ndef reverse_Sides(s1,s2):\n  res=\"No\"\n  if s1==s2:\n    res=\"Yes\"\n  else:\n    a1=otherside_rightangle(s1,s2)\n    a2=otherside_rightangle(s2,s1)\n    if"], [0.07898867700735618, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " gives the length of the hypotenuse of an isosceles right angle triangle given the width and height.\ndef cons_temp(ct):\n\treturn (((9*ct)/5)+32)\nThe above code measures the temperatur from Celsius to Fahrenheit scale given Celsius temperature in degrees.\ndef cons_temp_to_kelvin(ct):\n\treturn ((ct+273.16))\nFunction that measures the temperatur from Celsius to Kelvin scale"], [0.08745200290121356, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " provides a function that calculates the hypenuse of any right angle triangle given by the user.\ndef checkKey(dict, key):      \n    if key in dict.keys(): \n        print(\"Present, value =\", dict[key]) \n    elif key not in dict.keys(): \n        print(\"Not present\")\nThe above code checks whether the given key is present in the dictionary.\n\n\ndef checkKey(dict, key):\n "], [0.08937925432514436, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is to find out the hypotenuse of right angled triangle, given the other two sides (only width and height as input parameters).\n\ndef four_a(N):    \n    output=0    \n    for i in range(N):\n        if i % 4 == 0:\n            output+=1\n    return output\nThe above code is to return the number of multiples of 4 within the range 0 to N\nimport math\ndef quad_func("], [0.10672817598761103, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the sides of other right angle triangle other than the given by the Pythagoras Theorem.\ndef fun(n):\n\tprint (\"Hello is printed only once.\")\n\tx=5\n\twhile (x>0):\n\t\ty=5\n\t\twhile (y>0):\n\t\t\tif y ==5:\n\t\t\t\tprint (\"Hurray is printed five times.\")\n\t\t\ty=y-"], [0.11058903302550109, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is to find the length of the 'hypotenuse' in right angle triangle. (ex: h=4, w=3 | calculated len is 5, the function returns 5). Given a right-angled triangle, find the length of the other side, without using any inbuilt functions or importing any libraries. Ref: https://towardsdatascience.com/memory-efficient-coding-tips-using-python-2f7054a2a7"], [0.2164325202582056, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse c of a right angled triangle with base w and height h.\n# f = open(\"raven.txt\",\"r\")\nf = open(\"/content/some_text.txt\",\"r\") \nfor line in f:\n  # line=re.sub(\"\u2019\", \"\", line)\n  print (line)\n  word=re.split(\" |,|--|\\n|"], [0.12061787533566494, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of other side in right angle triangle.\ndef list_rem(d):\n  var=[]\n  var=[d[0],d[len(d)-1]]\n  return var\n  The above code is a function to select the first and last elements of the list.\nfile=open(\"sample.txt\",\"r\")\nA=file.readlines()\nA=map(lambda s:s.strip(\"\\"], [0.11884046943039199, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " takes in integers w and h and returns the value of the side adjacent(w) of a right triangle with hypoteneuse equal to h.\nfrom math import sqrt,log\ndef distance_btwn_numbers(a,b):\n    if (a>b): return sqrt((((abs((b+1)**2))-(a**2))*2)+(a-abs(b)))-((b)**2)-b\n    el"], [0.13750388192425733, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\nfrom array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse in a right-angled triangle with other sides of width = w OR height = h.\ndef xor(a, b):\n    a_xor_b = a + b\n    if a_xor_b == 0 or a_xor_b == 2:\n        return False\n    else:\n        return True\nThe above code returns True if a and b are NOT EQUAL to"], [0.4307783579887898, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the third side of a right angled triangle, given the two other sides.\nimport pandas as pd\ndef turn_series_to_dict(data):\n  tool = pd.DataFrame({'key':list(data),'value':list(data)})\n  tool_dict = tool.set_index('key')['value'].to_dict()\n"], [0.1010495593997862, "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is partially worked\ndef all_subarrays(A):\n  result = []\n  N = len(A) \n  for i, x in enumerate(A):\n    for j in range(i+1, N+1):\n      result.append(A[i:j])\n  return result\nThe above code is a function to match lines to another file.\ndef file_diff_format(file1, file2, out"], [0.22318111748984396, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the third side of right angle triangle.\ndef probabilitys(s, l,m,p,q):\n    num = s/p\n    dem = (s/p) + (s/q)\n    if m%2 == 0:\n        return 0\n    num1 = m/q\n    dem1 = (m/q) + (m/p)\n    para = dem1 - dem\n    prob"], [0.1025124249794533, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function for calculating length of the hypotenuse in a right angled triangle with other sides of length w and h.\n\ndef hyp_per(l_o,l_i):\n  hyp=l_o/l_i\n  return hyp\nThe above code is a function for calculating the Radius of the incircle when the perimeter and the 3-angle are known respectively.\n\n\n# Exercises in Supervised Learning\n# 1. Linear Reg"], [0.11397244183439155, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " helps find the hypotenuse of any right angled triangle.\npip install\nSimple\u00a0in-builts\nmap\nenumerate\nsorted\nlist comprehension\nany and all function\nzip function\nthis check if one element in iterable\nthis is equivalent to any(iterable) \nall(iterable)\nTO CHECK\u00a0IF\u00a0PAIR\u00a0IN\u00a0A\u00a0LIST\u00a0\n>>> p=[34,23,40,60]\n>>>"], [0.18099121869662005, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse H of a right angled triangle, when the width W and height H are provided as arguments.\n\np = int(input(\"Enter the principle amount: \"))\nr =  float(input(\"Enter the rate of interest: \"))\nt =  float(input(\"Enter the time in years: \"))\ndef saving(p,r,t):\n return p*(1 + r/100)*t\nprint"], [0.09196928173637285, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that return the third coordinate of right angler triangle given the lengths of its two sides.\nimport math\ndef otherside(w,h):\n  c = float(w**2 + h**2 )\n  d = c//2\n  s=math.sqrt(d)\n  return s\nThe above code is a function that return the third coordinate of right angler triangle given the lengths of its two sides.\ndef pythog"], [0.1139701824422832, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is that to find the square root of the sum of squares of the 2 given numbers.\ndef data_Items(a):\n  num=0\n  total=0\n  rating=0\n  for i in a:\n    total+=i[num]\n    rating+=i[num+1]\n  if num==0:\n    l=round(total/len(a),1)\n    h=round(rating/len(a),"], [0.20666089257829262, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of other side of a right-angle triangle, when one side is w and the other is h (h<w).\n\ndef pentagonal(i):\n  n=((i-1)*3)+1\n  i=2\n  val=i*(3*i-1)/2\n  val_f=val\n  if n%100000==0:\n    print(\"At\", n, \"digits"], [0.14331647875751422, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right angle triangle in the modification of solving for the other side where w is the width and h is the height.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt(w*w)\n  return s\nThe above code is a function to find the hypotenuse of a right angle triangle in the modification of solving for the other side where w is the width and"], [0.11594449387664636, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes in the length of one equalateral side(w) and the hight(h) of a right angle triangle and returns the length of the other non-hypotenuse side.\n\ndef reverse(a):\n  b=str(a)\n  lis_of_string=[]\n  for i in reversed(b):\n    lis_of_string.append(i)\n  return ''.join(lis_"], [0.20666089257829262, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse of a right triangle when the lengths of its other sides are w and h. An example of such a right triangle is (3, 5).\n\"\"\""], [0.4588673822669279, "def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate hypotenuse of a right angled triangle.\n"], [0.10049577551746534, "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to return the length of the hypotenuse of a right angle triangle, given the lengths of the two sides of the triangle. Note: the square root sign (\u221a) should be in the output but must not be computed.\ndef d(n) : \n          \n    # to store sum of divisors \n    result = 0\n    for i in range(1, (n // 2) + 1) : \n        if"], [0.11224779224730963, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the hypotenuese.\nimport math\ndef triangle_right_angle(b,h):\n  r=math.sqrt(h*h-b*b)\n  return r\nThe above code is a function to calculate radius.\n\nOperator\t                    Name           \nNo.\tExplanation\n1\th=hand()\nDemonstrates classcard use\n2\thand(10)\n1\tDemonstrates"], [0.17660743670866372, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the side of right angle triangle given its base and height.\n\nfrom math import cos,sin,radians\ndef is_rightangled(a,b,c):\n  triangle = [a,b,c]\n  triangle.sort()\n  if abs((triangle[0] ** 2) + (triangle[1] ** 2) - (triangle[2] ** 2)) < 0.001:\n    return"], [0.11432369973070734, "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the \"other side\" off a right triangle.\ndef leftright_rightangle(l,s):\n  x= math.sqrt((l*l)-(s*s))\n  return x\nThe above code is a function to calculate the \"other side\" off a right triangle.\ndef is_rightangled(a, b, c):\n    test = abs(a**2 + b**2 - c**2)"], [0.18221792732461262, "def min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the right angled triangle given its other two sides.\nFile Difference\ndef file_compare(file1, file2):\n\trFile1 = open(file1)\n\trFile2 = open(file2)\n\tfor line in rFile2:\n\t\tif(line not in rFile1):\n\t\t\tprint(line.strip())\n\trFile1.close()\n\trFile"], [0.12143431614304553, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the hypotenuse of a right angle triangle if given the other two sides (w,h).\n\n=====Passes the grader but not efficient enought ===== \ndef get_fib(n):\n  result = []\n  i = 1\n  if n<1:\n    return 0\n  elif n==1:\n    return 1\n  elif n>1:\n    a = 0\n    b"], [0.12477241466485145, "def binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python code to find the hypotenuse of a right angled triangle where the other two sides of the triangle are w=5 and h=8 units respectively.\ndef reverse(str):\n    rstr1 = ''\n    index = len(str)\n    while index > 0:\n        rstr1 += str[ index - 1 ]\n        index = index - 1\n    return rstr1\nThe above code is a python code to reverse a string"], [0.13481969607264754, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that returns the length of the hypotenuse of a right angle triangle. So if the input is (33,44) the result should be the equivalent of:\nmath.sqrt((33**2)+(44**2))\nimport math\n"], [0.26288202783105064, "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of the hypotenuse of a right angled triangle.\nimport math\ndef akbk(x,y):\n  n=3\n  a=\"\"\n  while n in range(1,y):\n    r=(n*(x+x))\n    d=(n*n)\n    c=(d-r)\n    a=str(a)+str(c)\n    if len(a)=="], [0.2053850493908828, "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\n\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of the right angle triangle.\ndef cleanup_script(script,removehtml):\n  import re\n  if(removehtml==1):\n    pattern=[ 'script','<.*?>']\n    result=getstring_reg(pattern,script)\n    removedtags=re.sub(pattern, '', result)\n  else:\n    removedtags=script\n  return removedtags\nThe above code is"], [0.156363373488245, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse of a right angled triangle based on the width and height given.\nimport math\ndef perfect_no(n):\n    sum=0\n    for i in range(1,n):\n        if n % i ==0:\n            sum=sum+1\n    if n==sum:\n        return True\n    else:\n        return False\nThe above code is a python function to find out if the specified"], [0.2128237021527611, "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " was a function to find the other side of a right angled triangle given two legs.\ndef count(n):\n  sum = 1\n  for i in range(1, n+1):\n    sum += i\n  return sum\nThe above code was a function to return the sum of all numbers from 0 to the number entered given.\n"], [0.09161281707773475, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " returns the hypotenuse of a right-angled triangle given the other side and the other of that side.\n\ndef alert_date(alert_value, date):\n    import dateutil.parser as dparser\n    import datetime\n    initial_date = dparser.parse(date,fuzzy=True)\n    pre_final = initial_date + datetime.timedelta(days=alert_value)\n    final_date = pre"], [0.13924736993156872, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find out the length of the fourth side of a right-angled triangle assuming the 3 sides provided are a, b and c.\ndef gaussianElim(mx): \n    N = 8  # Number of row or col.\n\n    # Loop for row operations.\n    for k in range(N-1):        \n  \n        # Loop to find the non-zero \n        # element in the current row. \n        for"], [0.16566500531283243, "def binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the missing side(hypotenuse)of a right angle triangle.\n\ndef average_first_last(arr):\n    n = len(arr)\n    return (arr[0] + arr[n - 1])/2\n    The above code is a function to find the average of the first and last elements of the array.\n\ndef string_rev(s):\n  return s[::-1]\n  The"], [0.10454430182845376, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes in the side length of a right-angled triangle and returns the length of its hypotenuse, rounded to the closest integer. \ndef check_format(ip_address, dic):\n    for j in range(len(dic['companies'])):\n        for i in range(4):\n            if ((i+1==1 and 1<=int(ip_address[i])<=223)):\n               "], [0.0837682337148165, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function takes in width and height and returns the length of the diagonal which makes a right angle triangle with them.\n\n\ndef bodum_bathroom(n):\n    floor = ''\n    r = 1\n    while r <= n:\n        space = r\n        let = (n - space) + 1\n        s = let * '*' + space * ' ' + 2 * '*' + (space * ' ') +let *"], [0.2569441467571503, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse of a right angled triangle.\nimport math\ndef pythagoras(opposite_side,adjacent_side,hypotenuse):\n  if opposite_side == str(\"x\"):\n    return (\"Opposite = \" + str(((hypotenuse**2) - (adjacent_side**2))**0.5))\n  elif adjacent_side == str(\"x\"):"], [0.14984414334048082, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of the right angled triangle whose lengths of other two sides are w and h respectively.\nimport math\ndef is_prime(n):\n    for i in range(2,math.ceil(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\nThe above code is a function to check given a number whether it is prime, using the fact that"], [0.13386227620993982, "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to caluclate the length of the other side of a right-angled triangle. \nimport math\ndef radius_circle(value): \n  r=((2*value)/(math.pi))\n  return r\nThe above code is a function to calculate the radius of a circle.\nimport math\nimport turtle\ndef points_acute_angle(x1,x2,y1,y2):\n  y=math."], [0.09979432894123859, "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes the width and height of a right-angled triangle and returns the length of the hypotenuse.\ndef three_integer_sum(list1,number):\n  i=0\n  j=0\n  k=0\n  for i in range(len(list1)):\n    for j in range(len(list1)):\n      for k in range(len(list1)):\n        sum=list1["], [0.12015527793162999, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a Python function to return the length of the hypotenuse of a right angled triangle, given the lengths of its other two sides, as used in the condition to determine the largest room in a school.\nimport math\ndef inttoRoman(num):\n    val = (1000, 900,  500, 400, 100,  90, 50,  40, 10,  9,   5,  4,   1)\n    syb = ('M',"], [0.1376642760887583, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of the hypotenuse when given one other side of the right angled triangle.\nfrom functools import reduce\nreduce(lambda x,y:x&y, [{2,3},{3,4},{4,5},{5,6}])\nThe above code is a function to return the intersection of a list of sets.\ndef calculator(num1, op, num2):\n    if op =="], [0.11789885987053163, "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the length of other side of right angle triangle of width, height and hypotenuse.\n  sqrt(w^2+h^2) \ndef partition_evenodd(a, b, c): \n  cond1, cond2, cond3 = map(lambda x:x%2==0, [a, b, c])\n  if( (cond1 and cond2) or (cond1 and cond3)"], [0.18528750735959484, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypotenuse of a right angled triangle with the given height w and length L.\n\ndef bin_to_dec(bin_num):\n  return int(bin_num,2)\nThe above code is a function to convert binary number to decimal.\n\ndef hexa_to_dec(hex_num):\n  return int(hex_num,16)\nThe above code is a function to convert hex"], [0.11552623367117862, "def geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate where the other angle is. https://www.codete.com/mathhack/math-secrets-1093007\n\nwork=\"yeet, yeet on them haters, yeet\"\nwork=work.split(\",\")\n\ndef not_included_count(lis):\n  count=0\n  for i in work:\n    if i[0][0] not in lis:\n      count+="], [0.21618884406697267, "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypotenuse of a right angled triangle, given the width and height\ndef piglatin(str):\n    it=0\n    vowel=['a','e','i','o','u']\n    while it<(len(str)):\n        if str[it] in vowel:\n               print(str[it:]+str[it],\"way\", sep='', end='')\n               break\n        else:"], [0.1250675357071175, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is used to find the hypotenuse of a right triangle using Pythagorean theorem.\nimport math\ndef at_whole_number(x):\n  y=math.ceil(x)\n  return y\nThe above code is used to find the smallest integer that is equal to or greater than a certain number.\nimport math\ndef max_sme_num(x,y,z):\n const=10\n s=[x,y,z"], [0.09464829271498756, "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndef harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function which takes in two non negative integers and calculates the length of the diagonal from on nearest corner to the opposite corner in a right angle triangle.\nfrom math import sqrt\nclass Polygon:\n    def __init__(self, n):\n        if n < 3:\n            raise ValueError(\"Polygon must have at least 3 vertices.\")\n        self._n = n\n  \n    def __len__(self):\n        return self._"], [0.43203691224708224, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right angled octagon, given the two other sides.\n"], [0.23239955323092912, "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\n\ndef min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the other side of a right angle triangle where the other two dimensions are perfect squares.\nimport math\n\ndef calculate_Ac(h,b):\n    if h==None and b!=None:\n        Ac=b*b*2*(math.sqrt(3)/4)\n        return Ac\n    elif h!=None and b==None:\n        Ac=h*h*(3/2)\n"], [0.09622514872570356, "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is to calculate an unknown side of a right-angled triangle if the lengths of the any two sides is given.\n\ndef multiple_10(n):\n  if n%10 == 0:\n    return True\n  else:\n    return False\nThe above code is to check if a given non-negative number is a multiple of 10 or not.\n\n# question\ndef firstNN(lst):\n  for ele in lst:\n    if type"], [0.18884314199919627, "def triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", "!=is a function to find the other sidelength of right angle triangle given the other two sides.\nd=otherside_rightangle(5,7)\nprint(d)\ndef square_area(s) :    \n    return (s*s)  \ndef rectangle_area(l, b):  \n   return (l*b)\ndef triangle_area(b, h):   \n    return (0.5*b*h"], [0.1647579843935202, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to calculate the other side of a right angled triangle given the hypotenuse and base.\n\ndef temp_convert(vari):\n    return (vari*1.8)+32\nThe above code is a function to convert temperatures from Celsius to Fahrenheit.\n\ndef num_divisors(x):\n  count = 0\n  for i in range(1, x+1):\n    if x % i == 0:\n      count +="], [0.13205774952652788, "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the length of the hypotenuse of a right angle triangle given the length of the other two sides.\nimport numpy as np\ndef triangle(n): \n    # Create an empty list\n    lst = [] \n    # Loop while n > 0\n    while (n > 0):\n        # Input from the user\n        lst.append('*')\n        final_st = [\"\".join(lst)]"], [0.23204497334494217, "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the hypothenuse of a right angled triangle.\nimport random\nnum=random.randint(1,9)\nguess=int(input('guess a number 1 to 9'))\nwhile (guess!=num):\n  if (guess<num):\n    print \"lower\"\n    guess = int(input('guess a number 1 to 9'))\nwhile (guess!=num):\n"], [0.23367014862216462, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " prints the sqaure root of a right angled triangle.\ndef outliers_dropped(p,n):\n    p.sort(key=lambda x: x[n])\n    for i in p:\n        n1=math.floor((len(p)-1)/2)\n        print (\"median is\",p[n1])\n        q1=p[0:n1]\n        q3=p[n1+1"], [0.18309890421756822, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of a right angled triangle, given the width and height.\nimport math\ndef largest(a,b,c):\n  if (a>b) and (a>c):\n    return a\n  elif (b>a) and (b>c):\n    return b\n  else:\n    return c\nThe above code is a function to find the largest number out of 3 user inputs.\nimport"], [0.1357472720557883, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\nimport sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find side opposite to the 90 degree angle of a rectangle.\nfrom collections import deque\ndef deque_test():\n  list1 = []\n  for i in range(1000):\n    list1.__add__(i)\na = deque_test()\nfrom collections import deque\ndef deque_test():\n  list1 = deque([])\n  for i in range(1000):\n    list1."], [0.19273465341838697, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to return the third side of a right-angled triangle when two sides and the hypotenuse are given.\ndef diff(l1,l2):\n  output=[]\n  for num in l1:\n    if num not in l2:\n        output.append(num)\n  return output\ndef string_middle(word_input):\n  if len(word_input)%2==0:\n    first_half=("], [0.2747405719150883, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to work out the longest side of a right angled triangle if the other    two sides are  smaller than the hypotenuse.\n'''"], [0.09788092640534388, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " will return the sqrt of the hypotenuse of a right triangle when the given side lengths are passed into the function.\n#rearrange positive and negative values\ndef rearrange(nums):\n  \n  l = 0\n  r = len(nums) - 1\n  for i in range(len(nums)):\n    if nums[i] >= 0:\n      l = i\n      break\n\n  while l < r:"], [0.09204727296605823, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes in the base and perpendicular height of a right-angle triangle and returns the length of the hypotenuse.\n\nfrom math import (sqrt, tan, pi)\nfrom decimal import Decimal\ndef fraction(a,b):\n  #a*a=b*b - don't have to look for combinations of this down the line -- thanks to converse...\n  num=math.sqrt(b+1) + math."], [0.14297432751769434, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes in a width and height of a right angled triangle and calculates the length of the third side (hypotenuse) using Pythagoras formula and returns it.\nfrom random import shuffle, random, choice\ndef alogical(n):\n\tif not n in range(2,100001):\n\t\treturn \"Input must be a number from 2 to 100000!\"\n\t\tbreak\n\tlst=list(range(2,n"], [0.1484059131553633, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of hypotenuse of a right angle triangle when the two sides adjoining 'w' and 'h' are given.\nfrom random import randrange\nfrom random import randint\nfrom math import ceil\ndef drawing_without_replacement_sim(numTrials):\n    '''\n    Runs numTrials trials of a Monte Carlo simulation\n    of drawing 3 balls out of a bucket containing\n    4 red and 4 green balls"], [0.10395365896813072, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function which gives the side of right angle of a rectangle in 2 dimension.\n\ndef is_symmetric(arr):\n    i=0\n    l=len(arr)\n    while i < (l//2):\n       if arr[i]!=arr[l-i-1]:\n          return False\n       i+=1\n    return True\n   \nThe above code is a function that returns true if a given binary tree is"], [0.1153522725834295, "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a fastfunction to return the length of the hypotenuse of a right angle triangle given the width and height.\nimport unit4utils\n\ndef read_integers(file):\n    with open(file) as f:\n        return [int(e) for e in f.read().splitlines()]\nThe above code is a function to read integers from a txt file. \nSample Test Cases\nInput\n3\n\nOutput\nCase 1"], [0.17624305911228885, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a python function to find the side of a right angle triangle given the two sides.\nfrom itertools import permutations\ndef permuted_multiples():\n  for i in permutations('1234567890',10):\n    if i[0]!='1' and '2' in i[1:4] and '3' in i[2:5] and '4' in i[3:6] and '7' in i"], [0.13950144632337735, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function that takes two integers and gives back the length on the other side of the right angle triangle.\n"], [0.15349902747297048, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the hypothenuse of the right angle triangle based of the width and the height specified by the user.\nfrom math import datetime\ndef calendar_week(day,month,year):\n  mydate=day,month,year\n  return calendar.weekday(mydate)\nfrom math import pi\ndef circle_length(r):\n  circum=2*pi*r\n  return circum\nThe above code is"], [0.14766153326647982, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse given two sides of the right angle triangle.\nanother practical application of relative position word problem.\nimport math\ndef another_side(opp,adj,hyp):\n  if hyp==(adj-opp):\n    return True\n  else:\n    return False\nThe above code is a function to find out the positios of other sides given the law of cosines.\ndef common_minmax(a,ok,"], [0.22793731037379045, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the length of the other side of a right angled triangle.\nimport math\ndef otherside_rightangle(w,h):\n  s1=math.sqrt(((w*w)/2)-(h*h))+(h/2)\n  return s1\nThe above code is a function to find the length of the other side of a right angled triangle. It represents the smaller\ntriangle in the larger right angle triangle shown"], [0.15794375007363892, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code", " is a function to find the hypotenuse of the right angled triangle, given the two shorter sides.\n\n\ndef sumpowersof2ndterm(list1):\n  ans=sum(pow(list1[x-1],x) for x in list1)                        \n  return ans\nThe above code is a function to find the sum of the series of powers of the second term in the given list.\ndef sumofcubes(list1):"]]}
