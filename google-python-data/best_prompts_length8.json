{"prompt": {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 435, "prompt": "Write a python function to find the last digit of a given number.", "code": "def last_Digit(n) :\n    return (n % 10) ", "test_imports": [], "test_list": ["assert last_Digit(123) == 3", "assert last_Digit(25) == 5", "assert last_Digit(30) == 0"]}, "queries": [[0.20895888239673482, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a number.\n# Task\n\nA Hexagonal number is a centered polygonal number made up of 6 points and each point ihas a value matching the integer i+1 times of n. The particular number we are checking is a Hexagonal word number if , then the function should return True, otherwise return False.\n\nInput Format\n\n2 space-separated integers denoting the value of n.\n\nConstr"], [0.15068834484605523, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to get the last digit of any number. And output will always be an integer.\ndef last_Digit(n):\n    if ((((n**0.5) - int((n**0.5)) == 0.0) or ((n**0.3333)- int((n**0.3333))==0.0) )and( 2 <= n < 23)): \n       \n        return (n%10)\n    else"], [0.12868765353720443, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to identify last digit of a number(end in 1 for teen, 2 for double tens and 3 for triple tens).\ndef uniqueThree(a,b,c):\n  for x in range (0,3):\n    for y in range (0,3):\n      for z in range (0,3):\n        if (x!=y) and (x!=y) and (y!=z) :\n          print ("], [0.18449841323274407, "def is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python functional program to calculate the digit at the last position of a number.\n'''"], [0.1077170303517099, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that takes the last n digits.\n\ndef upper(string):\n    print(string.upper())\n  The above code is a python function that converts the given string to uppercase.\nimport math\ndef Spherevolume_r(r) :\n   Volume = (4 / 3) * math.pi * r * r * r\n   print(\"The Volume of the Sphere with radius\" ,r ,\" is\" ,Volume ) \n"], [0.18532403574278541, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to print only the last digit of a particular number. \ndef fact(x):\n    n = 1\n    answer = 1\n    while n <= x:\n        answer *= n\n        n += 1\n    return answer\nThe above code is a function to find a factorial of a number.\ndef zero(x):\n    if x % 10 == 0:\n        zero(x / 10)\n    else:\n       "], [0.18290703448357382, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that rounds off the last digit of a number.\n\n\nn = int( raw_input())\nif(isEven(n)):\n    print(\"Even\")\nelse :\n    print(\"Odd\")\n\n\n\"\"\"\nOdd Even\n\nif __name__ == '__main__':\n    n = int(input())\n    if( n%2 ==0): print(\"Even\")\n    else: print(\"Odd\")"], [0.16689505508021651, "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to check the last digit of a number\nAccessing later when I have time\ndef alternateChars(message, k): \n\n    \nAccessing later when I have time\ndef merg(l, x):\n    return l.extend(x)\nExtending into list \n\ndef FindTriplets(ar, n): \n  \n    found = True\n    for i in range(0, n-2): \n"], [0.1496332696800242, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to print the last digit n.\nn,m=map(int,input().split(','))\nl=[]\na=list(map(int,input().split(',')))\nfor i in range(0,m) :\n    g,h=map(int,input().split(','))\n    l.append([g,h])\nfor i in range(m):\n    lower=l[i][0]"], [0.12547714535248974, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return last digit of a number.\ndef reverse_Capitals(S) :\n    temp = S.swapcase() \n    return (temp)\nThe above code is a function to swap a capital letter in a string and return the swap string.\ndef binary_to_Decimal(num) :\n    decimal = 0 \n    for i in range(len(num)) :\n        # Check if input is base 2 or"], [0.13056928484213584, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to identify the last digit of a number. we intially take a count if the number is greater than 10 then we \nconvert the number into string and now perform another operation as each item in a string is an ascii from 0-9 and of a particular order so\nwe convert the number into string and convert the last four ascii character into number\ndef findFactor(n):\n    for i in range(2,n+1):"], [0.1248653166576198, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return last digit of given number.\ndef int_to_str(i):\nreturn str(i)\nThe above code is a function to convert integer to string.\ndef strin_reverse(the_string) :\n    reversed_string = \"\"\n    num_char = len(the_string)\n    for i in range(num_char -1, -1, -1):\n        reversed_string += the_string"], [0.22667118218472126, "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\n\ndef two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of non negative integer.\ndef palindrome(n):\n  return n==n[::-1]\nThe above code is a function with one input parameter to check if n is a palindrome or not.\nclass Triangle(object):\n def __init__(self,angle1,angle2,angle3):\n  self.angle1=angle1\n  self.angle2=angle2\n  self"], [0.20054169517542056, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to return the last digit of a number.\n def rotate_Arr(arr, n):\n    return arr[-n:] + arr[:-n]\nThe above code is a python function to rotate an array.\n import math \ndef Mod(n, d) :\n   return (n % d) \nThe above code is a python function to find mod of two numbers.\nimport math \ndef power_Of_D"], [0.11720908690003798, "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\n\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return last digit of the number.\n\nimport re\ndef first_Digit(str):\n    b = re.findall('\\d',str)\n    return \"\".join(b)\nThe above code is a function to remove all except first digit from a given string.\n\n\ndef findK(str1) :\n    return str1[-2:]\nThe above code is a function to return second last element of string."], [0.2522499702388855, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a  number no. \nYou have been given a list of country names. You have to remove all the characters after \",\"(comma)  and then convert the names to uppercase. Then print the country name in group of threes.\ndef group_threes(num_list):\n    num_list.sort(reverse=True)\n    for i in range(0, len(num_"], [0.14380535577584336, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that returns digit at last of given number.\ndef smaller(lst) : \n    # Below statement finds minimum from int data type  \n    # and we are adding 1 to minimum to make minimum \n    # as \"small\" so it can be included in our for loop.\n    return min(list(map(lambda x : x+1, lst))) \n  \nThe above code is a python function to find a number"], [0.09268320438756977, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python program that takes a number and returns the last digit.\ndef middleIndex(ts) : \n    length = len(ts)\n    if (length % 2 == 0) : \n        return [length / 2 - 1,length / 2] \n    else : \n        return (length - 1) / 2\ndef reverse_Array(ts) :\n        \n        return ts[::-1] \nreverse_Array(["], [0.15412977051524665, "def return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " tells about the last digit in an integer and is an example for accessing the last digit of a number.\ndef getSum(num1, num2):\n    n1 = [int(n) for n in str(num1)]\n    n2 = [int(n) for n in str(num2)]\n    t = sum(list(map(int, n1))) + sum(list(map(int, n2)))\n    return t"], [0.14865314273980798, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to check whether the last digit is in the alternative number or not.\ndef com(lsta): \n    x = len(lsta) \n    c = 0\n    for i in range(x): \n      \n        for j in range(i + 1,x):  \n          \n            if lsta[i][1] > lsta[j][1] : \n                c = 1 \n                lsta"], [0.1558600994436171, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function Returns the last digit from number n.\ndef reverselastdigit(number): \n    revdigit = 0\n    temp = number \n    ld = last_digit(number) \n    \nThe above code is a python function to reverse last digit.\ndef odd_generator(n, odd=1):\n     for count in range(0,n):\n            print(odd)\n            odd+=2\n       \n"], [0.24335330623447415, "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a number.\na = [1, 2, 5]\nnList = [n+1 for n in a]\nprint (nList) \n\nThe above code is a Python list comprehension function which can add 1 to each element of a given list and return the new list.\n\ndef side_Sum(List):\n    for index, element in enumerate(List):\n        if index == 0:"], [0.20239390744917296, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of the entered number.\ndef reverse_String(str) : \n    return str[-1::-1] \nThe above code is a function to return the reverse of the entered string string.\ndef get_upto_digits(str, n) :\n  s =\"\"\n  for i in range(0, n) :\n     s = s + str[i] \n  return ("], [0.4888464667071602, "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit od a number\n"], [0.2659933936949206, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a number.\ndef conv_20to2(n):\n    if n==0:\n        return '0'\n    result =''\n    while n>0:\n        result=str(n%2)+result\n        n=n//2\n    return result\nThe above code is a python program to convert a number in the range of 0 to 20 to its equivalent binary string.\ndef swap("], [0.1408136991547127, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function for finding the last digit in a given number.\n\ndef isPrime(n) :\n    f = True\n    for i in range(2, n) :\n        if n % i == 0 :\n            f = False\n    return f\nThe above code is a python function to check the given number is prime or not.\n\ndef Factorial(n) :\n    if (n == 0 or n == 1):\n       "], [0.1444137141451872, "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to iRetrieve the last digit from the given number.\n\ndef lcm(n) :\n    for i in range(1, n + 1):\n       if (n % i == 0):\n            d = i;\n    return d; \nThe above code is a python function to identify the Least common Multiplier.\n\ndef int_To_Roman(n) :\n\n    M = [\"\", \"M\","], [0.0851977834637315, "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\n\ndef split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " checks if a number is a multiple of 4, which helps us get friends of the new person quickly.\ndef add_Name_1(list1):\n list1.append(\"Alex\")\ndef add_Name_2(list2):\n  list2 = [\"Alex\"]\n    \"\"\"\n\ndef writeToFile(file_pointer, thing_2_write):\n  file_pointer.write(thing_2_write)\n  return\ndef get"], [0.2376426737786465, "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\nThe above code is a python function to remove odd numbers from a given list.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a number.\n\ndef vol_rectangle(l, b):\n    volume = l * b\n    return volume\nThe above code is a function to find the volume of a rectangle.\n\ndef Check_Vow(string, vowels):\n    final = [each for each in string if each in vowels]\n    count = len(final)\n    return count\nThe above code is a function"], [0.23591113428269828, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\ndef has_33(x):\n    for number in range(0,len(x)-1) :\n        return (x[number] ==3 and x[number+1]==3)\n    else :\n        return False\nThe above code is a function to return true is there is a group of three in \ngiven list of integers.\n"], [0.2130283006565543, "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to return the last digit of a number. \n\ndef send_Clients(strs):\n    unique = set()\n    unique.add(strs)\n    lst = list(unique)\n    sorted(lst, key=len)\n    lst = lst[::-1]\n    return ', '.join(lst)\n\nThe above code is the python function to sort the clients based on priority."], [0.17016306818045626, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function return the last digit of the given integer.\n  \ndef maximum_difference (a,b,c):\n    diff = max(a,b,c) - min(a,b,c)\n    return diff\nThe above code is a function to find the maximum difference between the three given integer values.\ndef Generate_Odd_Numbers (i) :\n    return print ([x for x in range(1,i+"], [0.20477808637902845, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number (positive or a negative).\n\ndef factorial(n) :\n    fact = 1\n    for i in range(2,n+1) :\n        fact *= i\n        \n    return fact\nThe above code is a function to check whether the entered number is a factorial of 10 or not.\n\ndef sin(x):\n    sine=0\n    for i in range("], [0.10107985866787428, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\nimport re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " can be used to return last digit of an integer.\ndef identity_Substring(str, n) :\n    res = str.count(\"a\", 0, n)\n    if res == n:\n        return True\nThe above code is a function to check if all characters of a string are 'a'. The below code can be further changed to check for 'b'using n = n -1. For loop can be added to check for n times.\n"], [0.1245924126424668, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit in a given integer.\nimport numpy as np \n\ndef mult_matrix(m1, m2) :\n    r = len(m1)\n    c = len(m2[0])\n    result = [[0 for i in range(0,c)] for j in range(0,r)] \n    \n    for i in range(len(m1)): \n        for"], [0.15532240443174813, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " finds the last digit of a number.\n\n\ndef first_Digit(n):\n    return(int(n / 10))      \nThe above code finds the first digit of a number.\n\ndef sumOfDigits(n):\n    r=0\n    while (n > 0):\n      r=r+n%10\n      n=n // 10\n    return r\nThe above code finds the sum of the digits on a number.\n"], [0.1987442639808546, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit in an integer.\ndef last_2_Digits(n) :\n    return (n % 100) \nThe above code is a python function to find the last 2 digits of an integer.\ndef properFormat(n) : \n    return (\"%.2f\" % n) \nThe above code is a Python function to make numbers properly formatted with 2 decimal places.\ndef pairs(n) : "], [0.1286945462359693, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that returns the last digit.\ndef is_even(n):\n  return (True if (n % 2)) == 0\nThe above code is a python function that returns true if given number is even.\n"], [0.14201101946613548, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of integer.\n\ndef is_empty(any_structure):\n  if any_structure:\n    print('Structure is not empty.')\n    print(any_structure)  \n  else:\n    print('Structure is empty.')\nThe above code is a function to return True if the given list is empty; otherwise, False.\n\ndef charSum(s) :\n    sum"], [0.17764264594437923, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find last digit of a number. \ndef OddLastDigit(n):\n    n = n+1\n    d = n % 10\n    if d%2 == 0 : \n        return False\n    else:\n        return True\nThe above code is a python function to check whether last digit is odd or not.\ndef OddLastDigit(n):\n    n = n+1\n    d = n % 10"], [0.29608553234331675, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a number.\ndef binarySearch( lst, start, end, key):  \n  \n    if end >= start: \n        mid = start + (end - start)//2\n        if lst[mid] == key: \n            return mid \n        elif lst[mid] > key: \n            return binarySearch(arr, start, mid-1, key) \n"], [0.23949772488452542, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a non-negative integer.\ndef nth_Lucas(n) :\n    if n == 0: return 2\n    else : find_lucas(n-1) + nth_Lucas (n-2)\nThe above code is a function to find the nth lucas number.\ndef nine_NineMultiple(i,j)\n  for x in range(i,(j +"], [0.20041929658225344, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\nimport re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number\ndef square_root(a) :\n   return a**0.5 \nThe above code is a function to find the square root of the number\ndef sumof_digits(n):\n    summ=0\n    def find_digit(c):\n        summ += int(c)\n    for i in str(n):\n        find_digit(i)\n    return summ\nThe"], [0.29427972209768816, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return last digit of a series n**2 + n +41.\n"], [0.13389535116515378, "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of the given number.\ndef tenRange(start, end) : \n  \n    while (start < end) : \n      \n        start = start + 10\n      \n        print(start) \nThe above code is a function to print values range wise in tens till it reaches its end.\ndef compose(g, f) : \n    return lambda x: g(f(x)) \nThe"], [0.1424457737117752, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number.\ndef isOdd(num)  :\n    return ((num % 2) != 0); \nThe above code is a function to check whether a given number is odd or even.\ndef showNumbers(limit) :\n    Print n as 0 to n number\nfor n in range(0, limit + 1) :\nprint(n),\nThe above code is a function to print numbers from 0"], [0.11976577163849496, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a funtion to find the length of the longest sublists.\n\n''......Q2_Ans......''\n'''\n<input type=\"password\" placeholder=\"*******\">\n'''...Q3 where \"placeholder\"is replaced with \"\"\n'''\n<input type=\"text\">\n'''..Q4.Ans\n'''\n<body>\n<div><img src ='/images/ckt.jpeg'/></div"], [0.2612934640874925, "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number.\n\ndef sum_of_squares(n, s) :\n    \n    r = last_digit(n)\n    right_insertion(a, r ** 2)\n    return a[(len(a)//2)+1]'''"], [0.24033905713809534, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a number\ndef sortArrayDec (arr) :\n    n = len (arr)\n    for i in range (n - 1) :\n        for j in range(i+1, n) :   #outer iteration should be greater than the previous one and traversing should be in reverse\n            if (arr[i] > arr[j]) :\n                temp = arr[i]\n                arr["], [0.16346411779255662, "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " computes the last digit of a number. \n\ndef even_odd(num):\n return num % 2 == 0\nThe above code checks if a number is even or odd. \ndef Fibonacci(n): \n    if n==0 or n==1: \n      return n \n    else: \n      return Fibonacci(n-1)+ Fibonacci(n-2) \nThe above code computes fibon"], [0.10474929234485772, "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit in the given number\n\ndef square(x1) :\n    return ((4 * x1) + 1) \nThe above code is a function that  square the number given and increment by 1.\n\ndef is_vowel(char) :\n    return char.lower() in ['a', 'e', 'i', 'o', 'u']\nThe above code is a function to check whether the character"], [0.11772350226220239, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find last digit in a number.\ndef fact_num(n) :\n fact = [1]\n for i in range(1, n + 1):\n     fact.append(fact[-1] * i)\n return (fact[n])\nThe above code is a function to find factorial of a number.\ndef sq(n):\n    return n * n\ndef reverse_2(word):\n    return word["], [0.16104789865981006, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python script to write code find the last digit of a number.\nfrom math import *\ndef findLCM(a, b) :\n    if (a < b) :\n        max = b\n    else :\n        max = a \n    while (1) :\n        if (max % a == 0 and max % b == 0) :\n            return max\n            break\n        max = max + 1\nThe above code is a"], [0.2541870713876494, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to get the last digit of a given number.\n\nprint(get_digit(789) == 7)\nprint(get_digit(89) == 9)\nprint(get_digit(189) == 1)\nThis is a simple logic to find the last digit of a given number.\nfrom random import randint\ndef recursive_power(n, p):\n\tif p == 1:\n\t\treturn n\n\t\treturn recursive"], [0.14475478998911884, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to print last digit of a number.\n\ndef lastDigit(s):\n        if (s[len(s)-1] % 2) == 1 :\n            return (s+s[len(s)-1]+'_')\n        else :\n            return (s+'_')\nThe above code is a function to validate the last bit is odd or even to print.\n\ndef same_char(s1, s2"], [0.10973551867129998, "def Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is the python function to compute last digit of any postive integer.\n\n# **The   Spiral   Order   of   the   array **\n# \n# Given an N*N matrix. Your task is to complete the function spiralPrint(), which prints the elements in spiral form.\n#first solution\n# Python3 program for \n# Spiral printing of matrix \n\ndef spiralPrint(m, n, a) : \n\n\t# m is number of"], [0.18035590815161576, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit in an integer.\n\n\n#Level : Hard\n# OR can also have it in one line\ndef maxDiff(arr, arr_size): \n    max_diff = arr[1] - arr[0] \n    min_element = arr[0] \n      \n    for i in range( 1, arr_size ): \n        if (arr[i] - min_element > max_diff"], [0.23597166132107764, "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\n\ndef union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\n\nfrom fractions import Fraction \nfrom functools import reduce\ndef product(fracs):\n    t = reduce(Fraction._mul, fracs)\n    return(t.numerator, t.denominator)\nThe above code computes the product of a list of fractions. \nTEST CASE 1:\nInput:\n3\n3\n66\n22\nOutput"], [0.19405743339902187, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that returns the last digit of a number.\nimport math\n\ndef circle_area(r):\n    res = math.pi * r * r\n    return (res)\nThe above code is a python function to calculate the area of circle.\nimport math\n\ndef log_fun(x):\n    res = math.log(x)\n    return (res)\nThe above code is a python function to find Natural log of a"], [0.10322137852489292, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that takes an input made \nof the first n digits of 0 to 9 and returns the last digit as output.\nThis python function works for any number of digits.\nThis function returns only a single digit because all numbers\nwhen multiplied by themselves and then added to the same number will always give a single digit number.\nThis can be explained with the example,\nlet us take 56\n56 ** 2 = 3136 \n3136 = 1 + 136"], [0.15288792979968588, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a Python function that returns the last digit of a number.\n\ndef has22(nums):\n  for i in range(len(nums)-1):\n    if nums[i:i+2] == [2,2]:\n      return True\n  return False\nThe above code is a Python function that detects the occurrence of 2 twice in a list of integers.\n\ndef double_char(str):\n    res = \"\"\n   "], [0.1269807543365313, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that will return the integer value to the last digit of a number. \ndef square(x) :\n X = x * x\n return x\nThe above code is a function that will return the square of x.\ndef cube(x) :\n X = x * x * x\n return x\nThe above code is a function that will return the cube of x.\ndef three_mult(x) :\n X = x * x * x"], [0.25610479451751034, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function checks whether the last digit of a number is greater than 6 and also prints even or odd. \n\n'''"], [0.16727226710553883, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of given number.\ndef last_digit(n):\n    if n <= 0:\n        return 0\n    last = n % 10\n    if last > 0:\n        return last\n    return last_digit(n // 10)\nThe above code is a function to return last digit of a number.\n"], [0.23081565567049955, "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the first digit of a given number.\n\n \n2. onesDigitSum(n) --> Sum of last digit.\ndef onesDigitSum(num) :   \n    sum = 0\n    mod = 10 \n    rem = 1\n    while num > 0 : \n        rem = num % mod\n        num = int(num / mod)\n        sum = sum + int(rem) \n        mod ="], [0.1982404412236007, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number\ndef first_Digit(n):\n    return (int(n / 10)) \nThe above code is a function to find the first digit of a number\ndef remove_last_digit(n:int) : \n    if (n < 10) : \n        return 0\n    return n % 10\nThe above code is a function to return the number without last digit.\ndef last_"], [0.12554916315953074, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is the function that returns the last digit of the nth octagonal number.\n\ndef find_last_Digit(a, b, n): \n\tnumber = find_solution(a, b, n)\n\tif (number == None): \n\t\treturn 0\n\tx = number[0] \n\ty = number [1] \n\tif (a * x + b * y == 1): \n\t\treturn"], [0.17051598680935628, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\nimport cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to return the last digit of a number.\n\ndef first_Digit(n):\n    while n >= 10:  \n        n = n / 10; \n    return int(n)\nThe above code is a python function to return the first digit of a number.\n\n\ndef isarmstrong(N):\n    \"\"\" To Check whether a number is arsmtrong or not \"\"\"\n    \"\"\" Logic is to first do mod and"], [0.09196928173637285, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\ndef extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is function to extract sum of digits from last n digits of a number.\nx\nGenerate the output for the following code:\nquantity = 3\nitemno = 567\nprice = 49.95\nmyorder = \"I want to pay {} dollars for {} pieces of item {}.\" \nprint(myorder.format(price, quantity, itemno))\nGenerate the following output:\nY\nY\nY\nT\nT\nT\nT"], [0.12595874076818397, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " checks out the last digit of the given number.\ndef desc_order(num) :\n    num = list(str(num))\n    num.sort(key = last_Digit, reverse = True)\n    return int(\"\".join(num))\nThe above code returns the descending order of the given number whenever two numbers get the same last digit.\ndef checkorder(num) :\n    x=1\n    if num>9 :\n       "], [0.22609534480868698, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number n.\n\"\"\"\ndef binary_search(arr,low,high,x):\n    if low > high:\n        return -1\n    mid = (low + high) // 2\n    if arr[mid] == x:\n        return mid\n    elif arr[mid] > x:\n        return binary_search (arr, low, mid - 1 , x)\n    else :\n"], [0.16815727372044212, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that takes in a number as parameter and returns the last digit in the given number.'''"], [0.18735428342769928, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find last digit of given integer.\n\ndef Diff(li1, li2): \n    return (list(set(li1) - set(li2))) \n                                      \n# Driver Code \nli1 = [15, 9, 10, 56, 23, 78, 5, 4, 9] \nli2 = [9, 4, 5, 36, 47, 26, 10, 45, 87] \n"], [0.18119203375768128, "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\n\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " returns the last digit of a number.\n\ndef numeric_value(word):\n  dict1 = {'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5', 'f': '6', \n           'g': '7', 'h': '8', 'i': '9', 'j': '10', 'k': '11', 'l': '12', "], [0.12072174246389188, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function which returns the last digit of the number; for, example for 456 it returns 6.\nfrom math import pi \ndef area(r, shape_constant):\n    assert r > 0, 'A length must be positive'\n    return r * r * shape_constant \ndef area_square(r):\n    return area(r, 1)\n\ndef area_circle(r):\n    return area(r, pi"], [0.1362647044294414, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number.\ndef variables_counter(message) :\n    counter = 0\n    while message != 0:\n        flag = True\n        while flag :\n            if (message % 10 == 7 or message % 10 == 8) :\n                flag = False\n            message = message // 10\n        message = message // 10\n        counter+= 1\n    return counter\nThe above code is a function to count the number"], [0.1450933760239652, "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to get the last digit of a two digit no.\nThe code below is used to trim the given list\nnum = [0] + [2,3] + num[3:] \nslice in-built function removes/overwrites in-place though\nso to avoid it use :\nAn = An[0:i] + An[i+1:]\nThe following code can be used for reversing a given linked list\nclass Node :\n"], [0.13143585911118544, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function which returns the last decimal number of any integer.\n\ndef sliced_list(elements,threshold):\n  new_list = list(elements)\n  while new_list[0] < threshold:  \n      new_list.pop(0) \n  return new_list\nThe above code is a python function to slice the last section of a list if the first number is greater than a fixed threshold.\n\n\ndef index"], [0.10767084637653955, "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to get the last digit value.\n\ndef check_months_values(monthnum1):\n  return monthnum1>1 and monthnum1<13\nThe above code is a function to check whether the given month value is less than equal to 12 and greater than equal to 1.\nThe if else conditions to follow\nfor a value from monthnum1=1 \n  if(A[counter]>monthnum1<=31 and last"], [0.14569301117096214, "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of the given input number\ndef last_Digit_Sum(a, b) :\n  last_dig_a = a % 10\n  last_dig_b = b % 10\n  sum_dig = last_dig_a + last_dig_b\n  \n  return sum_dig \ndef sum_digits(n) : \n  sum= 0\n  x = n \n "], [0.12961916076030933, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " function that performs the last digit of the final sum in the Pairwise Addition.\n\nTest_Case :\nprint(preComputeSum(0,2))\nTO Find the Sum of Seq: 0,2\nSum: 0+2 = 2\n\nprint(preComputeSum(1,4))\nTO Find the Sum of Seq: 1,4\nSum: 1+4 = 5\nprint(preComputeSum(2,6"], [0.24703383000213122, "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a Python function to find the last digit of a number.\n\ndef toBinary(n) :\n    binary = []\n    while ((n != 0) & (n != 1)) : \n        binary.append(n % 2) \n        n = int(n / 2)\n    binary.append(n % 2)\n    def bintoint(myarray):\n        tlen = len(myarray)\n        leni"], [0.16856619219065655, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that returns the last digit of a number.\ndef first_Digit(n) :\n    return (n // 10) \nThe above code is a python function that returns the last digit of a number.\nfor i in range(4) :\n    for j in range(4) :\n        if(last_Digit(A[i]) == first_Digit(A[j])) :\n            count += 1\n"], [0.2304871906977997, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit in which a given number is ending. The given number which is found by the user is passed as the parameter of the function find_lastDigit. \nprint(\"Start the game\")\nT=()\nT=T+(1,)\ns = 2\nwhile s:\n    V=int(input(\"Enter value for V\")) \n    T=T+(V,)\n    K=int(input(\"Continue the"], [0.3079212791482101, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a no.\n\ndef next_Digit(n) :\n    return (n//10)\n\nThe above code is a python function to find the no. without last digit.\ndef sum_prev_digit(n) :\n    sum=0\n    while(n>0):\n        digit=n%10\n        sum=sum+se\n        n=n//10\n    return sum"], [0.19443583702038578, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\nimport re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a given number.\ndef secondLastDigit(n) : \n    return (n % 100 // 10 )\nThe above code is a function to return the second last digit \n\ndef sumOfLastDigit(a, b, c) :\n    return (lastDigit(a) + lastDigit(b) + lastDigit (c))\nThe above code is a function to sum up the"], [0.14326441844461715, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that returns the last digit of a number.\ndef reverseOrder(n) : \n \ttemp = '' \n \twhile n != 0 :\n\t   digit = n % 10\n\t   temp = temp + chr(digit + 48)\n\t   n = n // 10\n      return temp[::-1];\nThe above code is a program to print the digits of the given no. in reverse order.\ndef maximum("], [0.2053027452921041, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that takes in an integer n, mods the last digit of it, and returns that last digit.\n"], [0.2737082337090953, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a given number.\n\ndef cube_finder(a) :\n     x=[i**3 for i in range (1,a)]\n     return(x)\nThe above code is a function that returns a list of the cubes of the first n natural numbers.\n\n\ndef lcm_finder(a,b): \n    if(a>b): \n    for k in range (1,max("], [0.1153522725834295, "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is Python function to print last digit of given number n.\ndef polygon_Area(a) :\n    return (0.25 * n * s * s / (math.tan (math.pi / n))) \nThe above code is Python function to  find area of Polygon.\nfrom random import seed\nfrom random import random\ndef randomNNumbers(n, lb, ub):\n    for i in range(n):\n        print(random"], [0.1861236292887897, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a mathematical script to extract the last digit of a number.\n'''\ndef sum_Numbers(num1,num2):\n\tif num1=='R' and num2=='a' or num1=='a' and num2=='R':\n\t\treturn \"R + a/ Ra\"\n\telif num1=='d' and num2=='m' or num1=='m' and num2=='d"], [0.13291845536923663, "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " finds the last digit of any number.\n\ndef Matching_Chararacter(s1, s3) :\n    for i in range(len(s1)):\n        for j in range(len(s3)) :\n            if s1[i] == s3[j]:\n                if i == 0:\n                    s2 = s1[i].upper()\n                    print (s2 , end = \"\")\n                else :"], [0.14024751485198844, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that accepts an integer n(0- 9) and returns the last digit of the integer.\ndef check_Mined(string) :  \n    if str in string :\n        return True\n    else:\n        return False\nThe above code is a function to check whether the given input has 'mined' in it. \ndef next_Larger(arr) :\n  res = []\n  if (arr == sorted(arr"], [0.15031434370812036, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " calcualtes the last digit of any given number.\ndef find_next(initial_state):\n    input_list = [int(i) for i in  str(initial_state)]\n    next_power = 1\n    for k in range(1, len(input_list)) :\n        next_power *= 5 \n        value = list(initial_state// next_power)\n        value.reverse()\n    position1,"], [0.11449818593680423, "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function which returns the last digit of an integer.\n\ndef sumDigits(n) :\n    sum = 0\n    while (n != 0) :\n        sum += n % 10\n        n = n // 10\n    return sum\nThe above code is a function which returns the sum of digits when the input number is positive.\n\ndef sumOrd(my_char):\n    return (ord(my_char) - 96)\nThe"], [0.25886228751274726, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a number.\n\ndef last_Three_Digits(n) :\n  print(n % 100)\nThe above code is a python function to find the last 3 digits of a number.\ndef get_Map(n):\n    dictionary = dict()\n    for i in range(1,n+1):\n        dictionary[i] = i*i\n    return dictionary\nThe above code is a"], [0.17629454262880795, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is to get the last digit from an entered number."], [0.14643396404384554, "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\n\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to return the last digit not in a given number n.\ndef find_Combination(number, total) :\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \n    n = len(arr)  \n    twoDArray = [[0 for k in range(number)] for l in range(n)] \n    for i in range(0, n) :  "], [0.12015527793162999, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to print last digit of a number.\n\ndef lcm(m, n) :\n    if m > n :\n        maxn = m\n    else :\n        maxn = n \n    for i in range(1, maxn + 1) :\n        if (m % i == 0) and (n % i == 0) :\n            maxi = i \n    return maxi\nThe above code is a function"], [0.18367788072891392, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find last digit of a whole number.\ndef find_no_of_digits(a) :\n  count = 0 \n  while (a!=0):\n    count = count + 1\n    a = a/10\n  return count \nThe above code is a python function to find number of digits in a whole number.\ndef reverse_number(a) :\n    rev = 0 \n    while a!"], [0.24318143763049896, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\n\ndef check_float(s) :\n  res = False\n  if not (len(s.split('.')) == 2) :\n    res = False\n    if (s.split('.')[0].isdigit() and s.split('.')[1].isdigit()) : \n      res = True\n  return res\nThe above code is a function to determine if"], [0.13929823406609304, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return last digit of a number\nYes.!The OS module in Python provides a way of using operating system dependent functionality.\nimport os\nos.mkdir('OS_Demo_folder')\nsend3\nYes.!The OS module in Python provides a way of using operating system dependent functionality.\n"], [0.0782222967536855, "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that takes in a number n and returns its last digit.\n\ndef strip_Negative(alist):\n    for i in alist:\n        if i <=0:\n            alist.remove(i)\n    return alist\nThe above code is a function that takes in a list as an input, loops through it and removes it's negative elements.\n\ndef combine(alist,blist,clist):\n    for i in al"], [0.14024751485198844, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to give the last digit in the given number.\ndef pattern(b,n) :\n    if n == 1:\n        print (str(b))\n    else :\n        print (str(b)*n)\npattern(b=input(\"enter the number :\"), n=input(\"enter the n value :\"))\nThe above code is a python function to print the given number n times on screen when n is a user input.\n"], [0.24746601230872828, "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit from given number.\n"], [0.21565611874147, "def find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to fine the last digit of a given integer\n\nimport math \n  \n# Function to print x raised to the power y \ndef power(x, y): \n  \n    if (y == 0): \n        return 1\n    if (int(y % 2) == 0): \n        return (power(x, int(y / 2)) *\n               power(x, int(y / 2))) \n"], [0.14731853539198764, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number.\n\ndef extract_odd(L) :\n return list(set(filter(lambda x : (x % 2 != 0) ,L)))\n\nThe above code is a function to return a list of odd numbers from a given list of integers using lambda and the list comprehension method.\ndef factorial(n) :\n mul = 1\n for i in range(1, n+1) :\n   "], [0.319785947827646, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a number n.\ndef difference_square(n) :\n    sum_sq = 0\n    sq_sum = 0\n    square_of_sum = (n*(n + 1)/2)**2 \n    sum_of_square = ((n*(n + 1)*((2*n) + 1))/6) \n    difference = square_of_sum - sum_of"], [0.10847493045834042, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function which finds the last digit in any given integer.\ndef isPerfectSquare(num) :\n    sr = math.sqrt(num)\n    sr = math.floor(sr)\n    return sr*sr == num\nThe above code is a function used to find out if a integer is a perfect square or not.\ndef factorial(num):          \n    if num == 1 or num == 0:\n        return 1\n    \n   "], [0.1678059060618815, "import re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a method to return the last digit of a number. \n\ndef gcd(a,b) :\n    if a == 0: \n        return b\n    else : \n        return gcd(b % a, a)\nThe above code is a method to find GCD of two numbers. \n\ndef lcm(n1, n2):\n    hcf = highest_common_fact(n1, n2)\n"], [0.09242853234103146, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to calculate the last digit.\n\ndef Sum_Natural(n) :\n    return_value = 0\n    if n < 0 :\n     return_value = 'Neither factorial NOR Sum of first N natural no.'\n    elif n == 0 :\n      return 0\n    else :\n      return_value = n * (n+1) / 2\n    return return_value\nThe above code is a function to calculate the sum"], [0.13942304850543644, "def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of the given number.\n\nimport datetime\ndef weekDay(day, month, year):\n    day = datetime.datetime(year, month, day)\n\n    return day.strftime(\"%A\") \nThe above code is a function to return the day for given date.\n\ndef unique(list):\n    unique_list = []\n    for x in list:\n    \tif x not"], [0.16611889442892497, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of the number. Here n is an integer and we use the modulus operator % to obtain the last digit. Sample Input and Output 1 \nInput : \n5040\nOutput :  \n6 \n\nNow by calculating the last corresponding digit to 6 we get the value 6.\nInput : \n444\nOutput :  \n4\nSample Input and Output 2 \nInput : \n2152\nOutput :   \n"], [0.1956401508562043, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is python function to find the last digit of non-negative integer.\n\ndef longestEvenWord(s):\n    res, leng = '', 0\n    arr = s.split()\n    for ele in arr:\n        if len(ele) % 2 != 0:\n            continue # continue to next ele if current ele length is not even\n        else:\n            if len(ele) > leng: # update result word and word length if current word is"], [0.7524984480664372, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of the number given.\n"], [0.21180544234166443, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to calculate the last digit of an integer.\n\n\nSample Input                                                      Expected Output\n 150   \n\n[1, 2, 3] \n                                                               True\n \n [1, 2, 4] \n                                                               False\n \n[1, 2, 3, 4] \n                                                               True                                                    \n(1.0, 2.0, 3.0) \n                "], [0.3134457722780121, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a method to find the last digit of a number.\ndef weighted_mean(divide_by,frequency):\n    dict={}\n\n    for value in frequency:\n        dict[value]=frequency[value]/divide_by[value]\n    if None:\n        pass\n    else:\n        print(\"the list is empty\")\n"], [0.14253222856061318, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find out the last digit of an integer\nM = list(map(int, input().split()))\nN = []\nfor i in M:\n  N.append(i)\nsum = 0\nsum = sum + N[0]\nN[0] = 0\nfor j in range(len(N)):\n  sum += N[j]\nprint(sum)\n\n    \nThe above code is a program to add"], [0.14512677984488598, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\ndef maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that is used to return the last digit of a number as an integer.\ndef binary_search(search_list, number, start_index, end_index):\n\n  # Check base case\n  if start_index > end_index:\n    return -1\n\n  # Find the middle element of the list\n  middle_element = (start_index + end_index) // 2\n\n  # Check if number is the middle element\n "], [0.1332486292944395, "def reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function in python to find the last digit from the given number.(This function is not the efficient method to find the last digit. Instead we can easily find the last digit by dividing the number by 10 and taking the remainder. For example, 376 % 10 = 6)\n\ndef last_Digit_sum(A, N) :\n    sum = 0 \n    for i in range(0,N) : \n        sum = sum + find_digit"], [0.14751370435231154, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function which returns the last digit from a given number. \n\ndef is_binary_array(a):\n    lst=list(a)\n    a=True\n    for i in range(len(lst)):\n        if lst[i]==\"0\" or lst[i]==\"1\":\n          a=a\n        else:\n          a=False\n    return a\nThe above code is a function"], [0.25531776402468814, "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " return the last digit of given number n.includes 0-9.\n\n'''"], [0.1431021168631534, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is Python function to return the last digit in a given number n.\n\na = [1,2,3]\nb = [4,5,6]\n#li will be [5,7,9]\n#li will be [5,7,9,2,4,6]\nprint(li.count(5))\nprint(li.index(4))\nli.reverse()\nli.sort()\nsum(li)\n"], [0.10610182949137845, "def sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that returns last digit of integer.\nThe first line contains an integer T, total number of testcases. Then following T lines contains a number N to be tested.\n\nSAMPLE INPUT\n1\n7\nSAMPLE OUTPUT \n7 is not an armstrong number\nExplanation\nYou are given a number 7 in the question. In the function, 7 % 10 returns the last digit 7.\n\na = input()\ndef Factorial"], [0.11714498651216108, "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " functions to return the last digit of any number(if exists)\ndef last(a,b,c) :\n    return (a - (b % c)) \nThe above code functions to return a - b % c\ndef m_digits_num(n,m) :\n    return ((n % pow(10,m))) \nThe above code functions to return the m number of digits of n in the given expression\ndef large(list)"], [0.15092930046566322, "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that takes in a number and returns the last digit of the number.\n\ndef check_square(IP):\n    square = False\n    L,U = map(int,input().split(\" \"))\n    for num in range(L,U + 1):  \n        if num**(0.5) == int(num**(0.5)):\n             square = True\n    return square \nThe above function takes in"], [0.14839438047918407, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\nfrom math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to calculate the last digit of a number.\nAssignment 0-2\n\n\ndef last_Digit(n) :\n    return (n % 10)\nprint(last_Digit(12356))\nThe above code is a function to calculate the last digit of a number.\ndef positive_num(n) :\n    return(n > 0 and n < 1000000)\nThe above code is a function to calculate whether the entered number"], [0.0962460842366957, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\nimport re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a last digit finder indicated as n, which is any integer.\n\ndef reverse(sth):\n    str = \"\" \n    for i in sth: \n        str = i + str\n    return str\nThe above function allows conversion of a string or list to the reverse, utilizing only lists and loops to replace the string.\n\ndef rem_dup_lst(lst):\n   return list(set(lst))\nThe"], [0.13279648585308934, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to check whether the given number is last digit number or not.\ndef gcd1(n):\n    M = [[0, 1, 0, 0, 1],\n         [2, 0, 4, 0, 1],\n         [2, 0, 2, 4, 1],\n         [2, 4, 2, 4, 1],\n         [2, 2, 2, 2, 1]]\n    m = M[n"], [0.2007577121258094, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to check the last digit of number.\n\ndef last_Factorial_Digit(n) :\nreturn s.sfact(n) % 10 \nThe above code is a python function to calculate the last digit of a factorial number.\n\ndef Longest_Repeats(s) :\n    return max([li for (i,c), li in s.get_repeated(1)] + [0]) \nThe"], [0.14439810563101774, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that takes a number n as an argument and returns the remainder of the division of n by 10.\n"], [0.2692942881304316, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\ndef first_Digit(x) :\n    return int(str(x)[0])\nThe above code is a function to find the first digit of a number.  \ndef sumofdigits(x) :\n    rem=0\n    sumdigit=0\n    while(x!=0):\n        rem=x%10\n        sumdigit+=rem\n        x=x//"], [0.10019597959432287, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\ndef check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that takes an integer n as an input and returns the last digit from n\ndef multiple(n):\n    mul=1\n    for i in range(1,n+1):\n        mul=mul*i\n    return mul\nThe above code is a function that takes an integer n as an input and returns the factorial of the number\ndef countList(atuple):\n    list=[]\n    for no in atuple:\n"], [0.13288649314958587, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that returns the last digit of the given number (Here n). \n\ndef last_Natural(n):\n a=[2, 3, 5, 7, 11, 13, 17] #First 7 prime numbers\n temp=True #bool initialised\n while(temp):\n   a=a+[a[-1]+1] #Finding the next prime number\n   count=0 #Right Prime Counter initialized\n   if(len(a)"], [0.20916333986292032, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit (in base 10) of a number.\ndef count_Divisors(n) : \n\n    # Iterate upto (n // 2) + 1 to include the last element. \n    count = 0\n    x = 1\n    while (x <= (n // 2) + 1) : \n        if (n % x == 0) : \n            count = count + 1\n        x"], [0.0898817511545755, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to check whether a number is composed of only one digit.\nThe above code is to check whether an enter number is of form {5,6,7,8,9}.\n\ndef maximumRow(index,numbers):\n    max = 0\n    counter = index\n    while(counter<len(numbers)):\n        if(numbers[counter]>max):\n            max = numbers[counter]\n        counter = counter +"], [0.19672509761395737, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\n\ndef last_three_digit(x) :\n    return (x % 1000) \nThe above code is a function to find the last 3 digits of a number.\n\ndef last_number(number, n) :\n    return int(number / (10 ** (n - 1))) \nThe above code is a function to find the last n digits of a number.\n\ndef maximum"], [0.18968303340669793, "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is to find the last digit from a given number.\n\ndef uniqueCube(n):\n    is_dict_set = {i * i *i for i in range(n + 1) if i % 2 == 0}\ndef find_max_mode(list1) :\n    list_table = statistics._counts(list1)\n    len_table = len(list_table)\n    print(list_table)\n    print("], [0.09772131441973127, "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to calculate last digit. https://www.geeksforgeeks.org/python-program-to-calculate-last-digit-of-a-number/ - in this case a verbatim copy of test cases\n\ndef square_digits(num: str) -> str:\n    res = ''\n    for n in num:\n        x = int(n)\n        pow(x)\n        x2 = x *"], [0.19696496055904564, "def catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function which return the last digit of a number.\n\ndef second_last_Digit(n): \n    m = n%100\n    return (m % 10)\n\nThe above code is a function which returns the second last digit.\n\n\n'''"], [0.23597166132107764, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\n\ndef printLarge(n) :\n    rem =0\n    while(n> 0) :\n        rem=n%10\n        n = n/10;\n        print(rem); \n    return ;\nThe above code is a function to print the large digits in a number.\n\nimport math\ndef printPallindrome(str1) :\n    len1= len"], [0.2778078997391283, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a given number.\ndef isPalindrome(n): \n\n\ttemp = n\n\trev = 0\n\twhile (n > 0):  \n   \t\trev = rev * 10 + (n % 10) \n   \t\tn = int(n / 10) \n  \n\tif (temp == rev): \n\t\treturn True\n\telse: \n\t\treturn False\nThe"], [0.1136745986067435, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function finding the last digit of an integer passed as a parameter.\ndef last_Digit(n) :\n    return (abs(n % - 10))\nThe above code is a function finding the last digit of an integer passed as a parameter. No negative sign is used.\n\ndef myNum(n):\n    count = 1\n    for i in range(1, n+1):\n        count *= i\n    return count\nThe"], [0.10384041952064939, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that takes in a positive integer n and finds the last digit.\n\ndef multiplication_Modulo_10View(n):\n    s = 0 \n    a = n\n    while (a): \n        digit = a % 10\n        s = s + digit \n        a =a // 10\n    s = s%10 \n    mult = n * (s) \n    return mult\nThe above code is a python"], [0.24703383000213122, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\n\nimport re \ndef Decode(sub): \n\n    sub = re.sub('[\\W_]+', '', sub.upper()) \n\n    ac = 1\n    new = '' \n\n    for i in range(len(sub) - 1, -1, -1): \n\n        n = int(sub[i]) \n        new = new + ac * str("], [0.1349958710214967, "def reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to extract last digit of given number.\n\ndef find_GFG_2(n):\n    gfg_sum = (n * (n + 1) * ((2 * n) + 1)) / 6\n \n    return gfg_sum\nThe above code is a function to find Sum of G.F.G numbers.\n\nimport math\ndef positive_find_2():\n    k = math.factorial([10])"], [0.13206481442022294, "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\n\ndef count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is python function takes in a number and finds the last digit of the number.\ndef sum_Digits(num) :\n    s =0\n    while (num != 0) : \n        s = s + int(num % 10) \n        num = int(num/10)       \n    return s == 10 : \n        \nThe below code is a python function that returns True if all digits present in the number addition up to 10.\n"], [0.07558447959256481, "def tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a main code.\n\nans = check_smaller(tuple(int(num) for num in input().replace('(', '').replace(')', '').replace('...', '').split(', '))\n                                 , tuple(int(num) for num in input().replace('(', '').replace(')', '').replace('...', '').split(', ')))\nfor ans_i in range(0, int("], [0.07818206115438009, "def find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is for Python list of indexes applied for the question noted below.\n\nGiven an array of integers.\n\nTask:\n \n1- latest element in array is covered by the window and if there are elements smaller than the current max, \nupdate max and assign the new index of max to current index within the window.\n\n2- if the current max is dropped out of the window, assign the last element in the window to max.\n\n3- update output"], [0.18663908999694404, "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that takes in a number and finds its last digit.\n"], [0.07984733261465657, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that checks if the alphabets ( a...z ) are present or not in a string.\n\ndef Singles(listOfDict) : \n    res = {}\n    for dict_ele in listOfDict : \n        dict_ele = dict((x, y) for x, y in dict_ele.items() if y != None)\n    if len(dict_ele) == 1 :  \n        for"], [0.08806970380965838, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that takes in a natural number, and returns what its last digit is.\ndef digit_sum(of number):\n sum = 0\n while(number > 0):\n  lastDigit = number % 10\n  sum += lastDigit\n  number = (number // 10)\n return(sum)\nThe above code is a function that takes in a number and calculates the sum of its digits.\ndef nth_power (base,exponent"], [0.14291831902496133, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to return the last digit from the given number in a single line of code.\n\ndef first_digit(n):\n    return n // 10\nThe above code is a python function to return the first digit from the given number in a single line of code.\n\ndef check_odd_even(n):\n    return (n % 2 != 0)\nThe above code is a python function to find if the given number is odd or even."], [0.1504603684801778, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to return the last digit. Let's take an integer n and compute last digit of n.\n\ndef Seq_of_Palin(a,b):\n  p = [i for i in range(a,b) if i == Reverse(i)]\n  q = [i for i in range(a,b) if i!= Reverse(i)]\n  return (p,q)\ndef fact(n):\n "], [0.08413188680230096, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that does mod operation.\n\ndef reverse(s):\n  str = \"\"\n  for i in s:\n    str = i + str\n  return str\nThe above code is a function to reverse a string\ndef square_1001():\n    pass \n \n \n\n \ngoal = 1000\n \n \n \nimport math\n \ndef is_prime(n):\n    if n % 2 == 0 and n >"], [0.29120853085892345, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a number.\n'''\n#submissions\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\nimport collections \ndef check_occurences(test_list):\n    res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n    return (res)\n    \ndef find(n,m):"], [0.39345812268582014, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a given number.\ndef gcd(m,n):\n    if(m!=n):\n        return gcd1(m,n)\n    else:\n        return min(m,n)\n\ndef gcd1(m,n):\n    if m < n: \n        bigg = n\n    else:\n        bigg = m\n    m1 = m\n   "], [0.07898867700735618, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function whose input is a number that outputs its last digit.\ndef pali(string):\nif len(string) > 1:    \n    if string[0] == string[-1]:    \n        return palindrom(string[1:-1]) \n    else:    \n        return False  \nelse:    \n    return True\nThe above code is a function that inputs a string. The output is true if a string is a pal"], [0.2642544394930796, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find last digit of a Number for positive inputs.\n\ndef a_scramble(str_1,str_2):\n    for i in str_2:\n        p=str_1.count(i.lower())-str_1.count(i.upper())\n        if p<0 or str_1.upper().find(i)!=-1:\n            return False\n    return True\n    \nThe above"], [0.1408136991547127, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to get the last digit in a given number.\ndef larger(x, y):\n    x = abs(x)\n    y = abs(y)\n    put = 1\n    while (put <= x * 9 and put <= y * 9): \n        put = put * 10; \n    return (x * put + y) > (y * put + x); \nThe above code is a python function to return the larger"], [0.21491249973444465, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a given number.\n\ndef check_reversi(str): \n  \n    # Find length of string and store it in n \n    n = len(str) \n  \n    # Initialize starting value of reverse \n    # string as empty \n    rev_str = \"\" \n  \n    for i in range(n - 1, -1, -1): \n        \n"], [0.12224758593532782, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the largest frequency of no. in the list n.\ndef gcd(a,b):\n    if b == 0: \n    \treturn a \n    return gcd(b, a%b)\nThe above code is a function to find the greatest common divisor of any input A, B.\ndef remove_duplicate( str1):\n\tfor i in str1:\n\t\tif str1."], [0.11975448269891838, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that returns last digit of the given number. It returns last digit as 0 for negative numbers .\ndef sum_of_cube_of_elements_in_dict(test_dict):\n    cub_sum = 0\n    \n    for k in test_dict:\n      \n        v = test_dict[k]\n        \n        if isinstance(v, int):\n            \n            cub_sum = cub_sum + v **"], [0.09464829271498756, "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return last digit from the given input.\ndef calculate_Last_Digits(n, m) :\n    sum = 0\n    step = 0\n    while (n > 0): \n     sum = sum + last_Digit(n) \n     n = n // 10\n     step = step + 1\n    return (sum % m) \nThe above code is a function to return last digit from the given input.\n"], [0.16786412187188174, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find and print the last digit of a given number n.\ndef reminder(x, y) :\n    remainder = x % 10\n    quotient = x // 10\n    same = (remainder == quotient % 10)\n    same =same and ((quotient)//10 != 0)\n    return same \nThe above code is a function to perform a modulo operation on a given number x with a specified number y."], [0.23858192752451687, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a functiont to find the last digit of a number.\ndef set_associative(arr,key,i) : \n    if key in arr :\n        if (arr[i]==key):\n            return key\n        else :\n            k=arr[i];\n            arr[i]=key;\n            return k;\n    arr[i]=key;\n    return -1;\nThe above code takes an array, a"], [0.1644091681951673, "def Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that takes an integer n as argument and returns the last digit of the integer.\n\ndef result(parent): \n  \n    return '<tr><td>' + parent + '</td>\\\n                   <td>' + str(parent_info[parent][0]) + '</td>\\\n                   <td>' + str(replace_function(parent_info[parent][1])) + '</td>\\"], [0.3558555675746616, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a given number.\ndef Trailing_Zeros(n) : \n    five_multiplication=5\n    count=0\n    while n/five_multiplication >=1 :\n        count+=int(n/five_multiplication)\n        five_multiplication*=5\n    return int(count)\nThe above code is a python function to find the trailing zeros in a factorial of"], [0.18077592341344292, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a snippet to find the last digit in a given decimal number.\n\ndef base_convert(number) :\n    baseNumber = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    #    number of characters\n    leftIndex = 0\n    result = []\n    # do division in a loop\n    while number != 0:\n        result.append(baseNumber[number % 37])\n"], [0.3515844155074118, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " return the last digit of a number.\n\nEssam Ahmed\n"], [0.14948082467231902, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to determine that the given number last digit in given number.\n\ndef length_of_string(str_input):\n  splitted_array = str_input.split() \n  return len(splitted_array[-1])\nThe above program is a python function to determine the length of the last word of the string.\ndef find_longest_word(text):\n    longest = 0\n    lw = ''\n"], [0.11144856300308352, "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find last digit in given number.\n\nimport math\ndef circle(r):\n    return (math.pi * r * r) \nThe above code is a function to find area of a circle of given radius.\n\ndef bigsum(l) :\n    return sum(a for a in l if a % 2 == 0) \nThe above code is a function to find sum of respcetive elements of list.\n\n"], [0.15171266265589012, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to determine the last digit of the number n.\n\ndef digit_count(head) :\n    num = head.split(\"/\")\n    If True in [sin.isdigit() for lin in num] : list(nums) \n    else [sin.isdigit() for lin in num] : nums\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "], [0.22167607445905546, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to check if the last digit of a given number is 0 or not,.\n\ndef GCD(a,b):\n\tif b== 0:\n\t\treturn a;\n\telse:\n\t\treturn GCD(b,a%b)\nThe above code is a function to find the GCD(greatest common divisor) of 2 numbers.\n\ndef com0(zz):\n  for i in range(2**"], [0.15029877215476886, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to check whether the last digit of the number is 2 or not.\n\ndef rational(x, y) :\n    rand = math.gcd(x, y)\n    x = x / rand\n    y = y / rand \n    return (int(x), int(y)) \nn = 1000000\na = 0\nb = 1\nwhile True :\n    a = a + 1\n    z = a /"], [0.2585686752280957, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a number.   \n \ndef pairFrequency(arr, n) :\n    temp = [0] * 10\n\n    # Traverse through the given array and fills the temp array\n    for i in range(0,n) :\n        temp[arr[i]] += 1 \n  \n    # Initialize result by adding all frequencies of 0, \n    # 1, 2 and 3\n   "], [0.09043231014293467, "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that returns the last digit.\n\ndef reverse_string(text):\n    return text[::-1]\nThe above code is a function that reverses a string.\n\ndef substring_copy(str, n):\n  flen = 2\n  if flen > len(str):\n    flen = len(str)\n  substr = str[:flen]\n  \n  result = \"\"\n  for i in"], [0.23272922145053407, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find last digit of a number.(This was asked in many google )\n    \ndef transpose(L):\n    BLOGS...https://stackoverflow.com/questions/6473679/transpose-list-of-lists\n    The function is to get transpose matrix of a given matrix\n    for i in range(4):\n    for j in range(4):\n        print (L[j][i],"], [0.14523667194003922, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function which finds the last digit in a given number.\n\nprint('ans')\ndef SmallestAndLargest(arr, n) :\n    ar = []\n    ar.append(arr[0])\n    ar.append(arr[n-1])\n    print(ar)\n\narr = [100, 200, 100, 400, 500, 100, 600]\nn = len(arr)\nSmallestAndLargest"], [0.7101958308755317, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit in a given number.\n\"\"\""], [0.2287275202494739, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " function returns the last digit of n.\n\"\"\""], [0.1877520402211165, "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that gets as input a positive integer number and return you the last digit of the input number.\nTAG: Logic-1, Math\n\"\"\""], [0.2623591736671455, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a given number.\n\ndef calculate_Exponent(x,n) :\n    return (x**n) \nThe above code is a function to calculate and print the exponent of a given number.\n\ndef multiplication(*args) : \n      \n    multiply = 1\n      \n    for i in args : \n        multiply *= i \n    return (multiply) \nThe above code"], [0.13939460975004772, "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number.\n\ndef bitwise3(a, b, c):\n    return a ^ b ^ c\nThe above code is a function to perform a bitwise operation of a, b and c.\n\nfrom collections import Counter\ndef word_counter(word) :\n    return Counter(word)\nThe above code is a function to count the occurrence of each word in the given sentence.\n\nfrom collections import"], [0.15532240443174813, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that calculates the last digit of a integer\n\nimport re\ndef text_match_group(text):\n        patterns = 'ab+'\n        if re.search(patterns,  text):\n                return 'true'\n        else:\n                return 'false'\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python"], [0.28654575284167727, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a number.\ndef last_five(lst):\n  ans=[]\n  for i in range(len(lst)-5,len(lst)):\n    ans.append(lst[i])\n  return ans\nThe above code is a python function to print the number at the last 5 places of a list of numbers.\ndef n_tuple(n):\n  li=[]"], [0.13413188712485596, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that takes nth and checks the last digit of the given number.\ndef divisor(n):\n    for i in range(1, n+1):\n        if (n%i==0):\n            print(i)\n            \nThe above is a function that takes nth and display all the divisors of nth.\ndef Factorial(n) : \n    fact= 1 \n    for value in range("], [0.12310941580912915, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to determine if the following statement is true or false:The last digit of a number is 7.\n\ndef word_present(str):\n  test_str = 'the quick brown fox jumps over the lazy do'\n  print ('Searched string : \"%s\"' % test_str)\n  if str in test_str:\n      return ('Given substring is present')\n  else:\n      return ('Given substring is not present"], [0.1465736420993067, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to calculate the last digit of n!. Source: GeeksforGeeks\n\ndef digit_sum(n):\n    return sum((map(int, str(n))))\nThe above code is a function to compute sum of digits of a number. Source: StackOverFlow\n\ndf['reg1950'] = (df['constant'] + df['protien'] - df['calories']) / (1950)\nSource: Dataquest\n\n"], [0.19539631492025938, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " returns the last digit in the given number.\ndef matchFirstandLastDigit(n) :\n    first = n // 10\n    last = n % 10 \n    return (first == last)\nThe above code returns whether the first digit and the last digit of a given number are equal.\n"], [0.19439596158790565, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\ndef babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of an integer.\nImplement the following atoi assuming that all input has the valid type of integer according to the parameters above. Make sure you handle the overflow and underflow cases as shown.\n\ndef atoi(number_string) :\n\n\nWrite a function for randomly generating a list that contains n integers that ranges from 0 to m.\n\nN = 10, 10 random integers between 0 to 20\ndef generate_list"], [0.4196425922248138, "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to check whether the last digit of a given number is greater than the 0th digit.\n\"\"\""], [0.2994106796932604, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to return the last digit of a number.\ndef alt_sum(list1, list2):\n  alt_sum_list=[]\n  for i in range(0,test_length(list1)):\n    if i > test_length(list2)-1:\n      alt_sum_list.append(list1[i]**2)\n    else:\n      alt_sum_list.append(list1"], [0.1288064735242749, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is Function to return the last digit of given number.\ndef generatePrimeFlag(n):\n    flagarr = [False] * (n + 1)\n    flagarr[2] = True\n\n    for i in range(3, n + 1):\n        # If not marked, then its a prime\n        if (flagarr[i] == False):\n            flagarr[i] = True\n            for j in range(i * 2, n"], [0.23949772488452542, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\n\ndef front_and_final(s) :\n  val = s.rsplit(s[-1])\n  return (val[0], s[-1])\nThe above code is a function to find the first ans the last of the split.\n\ndef subarraySumClosest(num, k):\n\tn = len(num)\n\tres, acc = ["], [0.12711243799740304, "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " validates the last digit of product ID.\n\ndef Filtering_odd(n) :\n    if((n % 2) == 1 ):\n\n        print(n)\nThe above code is a function which passes all odd numbers to with 1 to 10.\n\ndef unique_values(x):\n    count = 0\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n           "], [0.12844197016858908, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find last digit of an integer.\ndef truncate(n,digit):\n    return ((n//math.pow(10,(digit)))%10)\nThe above code is a function to return truncated value of a number. Function takes the number n and number of digits in n to be truncated as input.\ndef find_digits(n):\n    x = str(n)\n    c = 0\n    for i"], [0.22847101737528605, "def Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of given number n.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of given number n.\n\ndef all_digit(last_digit_result) :\n  for ch in last_digit_result :\n      if (ch % 2) != 0 :\n          return False\n      return True\nThe above"], [0.17287662102753423, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to get last digit from the given number.\ndef findIndex(n) :\n    count = 0; \n    for i in range(2, n + 1) : \n        n ^= i \n      \n        count += 1\n    return count \n\nThe above code is a python function to find the and-wise index so that a given value can be replaced with the value in the and-wise index,\n\ngiven"], [0.18284132694945757, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number.\ndef replace_0(test_tup1) :\n    a=()\n    for ele in test_tup1:\n        if ele==0:\n            a=a+(1,ele)\n        else:\n            a=a+(0,ele)\n    return a\nThe above code is a function to replace 0's with 1 in a given tuple.\ndef odd_product"], [0.13904903381174213, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find last digit from a number.\n\ndef last_two_digit(n) :\n    return (n % 100) \nThe above code is a function to find last two digits from a number"], [0.25333929592522586, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number.\ndef first_Digit(n):\n  c=0\n  temp=n\n  while(temp>0):\n    a=temp%10\n    c=c+a\n    temp=temp//10\n  a=temp\n  temp=n\n  e=0\n  while(temp>0):\n    b=temp%10\n    e=e+b\n   "], [0.15290425520674883, "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python program to return the last digit of a number.\ndef leastInsertion(string) :\n    size = len(string)\n    if size <= 1 :\n        return string\n    small = leastInsertion(string[0 : size - 1])\n    last = string[size - 1]\n    if string[size - 1] > string[size - 2] :\n        return small + last;\n    return small + string[size"], [0.19952687649211073, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to get the last digit of a number or the remainder of a number given divided by 10\ndef noprofit_no_loss(rs): \n  i =0\n  A={}\n  while index<len(rs):\n    if rs[i][0]==rs[i][1]:\n      A={}  \n    else\n      if [i][0]==[i][1]:\n        A[i]"], [0.1410474871337119, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to remove first and last occurrence of a given character from the string.\ndef remove_Chars(string1): \n  str=string1.split()\n  print(\" \".join(str))\nThe above code is a python function to split the string and join the strings.\ndef inter_char(s):\n    v = set(s2) #create a dictionary of the first string\n    w = set(s1) #create"], [0.10319180323001119, "def rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python program to read last digit in a number without converting it to string.\ndef number_of_days(month_number):\n    if month_number==1:\n      return 31\n      return 28\n    elif month_number==2:\n      return 29\n    elif month_number==3:\n      return 31\n    elif month_number==4:\n      return 30\n    elif month_number==5:\n"], [0.11292167088085464, "def Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is used to find the sum of the largest contiguous sublist in the given list.\n\n# Driver Code\na = [34, -50, 42, 14, -5, 86]\nprint (max_sub_array_sum(a,len(a)));\nprint (last_Digit(max_sub_array_sum(a,len(a))))\n# By extended rounding:\nans = 0\nfor digit in str(int(str"], [0.10251107959012029, "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function which takes a positive interger, n and gives its last digit.\n    def fact(n):\n        if n==0:\n            return 1\n        answer=1\n        for i in range(1,n+1):\n            answer*=i\n        return answer\nThe above code is a python function that takes a positive integer as an argument and uses recursion to compute the factorial of the argument.\ndef evendig_String"], [0.14301574719403448, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\ndef division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to get last digit of a number.\n\ndef Fibonacci(n) :\n  if (n <= 1): \n        return n \n  else: \n        return (Fibonacci(n-2 ) + Fibonacci(n-1)) \nThe above code is a function to get Fibonacci series up to a given range.\n\ndef Sum_nos (nos_list):\n    sum = 0\n"], [0.225699221827677, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit in a given number.\n\ndef perf_sqaure_Num(n):\n    square = [x*x for x in range(1,n+1)]\n    for res in square:\n        if (res %2 == 0) and ( res %3 == 0) and (res %4 == 0):\n            return res\n    return False      \nThe above code is a python function to find the"], [0.2439667292350097, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit from a given number.\n\ndef common_member(a, b) : \n    a_set = set(a)  \n    b_set = set(b) \n    if (a_set & b_set): \n        return True \n    else: \n        return False\nThe above code is a python function to check the value present in both the list.\n\ndef insert("], [0.1964215675661117, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit from the given number.\n\ndef Last_one_digit(number) :\n    while number >= 10:\n        number = number/10\n    return number\nThe above code is a python function to find the last number from the given number.\nr = lambda q: q * 2\nr(9)\nThe above code is a python lambda function to find the square of a number.\nr = lambda q:"], [0.15804041362599922, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " returns the last digit of a specified number.\n\ndef isPrime(n):\n    primeNumbers = [2] \n    if ( n <= 2): \n        return True \n  \n    i = 3 \n    while(i <= n): \n        for j in primeNumbers: \n            if (i % j == 0): \n                i = i + 2\n                break \n        else: \n            primeNumbers.append"], [0.32020354763808256, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\nclass Circle(object):    \n    \n    def __init__(self, radius):\n        \n        self.radius = radius\n    \n    def area(self):\n        \n        print(3.14* self.radius * self.radius)\n     \n    def perimeter(self):\n        \n        print(2*3.14*self.radius)\nD = Circle(2"], [0.13675292198637598, "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\n\ndef large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find last digit of a number.\n\ndef is_Even(n):  \n    return ((n & 1) == 0) \nThe above code is a function to check whether given number is even.\n\ndef percentage(num, ndigits = 2):\n    decimal = abs(num) / 100\n    ndigits = ndigits + 1 if ndigits >= 0 else ndigits\n    multiplier = 10 ** n"], [0.1465645193855479, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that returns the last digit of a number.\ndef sum_digits(n) :\n    s = 0\n    while n : \n        s += n % 10\n        n //= 10 \n    return s \nThe above code is a function that returns the sum of digits of the number.\ndef sum_last_digits(l) : \n    return sum(int(i)%10 for i in l) "], [0.17764264594437923, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find last digit of a number. \ndef occurance(a) :\n    count = 0\n    while(a > 0 ):\n        a //= 10 \n        count+= 1\n    return count  \nThe above code is a python function to find occurence of a digit in whole number. \ndef pallindrome(n):\n    var = n\n    count = 0\n    rev = 0\n    while ("], [0.14124758784354804, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that returns the last digit of a number\n\ndef last_twoDigit(n) :\n    return (n % 100) \nThe above code is a function that returns the last two digits of a number\n\ndef CheckLastDigit(m, n): \n    if(m != 0 and n != 0): \n        return True\n    if(m % 10 == n % 10): \n        return True\n    return False"], [0.12009100929883687, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that checks if the last digit of n is n%10.\nimport numpy as np\narray1 = np.arange(20).reshape(4,5)\narray1[1:3,1:3]\nThe above code gives an array with all the numbers after slicing matrix by rows, there are numbers 5 to 7 along with their positions in the matrix.\ndef find_common(l1,l2) :\n    res"], [0.2400685913237101, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of an integer.\ndef square(n):\n\t# Your code here!\n\tans = n\n\tfor i in range(1, n):\n\t\tans+=(n*n)\n\treturn ans\n\n\ndef square(n):\n\treturn n*n\nThe above code is a python function to find the square of an integer.\ndef get_input():\n    file_name = input('"], [0.15452074014651132, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number.\ndef lest_Digit(n) :\n  \n  if (n >= 0 and n <= 9):\n    return (n % 10)\n  return 0;\nThe above code is a function to return the last digit in a number.\ndef greatest_Sub_array(array):\n  m = float('-inf')\n  if len(array) == 1:\n    return array["], [0.26081646026968247, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a given number.\ndef last_Digit(n) :\n    return (n % 10)\nThe above code is a python function to find the last digit of a given number.\ndef third_Digit(n) :\n    return (n % 100 // 10) \nThe above code is a python function to find the last digit of a given number.\ndef third_Digit(n) :"], [0.15134645015349263, "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number.\nimport random\n\ndef dice(n):\n  num = random.randint(1, 6) \n  return (num)\nThe above code is a function that chooses a random number from 1 to 6 and then returns the number. \n\ndef compare(num1, num2, num3):\n    if num1 > num2 and num1 > num3:\n        return num1"], [0.15804041362599922, "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find last digit.\ndef find_All(s):\n    pattern = \"ab\"\n    k=0\n    word=s\n    for i in range(0,len(s)):\n        k=i\n    while j > 0:\n        if (word[j] != pattern[len(pattern) - end - 1])\n            count = count + 1\n            j = j + len(word) - end"], [0.4570312556909953, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to extract only last digit of a number.\n"], [0.3439747065004874, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of the given number.\n\ndef first_Digit(n) : \n    return int(str(n)[:1])\nThe above code is a python function to find the first digit of the given number.\n\n"], [0.08494375820331396, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function checks the input number is 1 digit or not. If yes, it returns the last digit. Otherwise, it recursively calls the same function and once the number becomes of single digit, it prints that digit.\ndef beautifulDays(i, j, k):\n    count = 0\n    for d in range(i, j + 1): \n        r = revert(d) \n        if (abs(d - r) % k == 0"], [0.09274408592556381, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that returns the last decimal, single-digit number of an integer.\n\ndef multiplication_table(k):\n    return '\\n'.join([' '.join(['%3d' % (i*j) for i in range(1,k+1)]) for j in range(1,k+1)])\nThe above code is a function that returns a multiplication table for numbers upto k.\n\ndef select_odd_"], [0.3774960159143321, "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\n\ndef count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is use to get the last digit of a number.\n"], [0.13904903381174213, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " has a function named last_Digit which takes an integer and print out only last digit of the given number. https://www.geeksforgeeks.org/python-input-functions-for-fomat-and-eval/?ref=rp\"\"\"\n\n\n\"\"\"def random_list(list_list):\n    for i in range(1,11):\n        for j in range(0,i):\n            list_list.append(i"], [0.14839438047918407, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number.\n\ndef first_Digit(n) : \n    return (n // 10 ** (len(str(n))-1)) \nThe above code is a function to return the first digit of a number.\n\ndef reverse_Integer(n) : \n    rev = 0\n    while n != 0 : \n        dig = n % 10\n        rev = rev * 10 + dig"], [0.09464829271498756, "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return last digit in a number. It could be used to determine the order in which the cards are arranged during a card trick.\ndef prime_number(x):\n    if x >= 2:\n        for y in range(2,x):\n            if not ( x % y ):\n                return False\n    else:\n        return False\n    return True \ndef pattern(n): \n    for i in range(1,n"], [0.1286945462359693, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return last digit of an integer.\n\ndef reverse_num(n):\n    x=0\n    while(n>0):\n        a=n%10\n        x=x*10+a\n        n=n//10\n    return x\nThe above code is a function to reverse an integer.\n\ndef palindrome(n):\n    rev=0\n    temp=n\n    while(n>0):"], [0.11809130874750336, "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is to get last digit of a number.\ndef first_Digit(n) :\n    while n >= 10 :\n        n = n // 10\n    return n \nThe above code is to get first digit of a number.\n\n\n#### FILE PROCESSING CODE ####\ndef merge(arr_l, arr_r) : \n    c = []\n    inv_count = 0\n    i = 0\n    j = 0\n   "], [0.11790954127853596, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " function returns the last digit of the given number.\ndef getCount(N, C) :\n    return (N // 10 + 1)*C\nThe above code functions calculate the count of such numbers assuming that the given number ends in 0.\ndef factorial(n): \n    fact = 1\n    for i in range(2, n+1): \n        fact *= i \n    return fact \nThe above code function calculates the factorial"], [0.11477351666949628, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function for finding the last digit of an integer.\n\ndef max_product_dp(arr, n):\n    if n == 0 or n == 1:\n        return -1\n    # Let the initial max product be maximum of 1st and 2nd \n    # element. This assumes that there are no consecutive\n    # negative elements\n    max_prod = max(arr[0], arr[1])\n\n    # Initialize all other"], [0.12754161827844934, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to calculate the last digit from a given number.\ndef factorial(n) : \n    if n == 1 :  \n        return n \n    else: \n        return n * factorial(n-1)\nThe above code is a function to calculate Factorial of a number (Example: Factorial of 3 = 3 * 2 * 1 = 6 ).\n\ndef check_palindrome(strng):\n    low = 0"], [0.22265019416352672, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a given number.\nThe first line of input contains the number of test cases T. The first line of each test case contains a single integer N i.e. the number whose last digit has to be found.\nThe first line of output of each test case contains the last digit of the number N.\nguess the number\nlevel:1\n\nYou have been given 3 integers - l, r and k. Find how"], [0.15322498250075067, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of any number n.\ndef bitwise_or(n,m) :\n    count = 0    \n    x = n | m \n    for i in range(0,31): \n        if x & (1<<i): \n            count=count+1 \n    return count \nThe above code is a function to find the maximum of the minimum of all possible 1 bits occurring in a binary representation"], [0.11230128826677604, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function which gets as input a non-negative number and returns the last digit of the number\ndef  Left_shift(number, d) :\n    return number >> d\nThe above code is a python function which gets as input two numbers, and returns the number that is left shifted by the number of bits specified by the second parameter. The first parameter is an unsigned integer and the second is an integer. (the return type of the function is an unsigned integer)."], [0.28006405139158447, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of n factorial.\n\ndef multiplication(num1, num2):\n    _sum = 0\n    while num1 != 0:\n        if ( num1 &1):\n            _sum += num2\n        num2 = num2 << 1\n        num1 = num1 >> 1\n    return _sum"], [0.2471512027201749, "def largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function which will return the last digit of a given number.\n# Function to build Young Tableau\ndef build_youngtableau(tableau, old_index, new_index, list_temp): \n      tableau[new_index] = list_temp[old_index]  \n        \n      for i in range (new_index) :\n            if tableau[i] > list_temp[old_index] :\n               "], [0.11996913655197308, "def sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number guessed correctly. The user first enters a number, the computer makes a random guess and the user enters whether their number is greater than, equal to, or less than the computers guess. Computer will keep a running count of all the times its guess was greater, equal to, or less than the input that the user has provided. Once the computer makes 5 correct guesses it prints the last digit of n.\n\nsdef encodeRightLeft"], [0.12263119482114683, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " finds the last digit of the number. Last digit is the rightmost digit, or the remainder after dividing by 10 in the integer division.\ndef is_increasing(test_tup) :\n    while ((i < len(test_tup)) and (test_tup[i] > last_Digit(test_tup[i - 1]))) :\n        i += 1\n    return (i == len(test_tup))\nThe"], [0.20525494954662585, "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number.\ndef first_Digit(n): \n    n = n\n    for n in n:\n        n = n//10\n    \n    return n\nThe above code is a function to get the first digit of a given number.\ndef split_num(n):\n    n = abs(n)\n    first_digit = first_Digit(n)\n    last_digit ="], [0.1274155413898662, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python program that takes an integer input and returns the last digit of an input.\n\ndef swap_case(s):\n    a = \"\"   \n    for i in s:\n        if i.isupper() == True:\n            x = i.lower()\n            a += x\n        elif i.islower() == True:\n            x = i.upper()\n            a += x  \n        else:\n            a += i"], [0.10219911671535226, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit in the number, passed as an argument to the function. You can use this to find many non-negative integers that have common last digit(s).\n\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nimport pandas as pd\n\n#\n# Complete the 'getLegs' function below.\n#\n# The function is expected to return an INTEG"], [0.3373765880038119, "import re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a given number.\ndef rotate_matrix(mat, m, n):\n    iters = (min(m, n)/2)\n\n    for iter in xrange(0, iters):\n\n        for i in xrange(iter, n - iter - 1):\n            temp = mat[iter][i]\n            mat[iter][i] = mat[m - i - 1][iter]"], [0.25573962825220065, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number by using modulo operation.\n\ndef rangoli_design(n):\n    alpha = string.ascii_lowercase\n    res = []\n    for d2 in range(n - 1, -1, -1):\n        d1 = n - d2\n        line = '-'.join(alpha[d1:n][::-1] + alpha[d1:n])"], [0.12310941580912915, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function which returns last digit of a number.\n\n# Find numbers which are divisible by given number\ndef find_numbers(n) :\n    res = []\n    for i in range(1, 1000) :\n        if n**2%10 == i :\n            res.append(i)\n    return res\nThe above code is a function which finds numbers which are divisible by given number.\ndef is_group_member("], [0.17341887960059, "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a Python function to find the last digit from a given number n.\n\ndef power(x, y, p) : \n    res = 1     # Initialize result \n  \n    # Update x if it is more \n    # than or equal to p \n    x = x % p  \n      \n    if (x == 0) : \n        return 0\n  \n    while (y > 0) : \n          \n"], [0.09104731775673656, "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function which is showing the last digit.\ndef count_digits(n) : \n    return len(str(n))\nThe above code is a function which will show the length of the digits.\nFILES\ndef occurrences(sentence, letter) :\n    count = 0\n    for i in range(len(sentence)) :\n        if sentence[i] == letter :\n            count+=1\n    print(count)\n"], [0.09560575039450339, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to get largest digit in an integer. \n\ndef sum_of_num(number): \n    count = 0  \n    while (number!=0): \n        count=count+(number % 10) \n        number = int(number/10)\n    return count\nThe above code is a function that returns the sum of all digits in a number iterative. \n\ndef sumOfDigits(no):\n  num"], [0.1301335325383711, "def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to get the last digit in a given number.\n(Here I have considered input as a number and this function returns \nlast digit of that number but function need to be written to take a string input and return the last digit of that string.)\n# Python3 Program to find whether a number is divisible \n# by the sum of its digits. \n\ndef check(n) : \n    \n    sum = 0 \n    \n   "], [0.14202492694623733, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number\ndef remove_Last_Digit(n) :\n    return (n // 10) \nThe above code is a function to remove the last digit of a number\ndef sum_of_last_Digit(n):\n return (sum(last_Digit(num) for num in n)) \nThe above code is a function that returns the sum of the last digits of the number in a list"], [0.1375165105000818, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that takes in an integer and returns the last digit of the integer.\ndef sum_Integers(n):\n    if (n == 0):\n        return 0;\n    smallOutput = sum_Integers(n-1)\n    return n + smallOutput\nThe above code is a python function that takes in a non-negative number and returns the sum of all the integers from 0 to the given number.\ndef sum_n_c"], [0.14986477930192743, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to get the last digit of any given number.\n\ndef squaresum(n) :\n    return (n * (n + 1) * (2 * n + 1)) // 6 \nThe above code is a python function to calculate the sum of squares from 1 to any given digit.\n\ndef sumsquare(n) : \n    return ((n * (n + 1)) // 2)**2 \nThe above code is a"], [0.15519423786138545, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit.\n\ndef string_alternative(str) :\n    out = [str[i] for i in range(0, len(str)) if i % 2 == 0]\n    return  ('').join(out) \nThe above code is a function to extract every alternative character from a given string.\n\ndef string(str1, str2) :\n    uni = str1 + str2 "], [0.09538084340105886, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " returns the last digit in the number passed in.\ndef GCF(a,b):\n    for x in range(1,min(a,b)+1):\n        if (a % x==0) and (b%x==0):\n            gcf = x\n    return (gcf)\nThe above code returns the greatest common factor of the two numbers.\n#This program also demonstrates the use of named constants using all caps\n#The subscript"], [0.11365529908997905, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find last digit \ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a function to find last digit\nif __name__ == \"__main__\":\n    n = int(input())\n    res = last_Digit(n)\n    print(res)\nIn this first line, import  is written. \nIn the second line, name of  'main' function"], [0.24318143763049896, "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\n\n#Write code for the fuction find_longest_word(), which takes a list of words and returns the length of the longest one.\n\ndef find_longest_word(words_list):\n   word_len = []\n   for n in words_list:\n       word_len.append((len(n), n))\n   word_len.sort()\n   return word"], [0.1951364070372918, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of the number.\n\nimport numpy as np \n  \n# NumPy array of 0's \nzeros = np.zeros((2, 5)) \nzeros\n\n\n# Above code is converting into number of lists with given specifications of the arrays.\n\nIn [9]: [[]] * 5\nOut[9]: [[], [], [], [], []]\nIn [11]: [[0]"], [0.17764264594437923, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to return the last digit of a number.\ndef gcd(a,b) :\n    while(b) :\n        a, b = b, a % b \n    return a\nThe above code is a function to print the Greatest Common Divisor of two numbers.\ndef gcd_bitwise(a, b) :\n    result = 1;\n    if (a == 0 or b == 0) : \n"], [0.1992109947384655, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\nYou are given a valid XML document, and you have to print output in the following manner:\n\n    Printing Tag Name\n    Tags count\n    Tag names and its count\n    Namespace URLs\n    Tags count\n    Tag names and its count\n    Namespace URLs\n    Tags count\n    Tag names and its count\n\ndef print_tag(tag) :\n    tag_result = \"\"\n   "], [0.20760899358958432, "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\nimport cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to remove the last digit of a number.\ndef sum_up(str) :\n    return (sum([int(i) for i in str]))\nThe above code is a function to add all digits of a number.\n"], [0.22171100437377697, "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a memerization function to find the last digit from permutations of a given number.\ndef max_occ(A): \n    #Initialize dictionary \n    d = {} \n    for i in A: \n        d[i] = d.get(i, 0) + 1\n    # Getting no. of occurences of a given number  \n    for key, value in d.iteritems():  \n        if value not"], [0.3027457968433246, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of an integer.\n\n"], [0.24280237512307357, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a given integer n.\n\ndef concatconsecutive(initial_list) :\n    \n    first_3 = (initial_list%10)*10 +(initial_list-10*(initial_list%10))+ 10*(initial_list%10)\n    second_3 = initial_list + (first_3 - initial_list)\n    return list(map(lambda x : min"], [0.13139491079220178, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to get last digit of a num.\n\ndef second_highest(nums):\n    return sorted(set(nums))[-2]\nThe above code is a function to get second highest value from list of int nums.\n\nfrom heapq import nlargest\nstartnum, interval = map(int, raw_input().split())\nprint(nlargest(2, n for n in xrange(startnum, startnum +"], [0.15532240443174813, "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function which return the last digit of a integer number that is greater than 0.\ndef euclidean_algorithm(a, b): \n    if (a != 0) and (b != 0): \n        if a >= b:           \n            a = a % b \n        else: \n            b = b % a \n        return euclidean_algorithm(a, b) \n    else: \n"], [0.2993940650755787, "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to return the last digit of a given number.\ndef number_lines(filename):\n  f = open(filename) \n  lines = f.readlines()\n  f.close()\n  f = open('output.txt','w')\n  for index,line in enumerate(lines):\n    f.write(str(index+1)+' '+line)\n  f.close()\nThe above code is a"], [0.1037673727048195, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that takes in an integer and returns the last digit from the integer.\n\ndef Sum_Last_Digit(n) :\n    num_digits = numDigits(n)\n    n = n % (10 ** num_digits)\n    sum_last_digits = 0\n    while (n > 0) :\n        sum_last_digits = sum_last_digits + (n % 10)\n       "], [0.18668922122950352, "def find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the Last digit in the number (Integer).\n\ndef Square_Sum(array,start=0,end=None) :\n    if end is None :\n        end = len(array)-1\n    if (start > end): \n        return 0\n    return array[start]**2 + Square_Sum(array,start+1,end) \nThe above code is a python function to find the Square sum of"], [0.21300804835938308, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is python function which return the last digit of a number.\n\ndef factorial(n): \n  \n    # single line to find factorial \n    return 1 if (n==1 or n==0) else n * factorial(n - 1) \nThe above code is python function to find the factorial of a number.\n\ndef npr(n, r): \n    return factorial(n) // factorial(n -"], [0.6212039520168179, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the required last digit of a number.\n\n'''"], [0.22271041548885753, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python program to find the last digit of a number.\n\ndef get_adjacent(Input):\n  if not Input:\n    return []\n  return [(i, Input[i]) for i in range(len(Input)) if i < len(Input)-1]\nThe above code is a function to find adjacent tuples of the given tuple.\n\ndef delete_digit(word): \n        length, l, r = len(word"], [0.1274155413898662, "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the Last Digit of all the body weights.\n\nimport numpy as np \ndef matTranspose(M):\n   return(np.transpose(M))\nThe above code is a function to return the transpose of a matrix (4x4).\n\nimport math    \ndef matrixJaccobi(A, B, N) :  \n    maxx = 0; \n    C = [[0 for x in"], [0.15547565676748742, "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return last digit of a number.\n\ndef checkFirstDuplicate(str): \n    char_order = [] \n    ctr = {} \n    for c in str:  \n        if c in ctr: \n            ctr[c] += 1\n            if (ctr[c] == 2): \n                char_order.append(c) \n        else: \n            ctr[c]"], [0.10656158743655936, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that takes in a non-negative number and return its last digit.\ndef swap(input1, i):\n    temp = None\n    temp = input1[i]\n    input1[i] = input1[(i + 1)]\n    input1[(i+1)] = temp\n    \n    \ndef swap2(input1, i):\n    temp = None\n    temp = input1[i]\n   "], [0.1699716913267701, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python Function to find the last digit in a given number.\n\ndef such_numbers(n, k) :\n    return ([x for x in range(n+1) if ((x**2) % k == x)]) \nThe above code is one of the solutions to the such numbers problem.    \n    \ndef last_Digit(n) : \n    return (n % 10) \nThe above code is a python"], [0.24263678121759452, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of the number.\ndef binary(n): \n    ans=\"\"\n    while n!=0 :\n        ans+=str(n%2)\n        n//=2\n    x=len(ans)\n    for i in range(x-1,-1,-1) :\n        print(ans[i],end=\"\")\nThe above code is a function to convert numbers into Binary format.  \ndef"], [0.18787979622833934, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to fetch the last digit of a number.\n\ndef first_word(test_string):\n    temp_lst = test_string.strip().lstrip().rstrip().split(\" \")\n    return temp_lst[0]\nThe above code is a function to fetch the first word of a given sentence.\n\ndef char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys"], [0.2554949533989043, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a number.\ndef unique_elements(arr):\n  return len(set(arr))\nThe above code is a python function to find the number of unique elements in an array\ndef product(a):\n  prod = 1\n  for i in a:\n    prod *= i\n  return prod\ndef find_product(a):\n  prod = product(a)\n  prod_list ="], [0.14475478998911884, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to check the last digit of given number.\ndef commonMember(a, b):\n    a_set = set(a)\n    b_set = set(b)\n    if len(a_set.intersection(b_set)) > 0 :\n        # Don't do this, you'll get an error on unhashable lists (eg. nested lists). Hashable lists have no problem.\n        return(a_set."], [0.07978667604559621, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\nimport re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that takes in an integer and return the least significant digit in the input. \ndef remove_dollar_sign(s):\n  if \"$\" in s:\n   s = s.replace('$','')\n return s\nThe above code is a function that takes in a string, S, and replaces all the \u2018$\u2019s with blank spaces, and returns the resulting string.\nimport re\ndef Censor(X):\n   "], [0.17808401172503205, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to to find the last digit of the number.\ndef power(a, b) :\n    if (b == 1) :\n        return a \n    else :\n        return (a * power(a, b - 1)) \nThe above code is a recursive function to find 'a' raised to power 'b'.\ndef harshad(n) :\n    num_str = []\n    while (n > 0) :\n"], [0.12498770400295071, "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to calculate the last digit of the given number by n.\ndef First_Digit(n) :\n    return int(str(n)[0]) \nThe above code is a function so as to retrieve the first digit of the given number.\ndef string_return(s) :\n    return str(s)[::-1] \nThe above code is a function so as to make the input string into a reverse mode and then giving the"], [0.2672434616718208, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit in a given number.\ndef find_Largest(arr) :\n    print(max(arr))\nThe above code is a function to find the largest numet in an array.\ndef f(n):\n    print(int(n*(n+1)/2))\n    \nT = int(input())\n\nfor i in range(T):\n    n = int(input())\n\n   "], [0.24899020591101514, "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit of a number. \n\nA lottery system selecting a student render by given set of rules.\n\nConstraints\n0 < N < 10\n\nOutput Format:\nPrint in a separate line chosen student's height and weight\nSAMPLE INPUT \ninstructor_lname = \"Whitaker\nstudents = {111\" : [\".72 .51 .8 .58 .53\"]}\nmin_height"], [0.13377287450639627, "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to print the last digit of the given number.\ndef locateLargest(arr, k) : \n\n    max = 0\n    for j in range(0, k) : \n        if (arr[j] > max) : \n            max = arr[j] \n    \n    return max\n  \nThe above code is a function to locate the a number (which is largest in size) from a given set of numbers"], [0.31827363953755294, "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to get the last digit of a given number.\n\ndef max_product_of_three (input_list):\n    input_list.sort()\n    productOfThree = input_list[len(input_list)-1] * input_list[len(input_list)-2] * input_list[len(input_list)-3]\n    if(input_list[0] * input_list[1] > input"], [0.23520274629523463, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a code to find the last digit of a number.\ndef isTable(n):\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n     for i in range(n):\n        return map(str, range(1,i+1))\nThe above function has been written to display the magic square for a given 3X3 table.\ndef square():\n return map(lambda x: x**2, range(1"], [0.11007444017477831, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " calculates last digit of the entered number.\ndef min_Positive(L):\n    i = 1\n    for i in L :\n         i = i + 1 \n    return i\nThe above code returns the smallest positive integer not in the given list.\ndef merge_dictionaries(dict1, dict2): \n    res = {**dict1, **dict2} \n    return res \nThe above code is a function to mer"], [0.11970361754389479, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function calcuated using double negation which will output the last digit\ndef serial_Code(n) :\n    sum = 0 \n    for x in range(1, len(str(n)) + 1): \n        sum += calc(x) \n    return (sum) \nThe above code is a function that calculates the serial code of a given number\n\ndef first_Digit(n) :\n    return (n // 10"], [0.26834718864585394, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to check and return the last digit of a given number.\ndef rearrange_bigger_v2(n):\n   temp = n\n   nums = map(int, list(str(n)))\n   for i in range(-1,-len(nums)-1,-1):\n       if last_Digit(nums[i-1]) < last_Digit(nums[i]):\n           for j in range"], [0.2141249777307324, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python program to find the last digit of a number.\ndef swap(n): \n  \n    '''Implement Your Code Here\n    '''\n    n = list(n)\n    n[0], n[1] = n[1], n[0] \n    return \"\".join(n)\nThe above code is a python function which takes in a string and swaps the first and the second character of such string.\ndef"], [0.12976091403854464, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that's last digit (in base 10)\ndef penultimate(n) :\n    return n[::-2]\nThe code above is the last digit of series\ndef piglatin(s) :\n    s_split = s.split(' ')\n    translated_string = []\n    for item in s_split:\n        translated_string.append(item[1:] + item[0] +'ay') if len"], [0.2853665062729427, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function that is used to find the last digit of a given number, n is the given number.\n\ndef execute_commands(commands):\n    a = []\n    for i in commands:\n        i = i.split()         \n        if i[0] == \"insert\":\n            a.insert(int(i[1]),int(i[2]))\n        elif i[0] == \"print\":\n           "], [0.21795788902151106, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit in a given number.\ndef remove_nth_Char(Str, n) : \n      first = Str[:n]  \n      last = Str[n+1:]  \n      return first + last \nThe above code is a python function to delete any nth character from a string. Here n is a parameter that is taken as an input from the user.\ndef pattern(n) : \n"], [0.0774241564929285, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is an answer to the question 613 in Algorithms module 4(Advanced Computer Science), Carnegie Mellon University\n\ndef thousand_Prime(n) :\n    count += 1\n    a = [x**x for x in range(31)]\n    a[0] = 3\n    a[1] = 39\n    for x in range(2, 31):\n        y = ((3 * a[x-1]) % 1000000007)\n       "], [0.1167392685297368, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return last digit of the number.\ndef firstDigit(n) :\n    while n >= 10:\n        n = n / 10;\n    return int(n)\nThe above code is a function to return the first digit in a number.\ndef containsFiveDigit(x,t):\n    if (t>=sum(map(int,str(x)))):  #\n        return True\n    else :\n       "], [0.2084281760571552, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit count in a given number.\ndef base_Conversion(str1, b1, b2) :\n    n, k = 0, 1\n    for i in range(len(str1) - 1, -1, -1) :\n        if (str1[i] >= 'A') :\n            n += (ord(str1[i]) - 55) * k\n        else :\n           "], [0.2293529957268988, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit from a number.\ndef BinarySearch(A,key):\n    imin = 0\n    imax = len(A)\n    while imin < imax:\n        imid = imin + (imax - imin) // 2\n        if key < A[imid] :\n            imax = imid\n        else:\n            imin = imid + 1\n    if imin"], [0.1429314104391521, "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to return the last digit in decimal form.\ndef first_Digit(n) :\n    while n >= 10 :\n        n = n / 10\n    return int(n) \nThe above code is a python function to return the first digit.\ndef inorder(root) :\n    if root :\n        inorder(root.left)\n        print(root.data,end=\" \")\n        inorder(root"], [0.10409605633309979, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that takes in a string and returns the last digit as an int.\n\ndef get_Digits(st):\n  chars = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n  # forming an empty string word\n  words = st\n  # intilizing a null value\n  word = \"\"\n\n  for word in words:\n      if word in chars: continue"], [0.21238649403403054, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number. \ndef last_digit_sum(n) :\n    sum = 0\n    for i in range(1,n+1) :\n        n = n%10\n        sum = ((sum + n) % 10)\n    return sum\nThe above code is a function to find the last digit of the sum of first n numbers.\ndef combine_output(out_1, out_2"], [0.1748300022539762, "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number.\n\n# Strings in Python\ndef count_substring(string, sub_string):\n    #Initialization\n    n = len(string)- len(sub_string) + 1\n    #Condition check for the substring\n    for i in range(n):\n        flag = 0\n        for j in range(len(sub_string)):\n            if string[i+j]"], [0.1328651830013898, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to calculate the last digit.\n\ndef max_sum(C) :\n    csum = 0\n    max_sum = 0\n    for i in range(len(C)):\n        csum += C[i]\n        if (csum > max_sum):\n            max_sum = csum\n        elif (csum < 0):\n            csum = 0\n    return max_sum\nThe above code"], [0.18902855126587673, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that returns the last digit of a specified number.\ndef to_binary(num):\n    ans=0\n    pow=0\n    while(num):\n        ans+=num%2*pow\n        pow*=10\n        pow2*=2\n        num=num//2\nThe above code is a function to convert a specified integer into binary.\ndef second_largest(root):\n    def find_largest(root):"], [0.36280938410570385, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find last digit of a given number.\n\ndef renderWordCloud(tags):\n    stopwords = list(STOPWORDS) + [\"http\", \"https\", \"com\", \"wordpress\", \"www\", \"v2\", \"/\", \".html\"] + tags#https://stackoverflow.com/questions/19560140/adding-words-into-words-cloud-passed-through-a-list\n    word"], [0.29823140572671186, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\n\nclass ReversedSentence:\n    def __init__(self, sentence):\n        self.sentence = sentence\n        self.len = len(sentence)\n \n    def reversed_string(self):\n      return ''.join(reversed(self.sentence))\n \n    def reversed_words(self):\n        words = []\n        space = ['"], [0.2678935820318898, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find last digit of any integer number.'''"], [0.1636136980648942, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number. for example, last_Digit(1234) will return 4\n\ndef pairSum(arr, x):\n    pairs = []\n    for i in range(0, len(arr) - 1):\n      for j in range(0, len(arr) - 1):\n        if i == j:\n          continue\n        elif arr[i] + arr[j] == x:"], [0.07882278864301259, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that takes in an integer n, and re-arranges the first n elements of the given array so that all negative elements appear b\ny issorted(m, [0, 5, 10, 45, 50])\ndef shift_by_three(n):\n  n = n + (3 << 2) # n = n + (3 << 2) equals n = n * 8 + 3\n  print(n)\n  \ndef swap_"], [0.14182842219182829, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that returns the last digit of any number.\ndef swaps_permitted(string) :\n    counter = 0\n    swapped_string = string.lower()\n    swappable_first_characters = ['a', 'b', 'c']\n    swappable_last_characters = ['b', 'c', 'd']\n    while(counter <= 5):\n        if #Terminating condition:\n            break\n        else"], [0.14351941891484638, "def digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to print the last digit of an integer.\ndef absolute_Diff(n) :\n    return (abs(1000 - n) <= 100) or (abs(2000 - n) <= 100) \nThe above code is a python function to check if the absolute difference between in the given number and 1000 or 2000 is less than or equal to 100.\ndef test(x) :\n    if (x == 0) : \n        return 1"], [0.20083002328320126, "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\n\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\n\ndef last_Digit(n):\n    return ((n * ( (n * n ) % 10 )) % 10)\nThe above code is another approach to find the last digit of a number.\n\ndef extra_Digit(num) :\n    if (num < 0) :\n        num = - num \n    if (num < 10) :\n        return num\n    else"], [0.10861439389087321, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function which allows us to find a specific digit from the last of a number.\ndef get_last_tidy(n):\n    if n < 10:\n        return last_Digit(n)\n\t\t\n    for i in range(10, n + 1):        \n        m = lastDigit(i / 10)\n        n = lastDigit(i % 10)\n        if m > n and i > 9:\n"], [0.15288792979968588, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that returns the last digit of a number.\n\ndef missing_char(str, n): \n    return str[:n] + str[(n + 1):]\nThe above program is a function that deletes the nth character in a string.\nimport array as arr\ndef frequency_distribution(arr,count):\n    \"\"\"for i in arr:\n        if i not in ans:\n            ans[i]=1\n"], [0.21238649403403054, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find the last digit in a number.\ndef root_n(n, k) : \n    print(int((n ** (1 / k))))\n\n\n\nThe above code is a few python functions to print the square root^k(n) in simplified form.\nnum = input(\"Enter a number to convert :\")\nlang = int(input(\"Choose whether Decimal, Binary, Octal or Hexadecimal :\"))\n"], [0.23941670761275052, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of the given number.\ndef find_diag_nums(grid) :\n    k = len(grid[0]) - 1\n    res = []\n    for i in range(0, len(grid)) :\n        num = grid[i][0 + i]\n        res.append(num)\n        num = grid[i][k - i]\n        res.append(num)\n   "], [0.12239839501388858, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to check that the last digit of the given number is Zero\n\ndef squareOfSum(number) :\n    s = 0 #initializing sum\n    for i in range (1, number+1):\n        s = s + i\n    return s * s\nThe above code is a function to return the square of sum of  consecutive numbers\n\ndef starPerimeter(number) :\n    phi = (1+math.sqrt"], [0.1523244275729275, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number.\ndef fibonacci(n):\n    lst = [0, 1]\n    a, b = 0, 1\n    for i in range(2, n):\n        a, b = b, a + b\n        lst.append(b)\n    return lst\nThe above code is a function which shows the fibonacci sequence up to the given position in the argument.\n"], [0.2358340653087291, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find out the last digit of a given number.\ndef remove_X(givenString):\n  s = givenString\n  left = 0\n  right = 0\n  for i in range(0, len(s)):\n    if s[i] in ('x','X'):\n      left = i \n    elif s[i] != 'X':\n      right = i\n      break\n  return s[left"], [0.19362820528268887, "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " returns the last digit of a number. \ncumulative_sum(n)\ndef cumulative_sum(n):\n    l = len(str(n))\n    sum1 = 0\n    k = n\n    for j in range(0, l, 1):\n        sum1 = sum1 + int((k%10))\n        k = int(k/10)\n    print(sum1)\nThe above code is a function to find"], [0.12458046446249191, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function that takes in a integer and returns the last digit of that integer.\n    def middle_elem(k) :\n        temp = []\n        for i in range(len(k) - 1) :\n            this_element, next_element = k[i], k[i + 1]\n            x = (this_element + next_element) / 2\n            temp.append(x)\n        return temp\nThe above code"], [0.16566500531283243, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit of a number.\ndef rem_last_digit(n):\n    return ((n/10)%10) \nThe above code is a function to return the last digit of a number by removing the last digit.\ndef is_binary_list(listt):\n    n = len(listt)\n    if ((listt[n-1] == 0 and listt[n-2] == 1)"], [0.13122001304913344, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to to find the last Digit of the given number using % 10.\ndef sumOfDigits(N):\n    return (N % 10 + (N // 10) % 10 + N // 100)\nThe above code is a function to find the sum of the digits of the given number.\n# any_function is the local function which is being declared.\ndef your_function (A, B, C) : # This the BFS function"], [0.11091921572982108, "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to print the last digit in a number.\ndef check_divisibilities(n) :\n   for i in range(2,(n//2)+1) :\n      if n % i == 0 :\n         print (\"The given number {} is not a Prime number\".format(n))\n         break\n   else:\n      print (\"The given number {} is a Prime number\".format(n))       \nThe above code is a function"], [0.11834725001142479, "def sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to extract last digit of a number. \n\ndef inside_Outside(number): \n  inside = 0\n  outside = 0\n  for value in number:  \n    if value >= 0:\n      outside += value \n    else: \n        inside += value\n  return(-outside,inside)\nThe above code is a function to calculate negative and positive value of a list respectively and then return a tuple of overall neg value and pos"], [0.0961384773880679, "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return the last digit.\n\nMy solution for the problem is \ndef remove_repeated(tupl):\n  return tuple(set(tupl))  \nThe above code is a function to remove repeated elements from the given tuple.\nData.My Solution.py\nN, K = [int(x) for x in input().split()]\nN = N%K\nct = 0\nwhile(N != 0):\n   "], [0.13750388192425733, "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a python function to find last digit, type is not provided.\ndef primeNumber(n):\n  count = 0\n  i = 1\n  while (i < n):\n    if n % i == 0:\n      i += 1\n      count += 1\n    else:\n      i += 1\n  \n  if count == 1:\n    return 1\n  else:\n    return 0\nThe above code is a python function to check if"], [0.25973011741349206, "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\ndef isPalindrome(str):\n\tstr_Rev = \"\".join(reversed(str))\n\tif (str == str_Rev):\n\t\treturn True\n\telse:\n\t\treturn False\nThe above code is a function to check Palindrome.\ndef isSubSequence(str1, str2):\n\tm = len(str1)\n\tn"], [0.1471088154186788, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit from the sum of the cube of individual digit.\n\nrun_time == run_time % 60\nThe above code is to extract seconds from  user given minutes and hours.\ndef occurance(str , ch) :\n    count = 0\n    for c in str :\n        if c == ch:\n            count += 1\n    return count\nThe above code is to return the number of occurances of the character in"], [0.11975448269891838, "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to print last digit of the number. https://www.geeksforgeeks.org/find-last-digit-given-integer-n-2/\ndef findArmstrong(lower,upper):\n    for num in range(lower, upper + 1):\n        order = len(str(num))\n        sum = 0\n        temp = num\n        while temp > 0:\n           digit = temp % 10\n           sum += digit **"], [0.17615313032737864, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to print the innermost digit of a given number.\n\ndef LargestDigit(n):\n    # To get ASCII value of the last character in a string\n    large = 0\n    while(n > 0):\n      r = n % 10\n      if(large < r):\n        large = r\n      n = int(n / 10) \n    return large\nThe above code is a function to find the largest of"], [0.12416579527750034, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to return last digit of a number.\n'''\ndef prime_factorizations(n):\n    result = {}\n    start = 2\n    while n > 1 :\n        if n % start == 0 :\n            if start not in result.keys() :\n                result[start] = 1\n            result[start] = result[start] + 1\n            n = n / start\n        else :\n            start = start+1"], [0.26150654628501346, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a given number by modulus operation\ndef isthreeStraight2(nums):\n    q = []\n    for n in nums:\n        for t in range(len(q) - 1, -1, -1):\n            if abs(q[t] - n) == 1:\n                q[t] = n\n                if len(q) > 3:\n                    q.pop("], [0.2066181168510702, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function which finds the last digit of a number.\n\ndef sum_of_no(n, m) :           \n    sum_digit = last_Digit(n) + last_digit(m)                                                                                 \n    return sum_digit  \nThe above code is a function to find the sum of two numbers.\n\ndef length_1(l, b, h) : \n    return(2 * (l * b"], [0.3685753216673031, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\n\nclass Test(unittest.TestCase)\n    def setUp(self):\n        pass\ndef test_args(self):\n        self.assertEqual(args(111222, 54321), '{\"prices\": [1112.22, 543.21]}')\n        self.assertEqual(args(123456789, 4321321), '{\""], [0.1928739341071071, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef last_Digit(n) :\n    return (n % 10) \nThe above code", " is a function to find the last digit of a number.\ndef remainder(n) :\n    return n % 11\nThe above code is a function to find the remainder if a number is divided by 11.\ndef third_Digit(n) :\n    return (abs(100 - n) % 10)\nThe above code is a function to find the third digit of a number.\ndef sumOfDigits(n) :\n    sum = 0\n"]]}
