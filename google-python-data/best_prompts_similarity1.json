{"prompt": {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 475, "prompt": "Write a function to sort a dictionary by value.", "code": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter", "test_imports": [], "test_list": ["assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]", "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"]}, "queries": [[0.1382687140520549, 0.15625, 0.25652639166357594, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given dictionary or list in descending order.\n\n\ndef add2dictionary(dict,key,value):\nmy_dict={\n'name':'harish',\n'age':58\n}\na = my_dict[input(\"Enter a key\")]\nb = my_dict[input(\"Enter a value\")]\ndict.update(key=\"str\",value=\"int\")\n\nThe above code is a function to input"], [0.1033768061484035, 0.0975609756097561, 0.09239470690746589, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to convert dictionary to list of tuples sorted in descending order based on values.\nfrom array import array\ndef change_array(num_array, num):\n   alist = []\n   for letter in num_array:\n      alist.append(int(letter))\n      num = int(num)\n      alist.append(num)\n   final_array=array('i',alist)\nreturn final_array\nThe above"], [0.3594151754593914, 0.3333333333333333, 0.45026814465562653, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the dictionary.\n\n'''"], [0.08111055596638632, 0.05172413793103448, 0.07427866413434037, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python program to sort the given Counter using most_common() method\nAccoring to Google Style Guide :\n 1. All files should have a shebang #!/usr/bin/env python\n 2. Alphabetical import sorting\nWe will plot pie chart for lab 27,28,29 and item 17 qns.\n# Autograde cell - do not erase/delete\n# Here is my version\n\n# Here's the autocorrector for this cell\n"], [0.13134396940871365, 0.16666666666666666, 0.24342568863053535, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " function will sort a dictionary by its value.\n  \nfrom operator import itemgetter\ndef sort_tuple(input_tuple):\n  return (sorted(input_lst,key=itemgetter(1,0)))\nThe above program is a python function which will sort a list/tuple using a logic of first value from nested list also.\nfrom collections import namedtuple\ndef namedtuples(lst_of_tuples"], [0.11477351666949628, 0.1388888888888889, 0.24162153186291224, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the dictionary wrt to values in decreasing order.\nfrom operator import itemgetter\ndef sort_dict(dict1):\n x = sorted(dict1.items(), key=itemgetter(0))\n return x\nThe above code is a function to sort the dictionary wrt to keys in increasing order.\nfrom math import factorial\ndef factorial(n):\n return factorial(n)\nThe above code is a python function"], [0.08487649761370195, 0.06818181818181818, 0.09516869040062846, "def last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function which sorts the given dictionary based on value in decreasing order.\ndef A_count(str):\n count = 0\n for i in  str:\n     if i.lower()=='a':\n         count+=1\n return count\nThe above code is a function that returns the number of \"A\"s in the given string.\ndef compute(lists):\n l =sorted(lists,key=len)\n return l[0]\n"], [0.11242690681037187, 0.15, 0.13592613956399588, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the Counter by value.\n\nimport numpy as np                        \narr = ([1,2,3]) \nout = np.empty(len(arr)) \nfor i,elem in enumerate (arr):\n    out[i] = {elem:elem**2 for elem in [1,2,3]}\nprint(\"Output\", str(out))\nThe above output is an array and library error"], [0.13203584124408232, 0.11538461538461539, 0.1426576628736199, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a dictionary according to item value. \n*** Question 5***\n\n***Select animal***\n\nGiven a statement, if a word 'animal' is present in the statement, then create a tuple of the letters (character indexes) of the word animal, else return an empty list. Start and end of the word 'Animal' are -1.\nE.g. \nInput: The Yacht totally rocks!\nOutput: (9,"], [0.07768736519249937, 0.075, 0.09007240324755462, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function which sorts the passed dictionary element on the count values in decending order.\n\nGlobalVariable = \"This is Global Variable\"\n                   \ndef firstfunction():\n    return print(\"you are in first function!\"+GlobalVariable)\ndef secondfunction():\n   HereLocalVariable= \"This is local Variable\"\n   return print(\"you are in second function\"+GlobalVariable)\n   \nif __name__==\"__main__\":\n   "], [0.10925713613755343, 0.08333333333333333, 0.0821731470735504, "def Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the elements in a dict based on the count in a descending order.\nfrom functools import reduce\nfor result in [reduce(lambda a,b : a+b , xxx)]:\n              print(result)\nThe above code is to find the addition of all the elements in a list ''xxx''.\nfrom functools import reduce\nreduce( lambda x,y: x*y if x<10 else x+y"], [0.09228377611382983, 0.058823529411764705, 0.07080023367057689, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a program to find the most commonly occuring elements in a string.\n\ndef product_num(numbers):\n from functools import reduce\n product_num = reduce((lambda x, y: x * y), numbers)\n return product_num\nThe above code is a function to find the product of numbers in a list.\n\ndef x_square(n):\n return [i ** 2 for i in range(1, n + 1)]\n"], [0.09855648524364968, 0.06818181818181818, 0.07960938994009592, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes a Counter object and returns the same object but sorted.\n\nimport collections\ndef to_dict(str1): \n    d = {}\n    for x in str1:\n        d[x]=str1.count(x)\n    return dict(d)\nThe above code is a function to count the number of times each character appears in a string.\n"], [0.10001862921640092, 0.07692307692307693, 0.06370500431194609, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that returns a list of sorted elements from a given dictionary.\n\nx=[1,2,3,4,5,6,7,8,9,10]\ny=[11,12,13,14,15,16,17,18,19,20]\nnew_y=map(lambda val,new_val:val+new_val,x,y)\nprint(new_y)\nThe above code is a"], [0.34464293249933686, 0.3076923076923077, 0.36802320875611494, "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\n\ndef list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter in a dictionary.\n"], [0.09158186070038334, 0.09090909090909091, 0.16026657332197541, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to create a collection and to sort items in it.\n\ndef print_result(sort_generated_dict,fruits,desceding_order):\n for fruits in sort_generated_dict[:fruits]:\n    if desceding_order==1:\n        print(dict1[day])\n    else:\n       print(dict1[day])\nThe above programs print out value matching to condition.\n\nprint_result(sort"], [0.08015704244410785, 0.06818181818181818, 0.07223008459670532, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function using counter to return a sorted word count from a given list.\nfrom twisted.internet.task \\n\ndef The_triplet(int1,int2,int3):\n    list = [n for n in range(int1, int2) if n % int3 == 0]    \n    for x in list:\n        return([sum(x),sum(abs(x))])// return all triplets that sum up to"], [0.09855588554378095, 0.10416666666666667, 0.15033161362037553, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the dictionary with sequence of keys.\nfrom collections import defaultdict\ndef word_count(sentence):\n wordcnt=sentence\n count = defaultdict(lambda:0)\n for word in wordcnt:\n  count[word] += 1\n return count\nThe above code is a python function to count the words in the given string with default parameters as *zero*.\nThe counter() method returns a dictionary containing words as key"], [0.1037673727048195, 0.09302325581395349, 0.06795043459880318, "def Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python code to convert and sort a dictionary in descending order.\n\nclass help:\n  def __init__(self):\n    self.a=int(input(\"Enter a number:\"))\n  def sum(self):\n    print(self.a*self.a)\n\n\nFind the output of the below code: 1000 600 400 200 100 50 40 20 10\n\nimport re\nnumber=c\n\nnumber=(input(\"Enter number:\"))"], [0.14291552784964048, 0.10526315789473684, 0.13961971420936142, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a counter.\n\n# List Questions\ndef even_odd(list1):\n  even_counter = 0\n  odd_counter = 0\n  for n in list1:\n    if n % 2 == 0:\n      even_counter = even_counter + 1\n    else:\n      odd_counter = odd_counter + 1\n  return even_counter, odd_counter\nThe above code is a function to check even"], [0.15949851326137185, 0.1276595744680851, 0.24137360085385307, "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a dictionary by its values.\n\n\nScript using a List which shows how to multpily, subtract and add elements of a list of numbers. \nl = [1,2,3,2]\nprint('Multiply' , l, 'by 2:', [i * 2 for i in l])\nprint('Subtract 2 from each element', l, ':', [i - 2 for i in l])\n"], [0.12141235114391147, 0.09302325581395349, 0.13307710586959842, "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the dictionaries keys in a ascending order\ndef del_dict(dict1,key):\ndict1.pop(key)\nreturn x\nThe above code is a function to delet keys from the dictionaries.\n\ndef die()\n6\nimport random as r\nr.seed(10)\nres = r.randint(1,6)\nif (res == ):\n  print(\"winner\")\nelse:\n  print"], [0.08702189001836953, 0.10256410256410256, 0.12478671413170275, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to convert a given dictionary of words and counts into a sorted list of tuples: vocabulary.\n\ndef concatenate(list1):\n concatenate = \" \".join(list1)\n return concatenate\nThe above code is a python function to convert a list of strings into a single \"flat\" string.\n\ndef save_csv(dict_, csv_file_name, field_names=None):\n save_csv"], [0.09855648524364968, 0.06976744186046512, 0.11619060136572572, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find TOP N in a dictionary.\n\ndef read_file_to_json(_filename):\n with open(_filename, 'r') as f:\n     data = f.readlines()\n some_list = [ x[:-1] for x in data]\n new_dict= dict(x.split(':') for x in some_list)\n return new_dict\n\nThe above code is to read a file content into JSON"], [0.14867354844496639, 0.12121212121212122, 0.10033199066694988, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter.\n\ndef read_fastq(arg1):\n    with open(arg1, 'r') as file:\n# COUNT OCCURENCE OF SYMBOL \"N\"\n        '''for record in file:\n            symbols=\"\"\n            quantity=\"\"\n            if record.startswith(('A','C','T','G')):#<--Q1\n                print (record.count(\"N\"))"], [0.08184860158618872, 0.0851063829787234, 0.12278811432452917, "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\n\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a sort counter function that return each value in the counter object and sorts them in descending order.\ndef addition(dict2):\n    total = 0\n    for i in dict2:\n        total += dict2[i]\n    return total\nThe above code is a python program to add all the values in the dictionary. This is a function return the total sum of all numbers.\ndef multiplication(dict3):\n    product = 0\n    for i in"], [0.172829494718645, 0.11363636363636363, 0.17946418667978598, "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary based on their occurrences. ie. the most common elements will appear first and so on. \ndef array_rotate(arr,n):\n trans_arr = arr[n:]+arr[0:n]\n return trans_arr\nThe above code is a function to rotate an array left without using inbuilt function.\ndef remove_duplicate_in_array(arr):\n   l = len(arr)\n"], [0.09307079311794045, 0.11627906976744186, 0.15049923340186055, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to create a dictionary of word count of a given words by their uppercase or lowercase.\ndef maximum(arr,arr_size): \n    max = arr[0] \n  \n    for i in range(1, arr_size): \n        if arr[i] > max: \n            max = arr[i] \n    return max \nThe above code is a python function to find the maximum element from"], [0.08460583281124213, 0.05, 0.06953237282201871, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to count the most occuring character in a file.    \n\n# **Introduction:**\n# Python is a general purpose programming language. This means that we can use python for developing desktop applications, websites and for machine learning. Python can also be used to build databases. Python can be used for analyzing big data using data science libraries and can be used on a local machine too.\n# Python doesn\u2019t cost anything to install and use unlike some other programming languages"], [0.07625396072081346, 0.044444444444444446, 0.01668425770623566, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python program that sorts the counter using the most_common method of the Counter class of the collections module.\n\ndef replace_space(Str1):\n print(Str1.replace(\" \", \"%20\"))\nThe above code is a python program to replace the white space from a string with the characters %20.\n\ndef check_palin(Str1):\n print(Str1)\n Str1 = Str1.lower()\n temp_palin ="], [0.1963036584577278, 0.3333333333333333, 0.26050181704867925, "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\n\nimport sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the frequencies of the tuple sort by frequency.\n"], [0.13675100507844423, 0.11764705882352941, 0.08379818929414079, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort Counter() results.\ndef merge_dicts(p, n):\n keys_p = p.keys()\n keys_n = n.keys()\n keys_all = set(keys_p) | set(keys_n)\n dict2 = dict()\n for key in keys_all:\n  dict2[key] = p.get(key,0) + n.get(key,0)\n return dict2"], [0.1058120650202803, 0.12195121951219512, 0.1720004966828761, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to give all dictionary values with the same count in descending order.\nimport re\ndef sort_regex(string1):\n  str1 = string1.replace('[,\\'.;:]','')\n  str2 = re.split(r'[. ]*', str1)\n  return sorted(filter(None, str2), key=len) \nThe above code is a function to do a split and sort the given"], [0.13514178737182994, 0.11363636363636363, 0.1514362033642439, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a given dictionary (Counter type) in descending order.\n\"\"\"\n\"\"\"\ndef perfect(num):\n if num == 0:\n  return 0\n elif num == 1:\n  return 1\n else:\n  return (2 + 3 (num - 2))\n\nThe above code is a function to determine whether a number is a perfect number or not.\n\"\"\"\n\"\"\"\ndef sum_individual_digits(num):\n if"], [0.12554916315953074, 0.12195121951219512, 0.12504537964910997, "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\n\nimport re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the Counter object by comparing the values.\n\ndef copy_string(str):\n    return str+str\nThe above code is a python program to copy the string\n\ndef cursor_position(str1,p):\n    p += 1\n    CURSOR = chr(ord(str1[p - 1]) + 1)\n    if str1[p] is not CURSOR:\n        return str1"], [0.1149893957936998, 0.14705882352941177, 0.14757838883242544, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the given dictionary according to their Counter Values\ndef frequency_Heuristic(tup,values):\n    num,freq = 0,0\n    new_list=[]\n    i = 0\n    while i<num:\n        if values[i][0] == tup[0]:\n            if new_list==[]:\n                new_list.append(tup)\n            elif values[i][1"], [0.23450282904960892, 0.2, 0.2969362349752791, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " a python function to sort a dictionary by value.\nimport urllib.request as ur\ndef download_web_image(url):\nur.urlretrieve(url,'<file_name>.jpg')\nThe above code is a python function to download and save an image from web in your local hard disk.\nwork on generators\n"], [0.09514617857362266, 0.10810810810810811, 0.09186846173332752, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts and returns the counter dictionary by descending order of occurences of values.\nimport random\ndef bigsmall(n,low,high):\n return random.randint(low,high)\nThe above code is a function that get a random number\ndef chocolate_uneven(round,number,piece):\n  if piece%round==0:\n    return (\"un-even\")\n  else:\n    return (\"even\")\nThe"], [0.09093554813329228, 0.10526315789473684, 0.059635919672604204, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to produce the sorted dictionary based on the values from collections library.\ntext = \"I am but one, but two.\"\nltr=\".\"\ndef find_vowel(text):\n dict1=[]\n for i in range(0, text.count(ltr)):\n  print(text.rfind(ltr))\n  text = text[:text.rfind(ltr)]\n  print(text)\n"], [0.10132737191527395, 0.10526315789473684, 0.15336387133869175, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the elements on the basis of their counts.\n\n# end of assignment 1 solution\n# beginning of assignment 2 solution\nfrom collections import Counter\ndef birthdayCakeCandles(arr):\n    return(Counter(arr).most_common()[0])\nThe above code is a python function to return the elements with equal value\n"], [0.1109880111554, 0.10810810810810811, 0.13638891679683038, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return an ordered dictionary of key value pairs.\n\ndef get_diagonal(matrix):\n  newlist=[]\n  for i in range(len(matrix)):\n    newlist.append(matrix[i][i])\n  return(newlist)\nThe above function gives the diagonal values of a given matrix.\n\ndef calc_std_comp_height(profile):\n  import statistics\n  height=profile"], [0.09374911302053965, 0.07407407407407407, 0.10952636280075867, "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return the most frequent values in the given dictionary.\nfrom functools import reduce\n\ndef findMax(arr, n):\n    # Please add your code here\n    if len(arr) == 1:\n        return arr[0]\n    res = reduce(lambda x, y: x if x > y else y, arr)\n    return (res)\n\n#Initial Template for Python 3\n#contributed by RavinderSing"], [0.08336726646676286, 0.04878048780487805, 0.04465216293739058, "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function reverse all elements in a nested array\n\nfrom PIL import Image\nfrom collections import Counter\ndef count_pixels(image1):\n image2 = image.Image.open(image1) \n x = Counter(image2)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function that counts green pixels\nfrom collections import Counter\ndict1 = {'x':13, 'y':"], [0.10506228205895093, 0.12244897959183673, 0.21159833660337007, "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a sample python function to sort the given dictionary \nby value in ascending and descending order. The above code also returns the count of each element.\n\n\ndef sortvalues(x):\n    n = len(x)\n    for i in range(n):\n        for j in range(1, n-i):\n            if x[j-1] < x[j]: # swap x[i] with x[j]\n                x[j"], [0.08779347462855666, 0.10526315789473684, 0.056691244713786594, "def Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python code to arrange the keys in descending order.\nThe above code is a python code to arrange the keys in descending order.\n"], [0.08896766031068361, 0.06060606060606061, 0.03378670554106448, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function which sorts the counter items.\ni=1\nGCD=1\ndef is_gcd(a,b):\n  global i\n  global GCD\n  if a%b == 0:\n    GCD=GCD*a\n    i=i+1\n    b=a\n    d=1\n    return is_gcd(a*i,b)\n  elif a%b != 0:\n   "], [0.12009100929883687, 0.14634146341463414, 0.16940732327668662, "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the Counter object by the most frequent value.\ndef is_english_word(word):\n  return all('a' <= char <= 'z' for char in word)\nThe above code is a function to check for the whole english language.\ndef alphabate_position(word):\n\treturn sum(ord(c) - ord('a') + 1 for c in word.lower() if c.isalpha())\nThe"], [0.10325102133097626, 0.09523809523809523, 0.15671041865301727, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes a dictionary as a argument and outputs the key-pair values of the dictionary sorted from greatest to least.\n\ndef find_short(str1):\n    str2 = str1.split(' ')\n    len_list = []\n    for p in str2:\n       len_list.append(len(p))\n    shortest = min(len_list)\n    return shortest \nThe above code is a function to return"], [0.16957432343679874, 0.1388888888888889, 0.1877940659847524, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a counter by the largest element.\ndef removal_slash_n(text):\n  return(re.sub(\"\\\\n\",r\".\",text))\nThe above code is a function to regular expression remove \\n.\ndef word_count(s):\n  count = Counter(s.replace(\"\\n\", \" \").split(\" \"))\n  if '' in count.keys():\n    del count['']\n "], [0.08480896351231762, 0.09836065573770492, 0.14195003087534275, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is used to sort the dictionary based on their frequency of appearing.\nInside I have mentioned a python function to check if an number is prime or not by checking divisibilty till square root of itself for each number less than itself.\nreturn sum([4*sum(C_i) for i in range(n)])\nIf I have N integers, I will have at most N integers in Ci, which means that each integer is counted at most once. So\ndef"], [0.19169710084538744, 0.19047619047619047, 0.2432778964709415, "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a given key value pairs, in the descending order of value of all the itmes.\n\n\n    \n"], [0.09772131441973127, 0.14705882352941177, 0.11758040581133326, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is written to sort the dictionary and output as a list.\ndef check_sublist(list1,sublist):\n if(all(x in list1 for x in sublist)):\n  return True\n else:\n  return False\nThe above function checks if a sublist is present in a given list.\n"], [0.12554916315953074, 0.11627906976744186, 0.16338408838142798, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter by descending order.\nimport operator\ndef count_keys(data, N):\n numbers = set(data)  #create a set of keys present in data\n counts = [(x, data.count(x)) for x in data] #use counting\n counts.sort(key = operator.itemgetter(0)) #sort using key\n counts.sort(key = operator.itemgetter(1), reverse=True)"], [0.08077280508540315, 0.04081632653061224, 0.04279690936948748, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that returns the sorted counter object. Please note: most_common() gives us the element and its count in descending order.\ndef strip_vowels(text):\n    vowels = \"aeiou\"\n    \n    result = text\n    for x in vowels:\n        result = result.replace(x, \"\")\n    return result\nThe above code is a function that replace all vowels with blank spaces.\ndef book_"], [0.12808799660050077, 0.13513513513513514, 0.11563759631270959, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the elements of the given dictionary based on occurrence.\n\ndef find_common(a,b): \n    result = [] \n    h1 = collections.Counter(a) \n    h2 = collections.Counter(b) \n\n    for i in a: \n        if i in h1 and i in h2: \n            result.append(i) \n\n    print(result)\n\nThe above code"], [0.2934178560643325, 0.35714285714285715, 0.2720595904124083, "def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the dictionary on the basis of items.\n"], [0.1086103989104916, 0.10810810810810811, 0.08837075431868792, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the given input dict based on frequency.\n\n\n'''\n\n\n\n\nfrom collections import Counter\ndef analyse_word(user_word):\n    list_word = list(user_word)\n    count_word = (Counter(list_word))\n    # this is for Old script\n    #test_dict = dict(test_pair)reverse=\"True\"\n    sort_counter=Counter(count_word).most_"], [0.10843297470211424, 0.125, 0.2006038466665913, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the elements in a dictionary and if the same element occurs multiple times then it skips adding to the dictionary.\ndef append_Decorators(lst):  \n    final_list=[]\n    for i in lst:\n        final_list.append(i)  \n        final_list.append(i*2)\n    return final_list\n             \nThe above code is a python function to add two-e"], [0.16970881093749768, 0.15384615384615385, 0.07810103891179017, "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort counter.\n\nfor i in range(1,1001):\n\tTEXT = input().rstrip()\n\tif(TEXT[0:6]==\"erased\" or TEXT[0:6]==\"Erased\" or TEXT[0:6]==\"recede\" or TEXT[0:6]==\"Recede\" ):\n\t\tprint(TEXT[6:])\n\telse:\n\t\tprint("], [0.14936021670275607, 0.2, 0.22103958702395468, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given dictionary based on its values\ndef add_empty_dict(string1):\n  ch=string1.split()\n  add_dist=list(range(1,len(ch)+1))\n  new_dict=dict(zip(ch,add_dist))\n  return new_dict\nThe above code is a function to make a dictionary from the given string by adding the values.\n"], [0.09449012692933281, 0.12903225806451613, 0.21003724115385963, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function using counter to sort the dictionary.\n\ndef second_large(dict1):\n    a=sorted(dict1)\n    return a[-2]\nThe above code is a python function to find the second largest number in a list.\n\ndef second_large(dict1):\n    Y=list(dict1)\n    Y.sort()\n    return Y[-2]\nThe above code is a python function to"], [0.1651273375411745, 0.1282051282051282, 0.19030951885728137, "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary using Counter function.\nit = iter('abcde')\nprint(it)\nThe above code is to iterate the string characters.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\nfrom collections import Counter\ndef sort_counter("], [0.09968236924085182, 0.10638297872340426, 0.14122217083632727, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts a dictionary by descending order.\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef plotting(x,y):\n\tplt.plot(x,y)\n\tplt.show()\n\nThe above code is a function that is supposed to be a line plot of y versus x. However there is something wrong.\n\nIn Problem 2, a library is imported to create legends in a histogram as"], [0.08831932374412547, 0.05454545454545454, 0.09439986135295997, "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\n\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the most common elements and their counts in a counter.\n\n# Python 3 program to find how many times the 2nd string occurs in the first string\n\ndef check(string):\n listen = set()\n for i in string:\n    if i in listen:\n        return True\n    else:\n        listen.add(i)\n return False\nThe above code is a function to check existence of a particular substring from a given string"], [0.08290184830055003, 0.07142857142857142, 0.17028020383157, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is function which takes a dictionary as input and returns the sorted key,value pair of Counter class  as tuple.\n\nYou don't have to write a class (Although you can if you want). \nConsider this to be a very basic challenge to code on your own!\n\t\nValid scopes:\n\tr:user-read\tThe user can read any of their saved tracks and \n\ttheir now playing status.\n\tw:user-read-recent"], [0, 0.0, 0.018079645721008886, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " returns the key value pairs of all keys in descending order based on their values.\nfrom collections import Counter\ndef longwords(wordlist, length):\n s_wordlist=Counter(x for x in wordlist if len(x)>length)\n return s_wordlist\nThe above code extracts the words that have length more than 30 from the input list of words.\n\nfrom collections import Counter\ndef start(items):\n  return Counter([word for word"], [0.07824810874311128, 0.08108108108108109, 0.04426617091801172, "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\n\ndef check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is  to return the Pairs with count greater than 1 from the input dictionary\n'''\nx = 25\ndef my_function():\n x = 50\n return x\n#print (x)\n#print (my_function())\nprint (x)\nprint (my_function())\na = 'Hello World'\ndef my_function(a):\n print(a)\na='Fantastic'\nmy_function(a)\nprint ("], [0.07918725283941637, 0.046511627906976744, 0.04705244253308373, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " sorts a dictionary.\n\ndef count_strings(arr):\n  count=0\n  \n  for i in range(0, len(arr)):\n    if len(arr[i]) > 2 and arr[i][0]==arr[i][-1]:\n        count+=1\n  return count\nThe above function counts the number of strings with more than two characters in a given array of strings.\n\ndef mat_sum_even("], [0.08645617278407866, 0.07692307692307693, 0.04799657507033717, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to return the asc sorting of the counter list(which is created from the given elements).\n\ndef seperate_ints_floats(ls, type):\n from math import floor as fl\n res=[]\n if(type==\"int\"):\n  for i in ls:\n   if(i%2==0):\n    res.append(i)\n  return res\n elif(type==\"float\"):\n  for"], [0.14440969956895452, 0.16129032258064516, 0.17782650084285934, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " has a function to list keys with value.\ndef sort_tuple(c):\n t=tuple(c)\n sort_tuple=sorted(t)\n print(sort_tuple)\nThe above code is a python program to sort a tuple's value.\nimport numpy as np\ndef sorting_two_dimensional_array_index(mat): \n    matrix=np.matrix(mat) \n    sorted=np."], [0.10378931469315493, 0.11428571428571428, 0.1917705802424137, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to arrange a dictionary in an alphabetical order.\ndict1 = {\"x\": \"1\", \"y\": \"2\", \"z\": \"3\"}\ndict2 = {\"a\": \"20\", \"b\": \"10\", \"c\": \"30\"}\na=sort_counter(dict1)\nb=sort_counter(dict2)\nprint(\"Dictionary 1:\",a)\nprint(\"Dictionary 2:\",b)\n"], [0.13639109695355905, 0.13513513513513514, 0.15882882682087332, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given dictionary based on the values in descending order.\nfrom collections import defaultdict\nclass Test(object):\n    \n    \n    \n    \n    \n    \n    \n\n    \n    \n    \n    def __init__(self):\n        \"\"\"Create a mapping from each word to all the words which follows it\"\"\"\n        self.suffix_map = defaultdict(list)\n  \n \n      \n\n    \n    \n"], [0.08248651536349415, 0.07894736842105263, 0.08920811316140323, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is using \"Counter\" from collections standard library to input a dictionary, sort it based on their occurences and return the sorted result.\n\n#http://www.geeksforgeeks.org/args-kwargs-python/\na.Fixed number of positional arguments\nvowel=['a','e','i','o','u']\nvowel.reverse()\nprint(vowel)\na)args\nvowel=['a','"], [0.08136941017228241, 0.057692307692307696, 0.05574040078424561, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is sorting a dictionary items in descending order based on their second elements of the key-value pair.\n\nx= \"abcd\"\nprint(len(set(x)))\nfor i in set(x):\n print(x.count(i))\nThe above code is to find out the order of a character in an alphabetically sorted string.\nfind the group of the largest set of integers with the same number of decimal places.\nimport re\nprint(max"], [0.09043231014293467, 0.1388888888888889, 0.10873008614672725, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\nfrom copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that returns the sorted counter.\norder = sorted()\n  \ndef sort_tuple(tuplex): \n      \n    # get list of tuples of two element each \n    res = map(lambda x: (x[1], x), tuplex) \n  \n    # sort by values \n    res = sorted(res) \n  \n    # map to get tuples\n    res = map(lambda"], [0.16462199874634945, 0.1282051282051282, 0.1299163254543304, "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a counter given by the user.\nsorted(iterable, *, key=None, reverse=False)\nThis function does not mutate the iterable, instead returns a new sorted list from the items in iterable.\n\ndef zipdf(df1, df2,onkey):\n    # result = dict(zip(df1[onkey],df2[onkey]))\n    result=df1.merge"], [0.08754074052102603, 0.10344827586206896, 0.059383798145019956, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is used to sort the keys of a given dictionary.\nfrom collections import defaultdict\nfrom collections import Counter\nfrom collections import OrderedDict\nfrom operator import itemgetter\nfrom operator import itemgetter\n\ndef Ordered_list(list2,dict1):\n return ((OrderedDict(sorted(dict1.items()))))\ndef sorted_dictionary(dict1):\n    return sorted(dict1,key=itemgetter("], [0.09158934120384592, 0.11627906976744186, 0.19823667458419747, "import re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to count the frequency of each item in a dictionary, convert it into a nested array and sort it based on the number of occurrances.\nfirst_tuple = (1, 2)\nprint(first_tuple)\n\ndictionary = {\"skills\": [\".net\", \"react\", \"c#\", \"javascript\", \"c++\", \"python\"]}\nskills = dictionary[\"skills\"]\nskills.sort(key"], [0.10758554979430339, 0.12121212121212122, 0.13013282684334046, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the Counter object.\nimport random\ndef choose_random(alist):\n    random_index = random.randint(0,len(alist)-1)\n    random_choice = alist[random_index]\n    return random_choice\nThe above code is a python function to choose a random item from a list.\ndef is_empty(the_list):\n    if len(the_list)==0:\n"], [0.10270612096144921, 0.125, 0.09187063370361928, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function which sorts a dictionary according to frequency count.\n\ndef create_list(list_no):\n    list_odd = [i for i in range(1,20,2)]\n    list_even = [i for i in range(2,20,2)]\n    new_list = list_odd[:int(list_no) - 1] + list_even[:int(list_no)]\n    print(new_"], [0.10843297470211424, 0.1282051282051282, 0.15745088856846262, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts a given dictionary by keys or by values.\ndef symbol_counter(filename, symbol):\n f=open(filename)\n data=f.read()\n occurence=data.count(symbol)\n f.close()\n return occurence\nThe above code is a function to find the occurences of a given symbol in a given text file.\ndef specific_lines(filename,a):\n ignore = a\n with"], [0.08274218733783832, 0.07692307692307693, 0.06990863833894316, "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " will sort the dictionary.\ndef remove_duplicate_with_order(list1):\n new_list = []\n for num in list1:\n  if num not in new_list:\n   new_list.append(num)\n return new_list\nThe above code is a fucntion to remove duplicates in a list.\nimport numpy as np\ndef formation(list1):\n array=np.array(list1)"], [0.09400503121280325, 0.1276595744680851, 0.13893781893030904, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes a dictionary and returns the dictionary sorted by value.\nstack=list()    # creates a stack\n            stack.insert(i,key)        #  insert the keys in to the stack at a particular index \n            if len(stack) > k:         # check if the length of the stask is greater than k or not\n                value1 = stack.pop()  # pops the last value from the stack \n            sorted_"], [0.10179817720073304, 0.08695652173913043, 0.1444805297730894, "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to create a dictionary from the given list\nimport ast,sys              \ndef sum_dict_numbers(dict1):\n    add = 0\n    for i in dict1:\n      if type(i) == int:\n        add+=i\n    return add\nThe above code is a function that takes dictionary as an argument and sums all the numbers in the keys of the dictionary.\n"], [0.08476259105344597, 0.06976744186046512, 0.07732526503531287, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts a dictionary into ascending order.\nfrom collections import Counter\ndef count_letters(string1):\n c = Counter(string1)\n return c.most_common()\nThe above code is a function that counts each letter in a string.\nfrom collections import Counter\ndef count_dict(lists):\n Counter(dict(lists))\nThe above code is a function that counts the number of times a key occurs in a list of lists.\n"], [0.16013207509898383, 0.125, 0.20559005546271397, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a given collection of elements by their frequency of occurence, keep the sorting in accending order.\nfrom collections import OrderedDict\ndef key_value_list(dict1):\n\tdict_ordered=orddict()\n\tfor key, value in dict1.items():\n\t\tdict_ordered[key]=value\n\nKeyvalue_list=dict_ordered.items()\nreturn list\nThe above code is a function"], [0.15962249898813585, 0.16, 0.08242477721955568, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter in the descending order.\n\ndef find_duplicate(list_1):\n  count_dict=Counter(list_1)\n  remove_duplicate=[remove_list_duplicates(a) for a in list_1]\n  res_counter=[sort_counter(b) for b in remove_duplicate]\n  for i in range(len(res_counter)):\n  "], [0.07652976882648045, 0.06, 0.03884181647351095, "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that takes in any dictionary and gives the string of tuple in which the elements are sorted on the basis of count of elements.\nimport re\na = re.findall('[0-9]', str(789))\nb = [int(d) for d in str(a)]\n\nThe Code takes in a string of numbers with anything else and then separates the actual numbers ie: 123=>['1','2','3'] \nfinal ="], [0.10566001655636421, 0.10526315789473684, 0.12478671413170273, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return elements of a dictionary in sorted order.\n\ndef group_by_owners(files):\n    owner=set(files.values())\n    a={o:[] for o in owner}\n    for i,j in files.items():\n        a[j]+=i,\n    return a\nThe above code is a function that returns a group of keys with common values in a dictionary.\n\ndir\ndir(str)\n"], [0.07925970455357637, 0.04, 0.017576361034777496, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " converts a dictionary data type into a list of tuples where the element at first index shows the frequency and the second one shows the element.\ndef concatenate_list_data(list):\n    result= ''\n    for element in list:\n        result += str(element)\n    return result\nThe above code takes a list as input and converts it into a string.\n\ndef separate_letters(word):\n    return [char for char in word]"], [0.13291845536923663, 0.10526315789473684, 0.1345581320407932, "def all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a counter object in desecnding ordesr based on the count.\nfollowing function call returns:\n(['a'], ('a', 2.0))\n('y', 2)\n(['a'], ('c', 2.0))\n('h', 2)\n('z', 5)\nfrom collections import defaultdict\nnum= defaultdict(int)\nnum['a'],num['b'],num"], [0.1086103989104916, 0.10810810810810811, 0.11166515662121432, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is used to sort a given dictionary based on the most common frequency.\ninventors = {'A':18, 'B':20, 'C':15, 'D':17, 'E':9, 'F':5}\n    \ninventors = {'A': 18, 'B': 20, 'C': 15, 'D': 17, 'E': 9, 'F':5}\ndef most_op_inventors(in"], [0.13289430692657903, 0.11428571428571428, 0.07926646463854341, "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the tuple in descending order.\n\ndef find_uncommon_dict(dict1, dict2):\n dict3 = dict1\n dict5 = dict2\n dict4 = dict3.stdict1ipitems() > dict5.items()\n x = list(dict4.values())\n if len(x) == len(dict1.keys()):\n  return dict1\n elif len(x) == len(dict"], [0.13514178737182994, 0.10204081632653061, 0.22609743851536263, "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a given dictionary on the basis of value in descending order.\ndef replace_maximum(value):\n   return max(list(map(int, value.split(' '))))\nThe above code is a function to replace the nth occurance in a list with max elements. In this question, limit is set as 5.\ndef extract_not_divisible(number):\n return [x for x in range(number) if x % 7"], [0.2584198627722417, 0.3125, 0.3359120828681488, "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the dictionary based on the value in descending order.\n\n"], [0.14569448536614243, 0.15789473684210525, 0.15957089969542304, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given dictionary by occurences.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nDict =  {'a': 400, 'zoo': 200, 'baa': 1000, 'argh':199,'baaa':300 }\nsort_counter(Dict) \nThe above code will"], [0.12098141469819289, 0.12121212121212122, 0.09799938570001895, "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to convert a dictionary into (sorted) list of tuples.\ndef fibonacci_num(n):\n\treturn len( [x for x in fibonacci(n)] )\n\t\ndef fibonacci_num(n):\n    return len(list(itertools.takewhile(lambda y: y <= n, fibonacci_seq())))\ndef decimal_to_binary(num):\n    str=\"01"], [0.16337819876771076, 0.13513513513513514, 0.26213101220015866, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\ndef count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary using Counter.\ndef reverse_element_in_list(list_reverse): \n    return list_reverse[::-1]\nThe above function is a function to reverse a list.\ndef find_factors(x): \n    return list(i for i in range(1, x + 1) if x % i == 0)\nThe above function is a function to find the factors of a number.\ndef"], [0.11506417457703197, 0.11428571428571428, 0.11949769163862506, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the frequency of all the elements in a given list in descending order of its frequency.\ndef sort_list(list1):\n    sortlist=list1.sort()\n    return sortlist\nThe above code is a function to sort the elements of a given list and return it.\ndef create_dummy(list_):\n dummyvar=pd.get_dummies(list_)\n return dummyvar\nThe above code is a"], [0.35506871286358777, 0.28, 0.21159833660337007, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\ndef min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary by value.\n\ndef histogram(lst_x,int1):\n result1= []\n result2= []\n for n in sorted(lst_x):\n  q= lst_x.count(n)\n  result1.append((n,q))\n  result2.append(result1)\n if(int1==1):\n  print(dict(result2))\n if("], [0.09514617857362266, 0.1, 0.07867727883614375, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python code to sort the elements of a dictionary depending on the count of its occurence.\nclass Node:\n  \n  def __init__(self, key):\n    self.data = key\n    self.left = None\n    self.right = None\n\ndef printLevelOrder(root):\n    h = height(root)\n    for i in range(1, h+1):\n        printGivenLevel(root, i)"], [0.07257127474932171, 0.025, 0.01730698846591851, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " returns the most common elements of the Counter object.\ndef count_str(str1):\n  dict1={}\n  for ind in str1:\n    dict1[ind]=dict1.get(ind,0)+1\n  return dict1\nThe above code returns the frequency of each character in the string argument in the form of a dictionary.\ndef is_pangram(str1):\n  str1 = (list(str1))"], [0.07707762024487448, 0.04285714285714286, 0.08674844621417128, "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\n\ndef Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a way to return keys of a dictionary sorted on their respective values.\nYou can install and import just like any other module in python.\nNim Compatibility Game\n\nPlayers play alternate turns and are given a number of chips based on the number that has to be equal to the power of the one i.e 2^n , n being the number of chips to distribute.\nThe highest exponent does not always mean the player will lose.\n\nLet us take an example of"], [0.1229081662392143, 0.1, 0.14649351182365034, "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to print most common value in a dictionary.\nfrom collections import defaultdict\nlist1=[1,2,3,4,5,6,7,8,9,9,2,2,2,2]\nimport re\ndef group_list(list1):\n   group_list= re.findall(r'(\\d)(?=\\b)', \" \".join(map(str, list1)))\n   return group"], [0.14147947206282058, 0.0975609756097561, 0.13971273792395236, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a counter dictionary.\nfrom collections import Counter\ndef cal_ratio(l1,l2):\n    c = Counter(x+y for x in l1 for y in l2)\n    return c\nThe above code is a function to calculate character ratios of two given lists.\nfrom fractions import Fraction\nfrom collections import Counter\ndef cal_appeartimes(l1,l2):\n    c1=dict"], [0.08264198963436381, 0.05405405405405406, 0.08340057662844877, "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that returns the most common items within a given string/dictionary/list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function that returns the most common items within a given string/dictionary/list.\nfrom collections import defaultdict\ndict_container = defaultdict(list)\nlist_"], [0.12711243799740304, 0.17647058823529413, 0.23057321664008168, "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the keys of a given dictionary in descending order.\ndef unique(numbers):\n return (numbers.split(','))\n\n\nthe above code is a function to make a list of the given values by the user(seperated by a comma) as an argument.\ndef letter_histogram(some_thang):\n  empty_dict={}\n  empty_list=[]\n  empty_dict={}\n  x"], [0.12390425199997274, 0.11904761904761904, 0.1168655843583527, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the dictionary in descending order and displaying key, value pairs.\n\n# The distance matrix code\nimport numpy as np\n#for i, p in tqdm(enumerate(points), 'Calculating the distances'):\nx = np.zeros((len(points), len(points)))\nfor i in range(len(points)):\n for j in range(len(points)):\n   x[i,"], [0.10002182534493241, 0.07142857142857142, 0.06776876902862579, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\ndef extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that returns a sorted string list.\nfrom collections import Counter\ndef check_anagrams(str1,str2):\n dict1 = dict(Counter(str1))\n dict2 = dict(Counter(str2))\n return dict1 == dict2\nThe above code is a function to find if two strings are anagrams or not.\ndef extraction(str):\n b=str[str.index(\"is\") + 2:str."], [0, 0.0, 0.0, "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " sorts the given Counter().\ndef min_index(arr,arr_len):\n    if arr_len <= 0:\n        return \"No array element\"\n    min = arr[0]\n    for i in range(1, arr_len):\n        if arr[i] < min:\n            min = arr[i]\n    return min_index\nThe above code returns the min index element from the given list in array.\n"], [0.09386210803746556, 0.10256410256410256, 0.12004960757566902, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts a dictionary based on the value.\n\ndef merge_dict(dict1,dict2):\n merge_dict={**dict1,**dict2}\n    return merge_dict\nThe above code is a function that merges two dictionaries and returns a new dictionary.\n\nimport numpy as np\ndef is_integer_array(list_):\n    return np.all(list_)\nThe above code checks if every element"], [0.08457451411127818, 0.07692307692307693, 0.12105217414149949, "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is function to find out the sorted dictionary based on the key and Function with description (drive code is attached)\n\ndef sum_all_items(list1,list2,list3):\n  list1.extend(list2)\n  list1.extend(list3)\n  return sum(list1)\nThe above code is function to find the sum of all items in the given list.\ndef multiply_list_2(list1,"], [0.11963330187207767, 0.12195121951219512, 0.22635183872128903, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort any given dictionary \u2013 \u201cdict1\u201d based on the dictionary values\nList Comprehension\ndef sort_using_third_element(List):\n    return List.sort(reverse = True, key = lambda x: x[2])\nThe above code is a python function to sort a given list based on \u201cthird\u201d element.\ndef print_dictionary_value(dict1):\n    for item in dict1"], [0.1510228275455333, 0.09523809523809523, 0.186016091937468, "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a given dict based on key value pair.\n\ndef nth(arr, r):\n    x=sorted(set(arr))\n    print(x)\n    try:\n        return x[r-1]\n    except:\n        return None\nThe above code is a function to find the nth smallest number from a non empty list.\n\ndef num(p, q):\n    count=0\n    for"], [0.14223058433309005, 0.16216216216216217, 0.21046109568586746, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " converts a dictionary into list of tuples by their values in descending order.\nfrom collections import defaultdict\ndef sort_by_keys(my_dict):\n return (sorted(my_dict.items(), key=lambda x: x[0]))\nThe above code is a function to sort dictionary by keys.\nfrom collections import OrderedDict\n\ndef sorted_dictionary(dict):\n    return (sorted(dict.items()))\n"], [0.07984733261465657, 0.06818181818181818, 0.10450237189953251, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that sorts the Counter dictionary.\n\ndef string_counter(u_items):\n    x=u_items\n    count=0\n    for y in x:\n        if len(y)>2:\n            if y[0]==y[-1]:\n                count+=1\n    return count\nThe above code is a python function that counts the number of string in a given list whose first alphabet equals to last alphabet.\n"], [0.23450282904960892, 0.20588235294117646, 0.16489987378353857, "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\n\ndef check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary by its value.\n\ndef bubble_sort(arr):\n    fun_code = \"\"\"\ndef bubble_sort(arr):\n  # remove pass and enter your code here\n  n = len(arr)\n  for i in range(n):\n    for j in range(0,n-1):\n      if arr[j]>arr[j+1]:\n        arr[j],arr[j+"], [0.09917765073738861, 0.1, 0.11931134436575658, "def digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the word in a given string and the counts of each word in an ascending order.\n\ndef identity_dict(input_dict):\n    \n    \n    for i in range(len(input_dict)):\n        \n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\nThe above code is a python function to"], [0.359294566273877, 0.3125, 0.3006975149263551, "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\n\ndef interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a counter and then return the sorted value. '''"], [0.12390425199997274, 0.1, 0.09695801327248553, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort given dict in descending order.\n\nhdr[2]=b'HTTP/1.1'\nTypeError:(argument must be a bytes-like object or ASCII string, not the bytes type)\naccording to the given requirements, code is given below\nhdr[1]=b'Verison'\nhdr[2]=b'HTTP/1.0'\nCode is:\nfrom collections import Counter\nfrom collections import OrderedD"], [0, 0.0, 0.0, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\ndef check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " sorts the keys of Counter.\nSet is an unordered collection of data type that is iterable, mutable and has no duplicate elements. ... Set is an unordered collection of data type that is iterable, mutable and has no duplicate elements.\nfrom collections import Counter\nx = \"aaaaaabaaaaaaabaaaaeqerqewrrqwewe\"\ny = Counter(x)\nprint(y)\nimport collections\ndd = collections."], [0.12554916315953074, 0.13157894736842105, 0.15385006147065058, "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given dictionary.\n\ndef test_key_diff(dict1, dict2):\n  diff=dict()\n  for key1 in dict1:\n    if key1 not in dict2:\n     diff[key1]= dict1[key1]\n  return diff\nThe above code is a function to find the dictionary keys having diff keys present.\ndef intersection(dict1, dict2):\n  dict3 = dict"], [0.10211426613692279, 0.0967741935483871, 0.05160958850284378, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that creates a simple count from a dictionary and then sorts it.\nimport math\ndef round_half(a): \n  return round(a, 1)\nimport math\ndef rounddown(n,k):\n return float(math.floor(n*10**k+.5))/10**k\nk = math.floor(a*(10**k)+0.5)/(10**k) \nroundup(a,"], [0.0869849640528755, 0.05405405405405406, 0.071552667038262, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a counter program that converts a dictionary into a list of (element, count) tuples in a decreasing order of their counts.\ndef dictionary(keys, values):\n    dictionary={}\n    if len(keys)>len(values):\n        for j in range(len(values)):\n            dictionary[keys[j]]=values[j]\n    elif len(values)>len(keys):\n        for j in range(len("], [0.09156294021041946, 0.125, 0.1935721578337253, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python program to sort the results of a Counter object by highest to lowest number of occurrences of a letter or word in a string.\ndef sort_value(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return list(sort_counter)\nThe above code is a python program to sort the results of dictionary by values.\ndef check_common_item(list1, list2):\n    result ="], [0.08884932053270035, 0.10256410256410256, 0.06990863833894316, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " returns a list of tuples of (word,word_count) to end users,but a dictionary works '{word:word_count}'\nsum([x**x for x in range(1,1000)]);\ndef sumPowers(n):\n    return sum([x**x for x in range(1,n+1)])\nThe above code is a python function that returns of sum of exponential of the number upto a given number.\n"], [0.22260812701150356, 0.29411764705882354, 0.2622192611494588, "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the dictionary in the order of highest to lowest frequency of items.\n"], [0.12943598499852646, 0.11428571428571428, 0.17338544698738176, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort Counter object.\n\n\ni='*****'\nprint(i[::-1])\n#Code to find odd or even\ni=int(input('Enter the Value to check '))\nif i%2==0:\n  print('The  No '+str(i) +' Is Even');\nelse:\n  print('The  No '+str(i) +' Is odd ');\n#Assigment 2"], [0.10558611944776874, 0.1111111111111111, 0.12563209126997, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the Counter in collections for a string and sort in descending order.\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef blts(xcoo,ycoo):\n  plt.plot(xcoo,ycoo,linewidth=5)\n  plt.show()\n  return\nThe above code is a function to plot a line in matplotlib."], [0.09327786274919436, 0.06451612903225806, 0.054212820701216656, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts the collection of word frequency in a given dictionary.\ndef multiply_vectors(temp_list): \n  length=len(temp_list)\n  origin=[0]*length\n  temp_result=1\n  for i in temp_list:\n    c=[i*i for i in temp_list]\n    temp_result=(sum(c))\n    finalresult=temp_result**0.5\n "], [0.0972094475893326, 0.06976744186046512, 0.10400407749149643, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to print the dict1 in descending order.\nnum = list(0)\ndef is_isogram(num2):\n  x = len(rez)\n  if(x >= 1):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the num2 is palindromic or not\ndef making_dict_numb(num2):\n  square = {}\n  result = []"], [0.09093554813329228, 0.11428571428571428, 0.10991240312556133, "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to sort the dictionary according to value.\nfrom contextlib import ContextDecorator\nfrom django.conf import settings\nfrom django.template.context import Context, RequestContext\nfrom django.utils.datastructures import SortedDict\ndef dict_from_context(context):\n context_dict = {}\n if isinstance(context, Context):\n  for d in reversed(context.dicts):\n   context_dict.update"], [0.11701464008077177, 0.1, 0.07342739814398899, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a piece of python code to sort a dictionary in DESC order.\ndef Fibo(n):\n  if n == 0:\n       return 0\n  elif n == 1:\n       return 1\n  else:\n       return Fibo(n-1)+Fibo(n-2)\nreturns the nth number of a sequence of numbers in which each number \nis the sum of the two preceding numbers\n"], [0.07430726090092649, 0.0425531914893617, 0.022840376453765267, "def split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " iterates all items in the counter and sorts the items with count of occurrences from highest to lowest.\n\nfrom collections import Counter\ndef most_common(list1):\n x = Counter(list1)\n return x.most_common()[0][0]\nThe above code returns the top most element in a list after counting.\n\ndef rules(nums,q):\n  \n  ans = []\n  while(q>0):\n    x"], [0.12511129961586517, 0.10344827586206896, 0.06697297670347804, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to convert a counter object into a list.\nShopping List2\nimport operator,functools\ndef most_frequent(list1):\n r=functools.reduce(operator.add,list1)\n x=sorted(r)\n print(\"Sorted string:\",x)\n lower_freqWord,wordFrequency=x[0],1\n for i in range(len(x)):\n   \n"], [0.14275810950894874, 0.14705882352941177, 0.1805559715882484, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a dictionary based on the Frequency of its values.\n\ndef concatenate_dict(dict1):\n result = {**dict1}\n return result\nThe above code is a python function to concatenate N number of dictionaries.\n\ndef concatenate_list(list1,list2):\n result = list1+list2\n return result\nThe above code is a python function to concatenate two lists.\n"], [0.17884432021398783, 0.19444444444444445, 0.23741241237460264, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a given dictionary by value.\nimport string\ndef count_letters(word1):\n no = dict.fromkeys(string.ascii_lowercase,0)\n no1=Counter(word1)\n return no.keys()\nThe above code is a function to count the letters of a string.\n from collections import Counter\ndef prime_factor(num2):\n if num2 == 2:\n   return num2\n"], [0.1005812378256181, 0.08888888888888889, 0.10292884001534572, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return a list of tuples with most occurring elements first.\n\n# Exceptions\n num1 = 5\n try:\n  num2 = int(input('Enter a number:'))\n  ans = num1/num2\n  print(ans)\n except ZeroDivisionError:\n  print('Division by zero error')\n except ValueError:\n  print('Value error')\n print('This statement may or may not print depending on"], [0.0763179591908933, 0.046511627906976744, 0.03284816512686988, "def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is  a python function that sorts the counter based on key + frequency\n\ndef super_checker(l1,f1):\n    count=0\n    for i in l1:\n        \nimport torch\ndef rotate(t, n):\n    return t[n:] + t[:n]\nx = torch.Tensor([2, 3, 4, 9, 5])\nprint(rotate(x, 2))\nblocklist ="], [0.10936665046967033, 0.1388888888888889, 0.2608279705774822, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the input dictionary based on its values\ndef count_occurances(dict1,value):\n return dict1.get(value)\ndef max_dict_value(dict1):\n max_tuple = ((max_value, dict1.get(max_value)))\n return max_tuple \nThe above code is a python function to identify maximum number of occurrences of a value in a dictionary\ndef min_dict_value"], [0.1149893957936998, 0.15151515151515152, 0.14103558253923035, "def new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort elements of dictionary in descending order of their values.\ndef make_change( amount, no_of_fives, no_of_ones, no_of_twos, no_of_tens, no_of_zeros):\n    amount = 100*no_of_fives + 50*no_of_twos + 20*no_of_tens + 10*no_of_ones + 5*"], [0.1472382687030821, 0.3333333333333333, 0.3017307115057278, "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to turn a dictionary into a list of tuples, sorted by frequency of the value.\n\n\n"], [0.1191238743766108, 0.09523809523809523, 0.19467874871099364, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\ndef convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort Counter function in customized order and modify Counter to dictionary.\ndef sort_winnings(fname):\n import os\n for file in os.listdir(\".\"):    #checks files in the current directory\n    if file.endswith(\".txt\") and os.path.getsize(fname)>20 : #check text file with size > 20\n        fd.readlines()\nThe above code is a function to"], [0.16807760444039563, 0.21428571428571427, 0.16252445954395203, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort dictionaries in descending order by value.\ndef common_words(file_path):\n  word=\"\";\n  f=open(file_path,errors='ignore')\n  lines=f.readlines()\n  common_words=0\n  count_words=0;\n  for line in lines:\n    words=line.split(' ');\n    for word in words:\n      count_words+=1\n     "], [0.12961916076030933, 0.10810810810810811, 0.1472330669989334, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort and print out a counter in the descending order of count.  \n\nimport re\ndef find_regex(text):\n d=len(text)\n a=re.findall(r'\\w+:\\d{2}:\\d{2}',text)\n x = [str(d)] + a\n return \";\".join(x)\n\nThe above code is a function to parse, reformat and filter out"], [0.07546230701897468, 0.058823529411764705, 0.15893799736402023, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that takes any dictionary and returns new dictionary from that dictionary alone with its\nvalues in order.\n\nThe concept in this Python functions return nothing', the function simly modifies the original dictionary itself.\n\neg: d.py->Printing the content of dictionary:\nfor i in sys.argv[1:]:\n    fname = open(i, 'r')\n    d[fname] = 0\n    print d\n"], [0.12073866249548121, 0.11538461538461539, 0.14689201027880028, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a counter dictionary by ascending order.\n\n\n\ndef findJobs(Q): #always start with an uppercase\n  #Variable and string lists\n  avail = ['Android Developer', 'Web Developer', 'Data Scientist', 'Full-Stack Developer', 'QA Engineer', 'Security Engineer']\n  descr = ['Developing mobile applications for Android', 'Front End with React.js in javascript', 'Data scientists are given this challenge"], [0.09290311282018449, 0.11764705882352941, 0.07249812029725035, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " sorts a dictionary based on value.\ndef frequency(str_1,str_2):\n  num1 = str_2.count(str_1)\n  return num1\nThe above function gives the number of times a given string appears in a second string\ndef phrase_reversal(str_1):\n  str_2 = \" \".join(str_1.split()[::-1])\n  return str_2\nThe above code"], [0.15804041362599922, 0.1111111111111111, 0.18825792690786364, "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a given dictionary based on their frequency.\nfrom functools import reduce\nDIGITS = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}\ndef check1_digit(x):\n    return DIGITS[x]\ndef str2float"], [0.08197175859587691, 0.0425531914893617, 0.08165865410294762, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a funtion which returns the most common element in a dictionary of key-value pairs and also return a dictionary as output\n    n = input() * 2\n    n= n.replace(\" \",\"\")\n    res = []\n    while n != \"\":\n        temp = 1\n        while True:\n            if n[:temp] not in res:\n                res.append(n[:temp])\n                n = n[temp:]\n               "], [0.15689789028863915, 0.15789473684210525, 0.1925656546278241, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the count of all the characters(value) in a list in ascending order(value).\n"], [0.07087559188107427, 0.020833333333333332, 0.01932215714889585, "def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to return list of values and their count's in order. Here we are using the collections.py package.\nimport operator\nx = {\"a\": 5, \"b\": 2, \"c\": 3}\nsorted_x = sorted(x.items(), key=operator.itemgetter(1))\nprint(sorted_x)\nThe above code returns the list of values and their count sorted in the order of their current count. Here we are using"], [0.08645617278407866, 0.08333333333333333, 0.09628306493668466, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that makes the elements of the dictionary an ordered string.\n\ndef count_number_of_words(str1):\n    word=str1.lower().split()\n    word.sort()\n    wordcount = {}\n    for item in word:\n        if item in wordcount:\n            wordcount[item] += 1\n        else:\n            wordcount[item] = 1\n \n    for key, value in wordcount"], [0.09851671675598163, 0.10256410256410256, 0.18432685334762114, "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort key value pairs in dictionary.\ndef find_dot_d(text):\n return [pos for pos, char in enumerate(text) if char == '.']\nThe above code is a python function to find locations of dots.\ndef Anagram(list_of_texts):\n    for i in list_of_texts:\n        for j in list_of_texts:\n            if i != j and"], [0.08968021596231712, 0.07692307692307693, 0.0742786641343404, "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that converts the dictionary into lists of tuples and prints it sorted.\nimport re\ndef text_finder(text):\n    text = re.compile(r'[a-zA-Z0-9\\-\\_\\\"]') \n    return bool(text.search(text)) \nThe above code is a function that will match any alphanumeric character and the string.\n\n>>>0purplebl0gr3@3"], [0.13507819269910054, 0.16666666666666666, 0.1277201500065803, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to create a counter of a dictionary and then sort counts from the most common.\n\nimport random\ndef list_shuffle(list_dummy1,list_dummy2):\n  random.shuffle(list_dummy1)\n  random.shuffle(list_dummy2)\n  list_shuflle_result = list_dummy1,list_dummy2\n  return list_shuflle"], [0.08750384592780018, 0.07692307692307693, 0.17946418667978592, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a Function to sort Counter of Dictinoary in order of Highest to lowest.\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter[0][1]\nteh above code is a Function to find the highest frequency of a Dictinoary Value\nfrom collections import Counter\nd=Counter({'Math':81, 'Physics':83, 'Chem"], [0.18019054247121546, 0.1111111111111111, 0.08599342858909478, "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\n\nfrom copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a counter.\nfrom collections import Counter\ndef print_counter(tup,k):\n y = Counter(tup)\n y_list = y.most_common()\n print \"Length of tuplex is: \", str(len(y_list))\n length_of=len(y_list)\n if length_of<k:\n  k=length_of\n for element in range(0,k):\n"], [0.08501311671597465, 0.045454545454545456, 0.022543759652653844, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\nimport cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that keeps a count of the occurence of each character and sorts them in descending order\n\nimport itertools\ndef compare1(lt1,lt2):\n x = list(itertools.product(lt1,lt2))\n print(lt1)\n print(lt2)\n print(x)\nThe above code compares the corresponding elements in 2 lists\n\ndef subset_sum(lis1, n, d1):\n"], [0.09738986622875954, 0.15384615384615385, 0.2660051945863185, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\ndef divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python program to sort counter based on value.\ndef sorted_dictionary(dict1):\n  key = input(\"Enter dictionary key: \")\n  value = int(input(\"Enter dictionary value: \"))\n\n  if key not in dict1:\n    dict1[key] = value \n  sort_dict = sorted(dict1.items())\n  return sort_dict\nThe above code is a python function to perform key -value pair"], [0.08274218733783832, 0.07317073170731707, 0.06438873088182426, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function, which takes a Counter object, sorts it by the most_common() function and then returns it.\nfrom heapq import heapify, heappop\ndef convert_arr(arr): \n    heap = arr[:]\n    heapify(heap)\n    return heap\n\ndef sort_arr(arr): \n    heapify(arr) \n    return [heappop(arr) for i in range(len(arr"], [0.11097753046198143, 0.13636363636363635, 0.18361975340550302, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is used to get most common value from a dictionary and returns a datatype(tuple) of most common elements in a dictionary.\n"], [0.5283813133898552, 0.3333333333333333, 0.3041257418754935, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a counter object.\n'''"], [0.09860760863180469, 0.08333333333333333, 0.12227074953396969, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the Counter of a dictonary.\n\n\n**Logic\nIn this assignment there are a total of 3 problems. In every problem, after splitting the given string into words and saving them as an array. The rest of the logical progress is done in the problem by assigning numeric values to the required string operations to get the required output.\n\n\n**Program\nIn this program the while loop is used to set the value of i till the length of the string"], [0.07688641287913299, 0.05714285714285714, 0.046453119235006904, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to tally, the highest 3 values in a Dictionary\nimport csv\ndef csv_reader(file):\n csv_file = open(file,'r')\n csv_reader = csv.reader(csv_file, delimiter= ',')\n for row in csv_reader:\n     print \"the rows in csv_reader are:\"\n     print row\nimport csv\ndef csv_dict_reader(file):\n"], [0.1328651830013898, 0.1388888888888889, 0.14165326877384674, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the most commonly occuring word in a dictionary values.\ndef vowel_check(alphabet):\n res = set('aeiou')\n ini = input(\"enter:\")\n  if ini in res:\n    print(\"true\")\n  else:\n    print(\"false\") \nThe above code is a function that checks if the entered character is a vowel.\n"], [0.1048464617818108, 0.09615384615384616, 0.10159037449846911, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the Python object Counter either ascending or descending based on frequencies.<br>\nIts\u2019 input is a counter object and its\u2019 Function will be sorting the Python object Counter either ascending or descending based on frequencies.\nl = [1,3,5,7]\nprint ([i+2 for i in l])\nIn the above code, it will print all the elements in the list along with its' incremented by 2.\na = [("], [0.11432369973070734, 0.16216216216216217, 0.21752922097065455, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python3 function that can be used to sort a Counter by value.\n\ndef inverse_Bit_Shift_left(dict1, k):\n x = Counter(dict1)\n inverse_Bit_Shift_left=x.most_common()[:-k-1:-1]\n return inverse_Bit_Shift_left\nThe above code is a python3 function that returns the least common elements in a list by using bitwise operations.\n\ndef"], [0.09432902640774138, 0.1111111111111111, 0.07439335156588044, "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is the use of Counter of Collections library to sort the dictionary values into a calculated order.\ndict1={'1':'g','2':'p','4':'f'}\nsort_counter(dict1)\ndef unique_chars(string):\n    res=''\n    for ch in string:\n        if ch not in res:\n            res=res+ch\n    return res\nPalindrome_detection (x) is a"], [0.146898270739792, 0.15625, 0.2344281299438758, "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given dictionary based on key.\ndef generate_string(x):\n'''   aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ'''  \n\"The string value above 70 characters is used to generate a string dynamically\"\n    if x is 'aA':\n        return '"], [0.10409605633309979, 0.14285714285714285, 0.1642969783981424, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the counter values by default.\ndef sum_of_cubes(list1):\n cube = lambda x:x ** 3\n sum1 = sum(list1)\n return cube(sum1)\nThe above code is a python function to superpowers a given list.\ndef k_smallest_items(list1,k):\n list1.sort()\n return list1[:k]\nThe above code is a python"], [0.16957432343679874, 0.15151515151515152, 0.16305088668017279, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dict by the values of dict in descending order.\n#\n\ndef de_duplicate(tup1):\n uniq_tup = [] \n \nfor ele in tup1: \n\nif ele not in uniq_tup: \n  uniq_tup.append(ele) \n  \nprint(tuple(uniq_tup))\nThe above code is a function to"], [0.22789234841534667, 0.21428571428571427, 0.36802320875611494, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is the python function to sort Counter dictionary.\n\n'''"], [0.14356929884673525, 0.17647058823529413, 0.17222881103467574, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given dictionary by the value in decreasing order.\nfrom itertools import accumulate\nfrom collections import defaultdict\nfrom operator import itemgetter\ndef freq_dict(list1):\n freq=defaultdict(int)\n for items in list1:\n   freq[items]+=1\n sorted_freq = dict(sorted(freq.items(), key=itemgetter(0),reverse=True))\n"], [0.13595661277291357, 0.16666666666666666, 0.08310297276494744, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to retrieve the dictionary using collections.\n\ndef lexagraphic_sort(str1,str2):\n\tif str1[0]>str2[0]:\n\t\treturn(1)\n\telif str1[0]<str2[0]:\n\t\treturn(-1)\n\telse:\n\t\tif len(str1)>len(str2):\n\t\t\treturn(1)\n\t\tel"], [0.08415479651556887, 0.07317073170731707, 0.04328249191657736, "def find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to sort the counter on the basis of mulitplicity of the elements.\nThe following code is for printing the wildcard character(say X) in a given string.\nfrom collections import Counter\ndef increaseCounts(s):\n for i in range(len(s)):\n    s[i]=Counter(s[i])\n    return s\ndef printAnagrams(s):\n print(increaseCounts(s))\nThe above"], [0.15080654726702894, 0.16216216216216217, 0.2800333437926337, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionairy in descending order by value.\n\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionairy in descending order by value.\ndef valid_parentheses(string):\n    count = 0\n    for i in string:\n\t    if i == \"("], [0.08108445282045154, 0.08823529411764706, 0.06029253300365536, "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function used to sorts the entries according to thr number of occurrences in the entry.\ndef sort_data(num):\n for passnum in range(len(sorted(data1))-1,0,-1):\n for j in range(passnum):\n if sorted(data1)[j]>sorted(data1)[j+1]:\n temp = sorted(data1)[j]\n sorted(data1)[j] = sorted("], [0.07143333968988452, 0.023255813953488372, 0.04115521774093261, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\ndef unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is an efficient way to determine how many pairs of socks of multiple colors are there.\nIn the below code a= [12,24,35,24,88,120,155,88,120,155] is said to determine how many pairs of socks of multiple colors are there.\n\ndef sort_frequency(a):\n      b= set(a)\n      c = list(b)\n      d = {c[k]: 0 for k in range"], [0.11400583607212339, 0.10204081632653061, 0.22494393017827347, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort dictionary values and their frequencies in descending order.\nfrom operator import itemgetter\ndef create_dict(k,d):\n    return dict(zip(range(1,len(d)+1),d))\nThe above snippet is a function to create a dictionary from a given tuple with dictionary keys as list indexes (all indexes from 1).\n\nThe function expects 2 arguments:\n* integer k - the index of the list which\nrepresents"], [0.13111936166176727, 0.1111111111111111, 0.12185758345436784, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort Counter (https://pymotw.com/2/collections/counter.html)\n\nimport math \ndef isPalindrome(x): \n \n    # Find the appropriate divisor \n    # to extract the leading digit \n    divisor = 1\n    while (divisor * 10) <= x: \n        divisor *= 10\n \n    while (x != 0"], [0.08197175859587691, 0.0425531914893617, 0.04437229696217931, "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function which sorts the count of repeated words.\ndef subject_count(sublist):\n match = []\n for split in line:\n  for i in split:\n   for z in subject:\n    if z ==i:\n     l=split\n     break\n     l.remove(i)\n     match.append(l)\n\n        return(match)\n\nThe above code is a function which compares the subjects till last alphabet remained and then"], [0.08409375994347705, 0.08333333333333333, 0.11932881837569442, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function sort a counter by its value in descending order and then alphabetically in case of a tie.\nfrom collections import Counter\ndef sort_tuple(list1):\n x = Counter(list1) \n sort_tuple=x.most_common()\n return sort_tuple\nThe above code is a python function that sorts a string based on their values in a counter object.\nfrom collections import defaultdict \ndict = defaultdict()"], [0.08085966666417566, 0.06382978723404255, 0.0646719234222292, "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that implements the sorting of the given Counter object. The above function sorts the given object in a descending order according to counts.\ndef get_set(arr):\n    #YOUR CODE HERE\n    array=set(arr)#it will turn array into set objects\n    array=list(array)#it will change set into indexable list\n    return array\nThe above code is a function that converts the given list into a list without duplicates."], [0.17224726514390162, 0.15625, 0.19089232279218787, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a Counter dictionary.\nimport ast,sys\ninput_str = sys.stdin.read()\ndef ip_str():\n sample_names=ast.literal_eval(input_str)\n return sample_names\nThe above code is a function to return the dictionary \"sample_names\"\n\nclass my_dictionary(dict):\n    def __init__(self):\n        self = dict()\n    def add("], [0.09322387293039962, 0.07692307692307693, 0.09459390796072756, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to make a list of tuples \ncontaining the key and its most common values.\n#4. Write a code to \n#   - create a tuple and store the fibonic series elements at each index\n#   - find the largest number in a tuple\n#Storing the fibonic series element at each index\nnum = input ('Enter N ')\nnum = int(num)\nn1 =0\nn2 =1\nen ="], [0.16013207509898383, 0.14285714285714285, 0.15962085852287375, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a given dictionary based on its values.\ndef is_palindromic(word): \n  if (word.lower() == word[::-1].lower()):\n    return None\n  return word\nThe above code is a python function to check is a string is a palindromic.\ndef capitalize_list_elements(str):\n  is_cap=''\n  words = str.split()\n "], [0.08191260430221396, 0.05555555555555555, 0.05121112974829784, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python program that sorts the specified dictionary by their respective values.\nimport re\ndef count_substring(): \n    str = input()   \n    l = [x for x in re.split('[,.]', str) if x != '']\n    print (l)\n    print (len(l) - 1)\nThe above code is a python program that reads a string and break it into substrings on the appearance of separators.\n"], [0.08252301452243646, 0.08888888888888889, 0.12646241172563508, "import math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a method in python for sorting the dictionary sorted by values.\nfrom itertools import permutations \n  \ndef getLexsmallest(s, n): \n    a = permutations(s) \n    l = sorted(list(a)) \n    return ''.join(l[n-1])\n\ngetLexsmallest() function in python takes input as a string and a integer value n. This code gets all n permutations of"], [0.07591857749703701, 0.03225806451612903, 0.026639359028313197, "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " finds the most frequent element in a dictionary.\n\nimport getpass\nimport re\ndef guess_password(real):\n    attempt = 'b1f0b32197f40f2fe2e8b224424748a9'\nwhile attempt != real:\n    attempt = ''.join(sorted(getpass.getpass(), key=re.compile(r'\\d').finditer))\n\"Good Luck!\"\nreturn attempt"], [0.07941848432128963, 0.0625, 0.024711198751979555, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function sorting elements in ascending order on the basis of number of occurrences.\n 7 \nhttps://www.geeksforgeeks.org/count-negative-numbers-in-a-column-wise-row-wise-sorted-matrix/\n    \ndef findNeg(matrix, nRows, mCols): \n    for i in range(0, nRows): \n        for j in range(0,"], [0.10329130024898316, 0.14285714285714285, 0.22719889745303032, "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\n\ndef minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the Counter in descending order by the key value.\nfrom collections import defaultdict\ndef difference_in_counter(x,y):\n    x = Counter(x)#class used for container that provides \n    y = Counter(y)\n    print(x-y)#lesser value  is subtracted from the higher value's or Key-value is reversed\n    print(y-x)\nx = \"abcd"], [0.14569448536614243, 0.13157894736842105, 0.2400837291338816, "def sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter in a dictionary of (key,value) pairs.\nfrom numpy import*\ndef merge(a, b):\n    merged_dict = {}\n    f={}\n    s={}\n    d=[]\n    k={}\n    i=0\n    while i<len(a):\n        if len(a) == 0:\n            return a\n        else:\n            f.update(a["], [0.1510228275455333, 0.10810810810810811, 0.1679882673590014, "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a counter of a given dictionary.\ndef permutation(set_input):\n list_output=[]\n for i in set_input:\n  for j in set_input[set_input.index(i):]:\n   if i != j:\n    x=i + j\n    list_output.append(x)\n return list_output\nThe above code is a function to calculate permutation of a given set (p"], [0.08375275082001014, 0.047619047619047616, 0.06658364955663419, "import sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) \nThe above code is a function to find the size in bytes of the given tuple.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that prints the key with maximum value from counter.\n\nfrom statistics import mode\nlist1 =[\"geeks\", \"for\", \"geeks\"]\nlist2 =[6,0,4,1,5,2]\ndef mode_list(list1):\n z=mode(list1)\n return z\nThe above java code is a function that finds the mode of the list of integers.\ndef remove_negative(list1):"], [0.13991535910675634, 0.14285714285714285, 0.1317311772921875, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return list of element with its frequency in a dictionary by sorting.\ndict1={1:1, 1:1, 2:2, 2:2, 3:5, 4:5}\nprint(sort_counter(dict1))\nfrom collections import Counter\ndef min_occurrences(dict1):\n    result=min(dict1.items(), key=lambda x: x[1])\n    return result[0]\n"], [0.12995462561868387, 0.2, 0.2994900552318703, "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the dictionary called dict1 in decending order by the value.\ndict={ 12:25, 25:48,30:49, 36:89}\ndef sorted_key(dict1):\n\tdict1 = {k: v1 for k, v1 in sorted(dict.items(), key=lambda item: item[1])}\n\treturn dict1\n\nThe above code is a function to sort the dictionary k:v by"], [0.12662835022110117, 0.10810810810810811, 0.14199546759087156, "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\ndef count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort occurances of characters in a dictionary.\n\nimport itertools\ndef character_indices(str1):\n indicies = {}\n for (count,letters) in enumerate(str1):\n     if letters not in indicies.keys():\n         indicies[letters] = [count]\n     else:\n         indicies[letters].append(count)\n return indicies\nThe above code is a function to create a"], [0.10431947322738178, 0.08333333333333333, 0.11385769843345393, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to print the counter in sorted order of value\nimport numpy as np\ndef digit_sum(num):\n return np.sum((np.abs(num)//10)**(np.abs(num)%10))\nThe above code is a function to find the sum of the digits of a particular number\narr=[2,1,3,5,7,1,2,5]\ni=0 \nwhile(i<"], [0.1396412054880532, 0.15789473684210525, 0.17432114968970225, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\nimport re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort Counter by value.\n\ntext1 = 'The quick brown fox jumps over the lazy dog'\ntext2 = 'python exercises practice solution'\ntext3 = 'machine learning'\nx = re.findall(r'\\b',text1)\nprint(x)\nimport re\nm = re.search('(?<=-)\\w+','spam-egg')\nprint(m.group(0))\ni="], [0.10291819331065218, 0.10256410256410256, 0.213978178231411, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\nimport math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the frequency/ count of elements in a dictionary/ array.\ndef frequencySum(arr):\n    s = sorted(list(set(arr)))\n#     s = [s.sort()]\n    sum=0\n    i = len(s)-1\n    while i>=0:\n        print (i)\n        sum+=s[i]\n    return sum\nThe above code is a python function to find the"], [0.09093554813329228, 0.07894736842105263, 0.054686200845309875, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts the keys by frequency.\n\nfrom itertools import permutations \n  \n# Get all permutations of a list  \nperm = permutations([0,1,2,3]) \nl1=[]\nfor i in list(perm): \n    listt = list(i)\n    num=''\n    for j in listt: \n        num+=str(j)\n    l1.append("], [0.0806163752864123, 0.05357142857142857, 0.058387179391302016, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\nimport re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that gets all the names from contacts and assigns them to first name if they have space in between \nor gets the first word. It then sorts them according to the number of times they occur and returns a list of tuples containing the values and its count.\nimport collections as ct\ndef FrequencyDistribution(Relation) :\n\tRelation = ct.Counter(Relation) \n\trelation = Relation.most_common()\n\t"], [0.08610865034627765, 0.06976744186046512, 0.06271655300431447, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function which takes in dict\nand returns the sorted output(descending) of the dict.\ndef check_subset(set1, set2): \n  length=len(list(set(set1) & set(set2)))\n  if length <= len(list(set(set1))):\n    return True\n  else:\n    return False\nThe above code is a python function to validate whether one set is a subset of"], [0.10002182534493241, 0.075, 0.11931134436575656, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return the count of each element in the dictionary.\n\ndef intersection_keys(dict1, dict2):\n  overlapping_keys = set(dict1.keys()) & set(dict2.keys())\n  print (overlapping_keys)\nThe above code is a function to give the intersection of any two dictionaries.\n\ndef diff_counter(dict1, dict2):\n    dict3 = dict()\n    for key"], [0.14502212324498012, 0.2, 0.29469911400020066, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter in descending order by value.\n\nfrom collections import Counter\ndef sort_counter(dict1):\n x = c(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort the counter in descending order by value\n"], [0.10853569868046807, 0.10810810810810811, 0.1095463082359009, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the results of the Counter collection.\nfrom random import shuffle\ndef shuffle_list(list):\n shuffle(list)\n return list\nThe above code is a function to shuffle the items in a list.\ndef mean_list(list):\n a=sum(list)/len(list)\n return a\nThe above code is a function to compute the average from a given list of numbers.\nimport math\nfrom collections import Counter \ndef"], [0.13657728595872426, 0.14705882352941177, 0.1748407410117952, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\nimport re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort counter by values.\ndef filter_fruit(fruit_list,size_list):\n  import re\n  fruit_list1 = re.findall(\"[a-z]+\", fruit_list)\n  return fruit_list[fruit_list1 and fruit_size]\nThe above code is function to combine and filter two lists as resultset. \ndef first_letter_capital(name):\n  return name.title()"], [0.08038033721181578, 0.06, 0.05553436428657976, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " sorts a Counter by its values in decreasing order, then returns an ordered list of key-value pairs.\n from collections import Counter\ndef most_counter(list1):\n x = Counter(list1).most_common(1)\n print(x)\nThe above code takes in a list and prints the most common element in the list.\n Define a function that takes in a list of integers and returns the number pf even integers in that list.\ndef my"], [0.14291881464983638, 0.15789473684210525, 0.1103075208396138, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " has a function which takes input a dictionary object and returns the most common object.\n"], [0.1769327689204072, 0.2, 0.17583020868334934, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return the most common or highest count repeated element in a dictionary using \n\n"], [0.09406068661812499, 0.1111111111111111, 0.2777369074942672, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return the key and values of the dictionary in sorted format.\nYou would require to write a program to sort the (name, age, score) tuples by ascending order where name is string, \nage and score are numbers. The tuples are input by console. The sort criteria is:\n1: Sort based on name;\n2: Then sort based on age;\n3: Then sort by score.\nThe priority is that name > age >"], [0.1352592034201232, 0.21428571428571427, 0.21881727591415903, "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the dictionary elements by their values.\nfrom collections import Counter\ndef check_duplicate(list1):\n    y=Counter(list1)\n    print(y)\ncheck_duplicate1=[2,2,2,1,3,4,4,4,4,4]\n\ncheck_duplicate(check_duplicate1)\n[(2, 3), (4, 5)]"], [0.11113285232034661, 0.1111111111111111, 0.15431518220644008, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the Counter dictionary.\n\"\"\"\n\"\"\"import functools\nls = [20, 30, 40, 50, 30, 30]\nSum_list=list(functools.reduce(lambda a,b:a+b,ls))\nprint(sum)\nprint(Sum_list)\"\"\"\n\n\n\"\"\"def Reverse(s):\n    return[word[::-1] for word in s]\nThe above function"], [0.09308058976016656, 0.12121212121212122, 0.09689248106496565, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to print the sorted dictionary with the count.\n#1\ndef top1(dict1): \n    count_dict = dict(Counter(dict1))\n    print(count_dict)\n    new_list = list(count_dict.values()) \n    max_value = max(new_list)\n    max_attempts = []\n    total_list = []\n    sum=0\n    for j in"], [0.33006577975563467, 0.5, 0.5029292651136352, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given dictionary according to value.\n"], [0.11552623367117862, 0.12121212121212122, 0.08176291926371917, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the dict that contains the minimum value.\nimport itertools\ndef first_non_same(iter1):\n x = itertools.tee(iter1,-1)\n next(x[1],None)\n for i in range(len(iter1)):\n     iter1,iter2 = x[0],x[1]\n     value1= next(iter1)\n     value2= next(iter"], [0.0966791910499386, 0.09302325581395349, 0.12924948539938372, "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return the sorted Counter dictionary based on the count.\n\nfrom collections import OrderedDict\ndef dict_func(keys, values):\n dict_func = OrderedDict(zip(keys, values))\n return dict_func\nThe above code is a function to create an ordered dictionary from a list of keys and a list of values using the zip() method.\n\ndef str_split(str1, seperator=None):\n"], [0.1086103989104916, 0.1111111111111111, 0.0928125593198984, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the given dictionay based on the values.\nfrom collections import Counter\ndef major_element(arr,n):\n x = Counter(arr)\n if n > 0:\n  while x.most_common()[0][1] > n/2:\n    a2.pop(a2.index(x.most_common()[0][0]))\n    x = Counter(a2)\n return x."], [0.09952117534457805, 0.0784313725490196, 0.17925746016762595, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter values of a given array of strings.\n\nfilter() With Lambda Function \nThe filter() function in Python takes in a function and a list as arguments.\n\nThe function is called with all the items in the list and a new list is returned which contains items for which the function evaluats to True.\n\nHere is an example use of filter() function to filter out only even numbers from a list.\n\n\"\"\""], [0.1333380676543305, 0.15789473684210525, 0.17996701387872255, "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a given dictionary based on its value.\ndef string_Ex(s):\n  if \"purple\" in s and \"abc\" in s:\n    print(\"All correct\")\n  elif \"purple\" in s and \"xyz\" in s and not(\"abc\" in s):\n        print(\"Alternative correct\")\n  else:\n      print(\"Wrong answer\")\nThe above code is a function to find subst"], [0.14569069014811825, 0.125, 0.20846207907094438, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a dictionary with respect to the counts.\ndef dict_7(x,dict2={}):\n  dict2[x] = dict2.get(x, 0) + 1\n  return dict2\nThe above code is a python function to return the count of duplicate items in a dictionary.\ndef count_numbers(dict1={}):\n if dict1 == None:\n  return 0\n suma = 0\n"], [0.13600558870425758, 0.175, 0.2912959588433952, "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter by value.The elements will be returned as a list of tuples \nThe above will work for the dictionary with integer value. But incase if dictionary has string values use .sort whichever you want.\n\n\nAxial_ratios = [1,1,1,1,1,1,1,1,1,1,1,0.875,0.75,1,0.75,0.875,1"], [0.1274155413898662, 0.13636363636363635, 0.21941038858534503, "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " returns the most common series of strings in given dictionary sequence.\ntestdict = {1: 100, 2:756, 3: 1206, 4: 77, 5: 99, 6:195,7: 111}\n\ndef sort_items(dict1):\n  sort_dict = dict2.sort()\n  return sort_dict\nThe above code is a function to sort the given dictionary by values in a descending order.\n\ndef dus(dict"], [0.13476861660893047, 0.12121212121212122, 0.07160325441703874, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " shows a function to sort the counter items.\n\nclass Employee: \n    def __init__(self, name, sal): \n        self.sal = sal \n        self.name = name \n    def provideSal(self): \n        return self.sal\ndef provide_total_sal(emp_list): \n    total_sal = 0\n    for i in emp_list: \n        total_sal = total_"], [0.08820833684299528, 0.11363636363636363, 0.1045968152689208, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function which returns the list of sorted key:values from the dictionary given as input.\ndef upper_case(st):\n    for index,i in enumerate(st):\n     return(index) \nThe above code is a python function to display and count the upper case characters in a given string by enumerating the characters.\ndef lower_case(st):\n    for i in range(len(st)):\n      if(st["], [0.15888970684058182, 0.11764705882352941, 0.06795043459880318, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\ndef convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a counter in alphabetical order.\n\ndef sort_dec_dictionary(dict1):\n     temp = {}\n     for key, values in dict1.items():\n        temp.setdefault(values, key)\n     sorted_d = sorted(temp.items(), key = lambda x: x[0])\n     for keys in temp:\n        reverse = sorted(temp.items(), key = lambda x: x[0"], [0.0743093141080618, 0.0425531914893617, 0.049220196223612164, "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " helps to determine the number of occurences of a word inside a dictionary.\n## Given the list of tuples with one tuple of words(The output of the Word Count function) & one of integers:\n## - elements within a tuple represent a word & the count of items within the tuple\n##countlist = [('Pradeep,5),('Kumar,5),('Singh,5)]\n\n#the list data structure from above input, creates the"], [0.07796176825848006, 0.07317073170731707, 0.1463190727596534, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " will take the dictionary and will sort the dictionary based on their values.(higher to lower) and return an Ordered dictionary. \n\ndef fibonacci_numbers():\n    fibonacci_list=[]\n    for each in range (10):\n        var=each\n        \n        fibonacci_list.append(var)\n        \n            # Find the length of fibonacci_list to find the next term.\n            # index of new"], [0.09536899205577916, 0.125, 0.22744087210578426, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python to sort the dictionary by it's values.\nfrom collections import Counter\ndef sort_k_distinct(input, k):\n x = Counter(input)\n x1 = x.most_common()[:-(k+1):-1]\n return x1\nThe above code is a python to sort the dictionary of k distinct compounds by their frequencies.\ndef custom_sort(dict1):\n    if 'A' in dict1:"], [0.2264591026531358, 0.1935483870967742, 0.22525260839374564, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary by value in descending order of :\n\ninput = {\"a\" : 45.6, \"b\" : 58, \"c\" : 210}\n\nIn case of Null:\n\nExpected Output: ['a','c','b']\n\nIn case of No Null:\n\nExpected Output: ['a','c','b','d','e','f','g','h','i','j','k','l','l','"], [0.09455150769793154, 0.06818181818181818, 0.04616191983646773, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return the sorted list of dictionaries based upon values in integers.\nfrom string import ascii_uppercase\ndef alphabet_position(text):\n text = text.upper()\n letters = [i for i in ascii_uppercase if i in text]\n nums = [str(ord(i) - ord('A')+1) for i in letters]\n return ' '.join(nums)\nThe above"], [0.11432369973070734, 0.16216216216216217, 0.14802578168610994, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return a list of sorted dictionary by its value.\ndef frequency(list1):\n    x1=Counter(list1)\n    sort_x1=x1.most_common()\n    return sort_x1\nThe above code return a frequency of each element in a list.\ndef odd_square(dict1):\n    odd_square = {}\n    for k, v in dict1.items():\n      if v %"], [0.08191866197503324, 0.07142857142857142, 0.22536091505153882, "import math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function which will re-order the given dictionary based on the value in dictionary. https://www.geeksforgeeks.org/python-sort-python-dictionaries-by-key-or-value/\n\ndef check_prime(x):\n        d = 2\n        while d*d <= x:\n            if x%d == 0:\n            return False\n            d += 1\n        return True\nThe above code is a"], [0.12263119482114683, 0.0975609756097561, 0.08176291926371917, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter in decreasing order.\ndef execute():\n    input1 = input(\"Ingresa la conversion deseada:\\nTeclee '1' para convertir a euros-pies\\nTeclee '2' para convertir de euros y pies a sistema ingles\\n\")\n    input1 = int(input1)\n    if input1 == 1:\n        y = input(\"Define el valor en"], [0.08031260567624764, 0.045454545454545456, 0.07272630418524087, "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is used to sort countr based on the number of occurrence.\nfrom collections import Counter\ndef combine_dict(dict1, dict2):\n  x = Counter(dict1)\n  y = Counter(dict2)\n  combined_dict = x+y\n  return combined_dict\nThe above code is used to combine two dictionaries (based on the count values)\ndef diff_dict(main_data):\n  i = len(main_"], [0.07872373625383179, 0.05660377358490566, 0.054212820701216656, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that converts the dictionary into a list of tuples.\nfrom functools import reduce\na1 = reduce(lambda x, y: x ** y, [1, 2, 3, 4])\na2=reduce(lambda x,y:x*y,range(1,13)) # calculating factorial of 12\n#also using for loop, type code below instead of above two\n'''\nfor i in range(1,"], [0.09803523078752815, 0.08888888888888889, 0.15503698237440194, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the sorting of a dictionary on the basis of the frequency of their values.\n\ndef is_a_generator(func):\n  gen = func(4)\n  return type(gen).__name__\nThe above code is a function that accepts a function and returns a boolean result False for a simple function and True for a generator function. \n\ndef not_string(str):\n    if str.find(\"not\") >= 0"], [0.08568130627484105, 0.06976744186046512, 0.07323289339800035, "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to find the most common elements of a counter object.\ndef list_counter(inputList, c): \n    list_count = []\n    for i in range(len(inputList)): \n        if inputList[i] == c : \n            list_count.append(i)\n    return list_count \nThe above code is a python functio to find the index of allc occurence of an"], [0.10925713613755343, 0.1, 0.11250744815396473, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter and return a list of sorted counts of frequency of each word.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort the counter and return a list of sorted counts of frequency of each word.\nif __name__ == '__main__':\n  n = int("], [0, 0.0, 0.04409762821202056, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " extracts the key of the dictionary, updates in descending order, gets and reverses back the values in made dictionary.\nfrom collections import defaultdict \ndef default_vals(): \n  return \"Sorry, Key doesn't exists\"\n  \n   \nnums = defaultdict(default_vals) \nnums['one'] = 1 \nnums['two'] = 2 \nprint(nums['three']) #print(nums['three'"], [0.39664745850106886, 0.6363636363636364, 0.615218690896332, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort counter dictionary by its value.\n\n"], [0.12263119482114683, 0.10256410256410256, 0.14278160819979918, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter based on the value in descending.\n\nfrom itertools import groupby\ndef groupby_def(test_list):\n key_list=[list(g) for k,g in groupby(test_list)]\n return sorted((key_list),key=lambda x: len(x),reverse=lambda x: len(x))\nThe above code is a function to return the list of categories in the given data."], [0.08249270730666546, 0.061224489795918366, 0.056183666871006156, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " Creates a dictionary consisting of Counter objects of letter counts from the original message and converts it again to list of tuples.\nfrom heapq import heapify\ndef heap(lis1):\n heapify(lis1)\n lis1=''.join(lis1)\n return lis1\nThe above code creates a min heap of min length of n-grams and then converts the heap back to string. \n\"\"\"\n\n\ndef main():\n    N ="], [0.16056703961263583, 0.12195121951219512, 0.16376321390033072, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a counter function to sort a dictionary\ndef print_squares(n):\n squares = [i**2 for i in range(n)]\n for x in squares:\n  print (x)\nThis is a function that prints the square root of non-zero natural numbers\nimport itertools as it\nprod_list = it.product( (1,2,3,'a','b','c'),(1,2,3))\nprint("], [0.08409375994347705, 0.0784313725490196, 0.12068419797474145, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that convert any given dictionary into a list containing (keys and values) sorted by value in descending order and also the frequency of each key.\nimport itertools\ndef permutation (iterable, r=None):\n new_plist = list(itertools.permutations(iterable,r))\n return new_plist\nThe above code is a function that returns all the permutations of a given iterable string or array.\ndef"], [0.13521048001930125, 0.12, 0.16436771159173855, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a dictionary according to the value.\n\nThe enumerate() method adds a counter to an iterable and returns it in a form of enumerate object. This enumerate object can then be used directly in for loops.\ncode start\ndef last_N_Elements(iterable,N):\n if type(iterable) is list and iterable is not None and type(N) is (int or str)\n l=(itr"], [0.1406587273968485, 0.14705882352941177, 0.12504537964911, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort Counter by the very first element key.\n\nWe can use python built-in class property to achieve the similar functionalities.\n\nclass CustomCollections:\n\n def __init__(self,custom_dictionary):\n  self.custom_dictionary = custom_dictionary\n\n def get_key(self,k):\n   sort_counter=sorted(self.custom_dictionary)\n   print(sorted(self."], [0.08701867980404966, 0.06818181818181818, 0.052863191897677395, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to find in what number of places a word has appeared.\nimport string\n\ndef merge_list(list_1, list_2):\n  sortedstring = string.ascii_lowercase\n  joinedlist =[]\n  for a in sortedstring:\n      if list_2.count (a)>0:\n          joinedlist.append (a)\n  return joinedlist\nThe above python code codes very essential string operation"], [0.07929824958645058, 0.05357142857142857, 0.03234091567052238, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " sorts the counter based on the frequency of each element in the list.\n\n#Implement a function that will return the number of unique values in an array of integers.\narray=list(input().split())\nprint(len(set(array)))\n\n\n#A lot of analysis work is spent on finding the best set of input parameters for a given model, or the best way to \n# analyze data. Sometimes the way we analyze or visualize data is as important as"], [0.10482382946426834, 0.1, 0.12208683685481059, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to create a sorted representation of a dictionary based on the value and return a sorted list.\nimport os\nos.getcwd() Example to get the current working directory\nimport os\nos.chdir('/desktop')\nAlternative way of set working directory\nimport pandas as pd\nx=[2,3,3]\ny=[2,3,3]\ndf=pd.DataFrame([x,y])\ndf\nos."], [0.08689396990971919, 0.0625, 0.05121112974829784, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to sort the counter.\nimport collections\nFirst_letter = collections.namedtuple('First_letter', ['first_letter'])\ndef first_letter_word(word_list):\n words = [word for word in word_list.split()]\n lower_words = [] \n for word in words:\n   first_word = word[0].lower()\n   lower_words.append(first_word)\n counted_dict ="], [0.15532240443174813, 0.17142857142857143, 0.18432685334762114, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a dictionary based on its value.\n\ndef get_index(list,index):\n\tlist1 =[]\n\tfor i in index:\n\t\tlist1.append(list[i])\n\treturn list1\nThe above code is a python function to access multiple elements of a list.\n\ndef get_indexes(list,index):\n\tlist1 =[]\n\tlist2 = []\n\tfor i in"], [0.08612448248176323, 0.075, 0.10242268337438219, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes in a dictionary and returns the dictionary in order of its keys.\nfrom collections import Counter\ndef counting(dict1):\n X = Counter(dict1)\n return list(X.elements())\nThe above code is a function that takes in a dictionary and returns the values in it.\n\nfrom collections import Counter\ndef trigrams(t):\n   s = t.lower()\n   T = Counter(s[i:i+"], [0.08798783093510457, 0.07272727272727272, 0.08936578495888574, "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function using counter to sort the dictionay.\ndef check_silent(string):\n    if(string == \"\"):\n        return \"True\"\n    \n    \n        \n    \n    \n    \n2.\nTopic - Map, Filter, and Reduce Functions\nThis topic is all about mapping, filtering and reducing lists and similar sequential data. Here a short introduction to map, filter and reduce functions. The three functions are related and build upon each other."], [0.09093554813329228, 0.07894736842105263, 0.11218540490331494, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\nfrom array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " defines a dictionary as an object and converts it to a sorted tuple.\ndef define_variable_by_string(x):\n    swap={ 'True':1,'False':0,'Positive':1,'Negative':0}\n    for key,value in swap.items():\n        x=str.replace(x,key,str(value))\n    return(x)\nThe above code accepts a string input as parameter and reclasses words like true and"], [0.09268320438756977, 0.1, 0.09695801327248553, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sorting a dictionary based on values.\n\ndef palindrome(string):\n  left_pos = 0\n  right_pos = len(string) - 1\n  while right_pos >= left_pos:\n    if not string[left_pos] == string[right_pos]:\n      return False\n    left_pos += 1\n    right_pos -= 1\n  return True\nThe above code is a python program to"], [0.11731816740935101, 0.16666666666666666, 0.18779406598475246, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the counter by values.\ndef check_member(n):\n    for i in range(1,len(n)):\n        numbers=set([1,2,3,4,5,6,7,8,9,10])\n        for j in n:\n            numbers.discard(list(j))\n    return len(numbers)==0\nThe above code is a python function to check if a"], [0.09801960661304539, 0.10416666666666667, 0.09920983224660718, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes in a dictionary and sorts it by the most frequently used words.\nprint ('Number of iterations used:', count)\nThe above code is a function to print the number of iterations used for training an algorithm.\n'''\n\nprint ('Histogram of values count:')\nprint (histogram)\nhist, edge = np.histogram(labels,2)\nprint ('Number of data points in the Training set:' ,df_training"], [0.14155435407932157, 0.13157894736842105, 0.23930173099933788, "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter dictionary, accepting a dictionary and returns the same.\n\"\"\"\n# code to find primes\ndef primes(n):\n      if n==2:\n          return [2]\n      elif n<2:\n          return []\n      s=list(range(3,n+1,2))\n      mroot = n ** 0.5\n      half=(n+1)//2-1\n      i"], [0.16970881093749768, 0.16, 0.11289589533127418, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort Counter dictionary.\ndef find_nearby(lst):\n     dict={}\n     for i in range(len(lst)):\n         diff_list=[]\n         for j in range(len(lst)):\n             if(j != i):\n                   diff_list.append(abs(lst[i]-lst[j]))\n         dict[i]=sum(diff_list)\n    "], [0.09275535004519687, 0.06976744186046512, 0.07981309966956951, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts a counter key values in a descending order.\n\nfrom collections import Counter\nCounter(\"ransom\").most_common()[:-2:-1]\nThe above code is a function that gives the top two items in a counter.\n    \nk=(unique_elem,len(unique_elem))\nThe above is a function to find unique elements in a list, first returns unique and second returns the number of unique elements.\n    \n"], [0.07605344575572491, 0.04878048780487805, 0.015380817852962792, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " returns a sorted list consisting of count and elements from the dictionary received as input.\nimport collections\ndef convert(str):\n  if len(str) == 0:\n    return str\n\n  for i in range(0,len(str)/2):\n    temp = str[i] \n    str[i] = str[len(str)-i-1]\n    str[len(str) -i-1] = temp\n  return str"], [0.07402361961477595, 0.03389830508474576, 0.04108423605823161, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function which takes input as a dictionary, then returns the sorted keys of dictionaries as a list.\nCounts the number of strings where the string length is 2 or more and the first and  last character are same from a given list of strings.\ndef match_words(words): \n  ctr = 0\n\n  for word in words:\n    if len(word) > 1 and word[0] == word[-1]:\n      c"], [0.09538084340105886, 0.06521739130434782, 0.07080023367057689, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return a sorted list of keys based on their values.\ndef roi(old, new):\n    change=((new-old)/old)*100\n    return change\nThe above code contains a python function which calculates the rate of interest.\ndef num_sq(a,b): \n    series = 0\n    result = 0\n    while (series <= b): \n        if (series >= a): \n            result += series"], [0.08478756056731718, 0.06060606060606061, 0.026639359028313197, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that takes a counter and returns a sorted counter.\ndef code_Generator(curr_str,table):\n curr_str=curr_str.lower().replace(' ','')\n curr_table=dict(table)\n ret_str=''\n for ele in curr_str:\n      if ele=='_':\n       ret_str+=' '\n       continue\n      ret_str+=curr_"], [0.11113285232034661, 0.09375, 0.054686200845309875, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the common elements in a given counter object.\n\nimport string\nfor pos, alpha in enumerate(string.ascii_lowercase):\n    print pos,alpha\nThe above code returns the elements from string in a standard format."], [0.1025124249794533, 0.12244897959183673, 0.26392896714962183, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is used to sort a given dictionary dictionary by value in from to z and a to z .\nimport ast\ntree = ast.parse('reduce(lambda x, y: x+y, range(1, 15))')\nprint(ast.dump(tree))         \n\nThe above code returns ast type representation of the parse tree created. where the range function can be treated as x(lambda parameter) and y(yield value) is treated\nmatplotlib"], [0.11718627898778712, 0.12903225806451613, 0.13622817116902736, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the Counter() in descending order.\nclass Sort:\n    def closestNumbers(self,arr):\n      ans=[]\n      b=sorted(arr)\n      Min=abs(b[1]-b[0])\n      for i in range(2,len(b)):\n        x = abs(b[i]-b[i-1])\n        if x<=Min:\n          Min = x\n"], [0.11325502534108078, 0.09302325581395349, 0.134787380720917, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter values of the string keys in the given dictionary.\n\ndef insert_string(str, word, i):\n  return str[:i] + word + str[i:]\nThe above code is a function to insert a string within the other string at a given part.\n\ndef insert_vowels(solver, word, vowel):\n  for i in range(0, len(word)):\n    if sol"], [0.0948167062141704, 0.058823529411764705, 0.12309380757207658, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to output the count of most common strings in a given dictionary.\n\na = sqores([(1,1)])\n  print a[0][0] #or all[0][0]\n  \nArray can be unpacked, but since it has two values to unpack, should be two values as below written code, else will throw error.\n\ndef addnums(a, b): \n    return a + b \n"], [0.08409375994347705, 0.08163265306122448, 0.10499381749478356, "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is The input is given as a dictionary of the type a = {1 : 2, 3 : 4, 5 : 6, 7 : 8} i.e. keys with corresponding values. \n \nThe function should convert it into a list of tuple of the type [(1,2), (3,4), (5,6), (7,8)] (to be clear: in the order (1,2), (3,4), etc) and sort the"], [0.09748168392642113, 0.09090909090909091, 0.1451720615267404, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to take in a dictionary and return the key-value pair with the highest count from the dictionary in the form of tuples.\n\ndef triple_map(list1): \n  return [n*3 for n in list1]\nThe above code is a function to caculate the thrice of each element inside a list\n\ndef gerundify(list1):\n processed_list = [str(element) + 'ing' for element in"], [0.12185461523621959, 0.14285714285714285, 0.2236007374718491, "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the dictionary items given in the format (key,value).\nfrom collections import OrderedDict\n \ndef Sort_Tuple_Dict(tup_dict):           \n    return(sorted(list(tup_dict.items()),reverse=True))\nThe above code is a python function to sort a given dictionary in the format {key:[values]} in descending order\nKey is the position of the element and value"], [0.08336726646676286, 0.047619047619047616, 0.032541155448103154, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes in a dictionary, counts the occurence of every element in the list, and sorts the elements in descending order.\nclass rectangle(object):\n def __init__(self, height, length):\n  self.height = float(height)\n  self.length = float(length)\n\n def area(self):\n  return self.length * self.height \n\n def perimeter(self):\n  return 2*self.length +"], [0.11325502534108078, 0.09302325581395349, 0.05680612662246269, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the Counter in descending order.\ndef reber_grammar_len_word(word_len,word):\n    #The argument \"word\" must be a list of characters and \"word_len\" must be the length of characters in the list \"word.\" It returns \"False\" if the list \"word\" does not conform with the reber grammar of given length \"word_len\".\n    if word_len == 3:\n       "], [0.09427316972501788, 0.06976744186046512, 0.04304665037045911, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a fumction, sorts a counter alphabetically.\nfrom collections import Counter\ndef char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\nThe above code is is a function to count the character frequency in a string.\nfrom collections import"], [0.13291307974538727, 0.14285714285714285, 0.14957944269761259, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the Counter with counted value.\n\nimport copy\ndef update_copy(tup1, tup2):\n tup1_copy=copy.copy(tup1)\n x=tuple(tup1[i]+tup2[i] for i in range(0,len(tup1)))\n return x\nThe above code is a function to update a copy of tuple with a new given tuple.\nimport"], [0.10384041952064939, 0.13043478260869565, 0.17590259253938625, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort dictionary by Counter.\ndef check(number, start, end):\n        if (number >= start and number <= end):\n          return True\n        else:\n          return False\nThe above code is a python function to check whether the given input lies within the specified range.\ndef single_number(arr, brr):\n        for i in range(0, len(brr)):\n            for j in range(0,"], [0.08279781407346017, 0.057692307692307696, 0.11124718669187332, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that tests whether a dictionary is \u2018well sorted\u2019 or not. \u2018Well sorted\u2019 dictionaries satisfy two criteria: (a) all its keys are sorted in increasing order; (b) the most frequently occuring value is the most keys that value has.\nsort_counter({'a': 5, 'b': 7, 'c': 1, 'd': 8, 'e': 4, 'f': 0, 'g': 9"], [0.09892192348315297, 0.10810810810810811, 0.06580451092125274, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function sort a string of counting by the highest order\n\n\ndef find_error(secret, test):\n     error = 0\n     secret.upper()\n     test.upper()\n     for i in range(0, len(secret)):\n        if secret[i] == test[i]:\n            error += 1\n        if secret.count(test[i]) < test.count(test[i]):\n            error += 1\n    "], [0.0916232778463677, 0.06818181818181818, 0.04799657507033718, "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes a dictionary then sorts it based on the values of items and returns a list of keys with the intersecting values.\nimport itertools\nimport random\ndef num_tuples(array1):\n  #array1 = [random.randrange(1,20,7) for i in range(5)]\n   result = list(set(itertools.permutations(array1, len(array1))))\n   return len("], [0.15058715653774865, 0.20588235294117646, 0.16897020563890877, "def geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort Counter dictionary by value.\n\ndef extract_data(file):\n  res = []\n  final = []\n  f = open(file, 'r')\n  for line in f:\n    line = line.strip()\n    if \"nan\" not in line and '#' not in line:\n        res.append(line) \n  f.close()\n\n  l1 = res[0].split()\n"], [0.16584796906241764, 0.1111111111111111, 0.1290648940007562, "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dict \nThe output should be a dict using looping technique.\ndef dict_interdiff(d1, d2): \n    intersect = {} \n    diff = {} \n    for key,value in d1.items(): \n        if key in d2.keys(): \n            intersect[key] = f(value, d2[key]) \n            del d2[key] \n       "], [0.11239868137566808, 0.08163265306122448, 0.13207358724349577, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given text based on their occurences in decreasing order. The counter function counts the elements present in a string.\ndef acm_small(): \n    n = int(input())\n    if (n <= 100) : \n        print ('AC') \n    else : \n        print ('WA')\nThe above code is used to check ACM with small constraints.\ndef acm_large(): \n    s ="], [0.08645617278407866, 0.08333333333333333, 0.08599342858909477, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to print the character in the given string and below \nmain() \n\ttest_str=\"Geeks for Geeks\"\n\tprint(sort_counter(test_str))\ntxt = ['h', 'e', 'l', 'l', 'o']\ntxt.sort() # sorted list in alphbatical order. \nprint(txt) \n\ntxt = ['h', 'e', 'l', 'l',"], [0.07751448465020092, 0.027777777777777776, 0.026639359028313193, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\ndef catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " returns a sorted dictionary.\nif __name__ == \"__main__\":\n    array = [0 for i in range(x)]\n    for i in array:\n        print(f'\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430: {array[i]}')\nThe above code generator a empty array filled with zeros.\nif __name__==\"__main__\":\n    with open(\"fruits_list"], [0.1750659544857403, 0.15151515151515152, 0.11858926560782297, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a dictionary on the basis of the key.\ndef get_data(file_path): \n        file = open(file_path, 'r') \n        dict1 = {}\n        for line in file: \n            line = line.strip() \n            lowercase = line.lower() \n            list1 = lowercase.split() \n            dict1[''.join(list1[0:len("], [0.18441105908367186, 0.12195121951219512, 0.24544292659301015, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary in a descending order of values.\nfrom heapq import heapify, heappop, heappush\ndef sorted_heapq(test_list):\n    heapify(test_list)\n    sort=list()\n    while test_list:\n        yield heappop(test_list)\n\n# Problem 1A\n#Write a python function common_member() to find the common element between two lists in"], [0.1470254682439142, 0.2, 0.2095424038071012, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is used to sort the counter function i.e. Counter(dict).\n\n\n\"\"\""], [0.13469930654220702, 0.10810810810810811, 0.14885518127369118, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort counter dictionary.\n\nfrom random import randint\ndef sorted_randint(a, b,num=5 ):\n if a >=b:\n  return\n else:\n  list1 = []\n  try:\n   if num >= 0:\n    for i in range(num):\n     list1.append(randint(a,b))\n    list1.sort()\n    for i in enumerate(list1"], [0.07763826634519284, 0.045454545454545456, 0.014691151166826268, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes in a list of tuples of words and their frequencies and returns a list of tuples of words and their frequency sorted in descending order of frequency.\ndef int_string(x):\n res = [str(a) for a in x]\n return (res)\nThe above code takes in a list of integers and returns a list of strings of integers.\ndef find_match(string, substring):\n res = [i for i in"], [0.10268290023564428, 0.07407407407407407, 0.085469424214003, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the values contained in the counter object into order.\nThe following code pairs1_xor_pairs2() method computes the bitwise xor between the numbers contained in the pairs of tuples contained in the two lists. \n\nThe boolean variable pair_comparison\nis initialised with value to True.\n\nThe inner for loop checks condition that if either or both the pairs of tuples do not \ncontain any number"], [0.12689043084797128, 0.12195121951219512, 0.13418412198171153, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given dictionary based on the key value in descending order, i.e., reverse order and return a list of tuples\n\nimport math\ndef TrigSinCosTan(number):\n\tif number == 'sin':\n  \t\treturn_sin = math.sin(number)\n  \t\treturn return_sin\n\telif number == 'cos':\n\t\treturn_cos = math.cos(number)\n\t\t"], [0.09538084340105886, 0.07142857142857142, 0.09813308490541695, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the sorted list based on the most common elements in a dictionary.\n\ndef concat_list(list1):\n    sum_list = []\n    for item in list1:\n        sum_list=sum_list + item\n    return list(set(sum_list))\nThe above code is a function to return the list that contains only unique elements from the list.\n\ndef stop_words(list1):\n    list"], [0.3163580872858744, 0.2857142857142857, 0.3408242166238352, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the frequencies of a given dictionary.\n"], [0.08375275082001014, 0.06521739130434782, 0.048658514042046776, "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to sort the text based on occurrence count of elements.\ndef list_comprehension(*args):\n    l2=list()\n    for num in args:\n      if num % 2 == 0:\n        l2.append(num)\n    return l2\nThe above code is a list comprehension program new_list = [expression for member in iterable (if conditional)]\n \ndef list_comprehencion(lista):"], [0.07558447959256481, 0.03225806451612903, 0.01717686499609313, "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python counter which sorts the given dictionary.\n  \n\ndef snd_highest(arr,n):\n    highest = max(arr)\n    counter = 0\n    seconds_highest = -100000\n    while(counter<n):\n        if(arr[counter]!=highest and arr[counter]>seconds_highest):\n            seconds_highest = arr[counter]\n            counter=counter+1\n        else:\n            counter"], [0.1501002544374319, 0.11627906976744186, 0.19965061605341686, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary on the basis of count of elements.\n\ndef sum_square_diff(n):\n    n = n - 1\n    summ1 = (n * (n + 1) / 2) ** 2\n    summ2 = ((2 * n + 1) * (n + 1) * n) / 6\n    return int(summ1 - summ2)\nThe above code is a function to find and return the difference"], [0.08077280508540315, 0.06382978723404255, 0.04088237147402929, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " takes a dictionary and then sorts it and returns it in descending order\n\nFor two arrays that represent two numbers, add them by using the and operation and create another array containing the sum\ndef add_array(array1, array2):\n\n    var = len(array1)\n    x = 0\n\n    for i in range(var):\n        array1[i] = array1[i] and array2[i]\n        x = array1[i"], [0.11452055745135721, 0.16129032258064516, 0.1975181023201918, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return the dictionary sorted by key.\ndef is_prime(n):\n prime = True\n for i in range (2,n):\n   if n%i==0:\n     prime = False\n return prime\nThe above code is a function to check prime number.\n"], [0.079978523858771, 0.038461538461538464, 0.05040125896780565, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes as input a tuple consisting stdent data and returns a sorted tuple after using a counter function.\nimport string\ndigs = string.digits + string.ascii_letters\ndef int2base(x, base):\n if x < 0: sign = -1\n elif x == 0: return digs[0]\n else: sign = 1\n x *= sign\n digits = []\n while x:\n  digits.append"], [0.09161281707773475, 0.08571428571428572, 0.10429174441584116, "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\n\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to find the most common value in a given dictionary.\nimport requests\nimport xml.etree.ElementTree as ET\nresponse = requests.get(\"http://py4e-data.dr-chuck.net/comments_687627.xml\").text\nroot = ET.fromstring(response)\nsum_number = 0\nfor comment in root.findall('comments'):\n    for num in comment.findall('comment"], [0.09657585400865791, 0.06382978723404255, 0.11124718669187332, "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the list of most frequent element plus their counts in a dictionary.\n\ndef matrix_addition(matrix_a, matrix_b):\n    if matrix_a == [] or matrix_b == []:\n        return False\n    row1 = matrix_a[0]\n    row2 = matrix_b[0]\n    return row1 == row2\nThe above function checks whether two matrices are compatible (i.e"], [0.12185461523621959, 0.13513513513513514, 0.17187867854508648, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort counter dictionary in python.\ndef sorted_defaultdict(d):\n for key in sorted(d):\n   print(key, d[key])\nThe above code is a function to print defaultdict in sorted order in python.\ni=int(input(\"Enter any row & column: \"))\nl=[0]*i\nm=[l]*i\nprint(m)\n\nThe above code is a program to create a"], [0.14627003252999643, 0.15, 0.2364665217870353, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a given dictionary by its values.\ndef rem(dict1,k1):\n return {k: dict1[k] for k in dict1.keys() - {k1}}\nThe above code is a function to create a sub dictionary; removes a given key from a dictionary.\ndef swap_dict(dict1):\n dict2=dict1.swap\n return dict2\nThe above code is to make the keys of a"], [0.14967080837883448, 0.125, 0.14957944269761259, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts counter values of a dictionary in a descending order.\nfrom collections import Counter\ndef Sorting(dict1):\n    x=Counter(dict1)\n    y=x.most_common(2)\n    sorted_dict = dict(y)\n    return sorted_dict\nThe above code is a python function to sort a dictionary based on the two largest values.\nfrom collections import Counter\ndef Sorting(dict1):\n x"], [0.17495376804020993, 0.11904761904761904, 0.12000076780003113, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary based on the frequency of occurrance of the corresponding elements.\n#!/bin/python\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the sockMerchant function below.\ndef sockMerchant(n, ar):\n\tcolors= list(set(ar))\n\tresults=[]\n\tprint colors\n\tfor i in colors:\n\t\tpairs= ar.count("], [0.09064435434844716, 0.11363636363636363, 0.1806319218001533, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes in a dictionary and returns a sorted list of pairs according to the highest value.\n\nfrom collections import defaultdict\ndef flatten_dict(dict1):\n  d=defaultdict(int)\n  for k, v in dict1.items():\n    d[k]=sum(v)\n  return dict(d)\nThe above code is a function that takes in a nested dictionary of unknown depth and returns a flat dictionary with each"], [0.08568130627484105, 0.09090909090909091, 0.19959214393832142, "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is python function, which sorts a given dictionary by value in descending order.If the values are same then it\nwill sort the dictionary by keys in descending order.\n                                                                                                                     \ndef combine_tuple(my_list):\n     result = []\n     for i in my_list:\n         if isinstance(i, tuple):\n             result.extend(i)\n     return result\n                                                                        are more number of instances"], [0.08966139995719101, 0.08163265306122448, 0.09032305872550149, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes in a dictionary and returns a sorted list of key value pair in descending order.\ndef tree_to_data(Tree):\n list = []\n node =list(Tree.Traverse())\n list = star(list, Tree, node)\n return list\nThe above idea is inspired by 'A SIMPLE, PREORDER TRAVERSAL IMPLEMENTATION OF A TREE USING **ARGS'.\"\nimport math  \ndef Binomial"], [0.08542101108033565, 0.06666666666666667, 0.060292533003655384, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts a dictionary on the basis their occurence.\nfrom collections import Counter\ndef counter_duplicates(dict1):\n x = Counter(dict1)\n duplicates = x.items()\n return duplicates\nThe above code is a function that gives each distinct item and its count for each item in the given iterable for a Counter.\nfrom collections import Counter\ndef counter_mapping(dict1):\n x = Counter(dict"], [0.07378402087321236, 0.024390243902439025, 0.0, "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " counts the most common words in a given string.\nfrom collections import Counter\ndef word_counter(word):\n     c = (Counter(word).most_common(10))\n     return c\nThe above code counts the most frequent words in a given string and displays 10 most common.\nfrom collections import deque\nimport string\ndef reverse_words(text):\n  word_list = deque()\n  final_word = deque()\n  rev"], [0.09421142608842943, 0.09375, 0.10657035539480765, "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts the counter by key. \ndef generate_fib_modified(n): \n p=0\n q=1\n r=0\n for i in range(n): \n  if q==1:\n    r=p+q\n    p=q\n    q=r\n  elif q>1:\n    r=p**2+q**2\n    p=q\n    q=r\n return"], [0.08105646371546442, 0.04081632653061224, 0.02688261815190449, "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " sorts a dictionary in descending order.\n\ndef sqrt(x):\n    print(x)\n    # Base cases\n    if (x == 0 or x == 1):\n        return x\n\n    # Do Binary Search for floor(sqrt(x))\n    start = 1\n    end = x\n    while (start <= end):\n        mid = (start + end) // 2\n\n        # If x is a perfect square\n        if (mid"], [0.07775546331227855, 0.08, 0.15434322127919453, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is given a dictionary, the function returns the keys sorted by their values in descending order.\nlist1 = [1,1,5,5,5,5,5,10, \u2206\u2206\u2206\u2206,\u2206\u2206\u2206]\nFound this list to be quite messy! Not able to understand how many 1s, and how many 5s and 10s in this list! Can you use your programming skills to count how many instances of 1s"], [0.1406587273968485, 0.11764705882352941, 0.12919398923363998, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the most common word in a natural order. https://www.geeksforgeeks.org/python-sort-counter-according-to-count/\nfrom itertools import zip_longest\nfrom decimal import Decimal\nimport math\ndef Median(arr):\n    menor=min(arr)\n    s=0.0\n    for i in arr:\n        if i==menor:\n            arr.remove("], [0.08249270730666546, 0.06818181818181818, 0.060292533003655384, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes in a dict and returns the dict elements sorted by its occurrence.\n\n\nfrom itertools import accumulate\ndef most_frequent(string):\n    x = list(accumulate(string))\n    m = [item for item, count in Counter(x).most_common(1)]\n    return m\nThe above code is a function that takes in a string and returns the most commomn number in the string.\n\nfrom"], [0.17111606879280258, 0.11428571428571428, 0.08936578495888572, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a given string using Counter function.\ndef isomorphic(astring1,astring2):\n if len(astring1) != len(astring2):\n  return 'is not isomorphic'\n if len(astring1) == len(astring2):\n  li = list(astring1)\n  x = 'not'\n  for i in range(len(li)):\n    if li[i"], [0.10080390715774643, 0.07692307692307693, 0.11671770522446967, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to sort a dict() using the Counter() method.\n\n\ndef triangular_number(n):\nsum = 0\nfor i in range(1,n+1):\nsum += i\nreturn sum\nThe above code is to get a triangular number up to a specified number.\n\n\nimport re \ndef validate_email(email):\npat = \"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?"], [0.09096036765839902, 0.06, 0.08237773191080597, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\ndef large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the most common elements and their counts of a counter object.\ndef prime_fact(n):\n result=[]\n i = 2\n while i * i <= n:\n    while n % i == 0:\n        n = n / i\n        result.append(i)\n    i = i + 1\n if n > 1:\n    result.append(n)\n return result\nThe above code is to find all prime factors"], [0.07840094050632047, 0.03508771929824561, 0.060580241409321556, "import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " makes a function called sort_counter which can take a dict as input and return sorted version of key - value where it sorts a dict in descending order of count of occurances of each key. If a key has multiple values then the count considers only the alphabetically first value of that key.\nfrom collections import defaultdict\ndef print_car(dict1):\n x=defaultdict(list)\n for i,j in dict1.items():\n        x[i]."], [0.14223058433309005, 0.16666666666666666, 0.3358284261482319, "def last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a counter object by value.\ndef default_arg(a,b=10,c=20,d='something'):\n    print (a, b, c, d)\n    return\nThe above code is a python function to test a function with default arguments.\ndef flatten_dict(a,string=\"\"):\n    x=string\n    for key, value in a.items():\n        if isinstance(value"], [0.0989932358457249, 0.14285714285714285, 0.2002333481513066, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the given dictionary according to the value.\nWe have seen that the items() method of Python Dictionary returns a view object. The view object contains the key-value pairs of the dictionary, as tuples in a list. The items are not the values of the dictionary but are rather the key-value pairs\n\n'''"], [0.14291552784964048, 0.09523809523809523, 0.04635331029920127, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a python counter data structure based on the values they have\nimport string\ndef remove_cont_char(string):\n    x = string[0].lower() #Captializes the first char in the string\n    string = x + string[1:] #string minus the first char\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]\n            string = string.replace"], [0.13740879655381352, 0.11904761904761904, 0.2101391753577606, "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to count the occurrences and to sort a dictionary with respect to values.\ndict1={\"A\": 5, \"B\": 10, \"C\": 1, \"D\": 7}\nsort_counter(dict1)\nThe above method returns a tuple of n tuples, where n is the dictionary length, in other words n will be the returned length.\n"], [0.18720549510878376, 0.2916666666666667, 0.3988057339223151, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the dictionary elements by their value. \nlink: \nHint: Use counter and itemgetter to get sorted list of dictioneries.\n'''"], [0.09283110502534611, 0.06976744186046512, 0.07644543682429066, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes as input a dictionary (dict1) and returns a list of two tuples containing the key value pairs in descending order of frequency.\ndict={\"a\":20,\"b\":20,\"c\":20,\"d\":30,\"e\":50,\"f\":30}\nprint(sort_counter(dict))\n\nsort_counter(dict)\nThe output of the above code cell should be\n[('f', 2), ('e', 1),"], [0.16694292078481812, 0.11363636363636363, 0.13897594793986257, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary of distinct words lexicographically in decreasing order.\n\ndef regex_match(String, pattern):\n import re \n match = re.compile(pattern) \n if(match.search(string)): \n    return True\n else: \n    return False\nThe above code is a function to return true, if the pattern is present in the given string using regular expression matching.\n\ndef roll_dice("], [0.1623111863329198, 0.25, 0.22150013430590973, "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts the Counter dictionary by decending order.\n\"\"\""], [0.13624201439214867, 0.07547169811320754, 0.09239470690746586, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a counter object.\n\ndef run_length_encoding(strings):\n from itertools import groupby\n res = []\n for key, iter in groupby(strings):\n res.append((key, len(list(iter))))\n return res\nThe above code is a function for encoding strings into run-length encoded strings.\n\n# 31 Blackjack: Given three integers between 1 and 11, if their sum is less than or"], [0.10566001655636421, 0.0975609756097561, 0.1524132689009191, "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return the key-value pairs in a dictionary sorted according to the key and without changing the dictionary.\ndef form_dict_from_two_lists(list1, list2): \n    ''' Return a Dict created from list1 and list2\n    For key, value in dict.items(): ...''' \nDict = dict(zip(list1, list2)) \n  \nprint(\"Dict is \", Dict"], [0.1139701824422832, 0.08571428571428572, 0.07986908843378579, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return the most common element in a list of dictionaries.\n\nimport itertools\ndef max_histograms(area_list):\n area_list.sort()\n res_dict=dict(zip(range(len(area_list)),area_list))\n count=0\n while any(res_dict[key]>0 for key in res_dict):\n  keys = filter(lambda x: res_dict[x]"], [0.12024429225558983, 0.10256410256410256, 0.15962085852287375, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter.\n\ndef make_dict(dict1,dict2):\n i = 0\n List = []\n make_dict = {}\n length = len(dict1)\n for i in range(length):\n   make_dict[dict1[i]] = dict2[i]\n return make_dict\n The above code is a function to form a dictionary.\n\ndef prime(num):\n if num == 1 or num"], [0.10247868964256375, 0.08108108108108109, 0.04029417571042426, "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find whether every element is distinct in a dict.\nfrom copy import*\ndef remove_duplicates(list1):\n list2 = deepcopy(list1)\n if len(list2) == 0 or len(list2) == 1:\n  return list2\n for i in list2:\n  if list2.count(i) > 1:\n   list2.remove(i)\n   \n return list2\n"], [0.08311367536438638, 0.06818181818181818, 0.06271655300431446, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts the keys of a Counter dictionary in ascending order.\n\ndef solve(s1):\n    m=0\n    for s in s1:\n        for sp in listdir(\"dir\"):\n            if s==sp[0]:\n                m+=1\n    return m\nThe above code is a function that finds the total number of files having the first character as s in python.\n\ndef proper(st):\n\n\nThe above"], [0.14137254955454848, 0.12195121951219512, 0.1469180669703866, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a dictionary in a descending order of values. \ndef dic1(Lista):\n\n dict1 = {}\n\n for i in Lista:\n\n    if i in dict1:\n\n        dict1[i] += 1\n\n    else:\n\n        dict1[i] = 1\n\n return dict1\nThe above python function to get counts of repeated items in the list.\u200b   \ndef main():\n    lines = int(input"], [0.07316902073186296, 0.04081632653061224, 0.10777365884313986, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is an in-place sort of the counter dict which is being passed as an argument of this function.\ndef write(file1,word):\n file1.down()\n file1.word(word)\n file1.mode = 'a'\nThe above code is used to write the word or phrase in the text file.In file1.write for the direct return of word in the file.\n# HOMEWORK\n# QUESTIONS\n\n# QUEST"], [0.11963330187207767, 0.125, 0.13897594793986254, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort an Counter class by its values.\nfrom collections import Counter\n\ndef convert_tp(list1):\n x = Counter(list1) \n\n dict1= dict(x)\n convert_tp = sorted(dict1, key=dict1.get, reverse=True)\n return convert_tp\nThe above code is a function to separate the list into collections of keys and values.\n\nfrom collections import Counter\ndef nested_items"], [0.07711255789007314, 0.06, 0.09812800269092133, "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is The input is given as a dictionary. This functions returns new dictionary of the most frequent value in a given dictionary using function Counter from the collections package.\nfrom functools import reduce\nfrom operator import itemgetter\ndef update_manager(manager,update):\n  return{k : update(v,p) if k in manager else v for k,v, p in zip(manager,update,manager.values())}\n\nThe above code is The input"], [0.09730291163251488, 0.10526315789473684, 0.16927782128858657, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes a dictionary as argument and return a list of key-value pairs, that are sorted and arranged according to value as a key. \ncount_dict={'apple':20,'orange':40,'mango':10}\nsort_counter(count_dict)\nimport collections\ndef default_factory():\n    return 'default value'\nD = collections.defaultdict(default_factory, foo='bar')\nD['foo']"], [0.16584796906241764, 0.1724137931034483, 0.11374922003569042, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is the function to sort a dictionary of keys,values.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nsort_counter={'a':5,'b':2,'c':3}\nThe above code is the dictionary of keys,values.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter("], [0.08367636035725759, 0.05263157894736842, 0.1456243080620875, "def jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is an empty procedure to sort the dictionary.\ndef missing_element_sq(i): \n    n = len(i) \n    total = (n + 1)*(n + 2)/2\n    sum_of_sq = sum(x*x for x in i) \n    return total - sum_of_sq\n \nw =missing_element_sq([1,2,3,4])\nThe above code is to find"], [0.1459764232457694, 0.11428571428571428, 0.08920811316140323, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to sort a dictionary of elements.\nfrom collections import Counter\ninput1 = ['eat', 'tea', 'tan', 'ate', 'nat', 'bat']\ndict1=Counter(input1)\ndef group_anagrams(strs):\n    dict1=Counter(strs)\n    s=[]\n    for i in dict1:\n        if dict1[i]>1:\n            s.append(i)\n"], [0.07941848432128963, 0.058823529411764705, 0.02688261815190449, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to return list of tuple having top three most common string from a given list of strings.\ndef list_art(list_of_art,n):\n  list_n=[]\n  for i in range(len(list_of_art)):\n    if list_of_art[i][1]<11:\n        list_n.append(list_of_art[i][0])\n    else:\n       if list_"], [0.13876505891744506, 0.0975609756097561, 0.12314592547267483, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a counter form a dict object in alphabetically raising order.\nfrom collections import OrderedDict\ndef get_order(orddd):\nls = []\nfor k, v in orddd.items():\nls.append(k)\nreturn list\nThe above code is a function to create a list of dict key in order.\nfrom collections import OrderedDict\ndef group_list(lis1):\nndict={}\n"], [0.08568130627484105, 0.07894736842105263, 0.09867083995553776, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that takes in a dictionary and returns a list of values for that dictionary sorted in descending order\ndef remove_non_alpha(string):\n    \n    \n    \nThe above code is a python function that accepts a string and returns it with no spaces or punctuation and all in lower case.\n\n"], [0.12390425199997274, 0.16, 0.10416587799720856, "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\n\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort counter.\n\"\"\"\nk=int(input())\na = input()\nb = input()\na = Counter(a)\nb = Counter(b)\na = a.keys()\nb = b.keys()\na = list(a)\nb = list(b)\na = sort_counter(a)\nb = sort_counter(b)\np = 0\na = a.keys()\nb"], [0.07706291512489323, 0.03571428571428571, 0.0, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " returns a sorted Counter.https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nimport random\ndef coinflip() :\n    flip=random.randint(1,6)\n    if flip==1 :\n        print('Heads')\n    elif flip==2 or flip==3 or flip==4 or flip==5 or flip==6 :\n        print"], [0.19955989934407306, 0.14814814814814814, 0.19793808353152137, "def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a counter collection.\nfrom collections import OrderedDict\ndef sort_dict(dict1):\n od = OrderedDict(dict1)\n return od\nThe above code is a function which sorts a dictionary.\n"], [0.10667929872826132, 0.13043478260869565, 0.18546723700244286, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort counter by value.\nThe code is using formula Number digits = absolute value of the number * 4 in base 10 rounded up to\nthe nearest integer.\n\ndef number_digits(num):\n total=0\n if num>=0:\n    total+=len(str(abs(num)))\n    for i in str(num):\n     if int(i) < 5:\n      total+=4\n     else:\n"], [0.11414292377682912, 0.09090909090909091, 0.07810103891179017, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort countr as per highest frequency.\nSection - C\nimport collections\nfrom collections import Counter\n \nabc = 'abcabcabc'\nstuff = collections.Counter(abc)\ncount_sum = sum(stuff.values())\ncat = [ k for k , v in stuff.iteritems() if float(v) / count_sum > 0.4]\ncount_sum1 = sum(a for a in cat if a !="], [0.20360162808345292, 0.18181818181818182, 0.14802578168610994, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary by values.\n\n\ndef prod_small(n, ar):\n  ar = sorted(ar)\n  prod = 1\n  length = 0\n  x = -1\n  while ar[x] > 0:\n     prod *= ar[x]\n     length += 1\n     x -= 1\n     \n     if prod > 1e18:\n       prod = -1\n       break\n\n  if (length"], [0.08855752973192076, 0.08108108108108109, 0.10691294851341845, "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts a dictionary of counts in ascending order.\n\ndef two_highest(list1):\n  list1.sort(reverse=True)\n  res = list1[:2]\n  return res\nThe above code is a function that takes a list and returns the two highest values.\n\ndef remove_every_other(list1):\n  return list1[::2]\nThe above code is a function that returns a list where"], [0.09158186070038334, 0.08823529411764706, 0.1889191164726737, "def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that gives keys with the highest values. https://stackoverflow.com/questions/613183/how-do-i-sort-a-dictionary-by-value\n \nclass CounterCustom(Counter):\n def __repr__(self):\n   repr((k, v) for k, v in self.most_common())\nThe above code gives the CounterCounterCustom(CounterCustom)()string in decreasing value. https://"], [0.08441671339318567, 0.0851063829787234, 0.09186846173332754, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum\nThe above code is a python function to find the sum of the largest and smallest value in a given array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that takes in a dictionary and returns a list of sorted words.\nBody (main function) \ndef main():\nn = input(\"Enter the number of terms: \")\n#Sum of natural numbers up to num\nsum = 0\nfor num in range(1,n+1):\n    sum = sum + num\nprint \"\\nTriangular number \"+str(n)+\" is \"+str(sum)\n\ncount = 0\n#"], [0.10402151005882844, 0.09523809523809523, 0.1514362033642439, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that sorts a dictionary by value in a descending order.\n\nfrom math import sqrt\n\ndef fibonacci(n):\n se= sqrt(5)\n phi= (1+sqrt(5))/2\n psi= 1-phi\nreturn (phi**n - psi**n)/se\nThe above code is a function that returns the nth value in the fibonacci series.\nfrom datetime import datetime,"], [0.11975474025840907, 0.11363636363636363, 0.13728703764324365, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python code to sort a dictionary based on the frequency of its occurrence. \ndef my_sum(nums):\n return sum(set(nums))\nThe above code is python function to find the sum of uniq elements present in the list.\ndef sum_multiple(n ):\n  return n * (n + 1) / 2\nThe above code is a function to find the sum of multiples of n below 10000.\ndef multiply_arr"], [0.08655404593900339, 0.06666666666666667, 0.07986908843378579, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to return the key, value pair of a counter object where values are sorted.\nfrom collections import defaultdict\ndef contacts(QUERY, CONTACTS):\n lookup = defaultdict(list)\n for c in CONTACTS:\n  c = c.split()\n  lookup[c[0]].append(c[1])\n names = QUERY.split()\n if names[0] not in lookup:\n  return 'ERROR"], [0.07449537625589495, 0.02631578947368421, 0.0794475404604274, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " returns a sorted tuple of all the key-value pairs in the Counter Dictionary object dict1.\n\ndef list_counter(lst1):\n x = Counter(lst1)\n word_frequency=x.most_common()\n return word_frequency\nThe above code returns a sorted tuple of all the key-value pairs in the Counter Dictionary object of an input list lst1.\n\ndef remove_punctuation(sent):\n x=remove_"], [0.08240119469795182, 0.04878048780487805, 0.021718769497816648, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " will take a dictionary and then sorts it.\ndef convert_lower(str):\n str1 = str.lower()\n return str1\nThe above code converts the given string into lower case.\ndef convert_list(list1,list2):\n new_list=[]\n while list2:\n     new_list.append(list1[list2.pop(0)])\n return new_list\nThe above code takes two two lists as input,"], [0.10002182534493241, 0.0851063829787234, 0.14757838883242544, "def sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find out the occurrence of each letter and sort it based on occurrence. For example if we give {\"a\":3, \"b\":2, \"c\":3}, then it should return [([\"c\", 3], [[\"b\", 2], [\"a\", 3]])]\n\ndef find_second_largest(num):\n    for value in sorted(num, reverse=True):\n        if value>=num[0]:\n            num.remove"], [0.08475069295343812, 0.07142857142857142, 0.18264967371169485, "import heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python script which gets input from a dictionary and return the dictionary sorted by its values.\nIn a dictionary, keys are not necessary to be of integer type.\nFor instance:\n\ncalling this method on dictionary\ndict = {1:\"tom\", 2:\"bob\", 3:\"jon\", 4:\"she\"}\n\nwill give this output:\n[(2, 5), (1, 4), (4, 2), (3, 1)]\n\ndef inverse"], [0.08210027202935208, 0.08163265306122448, 0.10550602433871897, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that takes in a dictionary of Counter and returns the sorted version by value in decreasing fashion.\n\n\n\ndef list_search(list1, x):\n return [i for i in list1 if x in i]\nThe above code is a python function that takes in a list of strings and returns the first string which is a concatenation of the other strings. \n  \n  \n  \n3.\n class Rectangle:\n def __init"], [0.09427316972501788, 0.06818181818181818, 0.12004960757566902, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to calculate the most common word in a dictionary.\n\nfrom heapq import nlargest\ndef output_khighest(nums, k):\n return nlargest(nums, k)\nThe above code is a function to get k largest number from a list assuming the list is sorted.\n\nfrom random import randint\ndef generate_random_nums(n):\n return [randint(1, n) for i in range(n)]"], [0.08542101108033565, 0.06, 0.04426617091801172, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a funtion that takes a dictionary and gives a list of all the sorted keys in such a way that their\nvalues grows in lexicographically sorted manner.\nfrom collections import Counter\ndef remove_duplicate(x):\n words = Counter(x)\n result = []\n for word in x:\n     if words[word]>1:\n         continue\n     result.append(word)\n return result\nThe above code is a function that takes a"], [0.16373679616705983, 0.15, 0.2253609150515388, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a python counter by value.\ndef freq_sum(a, n):\n\tsum1=0\n\tx = collections.Counter(a)\n\tsum1=sum(i for i in x.keys() if x[i]== n)\n\treturn sum1\nThe above code is a function to find the number of elements with the specified frequency.\n\ndef hand_fun(a,b,c,d):"], [0.12390425199997274, 0.125, 0.13698823965972018, "def binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter using most_common() method.\ndef capitalize_both(string):\n     x=(string.upper(),string.lower())\n     return x\nThe above code is a function to return a tuple.\ndef inverse(num):\n    return 1/num\nThe above code is a function that gives the inverse of a number.\ndef pythogorean_triple(a,b,c):\n     if(a**"], [0.13469930654220702, 0.12121212121212122, 0.14726506116478053, "def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter object on the basis of frequency. https://time.geekbang.org/column/article/89378\nfrom collections import Counter\ndef times2(x): \n\treturn 2*x \ndef multiply(multiplier): \n    #function to return a function that holds *multiplier* \n\tdef multiply2(arg2): \n\t   return multiplier*arg2 \n\treturn multiply2 \n"], [0.08843553823516173, 0.06153846153846154, 0.19351941264260492, "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return a dictionary as dictionary(key with highest value comes first, then second highest and so on), when keys and values are given as list[]\n\nIn a multi-step process where each step is not incrementally better than the previous step, but instead leads to the final result, we can use the Reduce() function to accomplish our process in a single lambda function.\nIn this example the Reduce() function will take a list of numbers and apply the defined lambda "], [0.10111249196297543, 0.09302325581395349, 0.09575407948376444, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes in a dictionary and returns a sorted counter.\nimport csv\n\ndef read_csv_column(path):\n    with open(path, encoding=\"utf-8\") as f:\n        reader = csv.reader(f)\n        column = list(zip(*reader))[0]\n    return column\nThe above code is a function to read data from a csv file, extract the first column and return them as a list"], [0.08414444180001199, 0.047619047619047616, 0.028207506849733676, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is for sorting a dictionary on the basis of its keys. Replicate this code for Priority Queue and Heap data structure.\n\nfrom collections import defaultdict\ndef sort_default(input_dict):\n    d = defaultdict(list)\n    for k,v in input_dict.iteritems():\n        d[v].append(k)\n        #d.setdefault(v,[]).append(k)\n    return dict(d)\n"], [0.12485591413554181, 0.15789473684210525, 0.12442854619985261, "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function which takes a counter dictionary and returns a sorted list of tuples.\n\"\"\""], [0.09786910349391173, 0.0851063829787234, 0.09574077343099614, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return counter in descending order.\noriginal = [1,2,3]\ncopied_version=list(original)\n#now marking copied_version\ncopied_version[0]='one'\nprint(original)\nprint(copied_version)\nNow marking original will not change the value of copied_version because\nit creates shallow copy where internal objects are not copied and are referenced by conditions.\ndef swap(a, b"], [0.11836469601925972, 0.10416666666666667, 0.18554171536334296, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort and print a dictionary according to the decreasing order of their values.\nfrom itertools import groupby\ndef Difference(li_diff,li2):\n    return [g for g,v in groupby(li_diff) if len(list(v))%2!=0]\nThe above code is a function to find all pairs of integers from a given list who have a difference of K.\nnums = map(int,"], [0.0854613968827531, 0.0625, 0.025728438080112864, "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that sorts the keys in a counter with their values in descending order.\n\nfrom itertools import combinations\ndef largest_two(dict1):\n    lst1=list(dict1.items())\n    od=Counter(dict1)\n    ele1=od.most_common(1)[0][0]\n    ele2=od.most_common(2)[0][0]\n    comb=list(combinations"], [0.08789922672202222, 0.09523809523809523, 0.08370868895345533, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a programming function to count elements in the dictionary and associate it with the element.\n\ndef count_occurrence(str,word):\n z=str.split(\" \")\n count=0\n for i in range(0,len(z)):\n  if(z[i]==word):\n    count=count+1\n return count\nThe above code is a program to count the occurrence of a word in a sentence.\nSome important coding competitions"], [0.08879534716826956, 0.0975609756097561, 0.05167474105535727, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that is used to print a dictionary using the Counter module in a sorted order\nslow reverse LL using prev node..\ndef solution(head):\n    temp = head.next;\n    prev = head;\n    next = None;\n    ptr = head;\n    while temp :\n        next = temp.next;\n        temp.next = prev;\n        prev = temp;\n        temp = next;\n    head.next = None;"], [0.12961916076030933, 0.1282051282051282, 0.2795761274022747, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the passed dictionary based on the value( which must be present in the integer value)\nsort_counter({\"a\":2, \"c\":1, \"b\":5, \"e\":1, \"d\":5, \"f\":2})\n[('b', 2), ('a', 2), ('f', 1), ('d', 2), ('e', 1), ('c', 1)]\nx = \"hello\\\\ttello\""], [0.08409347306803565, 0.07692307692307693, 0.09979741056319602, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes in a dictionary and returns a list of tuples of the items and their frequency, with most frequent items first, and less frequent items later.\nThis is one iteration in a function that will produce a frequency of how many lists in the bayes function consist of a category at each index, starting from zero to the max number of categories. \n\ndef frequency_finder(a,b):\n test_list=[]\n frequency_list=[]\n"], [0.09807761076768491, 0.12195121951219512, 0.14885518127369118, "def find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function which takes a dictionary and returns a sorted list of pairs of key-value, where the pairs are sorted by value.\nfrom collections import deque\ndef count_Deque(n, deq): \n    if len(deq) == 0: \n        return\n    else:  \n        print(deq[0], end = \", \") \n        count_Deque(n, deq[1:]) \n"], [0.09386210803746556, 0.1, 0.12068419797474146, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts a dictionary according to the value of the number.\nimport random\ndef shuffle(nums):\n random.shuffle(nums)\n return nums\nThe above code is a functio to shuffle a set of numbers.\nclass LinkedList:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\ndef merge_two_sorted_lists(l1,"], [0.08155302719350083, 0.05357142857142857, 0.1256709864122242, "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes a dictionary of frequencies and then sorts the dictionary and returns sorted dictionary.\n                        Python | Dictionary functions\nitems(): \nThe method items() has the following sections will have the identical function and work completely the same way in Python. \nThe method items() returns a sequence of tuples containing the dictionary's (key, value) pairs.\n\niteritems() is used instead of the items() because of any future changes in the implementation.\n\nclear"], [0.08475069295343812, 0.08888888888888889, 0.10588200952267858, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to print the dictionary in the reverse order.\nimport aljebra\ndef short(arr,arr_check):\n  for i in arr:\n\n    for j in arr:\n\n      if (i-j,i-j+1) in arr_check:\n        return False\n\nreturn True\nThe above code is a python function takes in a list of sets as inputs and print out non-intersecting pairs that add up to the"], [0.1240558261510522, 0.12244897959183673, 0.204782069577911, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a dictionary based on the values and return a list that contains all the values sorted by value in descending order. Negative term frequency - TF\nfrom collections import OrderedDict\ndef ordered_dict(dict1):\n order = OrderedDict(dict1)\n return order\nThe above code is a python function that accepts a dictionary as an argument and returns an ordered dictionary  based on the keys, in a sorted order.\nfrom collections import"], [0.08509628078456316, 0.08163265306122448, 0.1384233574892425, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function which is sorting a dictionary, each key and value pair is sorted by value.\nresult = [x-y for x, y in zip(s1, s2)]\n\n  \nThe above code is used for taking the differences of two list and making it into one.\ndef fib(n):\n    a,b = 1,1\n    for i in range(n-1):\n        a,b = b,a+b\n"], [0.09341498328271274, 0.06818181818181818, 0.04865851404204677, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to that sorts the given counter (+) with the most frequent element in first (+) and the least frequent element in the last (+).\nfrom pandas import DataFrame\nimport pandas as pd\ndf = pd.read_csv('C:\\\\Data Science\\\\Assignments\\\\datas.csv')\n\n#Task 2:\ni = '*'\nfor row in range(7):\n    display_dia = ''\n   "], [0.09596679051373773, 0.07142857142857142, 0.12156820303474558, "def binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return elements in descending order of how many times they occur in a dictionary.\nfrom math import pi\ndef  vol_sphere(r):\n vol_sphere=4/3*pi*a*a*a\n return vol_sphere\nThe above code is a function to find the volume of a sphere given its radius r.\nfrom math import pi\ndef vol_cylinder(r,h):\n a=vol_cylinder"], [0.07143333968988452, 0.018867924528301886, 0.024521856235928924, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " shows the key with the maximum value.\n\ndef index_of_caps(string):\n    x = sorted([(string.index(y), y) for y in string if y.isupper() and y.isalpha()])\n    return [y for x,y in x]\n\nThe above code checks whether there are no capital letter (i.e. all are lower case), and then returns an alphabetized list.\npip3 install build"], [0.08509628078456316, 0.08163265306122448, 0.07591653343266506, "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function which counts how many times an element occurs in a dictionary and returns it in an array.\nMorse code is a method where words are represented by a series of dots and dashes. https://en.wikipedia.org/wiki/Morse_code#Representation.\nSince this mapping is not \n.1(dot) and .(minus) 1\n.\n.\nGiven the translation between the two [a-zA-Z0-"], [0.13291845536923663, 0.1282051282051282, 0.15486524035185845, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given dictionary based on the highest values first.\ndef least_ops_expand(s):\n s=list(s)\n n=len(s)\n p=int(pow(2, n))\n ml=[]\n for i in range(p):\n  k=[]\n  for j in range(n):\n   if ((i >> j) & 1) == 1:\n    k.append(s"], [0.08197175859587691, 0.06382978723404255, 0.09913990190415302, "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to sort the given dictionary after converting its keys and values into Keys and Values respectively in the form of key value pairs.\nfrom functools import wraps\nfrom time import time\ndef timing(f):\n    @wraps(f)\n    def wrap(*args, **kw):\n        ts = time()\n        result = f(*args, **kw)\n        te = time()\n        print('func:%r args:[%r, %r"], [0.14524165778419182, 0.14705882352941177, 0.1103403940827921, "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given dictionary based on key values in descending order.\n\ntask_to_find=int(input(''))\nimport string\nwith open('test.txt') as infile:\n  lines=0\n  words=0\n  characters=0\n  for line in infile:\n    wordslist=line.split()\n    lines=lines+1\n    words=words+len(line.split())\n    characters"], [0.12511129961586517, 0.13793103448275862, 0.15472378921125546, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to print the given dictionary in descending order i.e according to their values.\nfrom functools import reduce\ndef play_pass(str1, number):\n inp_str=str1.lower()\n mapstr=str.maketrans(\"abcdefghijklmnopqrstuvwxyz0123456789\" \"z0123456789abcdefghijklmnopqrstuvwxy"], [0.2808131219495377, 0.26666666666666666, 0.1904842771117607, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the words in the given user's phrase.\n\n\n"], [0.09855648524364968, 0.06818181818181818, 0.10771672586398515, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the sorted pairs of a dictionary.\n\ndef k_smallest_bst(root, k):\nreverse inorder\n\nThe above code is to find the kth smallest element of a binary search tree.\n\nfrom heapq import *\ndef add_to_median_heap(minh, maxh, elem):\n if not maxh or -maxh[0] >= elem:\n    heappush"], [0.1086103989104916, 0.08333333333333333, 0.04899992164805423, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to count the frequency of the appeared character in a string.\n\nclass Enigma:\n    \n    def __init__(self, dict1={}, dict2={}, dict3={}):\n        self.d1 = dict1\n        self.d2 = dict2\n        self.d3 = dict3\n    \n    def encrypt(self, d1={}, d2={}, d3={}):\n        res_dict"], [0.08414498170785092, 0.06, 0.09293010032487574, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes in a dictionary and returns a counter sorting the keys in descending order and printing the original keys and their counts.\nfrom scipy.stats import bernoulli as B\ndef bernoulli(p):\n  succes = B.rvs(p, size=1000).tolist()\n  return succes\nThe above code is a function that accepts a parameter p where p is a float having a value between 0 and 1"], [0.14690481046113907, 0.16666666666666666, 0.34406605121601463, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a dictionary according to value. The function takes input being a dictionary and returns a list of tuples sorted according to value.\nfrom collections import namedtuple\ndef named_tuple(my_dict):\n n_tuple=namedtuple('n_tuple',my_dict.keys())\n return n_tuple(*my_dict.values())\nThe above code is a python function to convert a dictionary into a named tuple"], [0.15412977051524665, 0.1282051282051282, 0.13602183153499095, "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dict by its values. The function should return a list of tuples, where the first element of each tuple is the key and the second is the value of this key.\n\nclass Person(object):\n    def __init__(self,name, surname, year_of_birth):\n        self.name=name\n        self.surname=surname\n        self.year_of_birth=year_of_"], [0.0978797397482496, 0.12195121951219512, 0.1477893461993244, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort dictionary values either in ascending/descending in order(lexicographically).\n\nN = int(input())\nA = [input() for i in range(N)]\nB = [input() for i in range(N)]\n\nif [i for i, j in zip(A, B) if i == j]: print(\"YES\")\nelse: print(\"NO\")\nThe above code is a python function to check whether 2"], [0.12943598499852646, 0.10526315789473684, 0.07591653343266506, "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the Counter object in the descending order of the count of elements.\ndef __init__(self):\nself.a = []\nif __name__ == '__main__':\nfile_1=open(\"test.txt\")\ndic_1=defaultdict(int)\nfor word in file_1.read().split():\n dic_1[word] +=1\nfile_1.close()\nThe above code is"], [0.08576870438450147, 0.07407407407407407, 0.046135533763374155, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that counts the number of elements and sorts them based on their count in descending order.\n'''"], [0.11477351666949628, 0.11627906976744186, 0.174928796549101, "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter based on the key and then by value in descending order.\ndef findOccurrences(s, ch):\n    return [i for i, letter in enumerate(s) if letter == ch]\nThe above code is a function to measure the no. of occurrences of a cha-arter in a string and return the indices of it.\n\n\n"], [0.12523526950638206, 0.1, 0.23673057644784845, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter from a dictionary.\ndef Map(function,C):\n return [function(x) for x in C]\nList comprehension to satisfy given a list of numbers, swap the first and last elements.eg\n\n# Sample Input\n# [2,4,6,7,1,89,4,6]\n# Sample Output\n# [7,4,6,2,4,6,89,1]\nA"], [0.10744305551769087, 0.11428571428571428, 0.11619060136572575, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the tuples in a dictionary for most_common this sorts in dictionary order.\n\nimport string\ndef ascii_num():\n    table = []\n    for x in string.ascii_lowercase:\n        row = [str(a) for a in range(1,27)]\n        x = list(x)\n        z = zip(x,row)\n        z = tuple(z)\n        h"], [0.1282929018550329, 0.13513513513513514, 0.1937200051066759, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the dictionary based on its values.\nimport json\ndef to_json(str1):\n json1= json.dumps(str1)\n return json1 \nThe above code is a function to convert a string to JSON.\n\ndef sum_floats(lst):\n a=0\n for i in lst:\n  if type(i)==float:\n   a=a+i\n return a\nThe"], [0.10493553705172601, 0.13513513513513514, 0.12743389183146447, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\nimport math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to count the number of elements in the dictionary and sort it in a decreasing order based on the count of the element.\ndef concatenate(dict1,dict2):\n  dict3=dict1.copy()\n  dict3.update(dict2)\n  return dict3\nThe above code is a function to concatenate two dictionaries.\ndef check(dict3,dict2):\n sum=0\n dict1=dict2"], [0.1504260661082638, 0.12903225806451613, 0.09378406394907682, "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\n\ndef issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter's output and returns the same data as a list.\nimport ast,sys\ninput_str=[1,2,3,4,5,3,3,3,3,3,3,3.,3131,2,34]\ndef string_contains(input_str):\n Python = sys.version_info[0]\n if Python == 2:\n    input_str = input_str._t"], [0.0905472261909547, 0.061224489795918366, 0.10344610491870287, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to count the frequency occurance of the various elements in a list.\ndef pair_sum(a, b): \n\tif (a > b): \n\t    upper = a \n\telse: \n            upper = b \n\treturn (upper * (upper + 1)) // 2 - sum(a) \n\nThe above code is a function to give the largest number between which the sum of elements of the array corresponds to i"], [0.10653228705705227, 0.12903225806451613, 0.1333074799417325, "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to print a dictionary in ascending order.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to print a dictionary in ascending order.\nfrom collections import Counter\ndef add_to_counter(dict1, str1):\n x = Counter(dict1)\n x.update(str1)"], [0.12846131323861235, 0.15384615384615385, 0.1768928345413915, "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the dictionary in descending order by values.\ndef reduce_list(list1):\n lam=sum\n new_list=list(map(lam,list1))\n return new_list\nThe above code is a function to sum the values in the given list.\n#DONE NOTE\nfrom collections import Counter\ndef max_age(L):\n    x=Counter(name for name,age,city in L)\n    print("], [0.08586212235556197, 0.09090909090909091, 0.06354070040356191, "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes in a dictionary and returns the keys sorted by their values in descending order.\n\ndef square_cube(p):\n squ = {x:\" square\" for x in p if (x ** 2) in p if (x ** 3) in p if (int(x ** 2) == x)}\n cube = {x:\" cube\" for x in p if (x ** 3) in p}\n return [squ,cube]\n\nThe"], [0.12511129961586517, 0.1, 0.05898062571919607, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to print the most common elements from a dict.\n\ndef replace_elements(global_list):\n list3=[]\n for i in range(len(global_list)):\n     local_list = global_list[i:]\n     maxm=max(local_list)\n     max_index=local_list.index(maxm)\n     list3.append((max_index+1)*-1)\n return"], [0.07584410566799638, 0.04, 0.016803427175194372, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " can be used to find the count of int values in a dict and sorts them in a descinding order.\ndef check_digits(num):   \n    if num<9:\n        return True\n    while num>0:\n        if num%10 > ((num//10)%10):\n            return False\n        num=num//10\n    return True\nThe above python code let us check if digits in a number are in ascening order without"], [0.10608629705905127, 0.08108108108108109, 0.09914511425673916, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find most frequent number from the given dictionary.\n import pandas as pd\nx = pd.DataFrame(data = {'Item':['abc123','def987','ghi789'], 'Quantity':[2 , 3, 1],'UnitPrice':[3.99, 22.00, 12.12]})\n\n\ndef dataframedictionary(x):\ndf = x.to_dict()\nreturn df\nThe"], [0.08855752973192076, 0.06976744186046512, 0.0717438856241568, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\nimport re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function which sorts a dictionary of frequency counts in alphabetical order.\ndef count_freq(list1):\n\tcontent = set(list1)\n\tfreq = [ (list1.count(e), e) for e in content if list1.count(e)>1]\n\tsortedlist = sorted(freq)\n\treturn sortedlist\nThe above code is a function generating items with a frequency greater than one in a list"], [0.12961916076030933, 0.10526315789473684, 0.07986908843378579, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the input distribution of dictionaries.\n\ndef flatten(l):\n    l_flatten = [item for sublist in l for item in sublist]\n    return l_flatten\nThe above code is a python fucntion for flattening lists.\n\ndef sort_list(list1, list2):\n\tlist_result=[]\n\tif len(list1)==len(list2):\n\t"], [0.14503887730200368, 0.13636363636363635, 0.27693316957034714, "def min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to sort a dictionary based on occurences.\n\nimport math\ndef power_modulo(x,y,z):\n    return pow(x, y, z)\nThe above code is a function to find power value(x^y) % z by taking all values as input. \n\ndef find_pos(num_list, target):\n i, j = -1, -1\n for i1 in range(num_list):"], [0.10983567795566498, 0.09375, 0.042361604834904365, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return a list which would represent a counter.\n\ndef anagram(str1,str2):\n  def split(string):\n    return list(string)\n  def unzip(zipped):\n    return tuple(zip(*zipped))\n\n  str1 = split(str1)\n  str2 = split(str2)\n  if len(str1) != len(str2):\n    return False\n  else"], [0.1156749378873324, 0.1282051282051282, 0.18820369802965856, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the Counter dict by its values in decending order and returns a sorted counter dict.\n\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1).most_common()\n x.sort(key=lambda x: x[0])\n sort_counter=dict(x)\n sort_counter\nThe above code is a function to sort the Counter dict by its keys in decending order and returns a sorted"], [0.11714498651216108, 0.12244897959183673, 0.21390762635618052, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort a Counter using most_common.\ns = 'ldap'\nk= min(map(len, s.split(' ')))\nprint(s[:k])\nThe above code is a python function to find the first longest substring as defined by splitting the given string on space characters, while using minimum number of comparison.\n\ndef merge_dicts(*dict_args):\n    result = {}\n    for dictionary in dict"], [0.0935490387642823, 0.07142857142857142, 0.1137880146030534, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort integers strings or tuples based on occurence frequency in a given dictionary. This can be of help if a given task gives three values repeating the most and less frequently occuring values.\ndef letter_count(Input):\n    vowel = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    consonants = set({})\n    for i in Input:\n        if i.isalpha() and (i not in"], [0.14288182746611264, 0.14285714285714285, 0.10161800815486768, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to sort a dictionary based on the element\u2019s value.\n\ndef mark_list(list_list, number, mark=None):\n\tres = []\n\tfor sub_list in list_list:\n\t\tif mark is None:\n\t\t\tres.append(filter(lambda ele: ele==number, sub_list))\n\t\telse:\n\t\t\tres.append(map(mark, filter(lambda ele: ele"], [0.09105798066189136, 0.06666666666666667, 0.0945939079607275, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes in a dictionary and returns the correct list with tuples of key:value. Most common value will be first in return list.\ndef difference(array):\n array2 = sorted(array)\n arr_diff = [array2[-1]]\n y=1\n for ele in range(len(array2)-1):\n  diff = array2[ele+1]-array2[ele]\n  if diff > y:\n  "], [0.24002454180354207, 0.25, 0.14802578168610994, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\ndef multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a given dictionary based on value.\ndef flatten(list1):\n  def helper(list_a,list2):\n    i=0\n    while i<len(list2):\n      if isinstance(list2[i],list):\n        list_a=helper(list_a,list2[i])\n      else:\n        list_a.append(list2[i])\n      i+="], [0.17098980411476108, 0.22580645161290322, 0.16969561119602447, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the existing dictionary by value.\n\ndef bubbleSort(arr):\n for i in range(len(arr)-1):\n  for j in range(0,len(arr)-i-1):\n   if arr[j]>arr[j+1]:\n    arr[j],arr[j+1]=arr[j+1],arr[j]\n return arr\nThe above code is a function to order an array numer"], [0.1328857455661119, 0.16, 0.1805784954015187, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to convert the given dictionary into list of tuples where each tuple is of form(key,value) sorted in descending order \n    \n'''"], [0.10710811818149828, 0.1111111111111111, 0.0440139758618598, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python code to sort the result returned from a collections library.\ndef pre_post_add(str1):\n     if(str1[0] == \"pre\"):\n  print(str1[0]+str1[1])\n     elif (str1[-1]==\"post\"):\n  print(str1[-1]+str1[-2])\n  elif(len(str1)==2):\n"], [0.08249270730666546, 0.07692307692307693, 0.10888558132689226, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is the program that sorts a dictionary with word count as the key.\ndef apply_discount(products, discount):\n    for key, value in products.items():\n        products[key] = value * (1.0 - discount)\n    return products\napply discount function basically takes two inputs, product and discount and applies or subtracts this discount to all the item in product.\n\ndef remove_spaces(str1):\n    str1 = str"], [0.13291845536923663, 0.11764705882352941, 0.12800121332399791, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given dictionary.\ndef twoSum(arr, target):\n\tmydict={}\n\tfor index,val in enumerate(arr):\n\t\tpair=target-val\n\t\tif pair in mydict:\n\t\t\treturn [mydict[pair],index]\n\t\telse:\n\t\t\tmydict[arr[index]]=index\nThe above code is a function to find the pair of elements in the"], [0.08240119469795182, 0.047619047619047616, 0.021463264438585924, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " sorts a dictionary in descending order using counter object of python library.\n\nfrom collections import namedtuple\nStudent = namedtuple('Student', 'Name,Marks')\ndef sorted_dictionary(keys, values):\n student_data = Student(Name = keys.studentkeys(),Marks = values.student_marks)\n for x in student_data:\n    print('Student Name:' + x[0])\n    print('Student Marks:' + str"], [0.12141235114391147, 0.10526315789473684, 0.07922084545830549, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter of a dictionary.\nimport requests\nresponse = requests.get('https://python.org')\nprint(response.header)\nprint(response.status_code)\nThe above code prints header info and  response code.\nimport datetime\ntime = datetime.time.now()\nprint(\"The time is : \", time)\nThe above code prints the time of execution.\ndef area_triangle(l,b"], [0.12141235114391147, 0.09523809523809523, 0.1131477684426067, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python program to sort a dictionary based on its values.\ndef fib(x):\n    if   (x==0): return(0)\n    elif (x==1): return(1) \n    else: return fib( x-1 ) + fib( x-2 )\nThe above code is a python program to calculate fibonacci series.\nimport re\ndef check_alpha(string):\n x = re.findall(\"["], [0.18968303340669793, 0.21875, 0.309858995019902, "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a Counter() method output by the value. https://pybit.es/collections-counter.html\nimport heapq\ndef nlargest(dict_n,n):\n\theapq.nlargest(n, dict_n, key = lambda i: dict_n[i])\nThe above code is a function to find the maximum of a dictionary by a value. https://www.geeksforgeeks.org/python-"], [0.12554916315953074, 0.125, 0.2010422935037921, "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort based on frequency of elements in a dictionary.\nimport operator\ndef sort_tuplelist(list1):\n list1.sort(key=operator.itemgetter(0))\n return list1\nThe above code is used in a case where the items in a list of tuples need to be sorted by one particular column.\ndef hasPythagoreanTriplet(int_list):\n    \n"], [0.09596679051373773, 0.06521739130434782, 0.17260845921414938, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to sort a counter's element with its frequencies in a dictionary.\n\n\n# 3.                          ADMIN   LOGIN            \n\n# A non-techical way to stop an executable\n# Press Ctrl+z  (i.e control+z on keyboard)-to pause ann progress\n# For example goodparams[5]=633302490.429\n# Press ctrl+c  to cancel current running process-having less temporal priority\n# Press"], [0.23293168155682006, 0.2777777777777778, 0.23304831764702297, "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given dictionnary by using the collections module and counter method.\n"], [0.16006488895594226, 0.09615384615384616, 0.14954217281840151, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary based on the count of each value in the dictionary.\nFinding k\u2019th entry in recovered array and original array/\n\nThe above code can do it in linear time.\n\nOriginal array - O(nlogn), recovered - O(n)\nimport heapq\n\ndef k_th(original, rec, k):\n    if len(original) < len(rec):\n        raise ValueError(\"Recovered must be"], [0.08476259105344597, 0.0625, 0.07481863450760204, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that takes in a dictionary as argument and returns a list of tuples.\n def remove(self,item):\n            current = self.head\n            previous = None\n            found = False\nThe above code is a function that removes an element in a linked list.\nclass Way:\n    left = 0\n    right = 0\n\nclass Node:\n    name = 'str'\n    way = Way()\n    next = None\n    "], [0.1648786071848872, 0.3333333333333333, 0.26050181704867925, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function which is used to sort dictionary contents in descending order.\n"], [0.11083133222037758, 0.08333333333333333, 0.07032099111948127, "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the counter object from collections library in descending order so that the element having the maximum count is outputted at the last of the list.\ndef quick_sort(array):\n    n = len(array)\n    n2=n-1\n    L = [x + 1 for x in range(n2)]\n    M = list()\n\n    def partition(array, p, r):\n        x = array[r]\n       "], [0.10648562048276675, 0.12244897959183673, 0.23648112019263384, "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort dictionary based on the value.\ndef fetch_the_key(dicti,term):\n    for i,j in dicti.items():\n        if j == term:\n            return i \n    return \"Key NOT Found\"\nThe above code is a function to find value for a given key in dictionary. If the key is not found in the dictionary, intead of throwing a KeyError, it will throw a ValueError with"], [0.09920091708544626, 0.0975609756097561, 0.15385006147065056, "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return the sorted list of keys in the decreasing order of the values of a dictionary\ndef get_key(val):\n keys = []\n for x in my_dict.items():\n  if val == x[1] :\n   keys.append(x[0])\n return keys\n #[key for key, value in my_dict.items() if value == my_value][0]\nThe above code is a function to return all"], [0.1758723300010429, 0.16666666666666666, 0.3247020093710232, "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary based on value.\n\ndef my_sum(dictionary):\n\ttotal = 0\n\tfor key in dictionary:\n\t\ttotal += dictionary[key]\n\treturn total\nThe above function is a function to sum of values of a dictionary.\n\ndef largestNum(array):\n    x = sorted([str(i) for i in array], reverse=True)\n    return(\"\".join(x))\nThe"], [0.10663296277465795, 0.12244897959183673, 0.11843431650317449, "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the items in a dictionary as per the key. Function should return tuples as a sorted list of tuples containing key and value.\ndef aactio_align(word_tokens,tokens):\n    \nThe above code is a function which takes in a list of words and find the tokens in the given sentence which matches with the keywords and returns the tokens list sorted in the same order as that of the keywords. If more than one"], [0.08595241707707366, 0.08823529411764706, 0.1273315527979046, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is used to sort the counter by the most common variable and to return it. https://pynative.com/python-counter-find-duplicate-characters-in-string/\ndef count_words(s, n):\n x=Counter(s)\n count_words=x.most_common(n)\n return count_words\nThe above code is used to count the words and to return the top n common words. https://www."], [0.16032540710852777, 0.15, 0.11446760068960024, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find maximum occurrence of an item and display them in order.\n"], [0.08695849847205608, 0.06896551724137931, 0.04743492331868173, "def split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a simple sorting layer in dictionary\n============================\n\"\"\"\na =input()\nd = {} \nfor i in a:\n  d[i] = d.get(i,0) + 1 \nx=(d.values())\nprint(sort_counter(x))\nprint(d)"], [0.0675258567159839, 0.07692307692307693, 0.0845798608014702, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is for various dictionary {'dog':3, 'cat:4'}:\n\n\n"], [0.10394279960319376, 0.10526315789473684, 0.07367815687356996, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that sorts the counter that is the result of calling the function Counter() in collections.\n"], [0.09449012692933281, 0.1, 0.10888558132689226, "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to find a dictionary of letters and their corresponding frequency in a word or sentence.\n\ndef detect(*args):\n    dict=dict()\n    for word in args:\n        dict[word]=dict.get(word,0)+1     \n    frequency = sort_counter(dict)\n    for key,value in frequency:\n        if value ==1:\n            print(key)\n            return \nfor one char as key and"], [0.07899261129285537, 0.058823529411764705, 0.16797214803197386, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " the dictionary dictionary, convert it into counter, sorts it in descending order and returns a list of tuples.https://stackoverflow.com/questions/613183/how-do-i-sort-a-dictionary-by-value\ndef get_frequency(lst):\n    freq = {} \n    for items in lst: \n        freq[items] = lst.count(items) \n    return freq\n"], [0.10649742759096319, 0.06666666666666667, 0.0, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python nasted for loop for sorting a counter.\n"], [0.07824810874311128, 0.05128205128205128, 0.044937392134091, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function that sorts a counter dicitonary.\n\ndef returnValueAtIndex(s, k): \n    li = []\n    for ele in s: \n        if ele not in li: \n            li.append(ele)\n    for i in range(0, len(li)): \n        if (k == i): \n            return li[i] \n            The abobe code is a python function that"], [0.20428405004246905, 0.14285714285714285, 0.08242477721955568, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictonary in order.\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem\n\ndef call2d(in_file, out_file, nconf=1000, method='gaussian'):\n    suppl = Chem.SDMolSupplier(in_file)\n    inchi_key = Chem.inchi.InchiToInchiKey(Chem.MolToInchi(supp"], [0.19889726105770858, 0.2, 0.20026051675968162, "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary from highest to lowest by value.\ndef second_smallest(arr):\n    if len(arr)<2:\n        return -1\n    if len(arr)==2 and arr[0] == arr[1]:\n        return -1\n    dup_items = set()\n    uniq_items = []\n    for x in arr:\n        if x not in dup_items:\n            uniq"], [0.12662835022110117, 0.14285714285714285, 0.09974239867458301, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is the function to sort a Counter in the descending order by its values.\ndef add_consecutives(inp_list):\n    x = [i for _, i in groupby(inp_list)]\n    repeated_list = [(item, sum(1 for _ in group)) for item, group in groupby(inp_list)]\n    counted=0\n    cnt=[]\n    for i in range(0,len("], [0.09240316946657048, 0.09375, 0.045595581245181926, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that returns the sorted counts from highest to lowest.\ndef quick_sort(input_list):\n  quick_sort_helper(input_list, 0, len(input_list)-1)\ndef quick_sort_helper(input_list, first, last):\n  if first < last:\n      split_point = partition(input_list, first, last)\n      quick_sort_helper(input_list,"], [0.07031646441471558, 0.019230769230769232, 0.01730698846591851, "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " Takes a dictionary, counts the elements in the list and returns the element which has been repeated the maximum no. of time along with the time it has repeated within the\nlist; P.S. in case there are multiple , maximum no of time that an element repeats is returned\n\ndef add_matrices(ld1, ld2):\n    for i in range(0, len(ld1)):\n        for j in range(0, len(ld2"], [0.0763179591908933, 0.05, 0.21594055141546464, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " returns the sorted dictionary. Convert dictionary to list.\nExample:\ndef transformdict(D):\n L = []\n for key, value in D.items():\n    L.append((key,value))\n    L.sort()\n return L\nThe above code converts the dictionary into the list.\nname_list = ['Sachin', 'Sourav', 'Dravid','Sehwag', 'Ganguly', 'Kumble']\n("], [0.09359817707382218, 0.12903225806451613, 0.14727699087291402, "def binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to return sorted dictionary of dictionary elements.\n\n\ndef most_frequent(List): \n    occurence_count = Counter(List) \n    return occurence_count.most_common(1)[0][0]\nThe above code is a python function to find the most frequent element in a list.\n\n\ndef least_frequent(List): \n    occurence_count = Counter(List) \n   "], [0.12426513757213138, 0.14285714285714285, 0.14965645512160541, "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndef list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the dictionary on the basis of the numbers of elements of the dictionary.\ndef square(list2):\n  square=[]\n  for i in list2:\n    if int(i)>0:\n     j=pow(i,2)\n     square.append(j)\n    return square\n\nThe above code is a function to square the negative numbers in a list.\ndef dict_square(dict2):\n"], [0.23108470488456834, 0.3333333333333333, 0.31194014076560916, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort Counter by the highest number of occurrences in the given dictionary x.\n"], [0.22229089070213667, 0.16129032258064516, 0.10499381749478355, "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\nThe above code is a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary using Counter from Collections.\nimport math\ndef timediff(time_epoch):\n seconds = (time_epoch[-1] - time_epoch[0]).total_seconds()\n microseconds = int((seconds - int(seconds))*1e6)\n td = datetime.timedelta(seconds=int(seconds), microseconds=microseconds)\n time_diff = str(td)\n return"], [0.0868778591158197, 0.06521739130434782, 0.13844782943271272, "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\n\ndef re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that works like Python\u2019s Counter function to find out the most common elements in a dictionary.\n\ndef remove_duplicate(list1):\n  x = []\n  for i in list1:\n    if i not in x:\n      x.append(i)\n  return x\nThe above code is a function that removes all duplicate items from a list.\n\ndef create_array(initial, size):\n    x ="], [0.12485591413554181, 0.21052631578947367, 0.23006782192650202, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python program to sort any dictionary with respect to the ascending order of keys."], [0.09986526811083564, 0.1, 0.22090536086698678, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " sorts a counter dictionary to get the elements in order. \ndef get_keys(n):\n  keys=range(1, n)\n  return keys\nThe above code is a function to find all keys from 1 to n.\ndef add_key_value(dict1, key):\n  dict1.update({key:1})\n  return dict1\nThe above function adds a key- value pair to a dictionary.\ndef cartesian(arr"], [0.0998151843573129, 0.08695652173913043, 0.2453436534976864, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to get sorted count dict as per highest value entry.\ndef dictionary(m):\ndict = {}\nfor i in range(0,m):\n  j = input(\"enter key: \")\n  k = input(\"enter value: \")\n  dict[j] = k\nprint(dict)\nprint(\"\\n\",dictionary(m))\nThe above code is a function to initiate a dictionary and add one or more keys and their"], [0.07210185072958282, 0.022222222222222223, 0.0, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " prints the elements occuring maximum number of times\ndef no_of_elements(s):\n dict1 = dict() \n for c in s: \n    if c not in dict1: \n        dict1[c] = 1\n    else: \n        dict1[c] += 1\n return dict1\nThe above code converts a string of characters as keys and their counts\ndef print_k_dist(list1,k):\n"], [0.12803280950790724, 0.23076923076923078, 0.09000895891613833, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the given dictionary based on the value.\ndef binary_search(data,sorted_data,key):\n    if not data:\n       return \n    mid=len(data)\n    if key==data[mid]:\n       print(data.index(key))\n       return\n    if key<data[mid]:\n        binary_search(data[:mid],data,key)\n\n    if key==data"], [0.11836469601925972, 0.10869565217391304, 0.2027147494965582, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the element of a dictionary on the basis of the value of it's element.\n\ndef even_value_numbers(int1, int2):\n  for i in range(int1,int2):\n    if (i % 2 == 0):\n      print (i)\nThe above code is a function to return numbers from range which are of even value excluding zero from it.\n     \ndef print_triangle(n):"], [0.1870495621624416, 0.13157894736842105, 0.13167099461252335, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary from keys with max occurrences to the keys with least occurrences.\n\n\nrev = lambda s: s[::-1]\nrev('HELLO')\ndef large_char(str1):\n  dict1 = dict()\n  list1 = []\n  for char in str1: \n    dict1[char] = str1.count(char)\n    if str1.count(char) > 1: "], [0.0935490387642823, 0.1111111111111111, 0.10159037449846914, "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\n\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the given dictionary of characters in the given string in descending order of their number of occurences in the given string. Here we are using collections importe since Counter is present in Counter function of collections.\n\ndef power_set(a):\n p_set = [[]]\n for i in a:\n  temp = []\n  for j in p_set:\n   temp.append(j+[i])\n  p_set"], [0.10493553705172601, 0.11627906976744186, 0.13638891679683038, "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the sorted dictionary of counter(defining a dictionary) from created by Counter from collection imports.\nfrom collections import defaultdict \ndef rearrange_digits(input_list):\n    d = defaultdict(int)\n    for num in input_list:\n        x = 0 if d[num[1]] == 0 else 1\n        d[num[x]] = d[num[x]]*10 + num[2-"], [0.08655404593900339, 0.06818181818181818, 0.0918684617333275, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is the given dictionary, the message \u201cSORTED DICT\u201d and a sorted dictionary.\n\ndef csv_convert(file):\n  with open(file, \"r\", encoding = \"utf-8\") as csvfile:\n    reader = csv.reader(csvfile)\n    for row in reader:\n      print(row) \nThe above code is The input is - a csv path. function to print out the"], [0.0992734020782424, 0.07142857142857142, 0.2070541462518385, "def pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a method to sort a counter object passed to the method returns sorted counter object .\nhttps://www.saltycrane.com/blog/2007/09/how-to-sort-python-dictionary-by-keys/\nTODO : Create functions to return:\n1.tuple\ndict\nset\nother data types in python.\n2.Calculate occurrence of each character in an input sentence.\n3.Remove symbols in input sentence"], [0.0962811845139966, 0.06451612903225806, 0.06296010852029696, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that numerically sorts a dictionary.\n\nfrom re import sub\ndef edit_distance(str1,str2):\n a=sub('[^a-z]', '', str1)\n b=sub('[^a-z]', '', str2)\n print(a)\n print(b)\n c=sequencematcher(None,a,b).ratio()\n print(c*100)\nThe above code"], [0.14565801674355, 0.20833333333333334, 0.2226189501859802, "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the counter by value .\nSome regex about  sparse files like \"file.txt\":\nAB@61ON^++3005=5*:4613A;5453MP;5@)*345\n\n(AB.+\\d).+(\\d{3}[=:;](.*))$\n^(\\D+?\\d{1,2}[AB@^+*].+\\s?(\\d{3"], [0.08901845904342975, 0.06382978723404255, 0.04478384589959448, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is takes as input dict1 with countable values and returns a dictionary with most common values.\ndef select_random(lst):\n from random import choice\n from random import shuffle\n shuffle(lst)\n return choice(lst)\nThe above code is a function does random list selection.\n\ndef vowels_consonants(string):\n string1 = ''\n for i in range(len(string)):\n  if string[i].lower"], [0.2544725217977227, 0.29411764705882354, 0.2720595904124083, "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\n\ndef interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the given Counter dictionary into a list in decending order."], [0.11113285232034661, 0.11428571428571428, 0.07249812029725033, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to return the dictionary in ascending order of values\ndef looping_over_dictionary(my_dict, my_sequence):\n    index = 0                          \n    for key, values in my_dict.items(): \n        while index < len(my_sequence):      \n            if key == my_sequence[index]:           \n                my_dict[key].append(values)\n            else:\n                my_dict[key]"], [0.15678615008276894, 0.1111111111111111, 0.1299163254543304, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dict according to the value of its items.\ndef decrypt(input_str):\n    if not input_str:\n        return \"\"\n    upper_part = \"\"\n    lower_part = \"\"\n \n    for idx in range(len(input_str) // 2):\n        upper_part += input_str[idx]\n    for idx in range(len(input_str) // 2, len"], [0.1290735025624076, 0.1388888888888889, 0.25869865335086484, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to order a dictionary by the highest value in a Counter dictionary.\nmy_list = [1,2,3,4,5,6,7,8,9,10]\ndef get_even_list(my_list):\n new_list=list(filter(lambda x: x%2==0, my_list))\n return new_list\nThe above code is a function to filter from a list all odd numbers.\ndef"], [0.08811394191224849, 0.06976744186046512, 0.10504043794600768, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes as input a dictionary and returns a sorted array of the dictionary. Since dictionary\ndoes not have ordering in the sense of the array which was initially sorted this function is important.\n\n\nfrom collections import Counter\nlst1=[1,4,4,4,5,6,7]\ndi= dict(Counter(lst1))\ndi=sort_counter(di)\n\n\ndi\nfrom collections import Counter\ndef sort_counter("], [0.08375275082001014, 0.08571428571428572, 0.10607303936488319, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is to sort the dictonary to fetch the key with the highest value.\ndef product_sort(a,b):\n A = [] \n result = 1\n for item in b:\n   for i in a:\n     if i !=item:\n       result = 1\n     else: \n       A.append(i)\n for i in range(len(s)-1):\n    result = result * product_sort(A[i+"], [0.08801095798791009, 0.07142857142857142, 0.05898062571919607, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that turns a Counter dict object into a list of tuples by taking the most(largest) common items in a Counter dict object.\nimport numpy as np\ndef play_two(list_item):\n    i=0\n    win=[]\n    lose=[]\n    player1=1\n    player2=2\n    votesA=[]\n    votesB=[]\n\n    for i in range (len(list_item)):"], [0.08441671339318567, 0.08695652173913043, 0.1375366751321106, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function that takes in dictionary, sorts it by key in descending order, and returns the list of tuple (key,value).\n\ndef counter(dict1):\n\tx = {i:dict1.count(i) for i in dict1}\n\treturn x\nThe above code is a function that takes in dictionary and returns it after converting it into a counter type.\n\ndef addition(arr, n):\n\tsum_arr = sum(arr"], [0.146898270739792, 0.16666666666666666, 0.17692127364627414, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort counter by most_common() method.https://www.geeksforgeeks.org/python-dictionary-counter/\n\n\n# Rounding off\nx=round(1.52)\nprint(x)\ny=round(1.52,1)\nprint(y)\n\n# Generate random number\nimport random\nrandom.randint(1,100)\nThe above code is a code to generate random integer values"], [0.10531013711262883, 0.11764705882352941, 0.06546624730120545, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python function to sort the \ndef findduplicate(inputlist):\n  for i in range(len(inputlist)):\n    if i != len(inputlist)-1:\n        check = i + 1\n        while check < len(inputlist):\n            if inputlist[i] == inputlist[check]:\n                return inputlist[i]\n            else:\n                check += 1\n  else:\n    return False"], [0.12523526950638206, 0.09523809523809523, 0.12234943551231243, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the execution orders of two fighters.\n\ndef avg_marks(marks, weights):\n  if len(marks) != len(weights):\n    return -1\n  else:\n    return(sum(a*b for a,b in zip(marks,weights)) / sum(weights))\nThe above code is a function to calculate the weighted average.\n\ndef upper_array(array):\n  new_list = [i"], [0.08595241707707366, 0.075, 0.0644769806530133, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a python program to sort the counter based upon count without using reverse=True. \n\ndef most_frequent_first(arr, n):\n    d = {}\n    for i in arr:\n        d[i] = d.get(i,0)+1\n    x = sorted(d.items(), key=lambda kv: kv[1])\n    temp = []\n    for i in x:\n        temp.append("], [0, 0.0, 0.0, "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\ndef maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)\nThe above code is Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is retrieved from:\n    https://www.geeksforgeeks.org/python-counter-find-duplicates-in-list/\n\n\nCool!!\ndef editDistance(str1, str2, m, n):\n    dp = [[0 for x in range(n+4)] for x in range(m+4)]\n    ptr = [['' for x in range(n+1)] for x in range(m+1)]"], [0.15799104062665115, 0.14285714285714285, 0.15283843691746213, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the Counter Dictionary.\n\nn = int(input())\nstring=input()\ndict1={}\nfor i in string:\n dict1[i]=string.count(i)\nsort_counter=sort_counter(dict1)\nlist1=[]\nfor i in sort_counter:\n list1.append(i[0])\nlist2=list1*2\n\nstdout.write(str(max_"], [0.07751448465020092, 0.05263157894736842, 0.047777294703720434, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)\nThe above code is Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " gives output after converting dictionary into Counter and again converting into a list of tuples.\n\nmap1={ \"Science\":90,'Maths':95,'English': 97,\n     \"Social\":78,\n    }\nmap1=dict(sorted(map1.items(),key=lambda x:x[1]))\nprint(map1)\nprint()\nThe above code sorts the dictionary based on the values.\n\ndef block(s):\n"], [0.08628161391763135, 0.06060606060606061, 0.021338847675941176, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function for sorting the dictionaries using Counter module \ndef find_odd_1(elem):\n    elem = str(elem)\n    length = len(elem)\n    elem1 = elem[0] \n    elem2 = elem[length-1] \n    mult = int(elem1) * int(elem2)\n    mult = int(mult)\n    return  mult\n"], [0.1097943781409556, 0.1111111111111111, 0.18781297742529607, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to find the most frequently occuring value from a dictionary.\nlot=[{'rain':2},{'temp':8},{'wind':5},{'scale':4}]\n lot.sort(key=lambda b:b['rain'])\n print(lot)\n The above code will sort the elements of the dictionariy on the basis of 'rain' as a key.\ndef maplst (function,list1):\n"], [0.13139491079220178, 0.15789473684210525, 0.18320724993301318, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort the Counter by value.\n\n# <font color='red'>List 1</font>\n#List 1\n\nCreate a function sum_range_list() which has to accept range() argument and returns a list of list of numbers which is the sum of numbers in this range.\n\nsum_range_list([1,2,11,50,7], 1, 5)  returns[12,18]\nsum_range_list"], [0.15888970684058182, 0.11764705882352941, 0.07489084683312781, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a container of keys and values and then return it.\n\ndef charCountDict(myString):\n    myString = myString.lower() \n    char_count = dict() \n    for i in myString: \n        if i in char_count.keys(): \n            count = char_count[i] \n            count = count + 1\n            char_count[i] = count \n       "], [0.18441105908367186, 0.13157894736842105, 0.20717596472892383, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code", " is a function to sort a dictionary based on the \"value\" using \"counter library\"\ndef frequency_of_words(str1):\n dict_freq = {}\n list1 = str1.split()\n str2 = list(set(list1))\n for i in str2:\n     dict_freq[i]=list1.count(i) \n return dict_freq\nThe above code is a function to find the frequency of words"]]}
