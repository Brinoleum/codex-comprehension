{"prompt": {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 9, "prompt": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.", "code": "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n ", "test_imports": [], "test_list": ["assert find_Rotations(\"aaaa\") == 1", "assert find_Rotations(\"ab\") == 2", "assert find_Rotations(\"abc\") == 3"]}, "queries": [[0.11731816740935101, 0.1111111111111111, 0.1425858120899672, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\ndef split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function that finds the smallest rotation of an input string using the catclarative ordering of strings.\ndef get_Compression(word):\n\tj=0\n\tfor i in range(len(word)):\n\t\tx=1\n\t\twhile j<i+1 and i+x<len(word):\n\t\t\tif word[j]!=word[i+x]:\n\t\t\t\tif i+x"], [0.16006347911569535, 0.1951219512195122, 0.27917213180835326, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations\ndef number_increment(nums):\n    high=num[0]\n    res=0\n    for i in nums:\n        if i>high:\n            res+=1\n        if i<high:\n            res-=1\n        high=i\n    return res\nThe above code is a function to find the number of increments in a list.\n\ndef Tochar(n"], [0.15906790750186717, 0.23333333333333334, 0.2937450564364668, "def rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\n\nimport re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is to get the number of whole rotations in a string; this question came as a part of a practice assignment in geeksforgeeks.\n"], [0.0897723626014421, 0.11363636363636363, 0.2388220671726217, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\nThe above code is a function to reverse words seperated by spaces in a given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " outputs position of the string if the string is rotational i.e finds the \"subject-string\" in a larger \"string to search\"\n\ndef remove_commas(str1): \n    str1 = str1.split(',') \n    str1 = ''.join(str1) \n    return str1 \nThe above code removes all commas in the string.\n"], [0.09232679194403128, 0.09302325581395349, 0.11641149867079013, "def rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\n\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to print a string from the back.\ndef print_matches(matchtext):\n    print \"Looking for\", matchtext\n    while True:\n        line = (yield)\n        if matchtext in line:\n            print line \nthe_matcher = print_matches('python')\nthe_matcher.next()\nthe_matcher.send(\"Hello World\")\nthe_matcher.send(\"python is awesome"], [0.10270612096144921, 0.1282051282051282, 0.18804321981476818, "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\n\ndef list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a Function which returns the minimum rotation for a String (this returns how much it is rotated )\n which can tell us that how much one String can be rotated to get another String.\n"], [0.09330919191580218, 0.10526315789473684, 0.32002091966341323, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function that takes the string as the input and returns the least rotation number\nCount multiples of n and n + 1 in a range.\n'Input Format:\nThe first line of input is the number of days of the employee.\nThe second line of input contains the number n. \nThe third line of input contains n no. of space-separated integer arrays that indicate the starting points of \nthe employees.\nOutput Format:\nOutput two space"], [0.13004653535657257, 0.25, 0.3172351030015595, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python program to find the smallest rotation in a string.\n'''"], [0.21289310876508524, 0.1702127659574468, 0.1696065668009632, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the minimum rotations required.\ndef sort(A, fromIndex, toIndex): \n    if fromIndex >= toIndex: \n        return     \n    elif fromIndex < toIndex: \n          \n        # pivotindex is partitioning index, \n        # arr[pivotindex] is now at right  \n        # place, store pivotindex in      \n        # temp and -1(represented as 999)"], [0.15082811058327494, 0.20408163265306123, 0.21625244709084832, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function takes in a string str and returns the minimum number of rotations required to make string.\n\ndef fn_15(n): \n    arr = [[0 for x in range(n)] for x in range(n)] \n    row = 0\n    column = 0\n    count = 0\n    while(count < n * n): \n        if (row == -1 and column == n): \n            row += 1\n           "], [0.08047974690368784, 0.0851063829787234, 0.07233982511302087, "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\ndef ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that takes in a string and finds the distinct rotations and returns them.\nfirst_dict = {'Black': 1, 'Yellow': 2, 'Blue': 3}\nsecond_dict = {'Red': 1, 'Blue': 2, 'Green': 3}\nnew_dict = dict()\n\nfor key in first_dict:\n    new_dict[key] = first_dict[key]\n    \nfor key in second_"], [0.16436208951939738, 0.2222222222222222, 0.4518564973142557, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find rotations of a string like \u201cworad\u201d, the output will be 114 which is the number of shiftings required to make \u201cworad\u201d similar to \u201cworad\u201d\ndef gcd(a,b): \n    if a == 0:\n        return b\n    return gcd(b%a, a)\nThe above code is a python function to to find gcd of two"], [0.10210564123209752, 0.10869565217391304, 0.12211446216127582, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " finds the number of rotations a string makes from its starting position. \ndef subseq_index(index_list,index) :\n     \n    max_len = 0 # max length of subsequence \n    seq_length = index # length of current set of indices \n    while index_list[index] != -1 : \n  \n        # placing next index \n        index = index_list[index] \n  \n        #"], [0.10827355512659284, 0.15151515151515152, 0.1467672605820178, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " finds the length of the rotations of a string.\n\ndef days_in(month):\n  m= month.lower()\n  month31=('january','march','may','july','august','october','december')\n  month30=('april','june','september','november')\n  feb=(feburary)\n  if month in month31:\n    return '31'\n "], [0.13424028939387864, 0.18181818181818182, 0.14595215281895413, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the rotation number of a given string.\ndef pandigital(a):\n    digits = []\n    ans = 0\n    while a != 0:\n        digits.append(float(a%10))\n        a = int(a/10)\n    for dig in range(10):\n        if (dig in digits):\n            continue\n        else:\n            ans = ans + 1\n    if ans != 0:\n"], [0.15751855718434843, 0.4, 0.541498328547064, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\nimport math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the rotations of a string.  \n'''"], [0.15566219859977987, 0.2, 0.47601512680825603, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of rotations in a suffix-prefix equal string.This function helps us to determine the number of rotations required to find a particular substring from a larger string.\nMy Food order approx time : 35 minutes\nThe time needed to take an order at a restaurant is dependent on many variables like the type of order, number of items on the order, size of the kitchen(if any cooking is taking place on site) etc. The minimum time"], [0.1086103989104916, 0.09090909090909091, 0.0765092017734549, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find Rotations.\n\ndef add_contiguous_sum(list1, diff): \n  current_sum = list1[0]\n  StartingIndex = 0\n  for i in range(1, len(list1)): \n    if (current_sum + list1[i] > diff):\n      n = StartingIndex \n      while (current_sum - list1[n] > diff \n            and"], [0.20352849947717605, 0.2222222222222222, 0.4035977182674613, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of times a string has to be rotated in order to get the string back. In our algorithm we didnt use any builtin functions.\n"], [0.22229089070213667, 0.13953488372093023, 0.10586813482533758, "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\n\ndef two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the smallest rotation in a given string or list.\ndef Binary(li,x):\n    low=0\n    high=len(li)-1\n    while(low<= high):\n        mid = (low+high)//2\n        if(li[mid]==x):\n            return mid\n        elif(li[mid] < x):\n            low=mid+1\n        else:\n            high"], [0.42619229414550525, 0.4166666666666667, 0.5802470611036972, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the minimum rotations required to make a string a rotatation of itself.\n'''"], [0.14938769719222778, 0.15, 0.10922455977748577, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the length of longest  \ncommon substring sequence.\ndef find_Roots(coef):\n    result = []\n    n = len(coef)\n    for i in range(len(coef)):\n        diff_coef = []\n        for j in range(1,n):\n            diff_coef.append(coef[j]*j)\n        result.append(coef[0"], [0.12638597329328735, 0.14285714285714285, 0.24692195314362145, "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\n\ndef surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is Python Program to find the number of rotations of a string which are in lexicographic order.\n\ndef sumOfTwoArrays(a,b,r):\n    res1 = sum(a)\n    res2 = sum(b)\n    res3 = res2 - r\n    if(res3 == res1):\n        return(\"Yes\")\n    else:\n        return(\"No\")\nThe above code is Python Program that finds if"], [0.18128881819614215, 0.25, 0.1756604396566841, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations in a given string.\ndef fizz_buzz(n): \n  mylist = []\n  if(n % 3 == 0):\n    mylist.append(\"fizz\")\n  \n  if(n % 5 == 0):\n    mylist.append(\"buzz\")\n  \n  if(len(mylist) == 0):\n    mylist.append(n)\n  "], [0.27162477075277586, 0.391304347826087, 0.5548556914538668, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the total number of rotations taken a string to find the original string.\n"], [0.1342574134365941, 0.14814814814814814, 0.2909389272812077, "def toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function that finds the rotation point of a sorted list such that rotation point is the index of first occurrence of the first item in the list\ndef is_List_Even(lst):\n    lst1 = list(filter(lambda x: x % 2 == 0, lst))\n    return len(lst1) // 2\nThe above code is a python function to find if the list is composed of an even number of even numbers\ndef an"], [0.1378207366819379, 0.1956521739130435, 0.35703042814917135, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations in the string if the original string is the concatenation of itself\n\ndef removeDuplicates(string): \n\tnew_string = \"\"\n\tfor i in string:\n\t\tif i not in new_string:\n\t\t\tnew_string = new_string + i\n\treturn new_string\nThe above code is a function to remove duplicate characters from the given string.\n\ndef pairs"], [0.12224758593532782, 0.11764705882352941, 0.2141709250152366, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the generalized ascill index of a given word for a string which is constructed by concatenating n instances of the string\n\ndef find_idx(nums):\n    n = len(nums)\n    from collections import Counter\n    count = Counter(nums)\n    keys = sorted((count.keys()))\n    result = [keys[i] for i in range(1,n)]\n    return result\nThe"], [0.23388825321020612, 0.21428571428571427, 0.18862566807484185, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\nThe above code is a python function to find the sum of common divisors of two given numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the minimum number of rotation of a string in itself.\ndef minProduct(a, b): \n  \n    bigger = b if a < b else a \n    smaller = a if a < b else b \n  \n    return minProductHelper(smaller, bigger) \ndef minProductHelper(smaller, bigger): \n    if smaller == 0: \n        return 0\n    elif smaller == 1"], [0.09713193857021805, 0.11290322580645161, 0.27173114867584486, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a program to find whether a string can be rotated to form a\npalindrome.\n\nAssume you have access to a function toss_biased() which returns 0 or 1 with a\nprobability that's not 50-50 (but also not 0-100 or 100-0). You do not know the bias of the coin.\nWrite a function to simulate an unbiased coin toss.\ndef to_bin(n):\n    if n > 1:\n"], [0.10775348530961418, 0.14814814814814814, 0.35733572505959127, "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\n\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a Function to find the rotations of a string.\n\n# Question 5:\n# Write a program to implement stack (LIFO) ADT using array and perform the\n# operations like *create*, *push*, *pop*, *isEmpty*, *peek*, *search*, *size*\n# etc.\n# The program is given a collection of strings \u2018commands\u2019 which consist of the\n# following characters:\n# \u2022 R pushes"], [0.12259877808897458, 0.10526315789473684, 0.2550954913842256, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the smallest rotation of \nstring when each letter is considered as a different rotaion.\n\nq3\nmergeSort(arr[], l,  r)\nIf r > l\n     1. Find the middle point to divide the array into two halves:  \n             middle m = (l+r)/2\n     2. Call mergeSort for first half:   \n             Call mergeSort(arr, l, m)\n"], [0.14888111994205122, 0.17777777777777778, 0.24810319514023177, "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the string rotations required to list unique elements of the list in increasing order.\n\ndef check_consonants(str):\n    res = [x for x in str if x.isalpha()]\n    vowels = set(\"aeiouAEIOU\")\n    if ((set(res).difference(vowels)).__len__() != 0):\n        return True\n    else:\n        return False\n    "], [0.09224876871234569, 0.1111111111111111, 0.2560499228060372, "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is the solution for finding the no of rotations the given string is rotated with.\n"], [0.18537018541893452, 0.17073170731707318, 0.2516425536503505, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find whether rotations of a string are same.\n\ndef findUpperLower(str): \n  upperCount = 0\n  lowerCount = 0\n  for i in range(0,n): \n    if (str[i].isupper()): \n      upper_count +=1\n    elif (str[i].islower()): \n      lower_count +=1\n  print('The upper_count"], [0.18857439897134096, 0.19148936170212766, 0.38371732704594885, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to print the minimum number of rotations in the string to make the string equal.\ndef result(m, n): \n    if(n <= 1): \n        return m \n    elif(m <= 2): \n        return m \n    else: \n        return (result(m - 1, n - 1) + result(m - 2, n - 1)) \n\nm = 4\nn = 2"], [0.1654084590447041, 0.1951219512195122, 0.2781378561780309, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations of a string in a alphabetical sequence.\n\ndef find_pi_to_n(n): \n    if n < 10: \n        return n * 4 // 10**(n - 1) \n    answer = find_pi_to_n(n - 1) \n    answer += ((-1)**n)*(2*n+1)*(1103+268390*n"], [0.11588050884930508, 0.14634146341463414, 0.09395064714858264, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function for counting the number of rotations in a string t.\ndef linearsearch3(li):\n    for x in range(len(li)):\n        if x==0 or x==len(li)-1:\n            print(li[x],end = \" \")\n        else:\n            print(li[x-1]*li[x+1],end =  \" \")\n    return\nli = [1,"], [0.225188337806276, 0.21951219512195122, 0.2403287712061919, "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the amount of rotations required to make a string a palindrome.\n\nprint()\ndef last_occurrence(pattern,arr): \n    pos = [] \n    for i in range(len(arr)): \n        for j in range(len(arr[i])): \n            temp = arr[i][j:]  \n            if (temp.find(pattern) == 0): \n                pos"], [0.21616170500499476, 0.2631578947368421, 0.25972782537039385, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the rotations of a string.\n\nmain()\n{\n  int i,n,dollars;\n  long purchased_Jew;\n  printf(\"Enter the number of dollars and number of purchased Jewelries\\n\");\n  scanf(\"%d%d\",&dollars,&purchased_Jew);\n  n = dollars / 1000;\n  dollars = dollars - n * 1000;\n  purchased_"], [0.13136804604085198, 0.14583333333333334, 0.1870657709116127, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the smallest rotation wrt to a given string.\n\ndef twoSum(arr, Y):\n    required = []\n    x = 0\n    y = len(arr) - 1\n    while x < y:\n        sumtotal = arr[x] + arr[y]\n        if sumtotal == Y:\n             required.append((arr[x], arr[y]))\n             if len(required) == 2:"], [0.08863782600778886, 0.1, 0.2041224572990418, "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that returns the number of applications of rotation (in clockwise direction) for a string is an anagram of the another string .\n\ndef square(list1):\n  square_list=[]\n  for i in list1:\n    square_list.append(i*i)\n  return square_list\nThe above code is a program that return the square of all numbers in a list.\n\ndef is_prime_number(num):"], [0.21612362613760427, 0.25925925925925924, 0.4030369310789016, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the position/rotations of a string equal to its rotated copies in a longer string.\n"], [0.1082552758479032, 0.10714285714285714, 0.3361511688546138, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " computes the minumum rotations required to find the same string after rotation. This can be used\nto mathematically solve the problems fo which we were asked to find an answer with computers. \ndef GetWater(arr, n): \n    n = n - 1\n    left = [0] * n\n    right = [0] * n\n  \n    left[0] = arr[0]\n    for i in range(1, n"], [0.2350804611884755, 0.19230769230769232, 0.40672848236643666, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the minimum number of rotations in a (assume)alpha sorted string and\nits rotation which is equal to string itself.\ndef factorial(n): \n    fact = 1 \n    for i in range(2,n + 1): \n        fact *= i \n    return fact \nThe above code is a python function to find the factorial of a n number. Right answer is nothing but n*n-"], [0.10408037274836314, 0.12962962962962962, 0.29044109108158517, "import re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find out the number of return branches of a given loop in Python.\n\n\ndef countX(str):\n    list1 = re.findall(\"x\",txt)\n    return len(list1)\nThe above code is a function to count number of times \"x\" occurred in a string using regular expressions.\n\ntxt = input(\"Enter any string here: \")\ncount = 0\nfor s in txt:\n  if ("], [0.13137633322287637, 0.12962962962962962, 0.1996566782222205, "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the Rotations(To shift \u201cB\u201d to the left of first position or last position)of given string.\n\ndef findTheSubstring(str, start, end): \n    while (start >= 0 and end < len(str) and str[start] == str[end]): \n           start -= 1\n           end += 1\n      \n    return str[start + 1: end] \n      \n#"], [0.09690306012043975, 0.11904761904761904, 0.13004178859591994, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to return rotation greater than \u2018n\u2019\ndef find_spl(list1):\n    list2=[]\n    if (max(list1) in list1):\n        list2.append(max(list1))\n    if (min(list1) in list1):\n        list2.append(min(list1))\n    return list2\nThe above code is a function to return maximum and minimum value from a list"], [0.1822625177958386, 0.23529411764705882, 0.2696234771682394, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to check whether given input string is rotated in a manner that one of its rotated strings is exactly the same as the original string.\n"], [0.1298704327238047, 0.13333333333333333, 0.2690224990402279, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that returns the rotation point of the string the function inputs 'redder'.\nFor a given string, write a python function to check if it is a rotation of\n a palindrome\n\nalpha = 'abcdefghijklmnopqrstuvwxyz '\ndef rotate13(message):\n  rot = str.maketrans(alpha, alpha[13:]+ alpha[:13])\n  print(message.translate"], [0.11449818593680423, 0.1, 0.19071905923190052, "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\nThe above code is a python function to remove odd numbers from a given list.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " finds if the name of the baby comes as Rota, Rota will be the rotation point that means the baby's name is Rotaaa.\n\ndef removeDuplicate( li0 ):\n    newLi = []\n    for ele in li0:\n        if ele not in newLi:\n            newLi.append(ele)\n    return newLi\nThe above code is a python function to remove duplicate elements from a given list.\n\ndef to_"], [0.14982331756782297, 0.18604651162790697, 0.34150133170760766, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations of user u.\n\ndef check_Order(string):\n    i = 0\n    flag = 0\n    count = 0\n    while(i < len(string)):\n        count += 1 \n        if(string[i] >= string[i -1] and i == 0):\n            i += 1\n        elif(string[i] >= string[i - 1]):\n           "], [0.11594449387664636, 0.11627906976744186, 0.2161211518844567, "def Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " to find the number of rations any string takes.\nReturns the number of times the strs[right] \n# are in strs[right..n-1]. \ndef rotations(strs, right): \n    n = len(strs) \n    for i in range(0, n): \n        tmp = strs[i] \n        for j in range(0, rotations(strs, right)):"], [0.20715918764867947, 0.18604651162790697, 0.24040641735460805, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the rotations within given string of size n and returns the length of returned rotations \ndef change_string(str1): \n    a = len(str1)\n    if(a == 1): \n        return (1)\n    small  = change_string(str1[1:]) \n    if (str1[0] == str1[-1]):\n        total=1\n        return"], [0.1886520209230533, 0.2916666666666667, 0.4084536974403779, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the longest circular substring of the given string.\n\n\"\"\""], [0.29357043277914946, 0.45, 0.5298787228436411, "def reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of rotationsof a string.\n"], [0.17254008299405316, 0.20454545454545456, 0.2405625612311924, "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find all the rotations of a given string.\n\n# Find all possible permutations of a given string\ndef find_permutations(s):       \n    allPerms = []\n    def recurse(s,d,start):\n        if start == len(s):\n            allPerms.append(d)\n        else:\n            for i in range(start,len(s)):\n                sd = d\n"], [0.15296969161656782, 0.2, 0.29991210994714135, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations in a string that can be obtained by concatenating two times the string.\n  \ndef ispan(n):\n    results=[]\n    for i in range(1,n):\n        if n%i==0:\n            results.append(i)\n    return (str(i) in ''.join(str(i) for i in results))\nThe above code is a function to find"], [0.19596583336310924, 0.17777777777777778, 0.204362379673686, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of rotations.\n\n#find_Rotations\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a"], [0.5939145521002874, 0.5714285714285714, 0.684852672498226, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the minimum number of rotations required to output the given string.\n"], [0.14197707401105947, 0.11290322580645161, 0.2334185888518281, "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the chain of the given pattern or word.\n\nWe have discussed that one string could be a rotation1 of other by finding if one is a substring-of-other. Q. Can you determine if a given string S2 is a rotation of another given string S1 using only one call to isSubstring?\n\nThis question is directly a generalization for question above (IsSubstring). Analysis the runtime for above two question we conclude that"], [0.12749266056504202, 0.11764705882352941, 0.14537020292511352, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function that takes a string as an argument and checks if the string is a palindrome and returns its rotational distance.\n'''"], [0.1826164697445028, 0.20454545454545456, 0.27917138097494354, "def rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the no of forward rotations in a circular rotations of a string.\ndef LexicographySorting(str): \n    str = list(str)\n    str.sort()\n    res = \"\".join(str)\n    return res\nThe above code is a python function to sort a string in lexicographical order.\ndef pig_it(text):\n    lst = text.split()\n    for i"], [0.12965201939937077, 0.1875, 0.3624155994056957, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to get the number of rotations of a string in the case of a palindrome string.\ndef nth_term(n): \n  \n    # last digit \n    last_digit = n % 10 \n    # first digit \n    first_digit = n // 10\n  \n    print(\"The nth term : \", (last_digit * first_digit)) \n    return\n\n\nThe above code is a function"], [0.12373678675510333, 0.1864406779661017, 0.38692634980699264, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function that find the required number \nof rotations the string should be shifted by in a lexicographically sorted string.\n\n\"\"\"\n\n# Sample code to perform I/O:\n\nname = input()                  # Reading input from STDIN\nprint('Hi, %s.' % name)         # Writing output to STDOUT\n\n# Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail\n\n# Sample"], [0.16644692074038633, 0.20454545454545456, 0.2624876242009277, "import re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the minimum Rotations required of the given string.\ndef rows_columns_difference_1(L, ncols):\n    c = 0\n    r = 0\n    L1 = []\n    L2 = []\n    if (type(L) == list):\n        if (len(L) != ncols):\n            for i in range (len(L)):\n                for j in range (-len"], [0.08299732478493752, 0.04081632653061224, 0.13993272923686373, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " will find the string rotation in the input.  \n\ndef find_distinct_elements(str1, str2):\n    res = []\n    for i in str1:\n        if i not in res:\n            res.append(i)\n    for j in str2:\n        if j not in res:\n            res.append(j)\n    return (res)\nThe above code will find the distinct elements from the given two"], [0.10082983102649344, 0.11764705882352941, 0.23192355530064107, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python program that finds the smallest circular rotation of a string and returns it.\n\ndef charSum(string):\n    sum = 0\n    for x in string.lower():\n        if x in \"abcdefghijklmnopqrstuvwxyz\":\n            sum += (ord(x) - 96)\n    return sum\nThe above code is a python function that returns the sum of decimal of each character of a string.\n\n"], [0.10686271320146395, 0.11538461538461539, 0.11687943016560257, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find rotations if a string is a rotated version of itself.\n\nIt is also possible to use library functions like bisect(value, array) but being a fundamental programming problem not using it is more desirable.\n\ndef binary_search(low,high,arr, n, key): \n    if(low<=high): \n        mid=(low + high)//2\n        if(arr[mid]==key): \n"], [0.08479169603137096, 0.09615384615384616, 0.15667560763026636, "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that takes in as input a list of strings and returns a list of integers which indicate the prevoius index of the given string. \n\nimport re \ndef check_repeated(str):\n    regex = re.compile(r'(\\w)(\\1)')\n    match = re.search(regex,str)\n    if match:\n      return True\n    else:\n      return False\nThe above code is a"], [0.19210581584330003, 0.32, 0.33672718405328905, "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find number of rotations in RXCY where X is greater than Y.\n"], [0.1500329813418643, 0.36363636363636365, 0.36640318741282235, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find number of in-place rotations of a\ngiven string.\n\n\n\n\"\"\""], [0.15138850171316381, 0.12244897959183673, 0.1858939071528492, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the rotations.\n\n\ndef compress_string(s):\n    r = \"\"\n    l = len(s)\n    if l == 0 : # if string has no character, return empty string\n        return r\n    if l == 1 : # if string has only one character return 1.\n        r += \"1\"\n        return r\n    i = 1\n    count = 1\n    while i < l :\n"], [0.10847777459912855, 0.08333333333333333, 0.13801587868917398, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " gives an integer indicating the number of rotations which can be performed on input string in minimum number of times without losing any units.\ndef binarySearch( L, x, low, high ): \n \n\twhile( low <= high ): \n          \n\t\tmid = (low + high) / 2; \n\t\tif( L[mid] == x): \n\t\t\treturn mid \n\t\telif( x > L[mid]"], [0.08153469542739665, 0.08695652173913043, 0.0785900229827405, "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function takes a String s and returns no of letters rotation of String s. \n\nExamples:\nInput : abcdabce\nOutput :eabcdabca \n\nInput  : abcdedcb\nOutput : 6\ndef findcombination(s): \n    result = [] \n    combinationUtil(s, \"\", result, 0) \n    return result \n\n\ndef combinationUtil(s, prefix, result,"], [0.1363506722016135, 0.17647058823529413, 0.3099672374097792, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotation that are in a infinite set of rotations of a given string.\n\ndef alternate_split(string): \n    chars = (\"?\",\"*\",\"@\") \n    alt_split = [list(filter(lambda x: x not in chars, word)) for word in string.split()] \n    return(alt_split)\nThe code is used to identify substrings that do not include the symbols '"], [0.12398836725631, 0.1590909090909091, 0.32430280538275363, "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the amount of rotation of a cyclic string. If  is a substring of  then then  is the amount of rotation of  to the left. \n\ndef common_list(*ver):\n   print(list(set(ver[0]) & set(ver[1])) )\nThe above code is a function which allows you to compute the common elements of two lists.\n\ndef num_consecutive(lst):"], [0.10493553705172601, 0.13043478260869565, 0.14574219355801984, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function based common logic that can be used to find the rotations in a string \nfor example \nmyStr = 'banana'\nindex = find_Rotations(myStr) \nindex = 3\nprint(index)\ndef anagrams(s,t):\n    s_ges = '';\n    t_ges = '';\n    \n    for x in s:\n        s_ges = s_ges + x;"], [0.10656158743655936, 0.08333333333333333, 0.18365383799385684, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function that takes in a string as an argument. The function outputs how many times the input string can be rotated and still be identified as the same.\n\ndef lfu(lst_users, lst_sites):\n        \n        if len(lst_users)==0 and len(lst_sites)==0:\n            return []\n            \n        first_sites=list(lst_sites.keys())[0]\n"], [0.09736108672613392, 0.11666666666666667, 0.3934365188531796, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find rotations of strings.\nThe first line of the code tmp=string+string formed the string\nThe second line of the code the for loop iterated to check if string matched with str\nFor example target string is pot . If a string rotates by 1 character will be 0pot. \nAnd the string potpot forms a sub string from index zero to index three. \n\ndef add_nums(num1, num2):\n"], [0.08779411772372561, 0.15384615384615385, 0.11517725177611768, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to compute all offset rotations of a string.\n\nODD 1111 ~ ~ ~ 101010 99999 ~ ~ ~ ~ ~ ~ 9 ~ unique vowels\ntest = \"ODD 1111 ~ ~ ~ 101010 99999 ~ ~ ~ ~ ~ ~ 9 ~ unique vowels\" in a test\n\nimport re\ns = \"345678969455655173528700931637610324487543125455561533"], [0.15361668841654758, 0.1951219512195122, 0.15479258450093858, "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\n\ndef min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the rotations of the given string.\n\n\ndef find_pair(arr, n):\n    temp = []\n    count = 0\n    for i in range(len(arr)):\n        temp.append(n - int(arr[i]))\n    count0 = arr.count(str(temp[0]))\n    count1 = arr.count(str(temp[1]))\n    count2 = arr"], [0.13769991170661008, 0.19047619047619047, 0.23529989922600905, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the rotations of a string.\n\ndef find_combinations(string):\n    if len(string) == 0:\n        return []\n\n    if len(string) == 1:\n        return set([string])\n\n    first = string[0]\n    rest = find_combinations(string[1:])\n\n    result = set([first])\n    for r in rest:\n        new_comb = first + r"], [0.1302276413358548, 0.15384615384615385, 0.27511918457058687, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of smallest roatation to get a palindrome.\n\ndef is_visit_safe(isl, i, j, m, n, visited):\n    if (0 <= i < m and 0 <= j < n and \n        not visited[i][j] and isl[i][j]): \n        return True\n    return False\nThe above code is a function to check whether a location is safe"], [0.14857982262868347, 0.22580645161290322, 0.3734783239868661, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that takes in a string s and returns the number of rotations to be made in string to convert it to palindrome.\n"], [0.1320550488179802, 0.16666666666666666, 0.36967106354533597, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " finds the number of rotations it takes for a string by checking if the string it creates by adding the original string to itself is equal to the original string.\n\nimport re\ndef search_numbers(message):\n num = bool(re.search(r\"[1234567890]\", message))\n return (num)\nThe above code is a function to find the numbers from a string and indicate if there are any numbers within that string.\n"], [0.19048712610695112, 0.17391304347826086, 0.27457084363450945, "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of roatations for given string in a substring using concepts of concatenation.\ndef probab('number',1000): \n    count,i = 0, 1\n    while i<= 1000: \n        if (int(number[i])!= 0):           \n            count = count + 1\n            i = i * int(number[i]) \n        else: \n            i = i"], [0.15351977303944828, 0.15, 0.09168376717357807, "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the index of the rotaion.\n\ndef reversalSort(arr):\n    n = len(arr)\n    great = n -1\n    start = 0\n    while(start <= great):\n        if(arr[start] >=arr[great]):\n            (arr[start],arr[great]) = (arr[great],arr[start])\n            start+=1\n            great-=1\n        else:"], [0.13418353451237622, 0.18518518518518517, 0.3224524754709792, "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find how many numbers equal the string in the rotated order.\n"], [0.13935307290478255, 0.1702127659574468, 0.3381754247478168, "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations in a circularly sorted array.\n\nfrom itertools import starmap\nfrom operator import mul\ndef product_allbutself(a):\n    return starmap(mul,zip(a,repeat(a[-1])))\nThe above code is a function to find the product of all the elements of a given array except the elements of inner array.\ndef main():\n    arr = ["], [0.19125968366029536, 0.15555555555555556, 0.2988801888274092, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python program to find of given string is 'rotated'\ndef getSquare(a, b):\n    return a*a + 2*a*b + b*b \nThe above code is a python function to find the square of an expression \ndef bi_dist(x, n, p):\n    bi_coef = factorial(n)/(factorial(x)*factorial(n-x))\n    prob = (bi"], [0.20886593560396202, 0.25, 0.11385025405287642, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of circular strides for a given string.\ndef gcd(n1,n2):\n    if (n1 == 0): \n        return n2  \n    if (n2 == 0): \n        return n1 \n    if (n1 == n2): \n        return n1 \n    if (n1 > n2): \n        return gcd(n1-n2,"], [0.08070390154321944, 0.2857142857142857, 0.30399233309327867, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " finds the number of rotations in a given string.\n"], [0.1251030911615963, 0.14285714285714285, 0.2880178548582241, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the cycle in a string of repeated string.\ndef get_min_max(arr):\n    arr.sort()  \n    return (arr[-1] - arr[0])\nThe above code is a function to find the height of monsoon region based on the data of rainfall recorded.\ndef missing_unique_element(arr, n):\n    res = 0\n    for i in range(n):\n        res = res"], [0.08844189724678905, 0.1, 0.11403686726730158, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " returns the index of all rotations of a string of characters.\nimport xlrd    \ndef read(wb_name,ws_name):\n    wb = xlrd.open_workbook(wb_name)\n    if wb.nsheets<1:\n        return -1\n    elif wb.nsheets>1:\n        return 1\n    s = wb.sheet_by_name('Skill Assessment')"], [0.16496884469806397, 0.17647058823529413, 0.37354820615345496, "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to return the minimum number of steps for rotating a string.\ndef power_of_Two(n): \n    return ( (n & n-1) == 0 ) \nThe above code is a python function to check whether the entered string of bits contains consecutive 2's.\ndef min_max_Sum(arr) : \n    maxsum_final = -1000000000\n    n = len(arr) \n    maxsum"], [0.08274228987972959, 0.1016949152542373, 0.20465818728559654, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that takes a string and returns the rotation length, if string is rotated thrice in clockwise direction then it will return thrice of the original length.\n\nFor eg:\n\"xyz\" rotated thrice in clockwise is \"zyx\".\nThus find_rotations('zyx') returns 6\n\nCode written by Ninad\n# Function to print reverse of given range in the \n# same line \ndef reverseRange(m, n"], [0.15092930046566322, 0.225, 0.19587979218206242, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]\nThe above code is a function to check whether the entered number is greater than the elements of the given array.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to return the total number of rotations of a string.\n\ndef sort_0_1(arr, k): \n    counts = [0] *  k \n    for i in arr: \n        counts[i] = counts[i] + 1 \n    ans = 0\n    index = 0\n    for i in range(k): \n        counts[i] = counts[i] + ans \n       "], [0.10929903994434328, 0.14, 0.2648968252890289, "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\nThe above code is a python function to check whether the two numbers differ at one bit position only or not.\n\ndef swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function that take a string and finds all possible rotations of the same string in O(n) time, where n is the length of the string,and returns them in a list\ndef find_Rotation_Count(A,B): \n    n = len(A) \n    C = 0\n    count = 0\n    for i in range(n): \n        if (A[i] != B[i]): \n"], [0.0867662205191632, 0.14814814814814814, 0.19566293111109048, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to look down a string for repeating patterns of length 1-5.\n"], [0.08288972514468644, 0.0851063829787234, 0.20582042345358934, "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that finds the prime number.\ndef get_longest(words):\n    count = 0\n    for string in words:\n        lengthOfString = len(string)\n        if lengthOfString>count:\n            count = lengthOfString\n            ans = string\n    return ans\nThe above code is a function that returns the longest string from a list of strings.\n\n'''"], [0.1490588568722577, 0.2, 0.3636039642830961, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " returns the number of rotations of the given string if the string is a rotation of a palindrome.\n"], [0.1519764961400906, 0.20930232558139536, 0.308836623661462, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations if the given string is a cyclic string.\n\ndef points(a,b,c):\n    plt.plot([aa,bb,cc],[d,f,g])\n    plt.show()\nThe above code is for plotting a graph.\n\nnew_list = old_list[-n:]\nThe above code is for getting the last n values of a list.\n\nimport math"], [0.10968653760775243, 0.15555555555555556, 0.12407508129952807, "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\n\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find all the rotations of a given string in alphabetical order.\n\n\n# Week.py\nimport theano \nimport theano.ifelse\nimport numpy as np \nimport theano.tensor as T \nimport operator \nfrom theano.ifelse import ifelse \n\nx = T.vector('x')\nw = T.vector('w')\nb = T.scalar('b')\n"], [0.09641108972075735, 0.13043478260869565, 0.18789954905673883, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to return the smallest roration of string. \n\ndef multiply(a,b):\n    if b == 0:\n        return 0\n    total = 0\n    for _ in range(abs(b)):\n        total += a\n    if b < 0:\n        return -total\n    else:\n        return total\nsub function to do multiplication given the sign. \n\ndef printAl(arr, n): \n   "], [0.18221792732461262, 0.17073170731707318, 0.1258361070753656, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find number of times a string has to be rotated to create a palindrome.\ndef largest(n1,n2,n3)\n   if (n1>n2 and n1>n3)\n     return n1\n   elif (n2>n1 and n2>n3)\n     return n2\n   elif (n3>n1 and n3>n2)\n     return n"], [0.09866428518717314, 0.15555555555555556, 0.20718969638910473, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to return the no. of rotations in a string is a rotation.\nimport math\ndef is_int(x):\n    return abs(x - int(x)) == 0\nThe above code is a function to check if a number is an int.\ndef permuru(lst): \n \n    if len(lst) == 0: \n        return [] \n    if len(lst) == 1: \n"], [0.2633821519869901, 0.2702702702702703, 0.26813047418286146, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of rotations in a string.\ndef find_Rotation(arr, dict, ls, lls, s, l):\n    \n    \n    \n    \ndef check_weights(x,y,w):\n    l = x.copy()\n    l.append(y)\n    l.append(w)\n    dict = create_Map(l)\n    arr = find_Small_Subsequence"], [0.11296021101667382, 0.1702127659574468, 0.3097267441606333, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\nimport re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\nThe above code is a function that matches a string that has an a followed by one or more b's.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that displays the minimum rotations required.The main idea of solution is if string is \u201cxyyzwx\u201d and n is size of string, then next combination of string will be \u201cxyyzwxyzw\u201d.\ndef gcd(a,b):\n    if (0==b):\n      return a\n    else:\n      return gcd(b,a%b)\n      \nThe above code is function to find"], [0.20103643043224712, 0.23076923076923078, 0.2584038341714881, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the rotations of a string.\n\ndef count_words_in_sentence(string_sep): \n    max_count = 0\n    for s in string_sep:\n        words = len(s.split())\n        if(words > max_count):\n            max_count = words\n    return str(max_count)\n      \nThe above code is a function to find words in a sentence"], [0.22685856457884065, 0.1951219512195122, 0.163928130472549, "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the longest palindromic substring rotation of the given string.\n\ndef find_Palindromic_Cycle(stri): \n  ans_Set = set()\n  for i in range(len(stri)-1):\n    for j in range(len(stri)):\n      if stri[i:j] == stri[j:i:-1]:\n        ln = len(stri[i:j"], [0.18473271492173862, 0.20408163265306123, 0.3577029088741667, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of rotations in the given string.\ndef sort_List(input): \n    input = list(set(input)) \n    input.sort(key = lambda x: x.lower())\n    return input \nThe above code is a python function to remove duplicates from the list without losing the order of the element in the \nlist. \nFor example, consider the input list [b, a, e"], [0.0898817511545755, 0.0784313725490196, 0.20990402168278532, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\ndef insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " checks if there is a recurring substring in the input string and returns the number of rotations.\nimport itertools\ndef largest_string_naive(alphabets, k):\n    return max([''.join(i) for i in itertools.combinations_with_replacement(alphabets,k)],key=lambda item:item[0])\nThe above code is a naive solution for finding the largest string with specific amount of"], [0.26876198110881017, 0.22448979591836735, 0.3283252113176158, "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\n\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the minimum number of rotations that can be performed  \non a substring to make it identical to the given string.\n\ndef search(pat, txt):\nflag = 0\nM = len(pat) \nN = len(txt) \nfor i in range(0, N-M, 1): \n    for j in range(0, M, 1): \n        if (txt[i+j"], [0.1010649070567267, 0.10638297872340426, 0.20206558436487812, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find maximum rotation for a string.\ndef AddDigits(num): \n    if (num < 10): \n        return num \n    return (num - \n            ((num - 1) % 9) * \n            9 ** ( (num-1)//9 ) ) \nThe above code is a function to find maximum rotation for a string.\n    \ndef isPalindrome(string):\n    string = string"], [0.11292167088085464, 0.13636363636363635, 0.20053787324675834, "def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is the function to find out the rotation of the given string.\n\ndef modify_CountingSort(arr, exp1):\n  n = len(arr)\n  aux = [0] * n\n\n  for i in range(n):\n    index = (arr[i]/exp1)\n    count[(index)%10] += 1\n  for i in range(1, 10):\n    count[i] += count[i"], [0.2146175012415275, 0.23684210526315788, 0.24459825829496729, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of rotations in a string of characters.\n\nQuestion:https://www.interviewbit.com/problems/power-of-2/\n\"\"\"\n\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,"], [0.1435033142116598, 0.1875, 0.1907544947475854, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find amount of rotation required of a string.\ndef prime_Num(num):\n\t# To take input from the user\n\t# num = int(input(\"Enter a number: \"))\n\n\tif num < 0:\n\t\treturn 0\n\tif num == 0 or num == 1:\n\t\treturn 0\n\tif num == 2:\n\t\treturn 1\n\n\tcounter = 2\n\twhile counter < num:\n"], [0.17545173213636264, 0.1702127659574468, 0.3728706268311097, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the rotation of a string.\n\ndef convert_Triangle_To_Cos(a, b, c): \n    s = (a + b + c) / 2\n    Result = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return float(f'{Result:0.2f}') \nThe above code is a python function to convert"], [0.13240063197698634, 0.20930232558139536, 0.2770442139114529, "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find number of roation required to fetch an original string from a rotated string. https://www.geeksforgeeks.org/find-occurences-character-string-set-characters/\n\ndef word_squares(words): \n    word_squares = [] \n    n = len(words[0]) \n  \n    # Trie data structure keeps a set of words forms \n    # the given set"], [0.1655642063338484, 0.16326530612244897, 0.2785821314500927, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the rotation of the minimum element in a list.\ndef nCr(n, r): \n    res = 1\n    if (r > n - r): \n        r = n - r \n    for i in range(r): \n        res = res * (n - i) \n        res = res / (i + 1) \n    return res \nThe above code is a python function to find"], [0.09328329563939426, 0.12903225806451613, 0.28239898201148617, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " checks whether a string has a rotation point and returns that rotation point if it exists.\ndef add_positive_numbers(a, b):\n    if a and b < 0:\n        raise MinimumSizeError(\"The minimum value for both the  number is 0\")\n    return a + b\nThe above code is a function to add 2 numbers and ensures that if the numbers provided are less than 0, an exception is raised.\n#Function to calculate number of days"], [0.08820833684299528, 0.09259259259259259, 0.2375637666658286, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " rakes a given string and returns the number of roation of the given string.\n\ndef NumberToPattern(Number, k): \n    n = Number  \n    p = k  \n    r = ''  \n    l = { 0 : 'A', 1 : 'C', 2 : 'G', 3 : 'T' } \n    # if k is 0 return \"\"  \n    if(k == 0):   \n        return 0\n   "], [0.20556836416379537, 0.2692307692307692, 0.3554721955866488, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of times a string has rotated by its length.\n"], [0.19921268738941397, 0.29411764705882354, 0.43376837862507106, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to count the total number of rotations in obstring. This function return the minimum count of \nrotation which will make the input string as a substring of output string.\n"], [0.1186314704330498, 0.14035087719298245, 0.3499674938206136, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python program that uses concatenation to find the value of a string after cylcing through all lengths of string.\ndef circle_rect(r, R):\n    return 2*(R*R - R*R)\nThe above code is a function to find out the given function concentricity with difference of them being 2 times R*R.\ndef dutchness_walnuts(n):\n    return n if n < 4 else ((n**"], [0.1134129530664593, 0.14893617021276595, 0.29268670546739994, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\nfrom copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find revolutions of a string.\n\ndef pair_addition(t):\n   smaller=min(t)\n   return map(lambda x:x+smaller,t)\nThe above code is a function to make a set containing the sum of each element in the original set.\n\ndef comma_sep(s):\n    q = 0\n    try:\n      name, value = s.split(\"=\", 1)\n"], [0.0988322309978814, 0.125, 0.10675229440335966, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\nimport sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a fuction to find all combination of rotations of a string.\nThis code is contributed by Kalai Selvan \nimport collections \ndef findDiagonalOrder(matrix):\n    diagonal = collections.defaultdict(list)\n    for r, row in enumerate(matrix):\n        for c, val in enumerate(row):\n            diagonal[r+c].append(val)\n    res = []\n    for k, d"], [0.09241851435453954, 0.1, 0.19383765662099045, "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " checks whether the given string is a rotation of a palindrome and returns the string if it is.\n"], [0.08480962641324631, 0.09836065573770492, 0.2754964316411881, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " returns the number of non-empty-string rotations that are possible.\n\n\n\n# **7. [Hard] You are given a list of n strings (all lowercase), each of length roughly m. Given the `length` k, design an algorithm to print the first occurence of a character in the first string, the second occurence of a character in the second, etc. So if you had four strings, each of length 10, and you were given"], [0.10316487072074605, 0.1320754716981132, 0.22419212512949077, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find number of times the string is rotated in a \ncontinuous cyclic fashion.\n\ndef greet_users(names):\n    for name in names:\n        msg = \"Hello, \" + name.title() + \"!\"\n        print(msg)\nThe above code is a function that greets a list of users.\n\na, b = [int(x) for x in input().split()]\nThe above code takes input"], [0.18191919116639402, 0.1568627450980392, 0.21223935859897447, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the rotation of a given string by twice adding the said string.\ndef Generate_Pattern(str):  \n   result = [] \n   n = len(str) \n   for i in range(0,n): \n       times = 0\n       tmp = str[i] \n       remaining = str[i + 1:] \n       for j in remaining: \n           if (j == tmp): \n"], [0.21132705732084692, 0.20454545454545456, 0.1710611964127115, "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of rotations that are possible by Cormen et al.\n\ndef largest_palidrome(n):\n  largest = 0 \n  for i in range(n,100,-1):\n    for j in range(n,100,-1):\n      no = i * j \n      if(is_palindrome(no) and (no > largest) ): \n        largest = no \n "], [0.3033611771503989, 0.32142857142857145, 0.46062169306130457, "import re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the minimum number to which a string should be rotated for it to be a substring of the original string.\n"], [0.12185637231698355, 0.1568627450980392, 0.32971851818902986, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations of a circularly sorted list (mergesort).\ncombo() basically combines all the list\nMap(), map() function returns a list of the results after applying the given function to each item of a given iterable (list, tuple etc.)\nfilter(), filters out all the elements of a list, tuple, or  string\nlambda filters out all of the elements of a list, tuple, or string\npass\nopen()"], [0.1010649070567267, 0.09433962264150944, 0.12200262217526815, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find if a string is a rotation of itself or not.\n# importing pandas module  \nimport pandas as pd \n  \n# reading csv file from url \ndata = pd.read_csv(\"nba.csv\") \n    \n# dropping null value columns to avoid errors \ndata.dropna(inplace = True) \n    \n# storing dtype before converting \nbefore = data.dtypes"], [0.12485777552238081, 0.14, 0.1714652319520478, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the length of the smallest prefix which is also suffix in the given string.\n\ndef findPairs(nums, k):\n\n    sum_dict = dict()\n    for i, val in enumerate(nums):\n        sum_dict[val] = i\n\n    count = 0\n    for j, val in enumerate(nums):\n        if (k > 0 and (nums[j]) - k in sum"], [0.12050435648971788, 0.14285714285714285, 0.13459519516316976, "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\ndef remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the rotations of a string.\n\nBinary search\nBinary tree search\nGRE\ntriangles\ngrids\ndynamic programming\nHashing\nRecursion\nGreedy\nStacks\nQueues\nHeaps\nGraphs\nSearching and Sorting\nBit manipulation\nSerious questions\nGoogle questions with answers\nEwer notes from GRE college\nimportant books from GRE College\nGRE tips and tricks by Abhishek joshi\n"], [0.31278534035205, 0.2962962962962963, 0.4242349467752721, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the total number of rotations, if a string is a substring of concatenated string of itself, .\n"], [0.1671508107491928, 0.20833333333333334, 0.32882350722144327, "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of times a string has to be required to print in complete string. \ndef sum_digits(num): \n    rem = sum = 0\n    while(num): \n        rem = num % 10\n        sum = sum + rem \n        num = num // 10\n    return sum\nThe above code is a python function to sum all the digits of a given number. e [John6890]\ndef"], [0.08216257245659005, 0.0945945945945946, 0.279033562854156, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that takes in a string and finds all the possible rotations of a string, it is returned as an integer from 1 to n, \nwhich corresponds to the shift distance required for rotation and it is created for aligning strings for comparison in iterative sequence.  \nTags: programming\nRelated Ptach to: Problem Data 2\n\nImplement a Python script that given 3 integers allows to total parking duration, \nassuming the kilometers were completed at an equal pace with"], [0.1623989535148671, 0.23076923076923078, 0.21338461738982467, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find number of rotations in the string.\ndef kendrick(values, rotation_factor, no_of_rotations, minimum=False):\n    for loopVar in range(no_of_rotations):\n        values = values[-rotation_factor:] + values[:-rotation_factor]\n        if minimum:\n            print(min(values))\n        else:\n            print(max(values))\nThe"], [0.1462235298550535, 0.21951219512195122, 0.3782884164979184, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the length of the rotations of a string.\n\n\nfrom itertools import combinations\ndef count_unique_permutations(nums, k):\n    return len(set(itertools.permutations(nums, k)))\nThe above code is a function to find the number of unique permutations of length k Numbers in an array.\n\n\ndef combinationsofNSelectedVARepeatedMANYtimes(N,"], [0.2542298429309479, 0.2962962962962963, 0.38978223908417187, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a Python function to find the total number of rotations of an array of  \ncharacters that are distinct.\n"], [0.10251913732010343, 0.1, 0.23112422830698434, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " gets the number of rotations and returns the list of rotations.\ndef binary_search(a, x): \n    i = bisect.bisect_left(a, x) \n    if i != len(a) and a[i] == x: \n        return i \n    else: \n        return -1\nThe above code searchers for the element in a given list 'a' and returns the index if found.\n"], [0, 0.0, 0.0, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " returns \n\ndef binary_search_recursive(nums, target):\n    return helper(nums, target, 0, len(nums) - 1)\n    \ndef helper(nums, target, start_ind, end_ind):\n    mid_ind = (start_ind + end_ind) >> 1\n    \n    if start_ind > end_ind:\n        return -1\n    elif nums[mid"], [0.13316523428362684, 0.11290322580645161, 0.23783650887042215, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find how many times the string str is rotated and make it a pallindrome.\n\n2) Overlapping Recurrences and tight (O(n)O(n)) specifications\n\nGiven a permutation, calculate the next permutation under dictionary ordering. If the largest permutation is reached, the function returns False. dict and makedict functions consumes text file containg dictionary words and makedicts returns an array of words. The n"], [0.088855672190805, 0.12244897959183673, 0.20421694734104076, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\ndef babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is for finding the maximum rotations of the given string.\n\ndef reverse(str): \n    try:\n        str = str[-1: :-1];  \n    except: IndexError; \n    return str;\nThe above code is a Python code for a simple program to reverse a string.\n\ndef int_to_Roman(num): \n    val = [1000, 900, 500, 400,100, 90, 50,"], [0.11731816740935101, 0.13953488372093023, 0.09641662606221524, "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\n\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " can be used to find the time rotation of a string.\n\ndef exist_in(ele, sub=[]): \n    if len(ele) >= len(str): \n        if ele[:len(str)] == str:\n        return True\n    else: \n        return False\ndef contained(str,lis=[]):\n    for i in lis:\n        res=find_Rotations(str,i)\n        if"], [0.2650619708874967, 0.4, 0.5504051442680773, "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the required rotations of the string to get the substring again and again in the string.\n\n'''"], [0.15691205026577, 0.16, 0.2828754865228308, "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations in an alphabetically sorted string and returns the rotation count.\n\"\"\"\"\"\"\n\n\n\"\"\" output should be like this\n{\n    'is_balanced': True,\n    'opening_bracket': [1, 23],\n    'closing_bracket': [6, 23],\n    'brackets': ['(', ')']\n}\n\"\"\"\nstring1 = \"((dfd(()s(("], [0.07291925096984332, 0.02040816326530612, 0.04049603712706861, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " checks for the rotation in string and its complexity is O(n)\nimport copy\n\ndef rotate(matrix):\n    #logic here\n    rotatedMatrix = copy.deepcopy(matrix)\n    r = len(matrix[0])\n    c = len(matrix)\n    for x in range(c):\n        for y in range(r):\n            rotatedMatrix[x][y] = matrix[r - y - 1"], [0.13134396940871365, 0.13636363636363635, 0.26983338755819897, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the largest rotation of given string in the smallest string which consists the given string in it.\n\nstring = input(\"Enter a word: \")\ndef is_palindrome(string): \n    if string[::-1] == string: \n        return True\n    else: \n        return False\nif is_palindrome(string): \n    print(\"{} is palindrome\".format(string)) "], [0.3062116676569221, 0.42857142857142855, 0.5684908847774611, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the rotations of the given string.\n'''"], [0.1195089889287882, 0.14634146341463414, 0.1967631946474187, "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " gives us the number of rotations the string has.\n  # Code to open a file and searching a given string in that file\nopenmethod_1=open(\"stringhandling.txt\",mode='r') #to open a file using with read method\nwordstoread=str(openmethod_1.read()).lower().split(' ')\nStR='hullo'\nfreq=wordstoread.count(StR.lower())\n"], [0.16882814924612047, 0.16363636363636364, 0.3370384449748207, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function which takes string as an imput and returns the number of preceeding rotations of the given string that occur before the next occurrences.\ndef findMissingNumber(list):\n       return int((1+(1+8*len(list))**0.5)/2) - sum(list)\n\nThe above code is a python function to find the missing number in an array when all elements in array are repeated once except one.\n\ndef str_"], [0.19806382256083024, 0.20833333333333334, 0.3988056252562961, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of rotations done on a sorted array to containing the given \nstring.\n\ndef is_prime(n):\n    for i in range(3,int(n**.5 + 1)):\n        if(n % i == 0):\n            return 0\n    return 1\nThe above code is a python function to check for prime numbers\n\ndef no_of_even(l,u):\n    c"], [0.08092760538096141, 0.06451612903225806, 0.225424683465294, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that given a string, returns its minimal rotation, i.e its rotation in every possible\nposition (clockwise or anticlockwise).\n\nFor this subject, the tasks that it performs are:\n\nto return the calculator's programs list \nto perform a task that requires operator operations \nto register a new user \nto delete a preexisting user from the system\nclass Calculator:\n\n  def __init__(self,num_args):"], [0.08035363634798354, 0.05405405405405406, 0.0607374731098352, "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " finds the rotations\ndef isPalindrome(s): \n    res = True\n    n = len(s) \n    for i in range(int(n/2)): \n        if (s[i] != s[n-i-1]): \n            res = False       \n            break \n    for i in range(int(n/2)): \n        if (s[n-i-1]"], [0.1622410106361933, 0.2692307692307692, 0.41761148640388024, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find circular rotations of a string, and return the length of the maximum rotation. \n\n"], [0.14662504934639084, 0.1891891891891892, 0.15628956726178211, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python program to find the number of times a given string is rotated in a cycle.\nimport itertools  as it\na='23'\nb='32'\nall_a_b=list(it.product(a,b))\nprint(all_a_b)\nall_b_a=list(it.product(b,a))\nprint(all_b_a)\nunique=set(all_a_b"], [0.13746431024110356, 0.22916666666666666, 0.3789852277986486, "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function which returns the number of rotations required to make the given string same as the original one starting from a character in the middle of the string.\ndef findPalindrome(s): \n   \n    for j in range( len(s), 0, -1): \n        for i in range(0,len(s)-j+1): \n            n = len(s[i: i+j]) \n            if s"], [0.16104789865981006, 0.1836734693877551, 0.23940404131945234, "def find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the no. of rotations the given string is a rotated version of itself.\n\ndef check_prime(n): \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False \n    i = 5\n    while(i * i <= n) : \n        if (n % i =="], [0.13625772942180298, 0.1956521739130435, 0.4285973401969937, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to determine the number of rotations in the string s for a given string.\n\ndef max_j_diff_sum(a, n):\n  #Sorting the list\n  a.sort()\n  #Initialization of the values\n  j = -1\n  sum_j = 0\n  #Loop to find the total sum\n  for i in range(0, n): \n    if (a[i] < 0"], [0.08980522452635332, 0.12280701754385964, 0.22636557446197747, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a Python program to find all rotations of a given string with their frequencies using a given string.\n\ndef merge_the_tools(string, k):\n    for i in string[0::k]:\n        res = \"\"\n        for j in i :\n            if j not in res:\n                res += j\n        print(res)\nThe above code is a command line tool which is to be executed from the terminal.\ndef multiply(num"], [0.26789751135245343, 0.34615384615384615, 0.5607391219845926, "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations to retrive the same string using concatenation of the string and its substring.\n"], [0.11543573497386868, 0.20833333333333334, 0.4041746156236252, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find rotations of a string and returns number of rotations of the string the given string.\n\n\n# Q. You are given length and breadth of a rectangle.  Write a Python program to check whether the rectangle is a square or not. Observe that there is a .is_square() function in the Python library.\nlength = int(input(\"enter the length of rectangle \"))\nbreadth = int(input(\"enter the breadth of rectangle \""], [0.14798732319507682, 0.16666666666666666, 0.22014494850104457, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations in a string for a given alphabet. \n\nga = {0: \"A\", 2:\"C\", 3:\"D\", 7: \"G\"} \ngb = [0, 2] \n  \ndef findClosestValue(table, key ): \n    L = ga[key]\n    val = \"\"\n  \n    for i in range(1, key + 1): \n        if"], [0.10474929234485772, 0.14, 0.2652482071584036, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function which takes a string and returns the rotation of the string.\n\ndef maxLength(l, r, k): \n  \n    ctr = 0\n    for i in range(l, r + 1): \n        if (counter[i] > k): \n            ctr += 1\n    return ctr \nThe above code is a python function which takes in a list and a number(k) and returns the number of"], [0.14965971666347544, 0.14516129032258066, 0.1996121371296209, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find all rotations of a string.\n\n5. Write a python program to detect if two strings are palindrome or not. \n   aba \nThere are three different implementations: 1) Iterative, Iterative with deque. 2) Recursive  and 3) Stacks.\n   All three implementations return true for a palindrome.  \n   Note that I do not use string reversal (which is also a solution)."], [0.10493553705172601, 0.12244897959183673, 0.09395064714858264, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that takes in as input a string and returns the number of rotations between 'rotate me' and 'me  rotate'.\ndef find_Rotation(str): \n    first_half =  str[0: len(str) // 2 ] \n    second_half = str[len(str) // 2 :] \n    if first_half == second_half: \n        return len(str) // 2\n    min"], [0.16450880454616149, 0.15384615384615385, 0.23289590646968106, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find out the no.of Rotation Copies or the number of times an array has to be rotated.\ndef check_Anagrams(list):  \n    for i in range(len(list) - 1): \n        for j in range(i + 1,len(list)): \n            if (list[i] == list[j]): \n                return True\n    return False\nThe above code is a"], [0.07899261129285537, 0.05, 0.05841271705574211, "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \nThe above code is a function to determine if the sum of the divisors of two integers are the same.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function mystring. \ndef is_rotation(str1,str2): \n    if (len(str1) != len(str2)): \n        return 0 \n    temp = str1 + str1 \n    if (temp.count(str2) > 0): \n        return 1 \n    return 0\nThe above code is a function is_rotation.\n"], [0.16139195937328674, 0.23076923076923078, 0.14476916064714979, "def largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations in a string.\n\ndef match_pattern(str1,str2):\n    mat = []\n    for i in set(str2):\n        tmp = [] \n        for prtn in range(len(str1)):\n            for j in range(1,len(str2)):\n                if i == str1[prtn:prtn + j]:\n                    tmp = str1"], [0.1841437098675535, 0.225, 0.2510881863799846, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\ndef find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations required to make a string a palindrome.\n\ndef string_rotation(l_string, s_string):\n  n = len(l_string)\n  for i in range(n):\n    if (l_string[i] == s_string[0]):\n      if(l_string[i:n] == s_string):\n        return True\n      else:\n"], [0.29997226941738353, 0.23255813953488372, 0.3897590690351892, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the minimum number of rotations needed to convert a string into a palindrome.\n\nprint(\"Enter the array value:\")\nlist=list(map(int,input().split()))\nn=int(input(\"Enter the value for which you want to find the sum:\"))\nprint(\"The sum is:\",sumvalue(list,n))\n\n\ndef printGCD(a, b):  \n    if a =="], [0.15160960319729172, 0.3333333333333333, 0.4111005580794234, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the rotation count of a string. \n    \n    \n    \n    \n    \n    \n"], [0.14559172556144853, 0.21428571428571427, 0.19712974364850078, "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function which takes a string and returns the number of rotations required to make a string palindromic.\ndef count_Once(str): \n    key_set = {} \n    for i in range(0,len(str)): \n        if str[i] in key_set: \n            key_set[str[i]] += 1\n        else: \n            key_set[str[i]] = 1"], [0.12605523474787025, 0.16279069767441862, 0.20208882921714638, "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \nThe above code is a function to determine if the sum of the divisors of two integers are the same.\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the Rotations of a string.\ndef removeWhiteSpace(str):\n    str_list = []\n    for i in str:\n        str_list.append(i)\n    str_list = [i for i in str_list if i != \" \"]\n    str_list = \"\".join(str_list)\n    return str_list\nThe above code is a function to remove white space in a string."], [0.10845659930363573, 0.1346153846153846, 0.2007169544289553, "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a given one liner code in python 3 to find number of rotations in a sorted array of different unique strings.\n\ndef braces(A):\n    dict = {'{':'}','[':']','(':')'}\n    array = []\n    while (len(A) > 0):\n        string = ''\n        for i in A:\n              string += i\n              if (len(string) >= 2) and (dict["], [0.07532833372668257, 0.041666666666666664, 0.023411306481152867, "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that checks for string rotation.\n\ndef sumPowerSet(array):\n    res = []\n    for i in range(1 << len(array)):\n        subset = [array[bit] for bit in range(len(array)) if (i & (1 << bit))]\n        res.append(sum(subset))\n    occ = [i for i in res if i%2==0]\n    return occ\n\n\n"], [0.15489340125799786, 0.16216216216216217, 0.3633246832673005, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to count the number, without rotation, the string is present in the string *n* times.\ndef finddup(lst):\n    un=list(set(lst))\n    return len(un) \nThe above code is a function to find the duplicate number"], [0.19215472811424492, 0.21568627450980393, 0.3750341517947119, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the size of the minimum rotations required to convert a given string to a circularly identical string.\n\ndef rearrange(arr, n):\n    m = n-1\n    while n:\n        n-=1\n        arr[n], arr[m] = arr[m], arr[n]\n        m-=n\n    return arr\n\nThe above code is to rearrange the input array by swapping n elements"], [0.10771414245018597, 0.16666666666666666, 0.09951252746564868, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is to find all the rotations of a string.\ndef find_duplicate(arr):\n      size = len(arr) \n   \n      for i in range(0, size): # Since array elements are distinct \n       \n        if (arr[Math.abs(arr[i])] >= 0): \n           arr[Math.abs(arr[i])] = -arr[Math.abs(arr[i])]; \n"], [0.20060914279382117, 0.17391304347826086, 0.2942735961980451, "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\n\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the smallest rotatable string for a given string. \n\t\n\nA function to return alignment cost of two blocks a and b.\ndef get_block_match_score(a, b):\n    block_match_score = 0\n    m=len(a)+1\n    n=len(b)+1\n\n    if (m==1 or n==1):\n        block_match_score = 1\n    else"], [0.20047712673461263, 0.23809523809523808, 0.47196046401913627, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of right rotations to make a string equal to a another string.\n\ndef gcd(a,b):  \n    if(b == 0): \n        return a \n    return gcd(b,a%b) \nThe above code is a python  recursive function to find the greatest common divisior between two numbers.\n'''"], [0.08577259546021063, 0.09090909090909091, 0.13992703761139347, "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\n\nimport re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that returns rotation of a string.\ndef long_length(l):\n    long=len(l[0])\n    string=l[0]\n    for k in l:\n        if len(k)>long:\n            long=len(k)\n            string=k\n    return string\nThe above code returns longest string from list.\ndef substitute_vowels(input_string):\n    vowels='aei"], [0.10287629487564084, 0.1111111111111111, 0.17549786290667424, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function that takes a string as an input and returns the smallest distance where substring can be a rotated string of the given string.\n\ndef compareTriplets(a, b):\n  alice = 0\n  bob = 0\n  length = len(a)\n  for i in range(0, length):\n    if(a[i] > b[i]):\n      alice = alice +1;\n    elif("], [0.22948636295897443, 0.20930232558139536, 0.21128826724506672, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of rotations present in a particular sequence.\ndef find_Anagrams(input): \n      \n    distance = {} \n      \n    # Least-change anagrams \n    anagram = [''.join(s) for s in permutations(input, len(input))]   \n    #      = [ABC, ACB, BAC, BCA, CBA, CAB]  \n"], [0.13414802312210258, 0.18181818181818182, 0.30266633176450597, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the rotations for a given string.\nDesign a function that computes all the permutations of a string to n-move.\n\ndef permute(str): \n    n = len(str)\n    lst = []\n    string = list(str)\n  \n    for i in range(n): \n        for j in range(i, n): \n            string[i], string[j] = string"], [0.19756462594237886, 0.17777777777777778, 0.228773244719705, "import math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the rightmost rotation point of the string.\ndef find_Anagrams(s,p): \n    res =[]\n    n = len(p)\n    # Count of each character present in pattern \n    mp = [0]*256\n    for i in range(n): \n        mp[ord(p[i])] += 1\n    print('mp:-',mp)\n    # Count of each"], [0.19407685292543714, 0.1702127659574468, 0.17727797466900463, "def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the rotations of a given string in all possible directions\n\ndef find_permutation(str, pattern): \n    window_start, matched = 0, 0\n    chmap = [0] * 256\n    for char in pattern: \n        chmap[ord(char)] += 1 \n \n     \n    for window_end in range(len(str)): \n        right_char = str[window"], [0.14334512460617221, 0.1724137931034483, 0.2459332366262098, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is to get the minimum rotation length in which a string will rotate between each other.\n"], [0.14455334542930004, 0.11627906976744186, 0.09561343612680258, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the longest contiguous substring (repeated elements) from the string that has all \nunique elements. m\nwords = words.Words()\n#print keydefinitions[100:400]\n#print words.getMax()\n#print words.getMinAndMaxValue()\nwords.showOccurrence()\nwords.showOccurrence(40)\n#print words.getWordIndex(404)\n#print words.getWord("], [0.1829418738443768, 0.2, 0.1982698804838326, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the length of the smallest substring that rotatess a  given string.\n\u200b\"\"\"\n['Vijcik-Ronai', 'vijey']\n\n\ndef find_eligible_dates(curr_date,travel_dates,return_dates):\n    import datetime\n    today=datetime.datetime.now()\n    n=len(travel_dates)\n    travel=[today.strftime(\"%Y"], [0.09152255298655444, 0.1206896551724138, 0.27734728747317267, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " find all the rotations of a string and returns the index of the substring from origin string if possible.\ndef diagonal_list(list):\n    ret = []\n    for col,row in enumerate(list):\n        ret.append(row[col])\n    return iter(ret)\nThe above is a function to create an empty list and iterate over the object and concatenate the column elements with rows.\nimport re\ndef removeMultipleSp"], [0.21857745599739384, 0.2647058823529412, 0.2908859322132286, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations required to make a string a palindrome by performing character swaps. \n        \ndef roman_to_int(roman):\n    roman = roman.upper()\n    if not re.search('^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{"], [0.10489811446296242, 0.13157894736842105, 0.21121488409394, "def multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that takes a string as input and returns the number of characters that the string has been rotated.https://www.geeksforgeeks.org/find-rotation-count-rotated-sorted-array/ - in this case a verbatim copy of test cases  \n"], [0.1277201096049396, 0.14285714285714285, 0.23972138951107733, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotation of a given string.This operation is needed to understand the longest repeating substring () and substring info () queries.\n\n#Recursion-\ndef count_consecutive_summers(n):\n    result = 0\n    sub_sum = 0\n    counter = 0\n    while True:\n        if sub_sum > n:\n            sub_sum -= counter\n            counter += 1\n            if sub"], [0.13874515629948217, 0.21052631578947367, 0.17907628288368607, "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function that is used to find the rotation of the string.\n\ndef re_arrange(str):\n    empty_str = []\n    empty_str = list(str)\n    empty_str.sort()\n    \n    tmp = [] \n    tmp = empty_str\n  \n    rotated = []\n    rotated = [tmp[ele] for ele in range(-1, -len(str)-1, -1)]\n"], [0.1771582212258607, 0.19607843137254902, 0.35818764021571536, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of left rotations to get a string in the order in which it was sorted.\n\n# Util function to check if  \n# n is a sparse number or not \ndef checkIfSparse(n): \n  \n    # Count divisors.  \n    count = 0\n    if(n == 0 or n == 1): \n        return False\n    for i in range(2, (int"], [0.09766006291708734, 0.21739130434782608, 0.2254771557977619, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " determines number of rotations of a string in an alphabetical string.\n"], [0.20012589453985324, 0.15555555555555556, 0.16636116004481744, "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the smallest rotation that sstring \nRotation is an operation of moving of a particular string from one place to another place with a certain direction.\n\ndef rotateListName(listName,noOfrotation):\n  listName=listName[-noOfrotation:] + listName[:-noOfrotation]\n  return listName\ndef swapListItem(listName,element1_index, element2_index):"], [0.14798732319507682, 0.16326530612244897, 0.2536871275501247, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations in a circularly rotated string comparator. geeksforgeeks.org/number-rotations-string-k-times/\ndef repeatedSubstringPattern(str): \n    n = len(str)\n    for i in range(1, n // 2 + 1): \n        if n % i == 0 and str[:i] * (n // i) == str: \n            return True"], [0.15351977303944828, 0.21875, 0.13485643138388143, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the maximum rotation of a string.\ndef replace_Spaces(str1): \n    str1 = str1.strip() \n    str1 = str1.replace(\" \",\"20%\") \n    str1 = str1.strip() \n    str1 = str1.replace(\" \",\"\") \n    \n    \n    \n    \n    \n    \n    \n    \n      The above code is a function"], [0.1734581825923641, 0.1875, 0.1413238307418131, "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the smallest rotations of a string.\ndef sumSubsets(sets, num): \n    def differ(l):\n        return (differ(l[:-1]) + l[-1]) if l else 0\n    res = [ i for i in range(1,num + 1) ]\n    sets = differ(sets)\n    return [ set for set in res if set == differ(sets & set) ]"], [0.2669902408158605, 0.2222222222222222, 0.3198230581757397, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of times the string is rotated by n times.\ndef isSubsequence(string,sub):\n    for item in sub:\n        string=string[string.find(item)+1:]\n        if(string==\"\"):\n            return \"YES\"\n    return \"NO\"\n\n\n"], [0.08336726646676286, 0.058823529411764705, 0.10362237496910444, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to check if a string is rotational in nature. \n\ndef repeat_sublist(list1):\n    stringRep = ' '.join(list1)\n    result = []\n    for x in list1:\n        if stringRep.count(' ' + x) > 1:\n            result.append(x)\n    return list(sorted(set(result)))\nThe above code is a function that checks if a given list"], [0.1916227134306251, 0.17391304347826086, 0.3402509007688796, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the largest rotation of the give string in that string itself.\n\ndef findrsRotation(str):  \n    return maxSubstringRot(str,0,len(str) - 1) \n  \n# A function to get maximum without  \n# repetitions in arr[] \ndef maxSubstringRot(str, left, right): \n    # 'max' to store the length of longest \n    # sub"], [0.08936813015080561, 0.1320754716981132, 0.325425271428438, "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to return the number of times a string should be rotated for it to be a substring of itself, when the rotation does not change the string. For example, for a string in order of rotation \"ababa\" the string \"ababa\" is a count of 4 at which the string is a substring of itself, which means that is has rotated when the initial string is added to itself.\n\ndef cal_num(n): \n    a = 3"], [0.07170039534467419, 0.17391304347826086, 0.18177483071402056, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find LCSubString (longest circular substring).\n"], [0.08696897892882192, 0.14, 0.23593228006027533, "def catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function which returns rotations of a string.\n\ndef ReverseInGroups(a, n, k):\n    for i in range(0,n,k):\n        a[i:i+k] = reversed(a[i:i+k])\n    return a        \nThe above code is to reverse a section of an array in groups of given size. The core logic is in the following snippet findiff digits\n\ndef findiffDig"], [0.14524165778419182, 0.1111111111111111, 0.13674739526731722, "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the position where a string occurs twice.\nimport numpy as np\nleap_years = np.arange(2000, 2500, 4)\nd={i : calendar.weekday(i, 1, 1) for i in leap_years}\ny=dict({'Sunday':list(d.values()).count(0),\\\n       'Monday':list(d.values()).count(1),\\\n       '"], [0.1274641291960628, 0.14583333333333334, 0.3248251896164702, "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the roation of given string. Using the above function, if the initial n characters equal to the last n\n\ndef find_larger_from_stat(a, key): \n\tn = len(a)  \n\t# Pick starting point. i \n\tfor i in range(n): \n\t\t# Initialize matched and k \n\t\tmatched = False\n\t\tk = i \n\t\tfor"], [0.14138150867995042, 0.20512820512820512, 0.10144829114258157, "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations in a string\nfrom itertools import product\nimport itertools\nfrom itertools import product\nfrom itertools import permutations\nfrom itertools import combinations\nfrom itertools import islice\nfrom itertools import chain\ndef spiralMatrix(matrix):\n    m = len(matrix)\n    n = len(matrix[0])\n    left = 0\n    right"], [0.20280437239021956, 0.1836734693877551, 0.3461607542529981, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the minimum rotation of a given string.\ndef remove_Repeated_Letter(str):\n    a = []\n    for x in str:\n      if(a.count(x) == 0):\n        a.append(x)\n    return a\nThe above code is a python function to remove the repititive characters in a string without using any additional data structures.\n\ndef primes(n):\n  primfac"], [0.14620729392068527, 0.19148936170212766, 0.35130793299479085, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the logic to find the minimun number of rotations to string.\n            \nstr = input(\"Enter the string: \")\nprint(\"Prompted String is: {}\".format(str))\nK = int(input(\"Enter the Value of K: \"))\nprint(\"The given tuple is: {}\".format(tuple(str)))\nprint(\"The tuple with first k characters and last k characters removed is: {}\".format("], [0.12605523474787025, 0.14, 0.36330856334924483, "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the rotations of a given string, where in the first line we concatenate duplicate copies of the string, then we process substring rotations in the next-for loop.  \n\ndef complex_Number(a,b,h,p):\n    num = a+ (b*1j)\n    return round((num**p)/h,2);\nThe above code is an implementation of complex number.  \n\n########################"], [0.1375694227619968, 0.15217391304347827, 0.1679073258452636, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of times a string rotates.\n\ndef timesort(strings):\n    if len(strings) == 0:\n        return strings\n    def spl(string):\n        ls = string.split()\n        se = [int(x) for x in ls if len(x) > 0]\n        se.sort()\n        return se\n    sz = max(len(' '.join(strings))+1,"], [0.28603984240620395, 0.24, 0.29806318176137875, "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the largest possible key in a dictionary.\n\"\"\""], [0.09274408592556381, 0.10204081632653061, 0.15856480448010296, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function return the number of times the string is rotated repetition of a substring.\nGiven two strings, check if email1@gmail.com and email2@gmail.com are same. Ignore the ids, Only consider two strings are equal in lower case.\n\ndef emailaddress(str1,str2):\n    email1,email2=str1.split('@'),str2.split('@')\n    return True if email1[1"], [0.14569448536614243, 0.15384615384615385, 0.11379419618640549, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python program to find the minimum rotation.\n\ndef main(list1, list2): \n    tmp = \"\" \n    z = [] \n    for i in range(len(list1)): \n        tmp = list1[i:]+list1[:i] \n        z.append(tmp) \n    z1 = [] \n    for i in z: \n        for j in list2: \n"], [0.10160001981524434, 0.1320754716981132, 0.1577225704872101, "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python program to find  number of subrotuines in a given string. \nThere are two different implementatinos. For a complete explanation and writeup look here https://www.geeksforgeeks.org/count-substrings-rotatable-string/ \ndef spiralPrint(m, n, a) : \n    k = 0; l = 0\n    while (k < m and l < n) : \n        for i"], [0.15751855718434843, 0.4, 0.4902325593788176, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the rotations of a given string.\n"], [0.1195089889287882, 0.15555555555555556, 0.26141947474500327, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find rotations for a given string.\nlist1 = [4, 6, 7, 1, 3, 0, 9, 2]\nlist2 = [4]\nprint(find_Rotations(list1))\nprint(find_Rotations(list2))\nThe above code shows an example in determining the string rotations. \n"], [0.09308058976016656, 0.09302325581395349, 0.13222193719111996, "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is to find whether a given string \u201cstring\u201d is composed of one \u201crotation\u201d of another string \u201crotation\u201d.\n\ndef find_integer(nums): \n    len_of_oversized_nums = max(nums)\n    minimum_value_multiplication = min(nums)\n    nums_sorted = sorted(nums, reverse = False)\n    for i in range(len"], [0.1110567463978082, 0.16666666666666666, 0.1710760220119084, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that takes in a String and finds the number of rotations required to convert a String into a palindrome.\ndef back_Count_String(str, val): \n    if not str:\n        return True  \n    if val < 0 :\n        return False\n    if (received(str[1:], val) or received(str[1:], val - str[0])):\n        return True\n    return False\nThe"], [0.19020978510109143, 0.17777777777777778, 0.22320070188655974, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function that returns the minimum number of rotations so that the strings obtained are are same.\n\ndef longest_substring(ip_string, k): \n  \n    n = len(ip_string) \n    max_subarr = \"\" \n    max_subarr_len = 0\n    win_s, win_e = 0, 0\n  \n    while (win_e < n): \n        if (len"], [0.11736404444678802, 0.21052631578947367, 0.1710362339060508, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find left rotations of the string.\n    \n    \ndef count_numbers_and_letters(string1):\n    extract_letters = string1.replace(\"@\",\"\")\n    numbers = 0\n    letters = 0\n    for i in string1:\n        if i.isdigit():\n            numbers = numbers + 1\n        else:\n            if i.isalpha():\n                letters = letters + 1\n   "], [0.19253051499499077, 0.16666666666666666, 0.18422586534212756, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is pure python function to find the rotations of given string in all permutation in lexographically order.\ndef findSubStrLengthK(target,k):\n    i=j=count=0\n    while j < len(target):\n        if target[i]==target[j]:\n            count+=1\n            if count==k:\n                print ((j-i+1),end=' ')\n                i=j-k+2\n"], [0.13805815067523927, 0.15151515151515152, 0.27354248207481474, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function, which returns the number of rotations of a given string an an input, along with the initial index of that rotation.\n\"\"\""], [0.14301772738996707, 0.15555555555555556, 0.13375044444189443, "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotated strings. \n\ndef custom_count_dna(dna, code):\n global c_Nucleotide\n \n\n c_Nucleotide={\"A\": 999, \"C\": 999, \"G\": 999, \"T\" : 999}\n for letter, count in c_Nucleotide.items(): \n        count = 0\n        for c in dna:\n            if c == letter:"], [0.17072264491349226, 0.18181818181818182, 0.4811942185421863, "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\n\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of rotations in a string by taking a given string as input. \nA rotation on a string means a string is formed after removing the last element of the original string, moving it to the front and adding to the front the length of the string.\n\ndef is_Pre_Safe(i, j, k, M): \n    if(M[i - 1][j] == k): \n        return True\n"], [0.1480086273277581, 0.14705882352941177, 0.21094460822893749, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is trying to find the rotations of the string inplace. \nFor reference you can use this code here: https://www.geeksforgeeks.org/find-distinct-substrings-given-string/\n\n\nhttps://www.geeksforgeeks.org/maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix/\ndef maxSubRectangle(A): \n      \n   "], [0.1356401480966321, 0.16666666666666666, 0.2235750389516713, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the total number of rotations needed for a string.\n\ndef combinations(list1, list2):\n    s = []\n    for element in list1:\n        for i in list2:\n            s.append(element + i)\n    return s\nThe above code is a function which gives all possible combinations of two given lists.\ndef unique_list(list):\n    # intilize a null list\n    unique"], [0.16716916680585903, 0.1568627450980392, 0.3852035557015186, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the index of the string which is its rotated value.\nsequence = [3, 4, 5, 6, 1, 2] \nn = len(sequence) \nout_index = find_Rotations(sequence, n) \nprint(str(out_index))\nThe above code is an example of the code which uses the above find_Rotations( ) function to determine the index at which the array returns to the same"], [0.10558611944776874, 0.11363636363636363, 0.10713732406249528, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find rotation of a string \ndef merge(x, y):\n    z = dict()\n    z.update(x)\n    z.update(y)\n    return z\n\ndef check(x):\n    d = dict()\n    for k,v in x.items():\n        if v in d.values():\n            return \"Its NOT Unique\"\n        d[k] = v\n    return \"Its Unique"], [0.278763183207407, 0.375, 0.558312769707073, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations the string continues to be a substring of the modified string.\n"], [0.1855449201341202, 0.1836734693877551, 0.26971367650250344, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the rotations of a string using a temporary string.\ndef squared_nums(nums):\n    for num in nums:\n        yield (num*num)\nThe above code is a python generator to square the given numbers.\ndef get_substring(sub, s):\n    return len([i for i in range(len(s) - len(sub) + 1) if s[i:i+len"], [0.0779847851888664, 0.04838709677419355, 0.11063017159393969, "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " checks for cyclic rotations. \nImplement the merge function for two sorted lists.\nSolutions with O(1) auxiliary space may not be accepted - the goal is to practice programming for an interview\n\ndef getNumUppercase(str):\n    upperCount = 0\n    for letter in str:\n        if ord(letter) >= 65 and ord(letter) <= 90:\n            upperCount += 1\n    return upperCount\n\ndef subst"], [0.1199060500195794, 0.16666666666666666, 0.15915325566142455, "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function find the number of characters by which a string needs to be rotated in order to obtain a palindrome.\n\ndef merge(range1, range2):\n    if(range1.high < range2.low):   # 2 ranges\n        tmp_range = range1\n        range1 = range2\n        range2 = tmp_range\n\n    low = min(range2.low, range1.low)\n    high = max"], [0.15351977303944828, 0.15789473684210525, 0.22842083161376242, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is the function to find the Rotatons of a string\n\ndef computeLongestPalindrome(s): \n    lenstr1 = len(s) \n    List1 = [] \n    List2 = [] \n    maxlentemp = 0                   \n    for i in range(2*lenstr1):         \n        List1.append(0) \n        List2.append(0) \n    maxlen = 0"], [0.10758554979430339, 0.10638297872340426, 0.11911115173391926, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is The output is:: the number of rotations in a string where \\text{str} is have itself as substring.\ndef find_distinct(num_list):\n    count = len(num_list)\n    num_list.sort()\n    t = num_list[0]\n    c = 0 \n    while (t == num_list[0]):\n        t = num_list[c]\n        c += 1"], [0.13600558870425758, 0.1590909090909091, 0.21489138015541914, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the point of singularity of an all alphabeticalised string.\n\nimport pandas as pd\nimport numpy as np\n#Read data in the form of dataframe (df)\ndf = pd.read_csv(\"https://raw.githubusercontent.com/fivethirtyeight/data/master/bob-ross/elements-by-episode.csv\")\n#Making a copy of the original data into another data"], [0.08916509304355284, 0.125, 0.190857083410802, "def count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " finds out rotations of a string. Its an important function for similar problems.\n\ndef find_factors(n): \n    l=[i for i in range(1,n+1) if n%i==0]\n    print(l)\n    return(l)\nThe above code gives all the factors of a given number.\nclass Cell(object):\n    def __init__(self, value='',max_height=0):"], [0.10329130024898316, 0.10869565217391304, 0.1182266085960178, "def even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " gives the number of rotations in the string.\ndef find_duplicates(str1,str2):\n    if len(str1) != len(str2):\n        return False\n    str = \"\"\n    for i in str1:\n        if i in str2:\n            if i not in str:\n                 str += i\n                \n    return str\nThe above code checks for duplicates in two strings.\ndef find_long"], [0.24688511719024897, 0.32, 0.42415738685204857, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations needed to make all elements unique.\n'''"], [0.1192451550198637, 0.16, 0.3168448756104389, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to determine the number of rotations in the Alien Dictionary with characters being put in one after the other in the same order.\n\ndef normalize_plaintext(text): \n    lower_case_text = text.lower() \n    return lower_case_text.replace(\" \", \"\") \nThe above code is a function to alter the plain-text under specified conditions.\n\ndef build_coder(shift): \n    dict"], [0.10216795290868262, 0.09090909090909091, 0.2643664517949729, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " returns the minimum number of characters inserted to make the word palindrome\n\nAll Shortest Differing Bit:\nGiven two binary strings, suppose different characters of the two strings are given as input. For example, if the two strings are 20 and 13, the demo outputs the character of the first strings are shifted twice but third bit region of the two strings are the same (a zero is inserted twice between 20 and 13). Print the output of each bit if they are different, safe"], [0.2086350902139816, 0.23076923076923078, 0.36194908313117746, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of rotations of a palindrome.\ndef gcd(a,b): \n  \n    if (a == b): \n        return a; \n    if (a > b): \n        return gcd(a-b, b); \n    return gcd(a, b-a) \nThe above code is a python function to find the gcd of two numbers.\ndef find"], [0.1380297303788604, 0.1875, 0.2391716253035623, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations a particular string has made in the string.\ndef reverse_string(test_str): \n  res = \"\".join(reversed(test_str)) \n  if(test_str == res):\n    return True\n  return False\nThe above code is a function that takes in a string and checks if that string is a palindrome and returns true if it is.\ndef palindrome"], [0.08249216700657779, 0.2727272727272727, 0.39451337419903765, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to count the distinct cycles of the string.\n"], [0.0844007434195675, 0.09433962264150944, 0.18852617270215594, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " finds the rotations if the given string is a substring of a rotation of itself.\n\nTo rearrange a string so that all same characters become a distance k away.\n\n\ndef rearrange_KdistanceApart(str, k):\n    if len(str) <= 1:\n        return str\n    \n    dist_char_map = {}\n    for char in str: \n        if char in dist_char_map: \n            dist_"], [0.14138150867995042, 0.1568627450980392, 0.19684462765465588, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations in a string from an alphabet.\n# This code is contributed by Harshit Agrawal \ndef group_and_count(array):\n    from itertools import groupby\n    array = sorted(array)\n    for key, group in groupby(array):\n        k = min(0, key)\n        yield (k, len(list(group)))\nThe above code is a function"], [0.22816978301803573, 0.2857142857142857, 0.4980353595329575, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the required number of rotations. It treats the string as the sum of two identical strings.\n"], [0.10726389096928036, 0.15873015873015872, 0.4558764659844803, "def set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find all the rotations of a given string, till the original string appears in the rotated string if first and last bits. \n\n# Handle Missing Keys\n\nLet us assume a Python list with elements as string items. We want to find the index of a given string item in the list. Write a Python program to search an element in the list and return its index. If the same element is present more than once, return the index of the first occurrence."], [0.31673148891105696, 0.2702702702702703, 0.19616363124508357, "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the minimum number of rotations required to make a string palindrome.\ndef transpose(matrix):\n  for i in range(len(matrix[0])):\n    for j in range(i+1,len(matrix)):\n      if (matrix[i][j] != matrix[j][i]):\n        matrix[i][j],matrix[j][i] = matrix[j]["], [0.22795173859337883, 0.21428571428571427, 0.2459185425997853, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is to find the minimum number of rotations required to convert a string into a palindrome.\n        \ndef knapsack(W, wt, val, n): \n    if n == 0 or W == 0 : \n        return 0\n    if (wt[n-1] > W): \n        return knapsack(W, wt, val, n-1) \n    else: \n        return max(val["], [0.1601645265436561, 0.2, 0.25637535452419513, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\nThe above code is a python function to remove odd numbers from a given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is function to find the rotation if a given string is rotated once.\n"], [0.21286421203068243, 0.4090909090909091, 0.48976536176798235, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the total number of possible rotations of a string.\n'''"], [0.21761400868064468, 0.2127659574468085, 0.4345883296294756, "def add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the minimum rotation or the minimum number of rotations of the given string. \n\nThe following code can be used to generate the test cases.:\n\ndef rotations(tup):\n      B = tup + tup \n      rotations = []  \n      n = len(tup) \n      for i in range (0,n): \n        rotations.append(B[i:i + n]) "], [0.11198913916614049, 0.13725490196078433, 0.17585103067122268, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to get the integer such that both the strings str and substring are rotations of each other.\n\ndef sumAllNumbersInString(str): \n    n = len(str) \n    hash_map = {} \n    res = 0\n    count = 0\n    ctr = [0 for i in range(n)] \n  \n    for i in range(n): \n        if (str[i] >= '"], [0.08935458027639394, 0.07692307692307693, 0.14700397442618499, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python script that finds the rotation count for a given string if it consists of rotations.\n\n\n\"\"\"\n\"\"\"\nAbbreviation \nACRONYMS = ('lol', 'dw', 'hf', 'gg')\n\ntext = \"Codekul - the coding academy\"\n\nfor i in text:\n    if words in\n\n\n[\u201cdata\u201d, \u201cscience\u201d, \u201c Anatomy\u201d, \u201c"], [0.1179053628915952, 0.11627906976744186, 0.1979593400130861, "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is to find the number of rotation required.\ndef removeDuplicateStr(s): \n    count = len(s) \n    i = 0\n    while (i+1) < len(s) :  \n        if s[i] == s[i+1]: \n            cnt = 1\n            for j in range(i+2,len(s)): \n                if s[i] == s[j]:"], [0.13273176470832085, 0.19047619047619047, 0.4136960011710667, "def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the rotations of the given string.The above code is a function to find the rotations of the given string.\nThe good egg in the given container \ndef find_Rotations(string): \n    for i in range(len(string)): \n        string = \"GOOD\" + string \n        string = string[:len(string)-1] \n        if (string == \"GOOD\"): \n"], [0.17423442913655113, 0.17777777777777778, 0.19587979218206242, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find rotations of given string in the total rotations.\n\ndef xTransform(diff, flag, str1, str2, slength): \n\n        for i in range(0,slength): \n            if (str1[i] == str2[i]): \n                continue\n            if(flag == True and str1[i] == 'x' and str2[i] == 'y'): "], [0.09190417704591612, 0.08571428571428572, 0.2891138092072455, "def find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " places a string at the end of the string, and repeatedly checks whether the concatenation of the string, \nif there is then \u200b\u200bthe rotation is correct.\n"], [0.1626868564122422, 0.14, 0.18131436937948592, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the maximum of two numbers.\ndef exponent(b, e):\n    if b == 0.0 and e <= 0:\n        raise ValueError\n    if e == 0:\n        return 1.0\n    if e < 0:\n        b = 1. / b\n        e = -e\n    res = 1\n    while e > 1:\n        acc = 1\n        while e >= acc*2:\n"], [0.12995462561868387, 0.15384615384615385, 0.2053347076319611, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number rotations of a particular string eg .. \"abceabcd\" --> \"abceabcdabceabcd...\" The rotations are made in a cyclic and not by swapping.  \ndef repeating_numbers(lis):\n    lis.sort()\n    num = 1\n    index = 0\n    while index < (len(lis) - 1):\n        if lis[index] == lis[index"], [0.23326674184817903, 0.34615384615384615, 0.503177442688997, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find out the number of rotations required to make a string equal to its rotated form.\n"], [0.19952687649211073, 0.1951219512195122, 0.27596081445604353, "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a Python function to find the minimum rotations required to convert a string to palindrome.\n\n# replacing repeated elements in string\ndef prdprst(str1,str2):  \n    if (str1.find(str2)==-1):\n        print(str2)  \n    else: \n        first = str1.replace(str2,'')   \n        print(str2 + first)  \nprdpr"], [0.11198913916614049, 0.14893617021276595, 0.3477025740929631, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a Function to find the number of characters that are same when the string is rotated in clockwise direction.For example if the string is \u201cgeeks\u201d the answer will be 4. The rotation in clockwise direction preserves the order of characters and the result can be found by\n \n   https://www.geeksforgeeks.org/the-stock-span-problem/?ref=lbp\n"], [0.08858675781364683, 0.1111111111111111, 0.12418985259485754, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that finds the first rotation of the string.\ndef longest_consecutive_sequence(nums):\n        di = {}\n        max_l = 0\n        for n in nums:\n            if n not in di:\n                left = di.get(n-1, [])\n                right = di.get(n+1, [])\n                left.append(n-left[0]) if left else left.append"], [0.16088425836268472, 0.1724137931034483, 0.4025539950439013, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is to find the minimum number of characters from a set of all possible rotations of given string which are not \npresent in the second string are removed.\n\nfind_Rotations(\"abcdab\")\nThe above code return 4 since 'abcdab' is equal to 'dabcdab'.\nString Compression:\nGiven a string, compress it and return only the compressed string if the resulting compressed string would be smaller than the \noriginal string.\n\n"], [0.14134533896240534, 0.16279069767441862, 0.24255791865369886, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the count of some rotated strings \n\ndef reverse_sentenece(Sentences):\n    return Sentences.split(\" \")[::-1]\nThe above code is a function to reverse words of a given string.\n\ndef check_palindrome_rec(str1, str2): \n    if(str2 == \"\"): return True \n    elif(str1[0] != str2[-1"], [0.11535411123557059, 0.16279069767441862, 0.15972516050309837, "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function that finds the number of rotations in a ROTATED string.\n\t\nimport cmath\ndef c_roots(a, b, c):\n\t\tmid = b**2 - 4*a*c\n\t\tsquart_of_mid = mid.sqrt()\n\t\tr1 = (b + squart_of_mid) / 2*a\n\t\tr2 = (b - squart_of_mid"], [0.45178840924927105, 0.4782608695652174, 0.684852672498226, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of rotations required to get a substring as the same.\n'''"], [0.09472200973607844, 0.09090909090909091, 0.0953228692933916, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " returns the no. of rotations a particular string is away from its ordered form, in a sorted array.\ndef reverse_words_in_para(test_str,test_sub_str):\n  test_str=test_str + \" \"\n  start_index=-1\n  end_index=0\n  after_index=-1\n  split_arr=[]\n  matching=0\n  for i in range(len(test_"], [0.08265421815509631, 0.10416666666666667, 0.12858043974072336, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " finds the rotations of an array.\ndef Addition_reverse(num): \n    reverse = 0\n    while num > 0:\n        remainder = num % 10\n        reverse = reverse * 10 + remainder\n        num //= 10\n    return reverse\nThe above function adds the resultant reverse of an integer\ndef GCD(ad,bd):\n    if a > b:\n        s = a\n    else:\n        s = b\n   "], [0.14676678031170495, 0.16666666666666666, 0.33282314333362967, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function which we can use to find the rotation value.\ndef get_suffix_array(string):\n    string = ' ' + string \n    suffixes = [] \n    for i in range(len(string)): \n        suffixes.append( string[i: ] ) \n    suffixes.sort() \n    return suffixes \nThe above code is a python function to return the suffix array of a string."], [0.26504464062447436, 0.2708333333333333, 0.36019288015338535, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the minimum number of rotations required to convert a given string to a palindrom by adding the same character as a prefix in the given string.\ndef gcd(num1, num2):\n    if num2 == 0:\n        return num1\n    return gcd(num2, num1 % num2)\ndef consList(n):\n    if n <= 0:\n        return 0\n    tmp = consList"], [0.24432740333454694, 0.30434782608695654, 0.6113583942026712, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the minimum number of rotations required to get the same string.\n\n\n6. In C, given a string in the form of a character array, we can use strlen function to find the length of the string. Write a function with the same functionality in Python.\ndef strlen(string):\n    return len(string)\nThe above code is a function to calculate length of a string.\n\n\n7. In C, given a single character"], [0.1185867039182523, 0.11538461538461539, 0.10049260836442328, "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the no of times string wrapped with itself.\ndef find_floor(arr, n, key, lo, hi): \n\n    if key < arr[0]:\n        return 0\n\n    else:\n\n        if arr[n - 1] < key:\n            return (n - 1)\n\n        else:\n\n            if lo == hi:\n                return lo\n\n            if lo < hi:\n                mid = int((lo + hi"], [0.17423442913655113, 0.1794871794871795, 0.2163608458889158, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the minimum \nrotation in a string.\n\n\ndef reverse_strings(string):\n    return string[::-1]\nThe above code is a function to reverse a string.\n\ndef substr(str1, substr):\n    for i in range(0, len(str1)-len(substr)-1):\n        if str1[i:len(substr)] == substr:\n            return i\n    return"], [0.15003997985217846, 0.19148936170212766, 0.2803578699532613, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the number of rotations needed for the string to read the same front to end and back.\ndef consecutive_ones(num): \n    count = 0   \n    high = float(\"-inf\")\n    while(num >= 1): \n        if num%2 == 1: \n            count += 1\n            if count > high: \n                high = count \n        else: \n            count = 0\n        num"], [0.13835009135729637, 0.16666666666666666, 0.3489346299841083, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a function to find the no. of rotations of a given string in another string if fixed rotation is applied to the latter.\nFirst piece of code to check if 2 single digit numbers multiplied become greater than 9\n    t=input()\n    z=0\n    while t:\n        x,y=map(str,input().split())\n        x,y=int(x),int(y)\n        if (x*y>9):\n"], [0.2375959544806522, 0.3, 0.2771076133042218, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\ndef find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code", " is a python function to find the number of rotations required to get a string.\ndef rotatebyK (str, n): \n    if n in range(len(str)): \n        return str[n:] + str[:n] \n    else: \n        for i in range(len(str)): \n            str = rotatebyK(str,i)\n        return str\n    The above code is a python function to"]]}
