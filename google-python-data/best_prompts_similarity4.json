{"prompt": {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 555, "prompt": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.", "code": "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  ", "test_imports": [], "test_list": ["assert difference(3) == 30", "assert difference(5) == 210", "assert difference(2) == 6"]}, "queries": [[0.2319210155927905, 0.28205128205128205, 0.512452863063375, "def last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python function to find the difference of the given numbers.\ndef sum_sub(x, y) : \n    print(x + y) \n    print(x - y) \nThe above code is a python function to print the sum and difference of two numbers.\ndef convert_todecimal(n, base) : \n\tdigits = \"0123456789ABCDEF\"\n\t\n\tbinary_num = []"], [0.28185208882703217, 0.35714285714285715, 0.5761171182959035, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\nimport math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find difference between sum of \nfirst n natural numbers and the sum of squares of first n natural numbers.\ndef difference(n) : \n    s = 0 ; \n    sq = 0 ; \n    for i in range(1, n+1) : \n        s += i; \n        sq += (i * i); \n    s = s * s; \n    res = s - sq;  \n"], [0.15691205026577, 0.15217391304347827, 0.21032285520365096, "def new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the sum of all the different possible combinations in a number.\n\nclass Difference:\n    def __init__(self, a):\n        self.__elements = a\n\t# Add your code hered_ed _elements =a\n\n    def computeDifference(self):\n        self.maximumDifference = abs(max(self._elements) - min(self._elements))\n# End of Difference class\n\n"], [0.11397244183439155, 0.13953488372093023, 0.24210084524650533, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to print the factorial of the given given number.\n\ndef ar(*tup) :  \n    for i in range(0, len(tup)) :  \n        for j in range(i+1, len(tup)) :  \n            if (tup[i] == tup[j]) : \n                return False; \n    return True;  \nThe above code is a function to find if the given"], [0.17254008299405316, 0.16279069767441862, 0.2955620191201922, "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\n\ndef list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference of a square.\n\ndef least_square(x1, y1, x2, y2):\n    m = (((y2-y1))/((x2-x1))); \n    c = (y2 - m*x2); \n    return m, c;\nThe above code is a function to find the least number of squares.\n\ndef combination(arr, r): \n"], [0.2373201796929107, 0.22413793103448276, 0.5370937670806569, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is used to find the difference between the sum of natural numbers and the sum of square of natural numbers.\n#Write a function countElements() that accepts an array of integers as a parameter and returns an integer count. The function must count the number of array elements in the range entered by user, ie. entered by user has to be in range of elements. If entered range is not in range of elements it should print -1.  \nl=[ 1, 2, 3,"], [0.28235440426845654, 0.3181818181818182, 0.5857993530384106, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference between sum of squares of first n natural numbers and the square of sum.\ndef titandict(list):\n  dict={}\n  dict={(list[0]):('*/'[x%x-x>0]):list[0]}\n\nThe above code is to build a dictionary, such that The key value is the item number and the dictionary\u2019s value shows its operator i.e. +, \u2013"], [0.11239055432400509, 0.15555555555555556, 0.21220608896781945, "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " returns the difference between two numbers.\n\ndef check_symmetry(tuple1):\n a =True\nfor i in range(len(tuple1)):\n\n if(tuple1[i] != tuple1[len(tuple1)-1-i]):\n\n  \n  return False\nreturn a\nThe above code is a function that takes a tuple as parameter and returns True if the tuple is symmetrical and nFalse is the tuple is"], [0.2672185076061579, 0.2127659574468085, 0.3620002038303012, "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python program to find the difference between the sum of non-prime squared and prime squared within the range of 500.\n\ndef num2word(num) : \n    under_20 = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\n                'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen',\n               "], [0.12485777552238081, 0.125, 0.25097729694354803, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the second degree difference series.\n\ndef inverse(lst):\n  lst2 = lst[::-1]\n  return lst2\n\nThe above code combines reverse and destructuring assignment and returns the result.\n\n\na = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\nfor i in a:\n  if i > 5:\n    print(i"], [0.1914093953369784, 0.21212121212121213, 0.3255163132893552, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the sum of arithmetic series.\nimport numpy as np\nc=np.array([[0.285,0.50,0.342],\n           [0.344,0.51,0.894],\n           [0.562,0.53,0.503]])\nl=sum(abs(sum(c)-sum(c.T)))\nprint(l)\nThe above code is a function to"], [0.2124396261743749, 0.3181818181818182, 0.4048525106565676, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python function that is a solution to find the difference between an integer n's even square and sum of first n positive integers.\ndef gcd(a,b): \n        if (b==0):\n            return a \n        else:\n            return gcd(b,a%b) \nThe above code is a function to find the GCD of two numbers.\nAn array arr[1..N][1..N] is given."], [0.09965183850253495, 0.11363636363636363, 0.16919710547301037, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\nimport math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a Python function to calculate the \n\nprint findSum(1000)\ndef arithmetic_mean(*L):\n    A=[]\n    if type(L)==int:\n        print(\"Mean of only one value:\",L[0])\n    s = len(L)\n    for l in L:\n        if type(l) == int:\n            A.append(l)\n    mean=sum(A)/len(L"], [0.41033165629857693, 0.4444444444444444, 0.7332049322911008, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find out the difference between the sum of the squares of the first n term of the series and the square of the sum of the same series.\n'''"], [0.1938171558463482, 0.23076923076923078, 0.3279571160950059, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " returns the difference of sum of 1st n natural numbers and arithmetic progression of 1st n natural numbers.\n\n# Problem 1\n# A5.1\nfrom math import sqrt,pi\n\ndef ellipse_area(a,b):\n    res = round((pi*a*b),3)\n    print(\"Area: \"+str(res))\n\n\n# A5.2\ndef cir_cir_intersect(x1,y"], [0.2658943992959304, 0.22, 0.4402450272090128, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference between the sum of squares of numbers and the square of sum.\ndef decimal_decomposition(num) : \n\treturn int(num == (num >> 1) * 2); \nThe above code is a function to decompose a number into decimal parts\ndef alphabeticShift(inputString):\n\tout = list(inputString)\n\tfor i in range(len(out)):\n\t\tout["], [0.23329204939451173, 0.3333333333333333, 0.5663803964550302, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\nimport re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference between sum of squares of first N natural numbers and square of the sum of first N natural numbers.\ndef first_with_given_key(list,key):\n    for i in list:\n        if i[0]==key:\n            return (i)\nThe above code is a function to return first occurence of element with given key in a list.\ndef unique_common_elements_v2(l"], [0.11487809558940278, 0.18, 0.2581282979804218, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to calculate the sum of every element in a given array.\nfrom numpy import asarray , diff , sign\ndef coeficients(Array):\n    return asarray([diff(sign(diff(Array))).tolist()]).T.tolist()\nThe above code is a function to output an array containing the a list of equal difference and no zeros in between\nfrom collections import OrderedDict\ndef order(list):"], [0.32365741437482753, 0.2826086956521739, 0.639154365267731, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference between the sum of \nthe squares of the first one hundred natural numbers and the square of the sum.\n\n\n10,010,1010\n\ndef decimal(s):\n    if s:\n        return ''.join(\n            mask.format(p == '1' and ' ' or p)\n            for mask in masks for p in s.rstrip('0').rstrip('.'))\nThe above code is"], [0.24338378472968822, 0.18604651162790697, 0.17350415646086984, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python function to find the sum of it's own digits raised to power 4.\ndef rev(n):\n    li=[]\n    for i in range(0,n):\n        k=n%10\n        li.append(k)\n        n=n//10\n    li.reverse()\n    print(li)\ndef palindrome(n):\n    if n==rev(n):\n        return True\nn=int"], [0.10870030286106566, 0.1346153846153846, 0.24840061810386874, "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function which calculates the key difference for N - 1 pairs of an integer N to find the couplet with the greatest key difference. \n\ndef max_index_diff(arr, n):  \n    max_diff = -1\n    for i in range(0, n):    \n        for j in range(i + 1, n) : \n               if(arr[i] - arr[j] > max_diff) : \n"], [0.2596660249032749, 0.2708333333333333, 0.6621278128989885, "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " if we consider it to be used as a function to find the difference between the sum of the square of natural numbers till the 'n'th element and the square of the sum of the same n elements.\ndef permutations(lst):\n    \nThe above code is a function to find the all the different permutations of elements in the given list. 'lst' is the given input.\ndef cube_list(lst):\n    res_lst="], [0.09327786274919436, 0.07317073170731707, 0.013709964821298394, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to return differ\nimport sys\ndef sysModuleDemo():\n    print(sys.platform)\nsysModuleDemo()\nimport random\ndef randomDemo():\n  for i in range(3):\n    print(random.random())\n    print(random.randint(10, 20))\nrandomDemo()\nimport math\ndef mathModuleDemo():\n  print(math.pi)\n  print(math.cos"], [0.09772131441973127, 0.10869565217391304, 0.18621706195186422, "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function which returns the sum (n^2 + n)/2.\n\ndef reverse_string(le):\n    return ''.join(reversed(le))\nThe above code is to reverse the given string.\n\ndef max_min_avg(tmp):\n    if tmp != []:\n        mean = sum(tmp)/len(tmp)\n        mx = max(tmp)\n        mn = min(tmp)\n"], [0.3298336047920776, 0.2653061224489796, 0.6934854969449118, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python function to find the difference between the sum of the squares of the first n positive integers and the square of the sum.\ndef harmonicSum(n): \n    x = 0.00;  \n    for i in range(1,n + 1) : \n        x += (1.0 / i); \n    return(x); \nThe above code is a python function to find the sum of Harmonic series upto given number."], [0.3207745094330985, 0.2619047619047619, 0.6086642306427333, "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function that returns the difference between the sum of all natural numbers and the sum of the squares of the same natural numbers.\n\ndef sentences(text): return re.split(\"(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?)\\s\", text)\n The above code is a function that splits the given text into multiple strings, delimited by ending punctuation and"], [0.10963425751853044, 0.08695652173913043, 0.269436576911586, "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " evaluates the difference of the function S(n) = n(n+1)/2.\nBelow code prints the Kth permutation of the given word.\ndef rearrangeWord(str1): \n  \n    dict = {} \n    for ch in str1: \n        if ch not in dict: \n            dict[ch] = 1\n        else: \n            dict[ch] += 1\n              \n    odd_char = sorted"], [0.2022647021167192, 0.20833333333333334, 0.44554673264451616, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python function that is used to implement the mathematical formula to calculate the sum of all numbers and the sum of squares of all numbers.\ndef string_input(a): \n    array1 =  str(a) \n    array2 = \"\" \n    j=0 \n    i=1\n\n    if (a >= 36): \n        raise ValueError\n      \n    while (j < len(array1)) : \n        while ("], [0.20307180232156907, 0.2777777777777778, 0.4252121906745749, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python function to return sum of the consecutive natural number series up to n-th term which sum is the difference between \n\t\t (sum of all natural number)(sum of all odd number seq)-(sum of all even number in sequence)\n\n'''"], [0.10861439389087321, 0.14893617021276595, 0.2543098628932844, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to return the difference of sum of squares from square of sum\ndef palindrome(string):\n     b=[]\n     for i in range (len(string)-1,-1,-1):\n           b.append(string[i])\n     word = ''.join(b)\n     return word == string\nThe above code is a function to return if a string is a palindrome or not.        \n################## Basic #####################"], [0.23074101964411525, 0.2222222222222222, 0.44090346617107745, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is the function to find the difference between the double of sum and sum of double of all natural number sets.\n\ndef absolute_difference(num1, lst):\n\tsquare_sum = [i**2 for i in lst]\n\tpartial_sum = sum(square_sum)\n\ttotal_sum = sum(lst)\n\tpartial = partial_sum - (2 * (total_sum ** 2))\n\treturn partial\n\n\n"], [0.10081105463890257, 0.15555555555555556, 0.22625909001940492, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to computes the value of n*(n+1)/2, \nwhere n is a positive integer.\nn=5\nprint(difference(n))\ndef sumlists(list1):\n  largest_sum=0\n  for i in list1:\n    sum=0\n    for x in i:\n      sum += x\n    if sum > largest_sum :\n      largest_sum = sum\n  return largest"], [0.5053889912468953, 0.41379310344827586, 0.7613567751360312, "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function that takes an integer as parameter and returns the difference between the sum of the squares of the first n natural numbers and the square of the sum.\n"], [0.37287068797719075, 0.358974358974359, 0.7062797536573455, "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference between the sum of squares of first n natural numbers and the square of the sum.\ndef squareofsum(n):  \n    numbers = range(1, n+1)\n\n    sum_of_square = sum(n**2 for n in numbers)\n    square_of_sum = sum(numbers)**2\n\n    return square_of_sum-sum_of_square\nThe above code is a function"], [0.424838463437761, 0.3333333333333333, 0.7454846400396951, "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python function to find the difference between the sum of the squares of the first n natural numbers and the square of the sum.\n\ndef extended_gcd(a, b):\n    x,y = 0, 1\n    lastx, lasty = 1, 0\n\n    while b:\n        a, (q, b) = b, divmod(a,b)\n        x, lastx = lastx - q*x, x\n"], [0.15670244631688007, 0.2619047619047619, 0.43886890505300946, "def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python function to calculate and return the difference( i.e. sum of all pairs) of sum of first natural numbers.\ndef remove_var(newList, n) : \n    del newList[n-1] \n    return newList \nThe above code is a python function to remove one element and return the new list.\ndef add_kth_digit(newList, n) : \n    newList.append(n"], [0.11159311305824718, 0.1346153846153846, 0.3580255054522463, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\nimport re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is the function to find if the number is difference of two specific numbers.\n\nimport pandas as pd\ndef ePresent(s):\n\ts =\"i loVe PyThoN.it s fun\"\n\tdataframe = pd.DataFrame(s.split(' '))\n\tnew_columns = {\"The Alphabets that come before this word\" :{\"i\" :1, \"it\" :2}, \"The Alphab"], [0.15897597883825185, 0.2558139534883721, 0.40901859076003544, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python function that returns the difference of square of the sum of n positive integers of n numbers.\ndef multiplication(first,second):\n temp=0;\n while second!=1:\n  return temp+first;\n  second=second-1;\nThe above code is a function to multiply two numbers without using multiply operator.\n  \ndef binary_array_to_number(arr):\n return int(''.join(map(str, arr)),"], [0.3259707432165887, 0.3181818181818182, 0.5918039916976822, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\nimport re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find out the difference between the sum of a square n natural numbers and the sum of first n squares.\n\ndef find_sin(angle, n):\n  sum = 0\n  for i in range(n):\n    data = (angle, i)\n    sum += ((-1)**i) * (data[0]**(2*i + 1)) / math.factorial(2*i + 1)\n  return"], [0.3190771126204729, 0.2972972972972973, 0.3791134653325191, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the sum of distinct square of the first n natural numbers.   \n# Driver Code \nc=0\nfilename = \"test_solution.txt\"\ntest = open(filename, 'r') \ninarr = (test.readlines())\ncheck_integer=0\ncolor_numb=inarr[check_integer]\ni=0\nwhile(len(str(color_numb))!=1):\n"], [0.09560575039450339, 0.13043478260869565, 0.1761757362507491, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\ndef extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to compute the value 'n*(n+1)/2'. Here n indicates the input value we give.\n\ndef sort_list(list1) :\n    list1.sort()\n    return list1\nThe above code is a function to sort a given list and return it.\n\ndef sort_tuple(tup) :\n    lst = list(tup)\n    lst.sort()\n    return tuple("], [0.25487983318656554, 0.3404255319148936, 0.6334305941223857, "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python program to find the difference between sum of squares first n natural numbers and sum of cubes of first n natural numbers.  \nSometimes, only sum of C and sum of S are also needed, which can be computed as \u2013 \nC_Sum_of_first_n_numerals = (n * (n + 1) * (2*n + 1)) / 6\nSum of squares of first n numerals = (n * (n + 1"], [0.10949566733741928, 0.1875, 0.2929126976910133, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\ndef check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to display the difference of difference of squares among first three natural numbers.\ndef convert_to_num(vals):\n if len(vals) == 0:\n  return 0\n else:\n  return convert_to_num(vals[1:]) + (ord(vals[0]) - ord('0'))\nThe above code is a function to convert given alphabet string to corresponding numeric.\n\ndef check(l,b):\n return multiply"], [0.10092756553756783, 0.1346153846153846, 0.454797381670959, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " returns the difference of natural numbers.\n37. a=b=c=10\nThe above given 3 lines will assign the same values to all three variables at a time.\n38. a= b \nValue of a is 100.\nValue of b is 200.\n33. print(6%7)\nThe result of \u201c6\u201d divided by \u201c7\u201d is a remainder: 1.\n print(9//2)\nThe result of"], [0.09641108972075735, 0.12, 0.2751419864306666, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to calculate the factorial of n.\ndef check_newnum_requestnum(newnum):\n  return 11 <= newnum and newnum <= 99\nThe above code is a function to check whether the given new number is made using the previous number's digits.\ndef lst_of_digits (nums):\n    count=0\n    for i in range(0,int(nums)):\n      r=k\n     "], [0.09204727296605823, 0.08928571428571429, 0.18657717125111348, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to give eureka tru the formula [skipper function named 'lessthan'] to find a number's eureka No.\nYou have to pass a number as the paramter.\nexample\ndifference(5) should return 11\n\n\ndef less_than(num):\n    string = '1'\n    for i in range(num):\n        result = \"\"\n        x = 0\n        count = 1\n        while x <"], [0.19985558855534843, 0.3, 0.58478354144233, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a method to find the difference of the successive square of numbers gives the sum of natural numbers.\ndef difference(n) : \n    print(differenceRec(n)); \n  \ndef differenceRec(n) : \n    if(n <= 1) : \n        return n;  \n      \n    return n * n - differenceRec(n - 1);  \n\nThe above code is a function to find the difference of the successive square"], [0.2825517016597744, 0.27450980392156865, 0.7378294817814686, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\ndef get_mod6_sum(sequence):\n    sum = 0\n    for index, number in enumerate(sequence): \n        sum += number * pow(3, index)\n    return sum % 6\nThe above code is a python function, which computes the modulus 6 of the input list and returns the result."], [0.2840520143394033, 0.2830188679245283, 0.5729926853435869, "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a method to find out the difference between the sum of the squares of the first n natural numbers and the square of the sum. \nWrite a function called censor() that takes two strings, text and word, as input. \nIt should return the text with the word you chose replaced with asterisks.\n\nFor example:\n\ncensor(\"this hack is wack hack\", \"hack\") \nshould return\n\n\"this **** is wack ****\"\n"], [0.28791123915725997, 0.34210526315789475, 0.7391756015316264, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference of sum of the squares of first  natural numbers and the square of the sum of the first  natural numbers.\ndef decimalToBinary(n): \n  \n    return bin(n).replace(\"0b\",\"\")\nThe above code is a function to convert decimal value to \nbinary string.\n\ndef returnString(s, x): \n  \n    return str[s:s + x] \nThe"], [0.11421407122418058, 0.18181818181818182, 0.2662146040577897, "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to calculate the difference of perfect square numbers (1, 4, 9, 16, ...) in a series of numbers. \n\ndef differ(list1):\n   print('difference')\n   count = len(list1)\n   i = 0\n   while(count>0):\n     i += 1\n     list1.append(int(i*i))\n   print(list1)\n   print('sum of perfect squares"], [0.16321736539225848, 0.18, 0.3146587608702801, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference of nonagonal numbers given as input.\n\nIt count the number of pairs with given sum Xi+Y=N\ndef countPairsWithXPlusY(N, X, Y) :  \n    count = 0;  \n  \n    # Initializing multi-dimensional array with 0  \n    dp = [[0] * (n) for i in range(n)];  \n  \n    # Fill dp"], [0.11502852915743186, 0.17777777777777778, 0.16337766242067384, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find difference between two numbers.\ndef sumseries(n) :  \n    res = 0;  \n    for i in range(1, n + 1) : \n        res = res + i**2;  \n    return res;  \nThe above code is a function to add an given series.\n\ndef convertToTitle(n):\n    dic = {0:'A',1:'B',2:'C',3"], [0.2640041114780304, 0.2222222222222222, 0.29040313645486693, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference between the sum of squares 1^2 + 2^2 + ... + N^2 and square of sum 1+ 2 + ... + N.\ndef find_sum(li):\n    br = sorted(li, key = lambda x:abs(x))\n    for i in range(0,len(br)):\n        for j in range(i+1,len(br)):\n            if br[i]+"], [0.1910802621020695, 0.13725490196078433, 0.3252230133767659, "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python function to find the repeated number.\nR = difference(20);   \nN = 50;  \nprint(R % N); \nThe above code gives the first adjacent element in the array that gives minimum repeatation.\ndef addition(num1 = \"123456\", num2 = \"12357\") : \n    sum2 = int(num1[::-1]) + int(num2[::-1]);\n    print(sum"], [0.6078316538177645, 0.5833333333333334, 0.883456161925972, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference between the sum of squares of the first n natural numbers and the square of the sum of first n natural numbers of the given number n.\n"], [0.0839611023561118, 0.046875, 0.26268641767357137, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is on O(n^2) time complexity as the complexity of S is O(n) as S-1 also takes O(n).\nSum of miss matched positions - 1  = (Length of String-1)  \nlogic-->One mismatch represents one operation. we subtract 1 from the output to remove the self operation performed when two strings are matched.\ndef rearrange_digits(input_list):\n    \"\"\"\n    Rearrange Array Elements so as"], [0.2475971445809322, 0.2857142857142857, 0.7213096772630939, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference of sum of squares of the first \u2018n\u2019 natural numbers and sum of the first \u2018n\u2019 natural numbers themselves.\nThe function accepts the value of \u2018n\u2019 by user.\n\ndef summation (n) :  \n    res = 0;  \n    for i in range(1,n+1) :  \n        res += i*(i+1);  \n    return res;"], [0.12987909968152794, 0.17777777777777778, 0.11137157328376121, "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\n\ndef neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the sum of squares of arithmetic progression.\ndef f_list(list, n):\n    max = 0\n    temp = 0\n    for i in list:\n        max += i\n        if max >= n:\n            if temp == 0:\n                temp = max\n            else:\n                if max - temp >= temp and max - temp > 0:\n                    temp = max - temp\n                elif (n - max)"], [0.10686670935828953, 0.13725490196078433, 0.3172471065829758, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to print the difference of a number in the form of ' n+( n^2\u2212 n \u2212 2)'.\n\nclass py_solution:\n   def roman_to_int(self, s):\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        int_val = 0\n       "], [0.12268660636438788, 0.1891891891891892, 0.19092410600935716, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function that returns the difference between a series of numbers.\ndef difference(n) :  \n    l = n*(n+1)/2;  \n    def squares(test_list) :  \n        quotient = (n*(n+1)*(2*n+1))/6;  \n        res = l*(l-1);  \n        res = res - quotient;  \n        return res;  \n"], [0.12074380280537804, 0.10909090909090909, 0.18392966374241432, "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " finds the triangular difference, meaning in more detail, it finds the difference between every two lists and then adds them to find the net total.\ndef trio_wise(l1) : \n     temp = [0] * (len(l1) - 2); \n     for i in range(len(l1) - 2):  \n        pre = l1[i] ^ l1[i + 1] ^ l1[i + 2]; "], [0.23589423008683022, 0.2765957446808511, 0.53085397344167, "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\ndef lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference between the consecutive sums of cubes of natural numbers.\ndef difference_of_diagonals(n):\n  from_center = [2*n for i in range(3)]\n  rest = [k * 2 * n - 2 * k * n for k in range(1, n+1)]\n  return sum(from_center) - sum(rest)\nThe above code is a method that returns sum of the"], [0.13699355656485604, 0.18867924528301888, 0.41780374200770304, "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function that returns the difference between the square of sums and sum of squares of first n Natural Numbers.\n\ndef sieve(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if (prime[p]):\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n"], [0.23136054037580472, 0.3409090909090909, 0.5625293770352646, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python function to find the difference of sum of first natural numbers and sum square of first natural numbers.\ndef missing(arr): \n    n = len(arr) \n    sum1 = ((n+1)*(n+2))//2\n    return sum1 - sum(arr)\nThe above code is a python code to find the missing number in a sequence.\nn and r are always positive here r <= n.\ndef fact(n"], [0.17460260490228485, 0.28888888888888886, 0.4450441510423789, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python function to return the difference between current term of a series and the first term.\n\n# Q08:\n# Write a function function1() to generate a list and another function to generate a tuple using recurssion to find the number of odd and even numbers.\ndef func1(n):\n    b=[]\n    for i in range(n):\n        a=int(input())\n        b.append(a)\n    return"], [0.09432902640774138, 0.12195121951219512, 0.15538871755947742, "def all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python code to calculate the Difference of a number. \n        \ndef NumberOfRepeatingDigits(s,n) :  \n    words = s.split();    \n    d={};    \n    for i in words :  \n        if i not in d :  \n            d[i]=1;  \n        else :  \n            d[i]+=1;  \n    count=0;  \n    for key in d"], [0.12157090709428822, 0.1282051282051282, 0.20050459742148743, "import re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a n(n+1)/2 approach to compute the sum of a triangular series triangle. https://practice.geeksforgeeks.org/problems/sum-of-all-odd-length-subarrays/0\ndef selection_sort(a:list):\n    for i in range(len(a)):\n        m_ind = i\n        for j in range(i+1, len(a)):\n            if a["], [0.4117042975172324, 0.32558139534883723, 0.5582123055115189, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference between the sum of the squares of the first n natural numbers and the square of the sum.\n\n#opencv Quick guide with example code\nimport cv2\nimport numpy as np\ncap = cv2.VideoCapture('vtest.avi')\nret, frame = cap.read()\nwhile(True):\n    frame_gray = cv2.cvtColor(frame, cv2.COLOR_B"], [0.21640825086168966, 0.24489795918367346, 0.6123272189430071, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to calculate the difference between the sum of first N natural numbers and the function S(N).\nin: The below code is a function to check the given list is a sublist of the superlist or not and if Yes then the position of the \nparticular sublist in the superlist.\nimport itertools                        \ndef has_sublist(lst, sublst):           \n    for i in range(0, len(lst"], [0.051388331216115204, 0.2608695652173913, 0.4218849511084559, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to calculate the symmetric difference of the given tuple.\n"], [0.14636067472737274, 0.14, 0.45727041758947656, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is the function to return the sum of integers \nfrom 1 to n. The expression \"S = (n*(n + 1))/2\" determines the \nsum of the numbers from 1 to n.\ndef isPrime(n) : \n      \n    # Corner cases  \n    if (n <= 1): \n        return False\n    if (n <= 3): \n        return True\n    if (n % 2 == 0 or n"], [0.10930972952497223, 0.19230769230769232, 0.46161829768658863, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is used to calculte the difference of sum of first and second ith natural numbers.\ndef factors_5(n) : \n    num = (n//5) + 1;\n    count = 0; \n    for i in range(1, (num + 1)):\n        if n % i == 0 :\n            count += 1; \n    return count; \nThe above code is used to return the number of factors of '"], [0.1588370302175721, 0.22727272727272727, 0.24736290400710503, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to check the difference between a n and n+1.\ndef list_inversion(nums):\n    list_inv = []\n    for index, i in enumerate(nums):\n        list_inv.append(nums[:index] + sorted(nums[index:]))\n    return list_inv\nThe above code is a function to find the permutaion by rotating of javaScript in List.\ndef remove_"], [0.20846515126880222, 0.3333333333333333, 0.5508763136280079, "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference between sum of natural numbers and the their sum of squares.\ndef squaresum(n) : \n    return (n * (n + 1) * (2 * n + 1)) // 6 \n  \n\ndef sumsquare(n) : \n    return (n * (n + 1) // 2) * (n * (n + 1) // 2) \n\nThe above code is a program to find"], [0.2548783473147953, 0.39285714285714285, 0.7265274345120212, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function that returns the difference between ab sum of the squares of first N natural numbers and the square of their sum.\n'''"], [0.0901184280751889, 0.08771929824561403, 0.18953668488334696, "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to calculate the difference beween 2 cubes.\ndef greet(first): \n    def last(last): \n        print ('%s, %s ' % (first, last)) \n    return last \nThe above code is a function that returns another function.\n# Lambda functions or Function returning Functions or Closure\ndef a(x): \n    x = 3\n    def b(y): \n        return x * y"], [0.25292109281114994, 0.2553191489361702, 0.6382418426639664, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python function that returns the difference between the sum of squares of the first n positive integers and the square of the sum of the same numbers.\ndef even(n) :  \n    count = 0;  \n    i = 0;  \n    while i <= n :  \n        if i % 2 == 0 :  \n            count+=i; \n        i+=1;  \n    return count;  \nThe above code is a python function that"], [0.33803321788144314, 0.3125, 0.7264628437608739, "def pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference between the sum of the squares of the first n \nnatural numbers and the square of the sum of the same set of numbers.\n#Solution 2\n# Take 2 inputs\n# and create a user defined function which will select digits from left to right \n# which evenly divides the input numbers.\ndef even_divider(x, y):\n    for i in range(len(str(x))-1):\n        for"], [0.32632636780933255, 0.2916666666666667, 0.6681532590995382, "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference between the sum of the squares of first n natural numbers and the square of the sum. \n\ndef rowPrint(A, N) :\n    for i in range(N) : \n        for b in range(i,N) : \n            print(A[i][b], end = \" \") \nrowPrint()\nThe above code is to print a particular row of the matrix.\n# Problem 2"], [0.3552204645580325, 0.3333333333333333, 0.7935426455692229, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a Python function to find the difference between the sum of the squares of the first n natural numbers and the square of the sum.\nIt turns out that the reuslt is always twice of the square of a sum.\n\n def difference(n) : \n    a = (4*n*n) + (n*n) \n    b = ((n*n) + 1) * ((n*n) + 1) \n    print(b"], [0.16055990305229084, 0.22857142857142856, 0.28117459791822774, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function find the difference between two consecutive numbers.\n\nThe function is \nn = 5\nS = (5*(5+1))//2;\nTherefore , difference = S(S-1) \n\nMatrix1 = np.array([[1,2,3,4],  \n                [5,6,7,8]])\nMatrix2 = np.array([[9,8,7,6],  \n                ["], [0.08535611631141393, 0.09433962264150944, 0.21107672318600476, "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\n\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function that takes in an integer, solves the simplified square pyramidal number equation, and returns the resultant term.\ndef sumOfSquares(n): \n    if (n == 0): \n        return 0\n    smalloutput = sumOfSquares(n-1) \n    return (smalloutput)+(2 * n - 1) * (n) \nThe above code is a function that takes in an integer, solves the simplified cubic"], [0.22449390989261706, 0.19148936170212766, 0.22237306088756778, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to find the difference between the shifted value of the given number.\n\ndef towerofhanoi(n, source, target, auxillary):\n    if n <= 1:\n        print(\"Move disk 1 from source\", source, \"to target\", target);\n    else:\n        return towerofhanoi(n - 1, source, auxillary, target),\"\"; ,return towerofhanoi(n - 1, auxillary,"], [0.22002689779661877, 0.2765957446808511, 0.4091435075529989, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a recursive function to find difference of sum of first n natural numbers and\nsum of squares of first n natural numbers.\ndef odd_primes(n) : \n    primes = [] \n    isPrime = [True] * (n + 2) \n    i = 2\n    while (i * i <= n) :  \n        if (isPrime[i] == True) :  \n            for j in range(i * 2"], [0.11117868219142044, 0.16666666666666666, 0.2605127747587953, "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a function to calculate the difference of n(n+1)/2 and (n+1)n/2.\nThe above code is about functors (and some concepts related to it) is also shared in the below medium post with code and theory (https://medium.com/@m.sandovalcalvo/looking-for-functional-programmers-a-simple-functors-example-98e60a7db0b8)\n\nArt"], [0.22851851559180938, 0.2558139534883721, 0.5165866414254536, "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is a python function to find the difference of d(n) for 1<=n<=100\ndef diff(n): \n    if (n < 1) : \n        return 0\n    n = n // 2 \n    n = n * (n + 1) \n    print(n) \n   \n    return (n//2)  \nThe above code is a python function to find the sum of arithmetic progression of numbers.\n\n"], [0.10130552786143127, 0.12727272727272726, 0.28627180671357055, "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\n\ndef maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)\nThe above code is Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code", " is to find total ways to cut an undirected graph with N vertices, where N is an integer. Path |V| is the \nnumber of vertices and |E| is the number of edges.\ndifference(4) \n#Finding the maximum sum of a path from root node to leaf node\nclass maximumSum(object):\n    def maxSum(root):\n        if root == None:\n            return\n        maxValue = [float"]]}
