{"prompt": {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 769, "prompt": "Write a python function to get the difference between two lists.", "code": "def Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n ", "test_imports": [], "test_list": ["assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]", "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]", "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"]}, "queries": [[0.10100812513355444, 0.1891891891891892, 0.23228273959858803, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference of two both the lists.\ndef is_all_items_unique(data):\n    l1=len(data)\n    l2=len(set(data))\n    return l1 == l2\n \nThe above code is a function to find the uniqueness of data using set.\ndef print_pattern(n): \n\tfor i in range(0,n): \n\t\tfor j in range"], [0.11535373384524268, 0.15555555555555556, 0.18103832727721894, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find differnce of two lists.\n\ndef Diff(a, b): \n    b = set(b) \n    return [item for item in a if item not in b]\nThe above code is a python function to left out the common elements from list a that are also in list b.\n \ndef Un(a,b):\n    c=[item for item in a if item in b]\n    return c"], [0.12854939762763104, 0.1875, 0.19791380601263617, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\nimport math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between 2 lists without duplicates retaining the original order.'''\n\ndef hypo(a,b) :\n    c=(a*a)+(b*b)\n    c=c**0.5\n    return c\n\nprint hypo(3,4,)\n\ndef Sum(li1,li2) :\n    return list(set(li1).union(set(li2)))\n\nprint Sum"], [0.08879534716826956, 0.11363636363636363, 0.16799633979973122, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to return the difference\n   \ndef avg_factors(num): total = 0\n  for i in range(1, num):\n    if num % i == 0: total += i\n  return total / num \n \nThe above code is a function to find the average of factor's during the iteration.\n\ndef star_pattern(rows): \n    for i in range(0, rows): \n        for j in range"], [0.10506228205895093, 0.13043478260869565, 0.2142078976673985, "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\n\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between the given list.\ndef insert_st(string,word):\n    return string[:2] + word+ string[2:]\n \nThe above code is a function to insert 'Na' at the begining of string.\nimport collections\n # Compute a falling factorial.\n\n\ndef falling(n, k):\n    \"\"\"Compute a falling factorial.\"\"\"\n    acc = 1\n    while k"], [0.11146724907379169, 0.10909090909090909, 0.23805510413503672, "def rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the list of elements which are only in either of the two lists passed as an arguments.\nNote : I got this code from the discussion in the question\n\"\"\"\"QUESTION 1: Find the occurrence of each letter in the String \u2018India is my country\u2019.\nA:1\nI:2\nD:1\nG:1\nM:1\nC:1\"\"\"\n\"\"\"SOLUTION:\n   s = 'India"], [0.12259508640367364, 0.15555555555555556, 0.1825344979696182, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function for list comparison between two lists. \nIt shows lists of list1 and list2 along with the items which are different.\n\ndef Fibonacci(n): \n        if n<0: \n            print(\"Incorrect input\") \n        # First Fibonacci number is 0 \n        elif n==1: \n            return 0\n        # Second Fibonacci number is 1 \n        elif n==2"], [0.19267296951735507, 0.25806451612903225, 0.1649365147236738, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to return difference between two lists.\ny=character_symbol(conv_string)\ndef unique(list1): \n  \n    unique_list = [] \n      \n    for x in list1: \n        # check if exists in unique_list or not \n        if x not in unique_list: \n            unique_list.append(x) \n    for x in unique_list: \n       "], [0.21993632667362473, 0.5, 0.46598909712311054, "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference of two lists."], [0.09855648524364968, 0.0975609756097561, 0.0761369264750886, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function which returns the list of elements which \nare in the set1 and set2 since set1 and set2 are both sets and hence no duplicate values are computed.\n\nFor example if set1 = [\u2018black\u2019, \u2018white\u2019, \u2018red\u2019] and set2 = [\u2018green\u2019,\u2019white\u2019,\u2018red\u2019] it will return\n[\u2018black\u2019,"], [0.13535087954358743, 0.23684210526315788, 0.3750604565257912, "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference list between the two lists.\n\nmylist4 = ['a','b','a',1,1] \nmylist5 = ['a',1] \nprint(Diff(mylist4,mylist5))\nThe above code is to find the common and the different element of two lists in a one output.\nMy code\ncurr = 6\nfor i in range(2):\ncurr = curr"], [0.09361211459436061, 0.12, 0.16324757225000402, "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to eliminate common items from the two lists.\n\ns= \"Sanket \"\ns+=\"T\"\ns.replace(\"t\",\"nd\")\nIt adds character n to the word Sanket and replaces letters t with nd. It creates a new string called s.\n\ndef rev_list(list1):\n    length = len(list1)\nlength, index = length-1, 0\nwhile length > index:\n"], [0.09536899205577916, 0.14634146341463414, 0.2159022139385254, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to return the difference of two lists as a list.\n\ndef average(numbers): \n    return sum(numbers) / len(numbers) \nThe above code is a function to find the mean of a list of numbers.\n\ndef zip1(*iterables): \n    sentinel = object() \n    iterators = [iter(it) for it in iterables] \n    while iterators: \n       "], [0.10465574420825785, 0.12195121951219512, 0.2554163264292144, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function which takes the two lists of numbers and computes the missing numbers from those two lists and then returns the list containg the missing numbers.\n\ndef square_cube(lst):\n  l=lst\n  d={}\n  for i in l:\n    if(i%2==0):\n      d[i]=i**2\n    else:\n      d[i]=i**3\n  return d\n\n"], [0.09206997008459403, 0.1346153846153846, 0.19696775482367992, "def last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that finds out only the differences between two list without common elements.\n\nTESTING AGAINST LOCAL LONGWORD.TXT FILE\nTo run doctest as program : go to dog.txt and enter below code in python shell\n\ndef dictionary(listOfWordz): \n    \"Find the word with most length from a list of wordz\"\n    listOfWordz.sort(key=len,reverse=True)\n    print"], [0.07599894456316492, 0.08, 0.220324340955509, "def check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " Python program to find the list of words that are in the first list and not in the second list.\n\nThe below code will give an output of a two lists, which are from the two dictionaries given. The lists are compared with similar keywords and output two list of keywords that are only persent in the dictionaries supplied.\n\n\ndict_1 = {'george':16,'amber':19}\ndict_2 = {'george':16,'amber':"], [0.10635261168245286, 0.10810810810810811, 0.08542234763101146, "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function that accepts 2 lists and gives us the unique values of both.\ndef max_even_num(input_array):\n  Max_value = max(input_array)\n  while Max_value % 2 != 0:\n    input_array.remove(Max_value)\n    Max_value = max(input_array)\n  return Max_value\ndef intersection(your_code):\n    intersection_set = set(your"], [0.1244429703242483, 0.15625, 0.13951906418191048, "def Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function which takes a list and returns a list that is the difference of the original list.\ndef merge_lists(list1, list2):\n    merged_list_eval=list(list1+list2)\n    merged_list_run=[]\n    for each_line in merged_list_eval:\n        if each_line.find('eval(function(w,i,s,e)')==0:\n            if"], [0.08801095798791009, 0.1, 0.12755326958836366, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find out the extra item in the first list.\n\nimport math\ndef hypotenuse(height,weight):\n  hypo = math.sqrt(weight**2+height**2)\n  return hypo\nThe above code is a function to calculate hypotenuse of a right angled triangle.\nimport math\nclass cone_s():\n  def __init__(self,height,radius):\n    self.height=height\n"], [0.11623182446731398, 0.19444444444444445, 0.3066721135569997, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the differnce between list1 and lists.\n\ndef get_volume_cube(length, breadth, height):\n    return length*breadth*height\n\nThe above code is a python function to calculate the volume of a cube.\ndef GetVolumeCylinder(radius, height):\n        return (3.14 * radius * radius) * height\n\nThe above code is a python function to calculate the volume of the cylinder"], [0.1375694227619968, 0.18421052631578946, 0.22696895091259373, "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to return difference between two lists.\nimport collections\ndef remove_duplicates(lst):\n    return (list(collections.OrderedDict.fromkeys(lst)))\n\nThe above code is a function to remove duplicates from a list.\n##OR another way###\n\nfrom itertools import groupby\ndef remove(duplicate):\n  final_list = []\n  for num in duplicate:\n   "], [0.20041929658225344, 0.21428571428571427, 0.29698212065681806, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference between two lists.\n\ndef listtodict(lisss):\n    dictt={}\n    for i in range(len(lisss)):\n        lis1 = lisss[i]\n        dictt[lis1] = len(lis1)\n        \n    return dictt\nThe above code is to convert a list of strings into dictionary where the keys are stet as the string"], [0.12073866249548121, 0.175, 0.2873721317687521, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between two lists irrespective of order.\n\ndef Diff(li1, li2): \n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2] \n    return li_dif\nprint(Diff(li2, li1))\nThe above code is a function to find the difference between two lists irrespective of order.\n\nli1=[4"], [0.15054422971114942, 0.17142857142857143, 0.21818075449316388, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\nimport math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is code to find the difference between two sets.\ndef remove_duplicate(list1,list2):\n return list(set(list1)-set(list2)) + list(set(list2)-set(list1))\nThe above code is code to find the difference between two lists.\ndef diff(li1, li2):\n    return [i for i in li1 + li2 if i not in li1 or i not in li"], [0.07722118660052744, 0.08196721311475409, 0.14146065111117956, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " takes in two lists, finds those elements which are not in common in both the lists. The second part of this code finds the common element.\ndef add(m, n):\n    return [str(item) for item in range(m, n+1)] \nHere, m and n take in values as an input, and a range of integers is returned. This range has numbers from m to n.\nM \u2013 is the starting ramge.\nN \u2013"], [0.08116760716713906, 0.08695652173913043, 0.11954318262181367, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a Python function that given two lists (li1 and li2) returns a list that contains \ncommon elements between them (i.e. def. a new list of all common elements).\n\ndef inner_function(i, words_dict, finalList, start):\n    finalList.append(words_dict[start] + \"+\")\n    k = 0\n    while(k < i):\n        if(words_dict[start][:"], [0.11976256937047834, 0.15555555555555556, 0.36491073206483915, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between two lists without using the list function.\n\ndef my_func(list_1):\n    for i in list_1:\n        yield i*i\n\nThe above code is a function to square the list.\ndef hcf(x, y):\n    i = 1\n    while(i <= x and i <= y):\n        if(x % i == 0 and y % i == 0):\n           "], [0.11834725001142479, 0.21621621621621623, 0.16370700938746308, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to get the absolute difference between list 1 and list 2.\n\n\n\"\"\"\n\n\n# Set A is the set of all indexes with no rotation\nA = range(size)\n\n# Set B1 is the set of all indexes with one rotation\nB1 = [size-2,size-1] + [size-1]*(size-2)\n\n# Set B2 is the set of all indexes with two rotations\nB2 ="], [0.10235225262842854, 0.16279069767441862, 0.2643195243719485, "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to caculate the difference of two lists.\nl = [10, 15, 20, 25, 30, 35, 40,45,50]\nfor x in l:\n    l.remove(x)\n    l.insert(0,x)\nprint(l)\nThe above code is a function to add each element of a given list to next list in circular manner.\ndef my_sum(my_num_list):\n   "], [0.15031434370812036, 0.15789473684210525, 0.1368162934418354, "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\n\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find out intersection and Difference of two lists.\n\ndef mult_matrix1(matrix1, matrix2):\n    if len(matrix1[0]) != len(matrix2):\n        return False\n    mul = []\n    for i in range(len(matrix1)):\n        mul.append([])\n        for j in range(len(matrix2[0])):\n            mul[i"], [0.24233436642250605, 0.3076923076923077, 0.49083421206610717, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " shows the difference between two lists.\"\"\""], [0.1633623001472958, 0.2692307692307692, 0.15731591945486292, "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the Difference between two lists.\ndef bounds(List1):\n    l=len(List1)\n    lower_bound=List1[0]\n    upper_bound=List1[0]\n    for i in range(0,l):\n        if(List1[i]<lower_bound):\n            lower_bound=List1[i]\n        if(List1[i]>upper_bound):"], [0.08745200290121356, 0.11363636363636363, 0.19084292462472302, "import re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that returns the difference of two lists, where the first list is the list that contains the items present in the second list, and vice versa.\n\ndef random_number_generator(n):\n\tfloats = [str(round(random.uniform(-n, n),1)) for i in range(10)]\n\tstrs = [str(i) + \".0\" for i in range(1,10)]\n\treturn '"], [0.1018312766155562, 0.175, 0.20958622410743974, "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\n\ndef issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to calculate difference of two lists.\ndef CreatingFile(filename):\n    f = open(filename,'w')\n    for i in range(10):\n        f.write(str(i) + '\\n')\n    print('File is created and data is written ')\n    f.close()\n    return\nCreatingFile('Data.txt')\nfname = input('Enter the name of the file ')\ndef printdata"], [0.07634741202322345, 0.0784313725490196, 0.14888709440901413, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes as input two lists and returns the list items that are prsent in the first list but not in the second.\n\ndef size(name):\n  res_set = {ch.lower() for ch in name if ch.isupper()}\n  return len(res_set)\nThe above code is a function that takes as input a string s, and returns the number of capital letters in s.\ndef voting(name):\n "], [0.10312371876337852, 0.12, 0.4069117790230511, "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " the difference between the two lists.\n### Set1 - Set2 = Difference between two sets \n## There are two lists li1 and li2 are given to us. We have to find the difference between these two lists.The difference is \n#achieved by subtracting the unique elements present in list2 from list1 as given below.\n\ndef Diff(li1,li2):\n    return (list(set(li1) - set(li2"], [0.12388791702171166, 0.2, 0.09410597704012079, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between two sets.\n\ndef smallest_positive(in_list):\n  lowest = None\n  for num in in_list:\n    if num > 0:\n      lowest = num\n      break \n  for num in in_list:\n    if num <= 0:\n      continue \n    if lowest is None or num < lowest:\n      lowest = num\n\n  if lowest is None:\n    return print"], [0.08219780760512418, 0.09302325581395349, 0.08401318102262059, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to return a list (a \"difference\" list) with the elements that are either a member of first list and is not a member of second list OR member of second list and is not a member of first list.\ndef rev_b(a):\n    a.reverse()\n    \n    return a\ndef  main():\n  pass\n  if __name__ == 'python program':\n     main()\"\"\"\n\n\n#\n#VERSION="], [0.11384202196420978, 0.1956521739130435, 0.3177924368240273, "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\nThe above code is a function to filter odd numbers.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between the two lists. This function will get a list of elements that are not common in both the lists.You can use this function in the following way\n\nfrom twilio.rest import Client\ndef SMS():\n    account_sid = \"ACCOUNT_SID\"\n    auth_token = \"AUTH_TOKEN\" \n    client = Client(account_sid, auth_token)\n    message = client."], [0.08595241707707366, 0.06521739130434782, 0.08954084947242168, "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to traverse 2 list of different orders in order to find common element and unique element.\nSample inputs and outputs:\nExtra spaces: \ncapital_words_spaces(\"PythonTutorialAndExercises\") == \"Python Tutorial And Exercises\"\n'''\n\ndef Diff(li1, li2): \n    return (list(set(li1) - set(li2))) \n   \ndef capital_words_spaces"], [0.07580086222204419, 0.05405405405405406, 0.040435077970026906, "def last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " return the list of elements which are only in one of the lists.\n \ndef Diff(li1,li2):\n  return (list(set(li1)-set(li2))) + (list(set(li2)-set(li1)))\nOr\n\ndef Diff(li1, li2):\n    return ([i for i in li1 + li2 if i not in li1 or i not in li2])\nOr\n\n"], [0.26837941892023653, 0.3157894736842105, 0.3300164047499032, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference of sorted arrays of lists \n\n--END--\n   \n\n'''"], [0.08153469542739665, 0.09302325581395349, 0.17260715152414735, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\nimport math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is designed to find out the list items which do not match in both the lists and display them in list form.\n\ndef combine(lst1,lst2):\n    lst3=[]\n    for i in range (len(lst1)):\n        final= lst1[i]+lst2[i]\n        lst3+=[final]\n    return lst3\n \nThis function combines the input two lists and"], [0.09224123720378857, 0.12195121951219512, 0.13720115432321026, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is used on a given input list (li1) and another input list (li2) to print out the uncommon elements in the two lists.\n\ndef findDigits(a):\n    counter=0\n    list1=[int(d) for d in str(a)]\n    for i in list1:\n        if(i!=0):\n            if((a%i)==0):\n                counter+=1\n    return counter\nThe"], [0.10423260824131597, 0.20512820512820512, 0.2609667758642263, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\ndef next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference of two lists.\n\ndef swap(a, b):\n  return (b, a)\n\nUses python to swap two numbers.\ndef twotoone(i, j):\n    return i * 3 + j + 1\ndef PrintBoard(n):\n    for i in range(1, 4):\n        for j in range(1, 4):\n            num = twotoone(i, j)"], [0.0966791910499386, 0.10416666666666667, 0.2397959615765717, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\nThe above code is a function to extract values between quotation marks \" \" of the given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function with two lists and returns their difference(for symmetric difference).\n\ndef combine_list(*args):  \n  temp = []\n  for num in args:\n    temp += num  \n  return temp   \n \nThe above code is a python function with multiple list arguments that combines all the lists, and returns a new list.\n\nfrom itertools import combinations\ndef combine_lists(list1,list2,list3):"], [0.12689043084797128, 0.15384615384615385, 0.1216033147861901, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to get the Common Elements of two list into third list using set.\n\ndef common_element(list1,list2):\n    x = []\n    y = []\n \n    for i in list1:\n        if i not in x:\n            x.append(i)\n \n        else:\n            y.append(i)\n \n    for j in list2:\n        if j not in y:\n"], [0.10506228205895093, 0.13953488372093023, 0.1435683150655892, "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function which returns the differences between two lists, firstly removing the duplicates.\n\ndef index_word_value(word):\n    characters = [\"zero\",\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n    letters = set(char for letters in list(word) for char in letters)\n    numbers = [char for word in word for char in word]\ndef"], [0.08318453835906915, 0.0975609756097561, 0.09636471833399206, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function which takes in two lists and performs the element wise subtraction and then addition and will return a combined list.\ndef K_element(str_, k):\n    return str_.replace(' ', '').replace('licenses','').replace('license','')[:k]\nfor i in range(len(list_[-1])):\n    s = [list_[-1]][i]\n    k=6\n    K"], [0.16689505508021651, 0.2, 0.25553855331631725, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between two lists.\ndef dict_key():\n    final_dict = {x:x**2 for x in range(1,21)}\n    return final_dict\nThe above code is used to create a dictionary with key and value as key**2.\ndef seq_key():\n    seq = ['name','age','sex','height','weight'] \n    d={}\n    d={x:'' for x"], [0.17152374007204377, 0.25806451612903225, 0.40773058669373335, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between two lists.\n\"\"\"\ndef hangman(word):\n    wrong = 0\n    stages = [\"\",\n              \":__________          \",\n              \"|        |           \",\n              \"|        |           \",\n              \"|        0           \",\n              \"|       / 2          \",\n              \"|       \\\\3          \",\n              \"|                   \",\n              \"|                   \"\n              ]\n    r"], [0.20957643283236538, 0.2647058823529412, 0.3713764782303918, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to print the difference between two lists.\nThe above code can also be done using list comprehensions.\nl1=[1,2,3]\nl2=[1,2]\nlist_comp([1, 2, 3], [1, 2, 4])\n\ndef Diff(li1,li2):\n    return (list(set(li1)-set(li2)))\nThe above code is a python function to print the"], [0.1670359264092278, 0.14634146341463414, 0.19696775482367992, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to get the difference of 2 lists and append 2 list obtained to a single list.\n\nimport collections\ndef order_du:(list1):\n for key, value in li1.items():\n            li3[key]=li3[key].append(value.sort())\n return li3\nSucessfully worked on the above code during problem statment\n"], [0.09538084340105886, 0.08695652173913043, 0.17789094861347904, "def is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " loops through the elements in list1 and list2 and returns the difference.\n\ndef dict_mul(d):\n \n    res =1\n \n    for i in d:\n         \n        res = res*d[i]\n    return res\nThe above code is a python function that returns the multiplicative of the entire contents of the dictionary.\n\nfrom collections import Counter\ndef check_dup(lst):\n    dict = Counter"], [0.10848132598768158, 0.09090909090909091, 0.12535666212480684, "def find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find elements in a given list whom are not present in another list.\n\ndef maxim(arr) :\n  max = arr[0] \n  for i in range(1, len(arr)) :\n    if arr[i] > max :\n      max = arr[i] \n  return max\n The above code is a python function to find largest element from a given list.\n\ndef reverse(s) :\n"], [0.12259508640367364, 0.1794871794871795, 0.3722143289719798, "def Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is the python function to find difference between two lists and the output is list. \n\ndef intersection_keys(a, b): \n      \n    return [key  for key in a.keys() if key in b.keys()] \n \n       \nres1 = intersection_keys(a, b) \n      \n     \nprint(res1) \nThe above code is the python function to find common keys between tow dictionaries. The"], [0.10543319019843783, 0.16666666666666666, 0.19087406613020352, "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is useful for building a set in two lists and then subtracting the elements common between them.\n"], [0.18346396479471933, 0.24242424242424243, 0.23222773309570516, "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference between two sets.\n\ndef Reverse(tuples):\n    new_tup= tuples[::-1]\n    return new_tup\n\nThe above code is a function to reverse a tuple.\n\ndef Mean(tuples):\nSum=sum(tuples)\nmean=Sum/len(tuples)\nprint(\"The mean of the tuples is\",mean)\n\nThe above code is"], [0.1125173063067311, 0.15555555555555556, 0.3408913499490754, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find difference between two lists.You can also use '^' operator to find the difference among list\n#The substring is defined as the sequence of characters that are found in the string, \n#starting from the 0th character up to the specified position.\ndef string_equalsign_as_substring(str_org,first,last,str_cmp):\n    m=str_org[first:last]\n    if ("], [0.1102500585536732, 0.15217391304347827, 0.19220752852677708, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to identify content mismatchs between two lists.\ndef divide(x,y):\n    try:\n        result = x/y\n       \n    except Exception as e:\n        print(\"\\nError dividing by zero: \", e)\n    finally:\n        try:\n            print(\"The value of the last expression evaluated before the exception was: \", result)\n        except NameError:  \n            print(\"\\nLast result is not present"], [0.1156749378873324, 0.15384615384615385, 0.2752491711194835, "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\n\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to get the elements that their entries in two lists are different.\ndef intersection_of_lists(lst1,lst2):\n    lst3 = [value for value in lst1 if value in lst2]\n    return lst3\nThe above code is a function to get the elements that their entries in to two lists are similar.\ndef Diff(li1, li2): \n    li_dif = ["], [0.07775546331227855, 0.08, 0.13070834923566466, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function which takes 2 lists and compares them and returns the elements of both lists which is unique.\n \ndef nu_popul():\n    row1 = input().split()[0] \n    row2 = input().split()\n    return row2 if not row1 == '0' and len(row2) == int(row1) else 'Invalid Input'\n\nThe above code says that if the 1st row is not equal to Zero"], [0.07731972973999558, 0.08888888888888889, 0.19010282549276702, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes in two lists as input and returns their sorted difference. Difference means no elements in common.\n \ndef greatest(l) :\n    return max(l)\n  \nThe above code is a function that takes in a list and returns the greatest number in the list.\ndef vowel(t) :\n    t = t.upper()\n    return t in ('A','E','I','O','U')\n  \nThe above code"], [0.13679832154434346, 0.19047619047619047, 0.1911807336506361, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function that gives out the difference between two sets without repeating characters.\ndef lu(li):\n  unique=[]\n  for item in li:\n    if item not in unique:\n      unique.append(item)\n  return unique\nThe above code is a function to find out all the unique elements of the list.\ndef remove_same(li):\n  newlist=[]\n  for item in li:\n    if item not"], [0.08249270730666546, 0.09523809523809523, 0.1275532695883637, "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the un-common element from a given list.\n\ndef Diff(li1, li2): \n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2] \n    return li_dif\nThe above code is a function to find the very un-common element from a given list.\ndef lst(string):\n  count = 0\n "], [0.12501848150209155, 0.1590909090909091, 0.19300535796095475, "def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to calculate the difference between two given lists\ndef dictlist(keys,values):\n    {d.setdefault(key,[]).append(value) for key, value in zip(keys,values)}\n    return d\nThe above code is a dictionary which take in all the keys and their value in a another dictonary and list and creates the dictnary. \ndef checkKey(dict, key): \n      \n    if key in"], [0.1286766440988837, 0.27586206896551724, 0.34391620561803665, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to calculate the difference (unique values in the second list) between two lists, not taking into consideration the elements that are in common in both lists.\n'''"], [0.13856067406267913, 0.13157894736842105, 0.14421275055148247, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is to find the difference between two lists without duplicates.\nimport numpy as np\ndef how_much_water(containers,liters):\n    len_cont = len(containers)\n    large, small = (list(x) for _, x in groupby(sorted(containers), key=bool))\n    large = np.asarray(large)\n    small = np.asarray(small)\n    group_count"], [0.22012068274275282, 0.2727272727272727, 0.3722772145682932, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference between two lists.\n\ndef missing(arr, n): \n\tsum_of_all_no=n*(n+1)/2\n\tarr_sum=sum(arr)\n\treturn sum_of_all_no - arr_sum\nThe above code is a python function to calculate the missing number in a given array.\ndef replace_0_with_5(li):\n  return [5"], [0.09109559632977952, 0.13333333333333333, 0.2534703608494846, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\nimport re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is function to find out the differences between two lists (list of list).\n\n\nThe diff function makes the output of the above code in a format that is easy to understand.\n\nimport re\ndef count_str(str):\n  return len(re.findall(r'\\w+',str))\n\nThe above code counts the number of words in a given string.\nimport re\ndef isMAC48Address(inputString):\n  pattern = '"], [0.15079689722154577, 0.1702127659574468, 0.31528085679340473, "def reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference between two list, list will the same elements. \n\ndef leftRotate(input, n):\n    n = n % len(input)\n    return input[n:] + input[:n]\nThe above code is a python function to rotate a list to the left by k given places.\n\ndef find_Input():\n    count = 0\n    for i in list: \n        if (i."], [0.09274408592556381, 0.14285714285714285, 0.17607746432072155, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function which can take two lists as an input and returns a list of difference between the twolists.\n\ndef get_new(T):\n    global next_num\n    head = next_num\n    next_num += 1\n    new_node = RandomListNode(T.label)\n    new_node.random = T.random\n    new_node.next = T.next\n    \n    return head\n\nThe above code is"], [0.08627458415387583, 0.13636363636363635, 0.1444189167300222, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function which returns a list of differnce of two given lists and it is the difference of one list to other.\narr = [0, 1, 0, 1, 0, 0, 1, 1, 1, 0]\n[arr.count(i) for i in range(max(arr)+1)] ... list comprehension to find out a number of occurence in a given list.\nimport numpy\narr = np.random.randint"], [0.0914669847601655, 0.1320754716981132, 0.23403848357896834, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to compute the difference of two lists.\nwords = [x for x in input().split()]\nwords = sorted(words, key = lambda x: (len(x), words.index(x)))\nprint(words)\nThe above code is a function to sort a given input based on the length of the words and if there are two words with the same length then their order is the order that they occur.\nimport functools\ndef comp"], [0.14881154998182453, 0.17777777777777778, 0.2446669842593648, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to check the difference between two lists.\ndef add(x,y):\n  return x+y\ndef trans(func,seq):\n  return [func(i) for i in seq]\nThe above function gives the list of results obtained when each element of l1 is added by 1 and then multiplied by 2.\ndef printme(alist):\n  print(\"The first element is \",alist[0])\n  print(\"The first element"], [0.11757281892420642, 0.3, 0.31723510300155955, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes two lists and returns a list of the symmetric difference of the lists.\n"], [0.07885992167407196, 0.07142857142857142, 0.10711135678333242, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is to find the any list items that are DIFFERENT in 2 lists.\ndef list_parts(li):  \n    li1 = li[:1] \n    li2 = li[1:2] \n    li3 = li[2:3] \n    return li1, li2, li3 \nThe above code is to convert list into sublists in tuple.\n\ndef allnumbers_list(element, data"], [0.08610865034627765, 0.08888888888888889, 0.10793776653841784, "def split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to calculate the differences of l1 - l2 and l2 - l1. This can be used in the check_anagram function.   \ndef checkAnagram(s1, s2): \n  if len(s1) != len(s2):\n    return False\n \n  dict1 = {}\n  dict2 = {}\n \n  for i in s1:\n    if i not in dict1.keys():"], [0.08152615091306033, 0.075, 0.05820972135803792, "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\n\ndef find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that returns a list whose elements are all the elements in li1 but not in li2.\n \nfrom math import sqrt\na=6371.01\nbc=52.25687\n cc=13.68394\nC=111.23\nAns= a*acos(cos(bc)*cos(cc)*cos(C)+sin(bc)*sin(cc))\nprint ( \"the distance is\",Ans, \"km"], [0.08441671339318567, 0.1, 0.12214279921974668, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a code to find the uncommon elements from the given two lists.\nFinal code\nfrom collections import Counter\nfrom itertools import combinations \nfrom functools import reduce \n\ndef buckets(elems, n):\n \n    bucket = dict()\n \n    for e in elems:\n \n        # create bucket number to every element in range [0, 1, 2, ...., n]\n        # where number of bucket = n"], [0.11920956613400548, 0.21875, 0.23060220532899028, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between the lists.\n\ndef arithmetic(a,d,n):\n  temp1 = a\n    \n  for i in range(n-1):\n   a =  a + d \n   temp1 = temp1 + a\n  return temp1\na=2\nd=1\nn=2\nprint arithmetic(a,d,n)\nb=3\ntemp = [3,9]\n"], [0.0961384773880679, 0.175, 0.26797198020844637, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\ndef dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to identify unique elements in a given two lists, and also identify the comon elements between the two lists.\ndef Sum_main(mat):\n    s=0\n    for i in range(len(mat)):\n        for j in range(len(mat)):\n            if i==j:\n                s+=mat[i][j]\n    return s\n\n \nThe above code is a function that is to compute sum of the"], [0.09949163619433707, 0.18181818181818182, 0.1505365266105995, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the element difference in the unique elements of the given two list.\n\ndef truncate_url(url):\n  list1 = url.split(\".\")\n  first = list1[0]\n  last = list1[-1]  \n  del list1[0]\n  del list1[-1]\n  last_url = \".\".join(list1) \n  return(\".\".join((first"], [0.13283724776315164, 0.16279069767441862, 0.2570841938881375, "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\nThe above code is a function to remove all whitespaces from the given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to give the difference between two list.\n\n##Start code here\n\nX = [1,2,3,4]\nY = [5,6,7,8]\nif (Diff(X,Y) == [] or Y == Diff(X,Y)):\n print(\"True\")\nelse:\n print(\"False\")\nThe above code will display the boolean value based on the condition applied.\n\nCaptureInput = input(\"Enter"], [0.07854719760075568, 0.06666666666666667, 0.08473709893507789, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes in 2 lists and returns a list containing the elements in the first list or second list with no duplicates, but not common elements. \n\ndef find_longest_word(words_list):\n    word_len = []\n    for n in words_list:\n        word_len.append((len(n), n))\n    word_len.sort()\n    return word_len[-1][1]\n "], [0.09675184816928697, 0.15217391304347827, 0.27642340030919865, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to display the difference of two list.\ndef divisable_fuction(n):\n    return [x for x in range(100,n) if (x%7)==0]\nThe above code is a function to display the numbers between range 100 and n which divides by 7.\ndef innere_tuples(l):\n    l = [\"maths\",\"english\",\"science\"]  # insert the list here\n    print([(g"], [0.10431947322738178, 0.09090909090909091, 0.15053652661059952, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is to calculate the difference between lists without repeating elements\nprint(the answer with the best 2 terms)\n'''\n\nimport itertools\nimport random\n\ndef calculate_Success(clue, Solution):\n    count = []\n    for word in Solution:\n        if len(clue) == len(word):\n            count.append(count_samepair(clue,word,word))\n    success_rate = (sum(count)"], [0.11838099280418425, 0.17391304347826086, 0.11217221742002856, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find unique items in first list by removing duplicate items in the second list.\n"], [0.09855648524364968, 0.09302325581395349, 0.0652894083330719, "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]\nThe above code is a python function to remove duplicate numbers from a given number of lists.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function which returns the list of items which are present exclusively in list 1, or list 2 or neither.\n\ndef print_hello():\n  print 'Hello'\nprint_hello()\ndef samesame(list1, list2):\n    if (list1 == list2):\n      return 'l1 \u00e9 igual a l2'\n    else:\n      return 'l1 \u00e9 diferente de l2'\n \n"], [0.09509853739223906, 0.1388888888888889, 0.12438749798529267, "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\nThe above code is a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that finds the difference of two arrays.\n\ndef Countd(): \n  \n     a = [] \n     b = [7, 14, 14] \n     count = 0\n  \n    \n     for i in b: \n         if i in a: \n             count += 1\n  \n     print(count) \n  \n\ndef make_array(N,M):\n    \n    \n    \n    \n"], [0.09043231014293467, 0.1282051282051282, 0.18729034784101123, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to check if two lists are same, if not then it will display the items that differs in the two lists as a list.\ndef modify_list(l):\n    for i in range(len(l)-1,-1,-1): # for i in reversed(range(0, len(l))):\n        if l[i]%2==1: l.remove(l[i]) \n        if l[i]%2"], [0.19702888356518639, 0.2222222222222222, 0.35133792561491617, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to get the difference between 2 lists.\ndef compare_lists(list1, list2):\n    return list(set(list1)-set(list2))\n \nThe above code is a function to compare 2 lists and get the differences between them.\ndef greet_me(**kwargs):\n    for key, value in kwargs.items():\n        print(\"{0} = {1}\".format(key, value))"], [0.10585473590019655, 0.17142857142857143, 0.14534602841372168, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to perform symmetric difference between two sets in python. where set A = set(li1) and set B = set(li2) and set C = (set(li1)-set(li2)) (symmetric difference of A and B) + (symmetric difference of B and A) (set D = symmetric difference of A and B)\n\nre.split('([?.!\"](?=\\s|$))',"], [0.07362525580943888, 0.05454545454545454, 0.0952039112787014, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is - a function that returns the list that contains all elements that are contained in the first list, but not in the second. Additional parameters passed will be ignored.\nIn Other words:\n\nDiff(e1,e2,e3,e4).\nwill return the list that contains elements that are contained in e1, but not in e2, or e3, or e4.\n\nThe original example as well as the exactly same result has been created by"], [0.176540521781746, 0.3125, 0.36091094553587044, "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to remove commong characters between two lists"], [0.15171266265589012, 0.19444444444444445, 0.21734231793155867, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to show the difference between two lists without elements of the common list in it.\n\n\ndef check_anagram(str1,str2):#change 1\n    str1.sort()\n    str2.sort()\n    return(str1==str2)\nword1 = \"JOIN\"\nword2 = \"NOIT\"\n\n\ndef printdiv(n):\n    for i in range(2,n+1):\n       "], [0.08935458027639394, 0.12195121951219512, 0.161713780662529, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find difference of two lists without repetition.\ndef find_Hcf(a,b): \n    if a > b: \n        smaller = b \n    else: \n        smaller = a \n    for i in range(1,smaller + 1): \n        if((a % i == 0) and (b % i == 0)): \n            hcf = i \n             \n    return hcf "], [0.1406587273968485, 0.16129032258064516, 0.24973429813608009, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " program to find the difference between two lists\nThe above code program to find the difference between two lists\ndef finder1(arr1,arr2):\n    for i in arr1:\n        if i in arr2:\n            arr1.remove(i)\n            arr2.remove(i)\n    print(arr1,arr2)\n    print(arr1, arr2) \n        \n \nprint(finder1([1,"], [0.10761232733584006, 0.13725490196078433, 0.2957050493096297, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between elements of two given lists with the help of set function.\n\ntry:\n    # Python 3\n    from functools import reduce\nexcept ImportError:\n    pass\n\ndef DecimalToBinary(num):\n   \n   if num > 1:\n      \n       DecimalToBinary(num // 2)\n   print(num % 2, end = '')\n\nThe above code is a program"], [0.33006577975563467, 0.375, 0.38087260847594373, "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that just returns the difference between two lists(union-set) \n"], [0.07704598395722655, 0.08771929824561403, 0.1863435850246185, "def pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\n\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list\nThe above code is a function to add the given tuple to the given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is python code to find the items of the two list which are different.\nArrange given numbers to form the largest number\n\n\nGiven an array of numbers, arrange them in a way that yields the largest value. For example, if the given numbers are {54, 546, 548, 60}, the arrangement 6054854654 gives the largest value. And if the given numbers are {1, 34, 3, 98, 9, 76, 45, 4}, then"], [0.12388791702171166, 0.16279069767441862, 0.24626824870669595, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\nThe above code is a python function to remove odd numbers from a given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference of 2 lists.\ng = lambda x: x*x\nprint(g(5))\n\nThe above code is a lambda function that square a number and print\ndef div_by_zero():\n  try:\n    5/0\n  except ZeroDivisionError:\n    print(\"Dividing by ZERO is not allowed\")\n\nThe above code is a function to throwing exception/Error.\ndef Fib"], [0.08568130627484105, 0.08695652173913043, 0.15594172513029758, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to differnce of two lists(common elements and extra elements)\n\ndef duplicate(li): \n    newlist=[] \n    for i in li:\n        if i not in newlist:\n            newlist.append(i) \n    return newlist\nThe above code is a function to remove duplicates of a list without any external libraries.\ndef check_array_rotation(rot, ar):\n    temp ="], [0.07928888290680641, 0.09433962264150944, 0.12445724169844136, "def Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\n\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes 2 lists\nAnd returns them after showing which elements are not present in both lists.\n\n################# Everything above can be written in one line ############################\n################# Everything below is to make it more interactive  ############################\n\nlot_productID_list = [];\nlot_url_list = [];\nlot_title_list = [];\nlot_price_list = [];\n\n## Add/Remove list names using the above"], [0.15722497462956087, 0.1794871794871795, 0.1502964813109407, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function which returns a list that contains the difference between two lists.\n\ndef comp_string(s1,s2):\n    a_list = list(s2)\n    pos1 = 0\n    still_ok = True\n    while pos1 < len(s1) and still_ok:\n        pos2 = 0\n        found = False\n        while pos2 < len(a_list) and not found:\n            if s"], [0.08610865034627765, 0.0784313725490196, 0.18290560530350292, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to return the different elements, as lists are unhashable, we cannot make sets or lists out of lists directly. Python\u2019s set data structure allows us to do precisely this.\n\ndef Is_list_permutation(lis1,lis2):\n    count1 = [lis2.count(y) for y in lis1]\n    if len(lis1) == len(lis2) and all(count1):\n       "], [0.08547193218040006, 0.07317073170731707, 0.11763979525739719, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\nThe above code is a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is simple way to get list SortedDiff in the list using difference.\n\ndef missingNum(n, listNum):\n    return sum(range(n+1)) - sum(listNum)\n\n   The above code are same as below but it returns the missing number.\n\ndef missingNum(n, listNum):\n    return sum(range(1,n+1)) - sum(listNum)\ndef calculate_average(first, second):"], [0.22765428903151963, 0.3333333333333333, 0.39114068345854863, "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function that takes in two lists as arguments and finds the difference between them.\n"], [0.13139491079220178, 0.1794871794871795, 0.2573577218162763, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference in two lists without repetition.\nFirst positive integer without an ASCII character.\n \ndef findFirst(str,ch):\n    for i,ltr in enumerate(str):\n        if(ltr==ch):break\n    for i in enumerate(str[i:]):\n        if ltr!=i:break\n    return i\n \nThe above code is a python function to find the position of"], [0.09809249528776517, 0.125, 0.22995664232820703, "from itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find diff between two lists without duplicate.\n\ndef dig_count(n):\n    if n==0:\n        return 1\n    count=0\n    while (n>0):\n        count=count+1\n        n=n//10\n        \nThe above code is a function to calculate how many digits in a given number.\n\ndef special_num(n):\n    s=set(str(n))\n   "], [0.31330553877760564, 0.4117647058823529, 0.5043749694851543, "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to get the differences between two lists without repetition.\n'''"], [0.11602071588033637, 0.12195121951219512, 0.17593454088074226, "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the elements present in once list but not the other.\n \ndef Key_Missing(li1,cross_li2):\n    for item in li1:\n        if item not in cross_li2:\n            return item\n \nThe above code is a python function to check whether an item is not in cross check which arises from the list1.\nQ04.https://www.codewars.com/kata"], [0.08191866197503324, 0.0975609756097561, 0.04841360651944476, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function called Diff, which is used to find the element present in only one list at a time.\ndef Mean(lst):\n def average(lst): \n   return sum(lst) / len(lst) \n  a = list(map(lambda x:x[0] - average(lst), lst))\n  b = list(map(lambda y:y[1] - average(lst), lst"], [0.10465574420825785, 0.10638297872340426, 0.12606474068440277, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create a list of N empty dictionaries.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " function difference between two sets.\n\n\n\nPrime numbers\nThere are well known techniques for finding prime numbers.\nYour task is to implement Miller-Rabin and Fermat\u2019s primality test.\nclass MillerRabinPrimeTest:\n\ndef is_prime(n):\n  if n < 2:\n    return False\n  if (n==2):\n    return True\n\n not any([not MillerRabinPrimeTest.is_prime(n)"], [0.16633711126176892, 0.25, 0.3121093663360889, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference between the two lists which are not in both lists.\n def square_of_num(nums):\n  squares= {num : num * num for num in nums}\n  return squares\nThe above code a functional programming example.\n"], [0.08141995991703699, 0.06451612903225806, 0.22479106168480287, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " can be used to check if the list is symmetrical according to each term. More info on the same can be found at the following link:\nhttps://stackoverflow.com/questions/18139660/finding-unique-elements-of-two-lists-in-python\n"], [0.08655404593900339, 0.09302325581395349, 0.2333535935677064, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to return the difference, removing the common elements while returning an output.\nn = '112.12 \"python\" xyz :'\nn = n.replace('\"','')\nprint(n)\ndef without_repetition(l1,l2):\n    l = l1 + l2\n    return set(l)\nThe above code is a function to remove any repetitions\ndef Check_Repetition(Numbers):\n"], [0.08620916933057549, 0.1111111111111111, 0.19703242933087398, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the dissimilar elements in the given two tuples.\ndef addLastElement(list1):\n    return list1[0], list1[len(list1)-1]\nThe above code is a method to print the first and the last elements present in the given list.\ndef fibonaci(n):\n    f_list = []\n    for i in range (n):\n        if i <= 1:\n            s ="], [0.11070813214413161, 0.1276595744680851, 0.21083573393906913, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the differences of two sets. Exact wording of test cases will be provided.\ndef Sum_square(number):    \n    facter = 1\n    for each in range(n): \n        facter= facter * each * each \n    print(facter) \n    \nThe above code is a python function to calculate the factorial of the squares of each elements in the lsit. Test cases will follow as soon"], [0.11627260615745408, 0.17073170731707318, 0.21622678198373285, "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\n\ndef Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function which the differences between two lists. \ndef Diff(li1, li2): \n    return (list(set(li1) - set(li2))) \n \ndef Diff(li1, li2): \n    return [i for i in li1 + li2 if i not in li1 or i not in li2]\n \nThe above code is a python function which compares two lists and returns the different values"], [0.08620916933057549, 0.1111111111111111, 0.22684721452144793, "def test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find out the modified items in the new list. In this function, li1 and li2 are two lists which are to be compared.\n\ndef find_the_duplicate(arr):\n    return sum(arr)-sum(set(arr))\nThe above code is a function to find the numbers that occur twice in a list.\ndef double_letters(str):\n  for i in range(len(str)-1):\n   "], [0.11414292377682912, 0.11904761904761904, 0.15134067464846598, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find common elements in two list without repeatition.\ndef string_reverse(str1):\n    rstr1 = ''\n    index = len(str1)\n    while index > 0:\n        rstr1 += str1[ index - 1 ]\n        index = index - 1\n    return rstr1\nThe above code is a python function to reverse a string using index.\ndef string_reverse(str1):\n   "], [0.07719241189910614, 0.046511627906976744, 0.04426958498386958, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is given a list of tuples, for every element in first tuple it removes its element ( less than 0) from the second elements of the tuple.\ndef fuzzy_intersect(fuzzy_set_1, fuzzy_set_2):\n  print(fuzzy_set_1, fuzzy_set_2)\n  result = min(Diff(fuzzy_set_1[0], fuzzy_set_2[0]), fuzzy_set"], [0.15420171551987108, 0.20588235294117646, 0.18975832403071605, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between two list with unique elements, each in the form of set of tuples.\n\ndef compare(x, x1):\n\tobjname = 'task'+(x1)\n\tmlist = str(multiprocessing.current_process()).split('-')[0]\n\tmlist = str(mlist).split('Process')[1]\n\ttry:\n\t\ta=eval("], [0.09498013000525124, 0.16279069767441862, 0.25331762336588004, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find out the differences between the two lists.\ndef missing_no(sq):\n  sum = 0\n  mean = len(sq)/2\n  j= 0\n  for i in sq:\n    sum += i\n  return (mean*(mean+1))/2 - sum\nThe above code is a function to calculate the missing number from a list of numbers.\ndef anag(tupi):\n    totalan ="], [0.08836461748166886, 0.1111111111111111, 0.14448151210455978, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " gives the difference of two list by subtracting them.\ndef comma(list_1):\n    list_str = [str(i) for i in list_1]\n    list_2 = \", \".join(list_str)\n    print (list_2)\n    \n    \nThe above code is to print a new string joining all the elements of a list with a , seperator.\ndef sequence(n):\n    comb_sq ="], [0.11219867114835011, 0.17073170731707318, 0.2029817554404438, "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the differences between two lists.\ndef isolate(str1):\n    white = str1.find(' ')\n    vals = str1[white + 1: len(str1)-1]\n    tokens = (vals.split(','))\n    return ([int(tokens[i]) for i in range(len(tokens))])\nThe above code is a function to convert a string of code into a list"], [0.08836461748166886, 0.10869565217391304, 0.23261059085479976, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the diffence of two lists (list1 - list2) in python.\n\n#3.zip(*[iter(string)]*n): It is a custom function to divide a string into n parts\n\ndef divide_chunks(l, n):\n    # looping till length l\n    for i in range(0, len(l), n): \n        yield l[i:i + n]\n\n\ndef merge"], [0.12072174246389188, 0.13953488372093023, 0.14537040777229734, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that does the difference between two lists (it returns only unique values)\ndef war(cardVal,cardSuit,FaceCard,Suit):\n    club, diamond, heart, spades = 0, 0, 0, 0\n\n for card in cardVal:\n    if card == '2':\n        club += 2\n    elif card == '3':\n        club += 3\n    elif card == '4':\n        club +="], [0.11157222172363165, 0.1, 0.21680581039919478, "def reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the lists that are not unquie.\ndef patternCount(text, pattern):\n     count = 0\n     for x in range(0, len(text)-len(pattern)+1):\n         if text[x:x + len(pattern)] == pattern:\n             count += 1\n         return count\nThe above code is a python function that counts the matching of a pattern in the given file. This uses the python functions."], [0.1852474246945622, 0.22857142857142856, 0.1480585480802214, "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to check the difference between two lists.\n  \nfrom itertools import combinations\nfrom math import sqrt\nfrom collections import Counter\nclass box:\n    def __init__():\n        self.sides=[0]*6\n    def sum(self):\n        return sum(self.sides)\n    def setSides(self,l):\n        for j in range(6):\n            self.sides=[combinations"], [0.11588050884930508, 0.16216216216216217, 0.161713780662529, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a list comprehension to find the difference between 2 given lists.\nli1 = [5,6,7]  \nli2 = [8,5,1]\nDiff(li1,li2)\ndef difference_even_odd_tuple(list1):\n    even_nums = []\n    for i in list1:\n        if i % 2 ==0:\n            even_nums.append(i)\n    return tuple"], [0.33638817943631166, 0.42105263157894735, 0.5483631268078778, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference between two lists giving us the common elements between them.\n\n"], [0.10223170682384347, 0.17142857142857143, 0.1021492623333527, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that returns the difference set between two sets.\nreturn iterable and dict in one line\n\nfrom functools import reduce \n\nclass fun_utiles:\n   def conv_tup(self,item):\n        dict1 = dict(item)\n        return dict1\n    \n    \n    def conv_tup(self,item):\n        dict1 = dict(item)\n        return dict1\n    list1="], [0.19136370596461028, 0.5384615384615384, 0.5101490193104813, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to diffrence between the two lists."], [0.0855878745246035, 0.13043478260869565, 0.2676110089095073, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find out the differences between the two lists, the returned result is a list of the form [x - y,z - t]. \ndef reverseNumber(n) : \n    reverse = 0    \n    while(n > 0) :    \n        reminder = n %10    \n        reverse = (reverse *10) + reminder    \n        n = n // 10         \n    return reverse \nThe above code is a function to find"], [0.08153469542739665, 0.0975609756097561, 0.09442575435042977, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is Given two list, return sequentail mutual exclusive difference.\n\ndef mul_list(test_list):\n  res = reduce((lambda x, y: x*y), test_list)\n  return (res)\nThe above code is Given a list, to perform simple multiplication on numbers in the list.\n\ndef EvenC(test_list):\n  res = list(filter(check,test_list))\n  return (res)\n"], [0.08908345582054471, 0.13953488372093023, 0.21795043541163836, "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\n\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that returns the collectiong of elements which common between them in the two lists.\ndef intersection(lst1, lst2):\n    return list(set(lst1) & set(lst2))\nThe above code is a function that returns the intersection of two lists.\n    def common(list1, list2):\n    result = False\n    for x in list1:\n        for y in list2:\n            if"], [0.07838542764809013, 0.09259259259259259, 0.24243218279687193, "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes list as input and returns one common all elements belonging \nto both the lists.\n\nFirst we write a function myreduce() which works exactly like python's built-in function reduce()\nNext we write a myfilter() function which works exactly like python's built-in function filter()\n   Define List\nprint(\"List: \", l)\n\n# start defining myreduce\ndef myreduce(func = lambda x : x"], [0.0972094475893326, 0.08695652173913043, 0.12792775090877, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function which takes 2 lists and returns a list containing the elements that are in first list but not the second list.\ndef measureList(list1): \n  for x in range(list1): \n    iterations = x+1  \n    print(\n    \"Length of the list: {}\".format(len(list1)),\n    \"Minimum element of the list: {}\".format(min(list1)),\n    \"Maximum element of"], [0.09600360219220418, 0.14285714285714285, 0.2272410844329778, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\ndef count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find differences between two lists except the common elements between them.\ndef convert(s,numRows): \n  vList = []\n  a = ''\n  if numRows == 1:\n    res = s\n  else:\n      idx = 0  \n      diff = 2*(numRows - 1) \n      textLen = len(s)\n      idx = 0 \n      while (1):"], [0.1063969246768826, 0.17142857142857143, 0.11061328252163585, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\nimport re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function which returns the difference of two lists.\n\nfrom html.parser import HTMLParser\nfrom urllib import parse\n\nclass LinkFinder(HTMLParser):\n \n    def __init__(self, base_url, page_url):\n        super().__init__()\n        self.base_url = base_url\n        self.page_url = page_url\n        self.links = set()\n \n    def"], [0.13283724776315164, 0.1891891891891892, 0.31508711291651165, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference of two list.\n\ndef enough_numbers(list1 , list2):\n  return len(Diff(list1,list2)) > 2\n \nThe above code is a python function to find True if the difference in nember of elements in lists is more than 2.\n\n\ndef tuple_exists(l,elem,index_position=0):\n  return tuple_exists_positions("], [0.08968021596231712, 0.0975609756097561, 0.07394501225614084, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \nThe above code is a function to determine if the sum of the divisors of two integers are the same.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find list differences of two list.\nfor i in range(int(input().strip().split()[0])):\n    a, b, c = [int(x) for x in input().strip().split()]\n    if is_Diff(b) and b >= c and 6 <= len(str(b)) <= 10:\n        print(a, b)\n    else:\n        print(a, 'error')\n"], [0.11660965159618195, 0.14285714285714285, 0.21320722991276655, "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to count the Differnce of two Lists.\ndef perfect_number(x):\n    sum = 0\n    for i in range(1, x):\n       if(x % i == 0):\n            sum = sum + i\n    if(sum==x):\n            print(\"This number is perfect\")\n    else:\n            print(\"This number is not perfect\")\nThe above code is a python function to test whether a number"], [0.10002182534493241, 0.09523809523809523, 0.08473709893507789, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function that returns the list of elements that are unique.\ndef prime_num(x):\n    if x==1:\n        return False\n    elif x==2:\n        return True\n    else:\n       for n in range(2,x):\n               if x%n==0:\n                       return False\n       return True             \nprime_nums(x)        \nFor the given number, this code checks if it is"], [0.09560575039450339, 0.17073170731707318, 0.15340896045779068, "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that returns a list of difference of two given lists, list1 and list2.\n\nimport nltk\nnltk.download('punkt')\nsents = [\"tell hem to get ready for the trip\"]\na=nltk.word_tokenize(sentences[0])\n\nfrom nltk.tokenize import load\nfrom string import punctuation, ascii_letters\nfrom collections import Counter\nfrom nlt"], [0.11623182446731398, 0.15555555555555556, 0.20328367712398443, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\ndef sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to calculate the unique numbers in two given lists.\ndef counter(list,n):\n    count = 0\n\n    for i in list: \n      if (int(i) > int(n)): \n        count = count + 1\n\n    return count\nThe above code is a function to count the number of numbers in a list that are greater than a number.\ndef reverse(l,k):\n  r=k-l"], [0.08836461748166886, 0.11363636363636363, 0.21839543891073984, "def sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is function to calculate differences of a lists without duplicates. https://www.geeksforgeeks.org/python-difference-two-lists/\n\ndef Diff(li1, li2): \n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2] \n    return li_dif\n \nThe code above will return the elements which are not in both lists."], [0.10235225262842854, 0.16666666666666666, 0.26409533015409686, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find diff of 2 lists and return the list that gives you the difference of the two lists.\nimport itertools \ndef Permutation(N, LIST): \n    B=[] \n    A=itertools.permutations(LIST, N) \n    for i in sorted(A):\n        B.append(list(i)) \n    return B \nThe above code is a function which is used to return"], [0.19672605301657461, 0.25, 0.22313577696133072, "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function that gives you the symmetric difference between two lists.\n\nSample Input\tExpected Output\nabc,2,4,4,567,345,352,58597   abc,352\nabc,3,3,3,3,333,3,3,3,22,23  33, 22223\n\ndef Nmaxelements(list1): \n    final_list = [] \n  \n    for i"], [0.10933512686106173, 0.18421052631578946, 0.27929831623246376, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between 2 lists.\ndef correct_sentence(str):\n  a = str[0].upper()\n  b = str[1:len(str)] + '.'\n  res = a+b\n  return res\nThe above code is a function to correct the sentence.\nnums = (1,2,3)\nnums[0] = 10\n \nThe above code throws the error, tuple doesn"], [0.1793417676446426, 0.24242424242424243, 0.3252622823583886, "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to calculate the difference between two lists.\ndef sort_n_merge(li1,li2):\n    sorted_merged = sorted(li1+li2)\n    return sorted_merged\n\nThe above code is function to sort and merge to sorted list.\nimport ovh\nclient = ovh.Client()\nservicetype = client.get('/telephony/number/serviceTypeList')\nreturn servicetype\nThe"], [0.0837812889645473, 0.09433962264150944, 0.11557154328696576, "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is to find all the element that are not common in both lists.\n\n\nAdd an item in the list\nwords = [\"hello, \",\"world\"]\nword = \"again\"\nnewlst = [item+word for item in words]\nprint (newlst)\n\nThe code is a python comprehension that takes a list of strings, concatenates each string by \"again\" and produces a new list membership.\n\ndef split_join(lst"], [0.08879534716826956, 0.09433962264150944, 0.12374902465733853, "def sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to to return values of a and b respectively such that when we subtract [*li2] from li1, we will get the output of result as [*li1 - *li2] as shown below.\nli5 = [9, 105, 8, 10, 11, 12, 12]\nli6 = [10, 11, 13, 13]\nDiff(li5, li6)\n[105, 8, 12, 9]\n\nTo"], [0.16105584018717028, 0.22857142857142856, 0.38835420983839164, "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference set of two lists.\n \n15. \tl=['a','A','b','B','d','D','c','C'] \nGet the output as ' A,B,C,D'\nSorted with respect to capital letters and than small letters\n\nl=['a','A','b','B','d','D','c','C']\nout_lst=[]\nfor i in l"], [0.07528102991107477, 0.05084745762711865, 0.11052549227703247, "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\n\nimport re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that computes the list difference, using a set intersection.\n===============================\nIEEE Numbers:\n===============================\n\n0x7f   Represents the limiting value beyond which all combinations of (not necessarily distinct) physical quantities can be described exactly by the available quantities in an established system of quantities.\n\n0x80 \u2013 0x87 \tReserved for special use.\n0x88 \t16-bit positive integer.\n0x"], [0.1132771166550024, 0.1891891891891892, 0.16889416699519497, "def triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\nThe above code is a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference of two lists. Thanks to divyanshu132 on https://www.codechef.com/FAQBLOG17\ndef twoSum(nums, target):\n    if len(nums) <= 1:\n        return False\n    buff_dict = {}\n    for i in range(len(nums)):\n        if nums[i] in buff_dict:\n            return [buff_dict"], [0.10526990943581242, 0.17142857142857143, 0.20066381848980336, "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the missing and redundant values in two lists.\ndef get_missing(payload):\n    all_missing=list(map(list, set(map(lambda i: str(i[0])+str(i[1]), filter(lambda i: i[2]!=28, enumerate(payload))))))\n    return [x[0] for x in all_missing]\n\n\nThe above code is a function to"], [0.15804041362599922, 0.15384615384615385, 0.10956505195291046, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is determining the difference between two lists.\ndef Duplicates(li):\n    unique = []\n    for ele in li:\n        if ele not in unique:\n            unique.append(ele)\n    return unique\n\nThe above code is determining duplicates within a list.\ndef list_to_tuple(li):\n  res = []\n  for count, _ in enumerate(li):\n    res.append(tuple(li["], [0.12247314298296873, 0.23333333333333334, 0.292008861911321, "import bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference of two list or remove duplicate from list and return the explicit difference of two lists. \nDiff([1,2,3,4,5],[1,2,3]) \nimport pandas as pd\n\ndf = pd.DataFrame({'1':[1,2,3,4,5],'2':[2,3,4,5,6],'3':[3,4,5"], [0.1647324165358461, 0.21621621621621623, 0.16982141551403557, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to obtain the difference between two lists.\n\ndef duplicate_count(text):\n    dictionary = {};\n    count = 0;\n    for i in str(text):\n        if i in dictionary:\n            dictionary[i] += 1;\n        else:\n            dictionary[i] = 1;\n    for x, y in dictionary.items():\n        if(y > 1):\n            count += 1;\n    return count"], [0.08015704244410785, 0.09090909090909091, 0.1825079461351292, "import re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " will create the set difference of two lists and will return the lists with unique values.\n\ndef lower(string):\n    return list(filter(str.islower,string)) + list(filter(str.isupper,string))\n\nThe above function will return two separate list based on whether the character is upper case or lower case.\n\nimport random\ndef rand_number(x,y,n=6):\n  return random.sample(range("], [0.1558600994436171, 0.25, 0.12314752186793414, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference between elements in given two arrays.\n\ndef repeated_values_first_list(list1,list2):\n    result=[]\n    for item in list1:\n        if list1.count(item) > 1 and item not in list2:\n                result.append(str(item))\n \n    for item in list2:\n        if list2.count(item) > 1 and item not"], [0.09417470832363346, 0.13636363636363635, 0.2019000882560176, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference of elements between the tuple list 1 and 2 irrespective of their order.\n\nimport random\ndef distance_from_zero(s):\n  if type(s) == complex or  s == abs(s):\n    return abs(s)\n  elif type(s) == str:\n    return (s)\n  else:\n    return (abs(random.random()))\nThe above code is a function to"], [0.08739435988441797, 0.12, 0.27148628682163684, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function returns the differnce between two lists by taking the absolute difference.\nNote :- li1 is the list which I need to obtain while li2 is the given list \n\ndef arrayManipulation(n, queries):\n    d = {k: 0 for k in range(n+1)}\n    for a, b, k in queries:\n        d[a] += k\n        if b+1 <= n:\n            d"], [0.1454110404561194, 0.16279069767441862, 0.19249567744436505, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is to find list diff.\ndef Diff1(li1, li2):\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n \nThe above code is to find the difference between two lists.\n \n\npip install setuptools==39.1.0\n \nThe above code will install a new version of setupt"], [0.12518081997841068, 0.2, 0.27281993036512986, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find difference between two list by removing the common elements in both.\nlist1 = [2,3,4]\nlist2 = [6,3,4]\nDiff(list1,list2)\n[2, 5]\nThe above one is the output of the above code\n'''"], [0.08232071632754916, 0.09523809523809523, 0.11389801913125888, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes two lists, removes the common element, and the concatenates both elements in a single list.\n\nnums = [1, 0, -1, 0, -2, 2]\nres = []\n\ndef find_four_sum(nums, target):\n     \n        twosum(nums,len(nums)-1,target)\n        return res\n\ndef twosum(nums , end,"], [0.12501848150209155, 0.16666666666666666, 0.18103832727721894, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference of 2 unsorted lists.\n \ndef elementsearch(element, list):\n    return element in list\nThe above code is a python function to find existence of given element in a given list.\n def togglestring(str):\n    str= list(str)\n    t = \"\"\n    for i in range(len(str)):\n         if str[i].islower():\n             t += str"], [0.10783735697728074, 0.11627906976744186, 0.15953910150400952, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the added and removed elements of seta A and B.\ndef Diff(li1, li2):\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2] \n    return li_dif\n \nThe above code is a python function to find the added and removed elements of seta A and B.\ndef addTwoNumbers(a, b"], [0.07669514353459422, 0.0625, 0.049188195805307054, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes two arrays and find common ele.\n\ndef Diff(a, b): \n    b = set(b) \n    return ( [ diff for diff in a if diff not in b]) \n  \na = [1, 2, 3, 5, 7, 8, 9, 12] \nb = [4, 6, 7, 9, 11] \n  \nprint (Diff(a, b)) \n"], [0.10223170682384347, 0.15789473684210525, 0.17166055951191214, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to return uncommon element of two lists.\nclass Diff(SetAsListVisitor):\n  def visit(self,v):\n    if not isinstance(v,DiffOp):\n      self.v = []\n      self.v.append(v)\n\nThe above code is class to identify dfferent between objects.\ndef check(dict,key): \n  if key in dict.keys(): \n    return (\"Present,"], [0.07469104507186011, 0.04878048780487805, 0.0574540252887809, "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is just to determine the list of items to be removed.\n\ndef dict_invert(d):\n    new = {}\n    value = []\n    key = []\n    for x in d:\n        value.append(d[x])\n    for y in value:\n        if y in key:\n            pass\n        else:\n            key.append(y)\n    for k in key:\n        x = []\n        for z"], [0.10223170682384347, 0.17142857142857143, 0.18085385746512214, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to return a list with the difference of the two lists in them. \n\ndef calculateDist(list_of_list):\n  f_list = list_to_float(list_of_list)\n  ans = []\n  for tup in f_list:\n    temp = []\n    for ele in f_list:\n      if(tup[0] != ele[0]):\n        temp.append(t"], [0.13291307974538727, 0.14285714285714285, 0.1281205020255683, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find and return all thre elements that are unique in either of the two list.\ndef TowerOfHanoi(n, source, destination, auxiliary):\n    if n==1:\n        print('Move disk 1 from source',source,'to destination',destination)\n        return\n    TowerOfHanoi(n-1, source, auxiliary, destination)\n    print('Move disk',n,'from source',source,'to"], [0.07928888290680641, 0.10869565217391304, 0.1936783333531616, "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes in two lists and performs a diff on them and then adds them in the list.\n\ndef reverse(n):\n    return int(str(n)[::-1])\nThe code replaces the last number equal to the first number then the next number to the second number and so on.\ndef __Check(func):\n    def new(A,B,C):\n        if B not in A:\n            return False\n        return"], [0.08290184830055003, 0.10416666666666667, 0.2625390020611058, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python program to find the uncommon element from the given lists by comparing the elements of the 2 lists and appending in the accordingly 2 lists.\ndef remove_first_2_characters(string):\n    first_character = string[0]\n    final_string = string[2:]\n    return first_character + final_string\nThe above code is a python program to remove the characters from the given string except the first and last one.\ndef map"], [0.09400394474601408, 0.16216216216216217, 0.20815053675460313, "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the cade differnce of two given string lists.\nimport re\ndef remove_tags(text):\n    removed_tags = re.compile(r'<[^>]+>').sub(' ', []).strip()\n    return str(removed_tags)\nThe above code is a function to remove the tags of a given string.\n\nimport re\ndef remove_badchars(sentence):\n    output"], [0.08568130627484105, 0.09302325581395349, 0.19219675840288838, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to return a single list after subtracting 2 lists and appending the new list with difference.\n\ndef a_scramble(str_1,str_2):\n    \nThe above code is a function to check if 2 strings have exclusive character or not.\ndef str_replace(name):\n    print( '{name}'.format(name = name.replace('_',' ').title()))\n    \t\nThe above code is"], [0, 0.0, 0.0, "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\n\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is list differnce.\npalindrome\nrev=0, temp1=n1\nrev=0,temp2=n2\ntemp3=rev+temp1+temp2\nwhile temp1!=0:\n            rev=rev*10+temp1%10\n            temp1=temp1/10\n            if temp1==0:\n                \nwhile temp2!=0:\n            rev=rev*10+temp2%"], [0.09100787099124732, 0.12195121951219512, 0.13721518317809228, "def prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function which takes two states, and returns the difference of elements of sets from the intersection of two states.\n\ndef network_connecfn(G,u,v):\n def vertex_disjoin(G):\n  verdis = [ver for ver in G.nodes if G.degree(u)==0]\n  return verdis\n\ndef shortestpath(matrix, source,destination):\n     sr, sc = source\n"], [0.14938769719222778, 0.17142857142857143, 0.08733714253201783, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that returns the difference between two list without duplicates.\ndef bubble_sort(arr):\n    for i in range(1, len(arr)):\n        no_swaps = True\n        for j in range(0,len(arr)-i):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1]=arr[j+1], arr[j]\n                no_"], [0.1328857455661119, 0.15384615384615385, 0.14151030186539026, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function which returns a list where the elements of list 2 given as input are removed from the list 1.\n"], [0.10223170682384347, 0.17647058823529413, 0.1761384172884022, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference of two list without repeating elements.\n\ndef find_planet(planet):\n    return ({\"Mercury\":False,\"Venus\":False,\"Earth\":False,\"Mars\":False,\"Jupiter\":False,\"Saturn\":False,\"Uranus\":False,\"Neptune\":False}[planet])\n\nThe above code is a function to find the boolean value of absolute that the planet exists in the list.\n\ndef sho_"], [0.07691205084795409, 0.09090909090909091, 0.14896260460464256, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\nimport re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is can retrieve the elements which are different.\ndef mix_string(a,b):\n    c=a+b\n    return c\nThe code above combines to strings.\n\nThe code is a function which returns the reverse order of the input\n\ndef reverse(s):\n    str = \"\"\n    for i in s:\n        str = i + str\n    return str\nThe above code returns a string in reverse order of the input.\n\n"], [0.20153084275847785, 0.3125, 0.4342264680993754, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is the difference between the two list. It returns the difference of two lists."], [0.09361211459436061, 0.13333333333333333, 0.18489209978007207, "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\nThe above code is a function to sort a given matrix in ascending order according to the sum of its rows.\n\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes two lists as input and returns a list which contains the difference of two lists by returning all elements that only occur in one of two lists.\n \nimport numpy as np    \ndef boom_shell_sort(a,n):\n    mid = int(n/2)\n    while mid >0:\n        for start in range(mid):\n            gap_insertion_sort(a,start,mid)\n        mid ="], [0.0840022139933342, 0.12727272727272726, 0.3059343993950968, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to compute the symmetric difference of two lists, which returns the items in the two lists that are not in both the lists.\ndef isleap(year):\n    if (year % 4 == 0) & (year % 100 != 0) | (year % 400 == 0):\n        return True\n    else:\n        return False\nThe above code is a Python function which accepts the year as an argument, and returns whether the given year is a"], [0.09268320438756977, 0.1282051282051282, 0.167087322028417, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to return the difference of list1 and list2, list1 and list2 should not be repeated. \nThe args \u201cli1\u201d and \u201cli2\u201d is assumed to be sorted already. \nThe Complexity of this code will be O(n).\n\ndef List_Intersection(li1, li2): \n    return set(li1).intersection(li2) \nThe above code is a function"], [0.10493553705172601, 0.16666666666666666, 0.09926954872471097, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\nimport re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " Is a function that returns the difference between 2 lists.\nimport requests\nr = requests.get(url).text\nprint len(r)\nfrom pprint import pprint\npprint(r)\nfrom bs4 import BeautifulSoup\nimport json\nfrom pandas.io.json import json_normalize\nfrom pprint import pprint\nh = BeautifulSoup(r)\nprint (h)\nfrom selenium import webdriver\nurl"], [0.09748168392642113, 0.13513513513513514, 0.2118652753226164, "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function which returns the difference out the elements in the second list out of the first list.\ndef Diff(li1, li2): \n    return (list(set(li1) - set(li2))) \nThe above code is a python function which returns the difference out the elements in the first list out of the second list.\n\ndef Diff(li1, li2): \n    li_dif = [i for i in"], [0.18637839569775325, 0.21052631578947367, 0.3289807205441604, "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\ndef set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " snippet is a python function to find the difference between two lists in UNION efficiently.\n\ndef CeilIndex(v,l,r,key): \n    while r-l > 1: \n        m = l + (r-l)//2 \n        if v[m] >= key: \n           \n     r = m\n    return r \ndef LongestIncreasingSubsequenceLength(v): \n    size = len("], [0.08452192772204516, 0.16129032258064516, 0.2039078944649827, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function taking in two lists and returning the elements not present in both the lists.\n \ndef inter_section(li1,li2):\n    return list(set(li1)&set(li2))\nThe above code is a function taking in two lists and returning the common elements in the lists.\n \ndef common_ele(li1,li2):\n    return list(set(li1).intersection(set(li2"], [0.11320771304467096, 0.18604651162790697, 0.3661457225939604, "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function which takes two lists, returns two lists containing the difference of two lists.\ndef alpha_string46(text):\n    return re.match('^[a-z]{0,3}\\d{2,8}[A-Z]{3,}$',text)\n\nThe above code is a python function which finds out strings of the alphabet between 3 and 8 characters and 2 digits on a text where at least 3 \"capital letters"], [0.14910608479395343, 0.2647058823529412, 0.18184840914429737, "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference between the elements of the two given lists.\ndef peaks_and_valleys(li):\n    for i in range(1, len(li)-1):\n        if li[i] > li[i - 1] and li[i] > li[i + 1]:\n            print(i)\n\n        if li[i] < li[i - 1] and li[i] < li[i +"], [0.0901184280751889, 0.11363636363636363, 0.1638476268107953, "def sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " will return the difference of two lists. \nThis code is to check whether the given number is prime or not\nif number % 2 == 0:\n    print(False)\nelse:\n    for i in range(2,number-1):\n        if number % i == 0:\n            print(False)\n            break\n    else:\n        print(True)\nThe above code will determine the prime numbers.\n---------------------------\n####**Used List"], [0.11159371866200206, 0.17073170731707318, 0.4146501618888394, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is The function to find the difference of two lists. It take the two lists and returns the difference between the two lists.\ndef tie_ranks(arr): \n    n = len(arr) \n      \n    # Hash 'arr' elements to its value. \n    m = {} \n    for i in range(n): \n        m[arr[i]] = i \n          \n    # Sort array elements according \n    #"], [0.07652976882648045, 0.08, 0.15108409418798535, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes in two list, extracts elements in the first list and returns the elements in the list that exactly not exist in the second list. \ndef remove():\n    a=raw_input()\n    b=a.replace(';',' ')\n    \n    \nThe above code is a function that takes a string from a user input on the console and removes any \";\" from there;\nmarks = [(\"Shubham\", 89), (\"Allen"], [0.0837812889645473, 0.10204081632653061, 0.2527585117316147, "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\nThe above code is a function to find the item with maximum frequency in a given list.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the respective difference of elements from the compared lists like subtract the elements from one list from the other list.\ndef rev(string):\n\n    lenth = len(string)\n\n\n \n    if lenth % 4 == 0:\n        return string[::-1]\n    else:\n        return \"iamlearningpythonproblems\"\n'''\nThe above function is a function to check if the reverse of the string should be same as"], [0.09735603157584785, 0.15384615384615385, 0.12691968320630218, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to define list difference function, for two lists.\n\ndef closestZero(arr):\n    n = len(arr)\n    l = []\n    for i in range(n):\n        if (arr[i] <= 0):\n            l.append(arr[i])\n    m = 99999\n    for i in range (n):\n        for j in range (n):\n            if (m > abs(arr[i"], [0.14177883294457005, 0.22857142857142856, 0.29580900483983813, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference (Set wise) between two arrays.\n\ndef Intersection(li1,li2):\n    return list(set(li1)& set(li2))\n \nThe above code is a python function to find the intersection (Set wise) between two arrays.\ndef Difference(li1,li2):\n    li_dif = [i for i in range(len(li1)) if li1["], [0.11920956613400548, 0.2, 0.24211349468841434, "import re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between 2 lists.\ndef check_subset(subset):\n    return set(subset).issubset(set(mainlist))\nThe above code is a function to check if a Subset is present in the Mainlist or not.\n\ndef max_subarray(nums):\n    k=0\n    mx=float('-inf')\n    mn=0\n    \n    for i in"], [0.07824810874311128, 0.0625, 0.08290241339731919, "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " also gives difference of 2 lists. However, the input lists are not necessarily in sorted order.\n\n// solving small case where all elements in arr1 < arr2\n            // here we have used bitVector approach\n            \n            map <int,int> m1;\n            map <int,int> m2;\n            for(int i=0;i<n1;i++)\n            {\n                m1[arr1[i]]++;\n"], [0.07775546331227855, 0.08163265306122448, 0.10266603247271924, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes two lists and returns a list that over the list with dictionary keys which Have the values that are extra in the second list: \n\ndef word_count(str):\n    counts = dict()\n    words = str.split()\n\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    return counts\nword_count(\"my name"], [0.12072363153929822, 0.2, 0.3799149779883249, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference of two lists.\ndef rotate(input, d):\n    return input[-d:] + input[:-d] \n \nThe above code is a python function to rotate given array to the left of the given d size. \ndef sum_to_n(n):\n     return n * (n + 1) / 2\nThe above code is a python function to find the sum of n natural\n\n#"], [0.08595378703869806, 0.11627906976744186, 0.14403521237116768, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a Python3 program to check if two given lists can \nbe identical or not by printing their symmetric difference \n\nTo Write codes below\nwith open(\"C:\\\\Users\\\\admin\\\\Desktop\\\\file_01.txt\", \"w\") as text_file:\n\n#(1)Code as you did already:\n#b)Read a file\nwith open(\"C:\\\\Users\\\\admin\\\\Desktop\\\\file_02.txt\", \"rb\")"], [0.09526558017375214, 0.15384615384615385, 0.14289306539573612, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes two lists and returns a list of elements which exists in one list and not in the other."], [0.07583235236323511, 0.08333333333333333, 0.06440702883530679, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that returns a list containing elements that are in list1 but not in list2 and list2 but not in list1.\ndef DepthList(input):\n    max_depth = 0 # initializing max_depth to 0\n    for value in input: # for each value of list\n        curr_depth = 0 # initialize current depth to 0\n        for x in value: # each object in the list\n            if type(x) == str"], [0.09980257826781735, 0.13636363636363635, 0.22721250793611258, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function returns the list after removing the common elements from the 2 lists passed.\n"], [0.16376506219325265, 0.24242424242424243, 0.18105304874396577, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the element difference between two lists. \n\ndef add_numbers():\n\n    varList = map(int, raw_input().split())\n    toBeSorted = {varList[x].pop(0):varList[x][0] for x in range(len(varList))}\n    print toBeSorted\n    return\n    \"\"\"\n    print sorted(varList, key=lambda item: item["], [0.08217084822433852, 0.11363636363636363, 0.166284644579833, "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is to find the diff between 2 lists.\n\ndef isPalindrome(string):\nstrippedString = string.replace(\" \", \"\")\nreturn strippedString == strippedString[::-1]\n\nThe above code is to check whether the given string is a Palindrome.\n\ndef is_perfect(n) :\n    l = range(1,n)\n    div = list()\n    sum = 0\n    for i in l :"], [0.08415479651556887, 0.075, 0.10629367130855194, "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\n\ndef find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " the python function that returns the list of the elements in li1 but not in li2 and elements in li2 but not in li1. It uses set()\ndef rearrange(a, N):\n    for i in range(0,N):\n        if i%2==1:\n            if a[i]>=0:\n                t = a[i]\n                a[i] = a[i+1]\n                a[i"], [0.09161020050293275, 0.12195121951219512, 0.1319079277537609, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the symmetric differences of two sets.\n\ndef left_find(target_list, pattern):\n    res = []\n    for i in range(len(target_list)):\n        if target_list[i] == pattern:\n            res.append(i)\n#     else:\n#         print('{} is not in the List'.format(pattern))\n    return res\n        \nThe above code is a"], [0.08789922672202222, 0.10869565217391304, 0.09384054091298212, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that creates a new list called result after it finds the intersection of two lists.\n \n\ndef create_prime_numbers_dict(limit):\n    n = limit\n    result = {}\n    result[n + 1] = []\n    for i in range(2, n):\n        for j in range(2 * i, n + 1, i):\n            result[j].append(i)\n    return result\n "], [0.08702189001836953, 0.09615384615384616, 0.12975297182747683, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the different number of two lists and return another list with it.\n\n# 11. Linear Search(One Element present in an array)\n    def linear_search(n, search_element):\n        for i in range(0, n):\n            if a[i] == search_element:\n                return i\n        return -1\n    arr = [3, 90, 12, 33]\n    n = len(arr)"], [0.13001296227094586, 0.1891891891891892, 0.26646058888707214, "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between two list.\n\ndef Diff(li1,li2):\n    return (list(set(li1) - set(li2)))\n \nThe above code is a function to find the difference between two list.\n\nprint(\"Enter list 1: \")\nlist_1 = [alpha for alpha in input().split()]\n\nprint(\"Enter list 2: \")\nlist_2 = [beta for"], [0.19672605301657461, 0.27586206896551724, 0.20527296827649952, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find out the uncommon element between two lists.\ndef profilePic(W,H,l):\n    if(W<l or H<l):\n        print(\"UPLOAD ANOTHER\")\n    elif(W>H):\n      if(W>=l*100):\n          print(\"CROP IT\")\n      else:\n          print(\"UPLOAD ANOTHER\")\n    else:\n      if(H>"], [0.09962224067951468, 0.15789473684210525, 0.1047511733417752, "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the missing and additional values in two lists.\ndef dict_file(filename):\n    dictcnt = {}\n    with open(filename,\"r\") as f:\n        for line in f:\n            for word in line.strip(\"\\n\").split(\" \"):\n                if word in dictcnt:\n                    dictcnt[word] += 1\n                else:\n                    dictcnt[word] = 1\n       "], [0.11459814701461606, 0.2413793103448276, 0.09316669378077402, "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \nThe above code is a function to flatten the list of lists into a single set of numbers.\n\ndef sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference of two lists.\ndef double_index(lst,index):\n  if index >= len(lst):\n    return lst\n  lst[index] = lst[index]*2\n  return lst\ndef double_index(lst,index):\n  if index >= len(lst):\n    return lst\n  else:\n    new_lst = [i*2 for"], [0.13324691633025024, 0.1568627450980392, 0.3059368691633408, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the symmetric difference between two sets of numbers.\nlost_fights = 0\n\nfor i in range (1,20):\n  if i % 3 == 0:\n        print(\"F\"*i)\n        lost_fights += 1 \nprint(\"{0} fights, you lost!\".format(lost_fights))\nThe above code defines a python program to solve the famous monster adventurer problem i.e a game where a player"], [0.09962224067951468, 0.15384615384615385, 0.12056004937112677, "def catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\nThe above code is a function which returns nth catalan number.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference of two list.\nstr1 = 'geeks'\nstr2 = 'forgeeks'\n\noutput = str1+str2\n\n# print output : geeksforgeeks\nimport itertools\ndef cartesian_product(lst):\n    str_lst = ['' for x in range(len(lst[0]))]\n    for ele in sorted(lst):\n        for i in"], [0.14454615089530748, 0.19047619047619047, 0.22337067712565706, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is very simple code to find differences between two lists.\nPI = 3.1416\ndef area_Calc(radius):\n    return PI * radius * radius\nThe above code is a python function to calculate area of a circle using the formula pi(r)^2.\ndef count_occurances(word,chr1,chr2=0,chr3=0):\n    if chr2 == 0 and chr3 == 0:"], [0.12024429225558983, 0.10869565217391304, 0.07752195706241155, "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find out which elements are in one list but not in the other list. \ndef mergeSort(li):\n    if len(li) <= 1:\n        return li\n    else:\n        m = len(li) // 2\n        left = li[:m]\n        right = li[m:]\n        L = mergeSort(left)\n        R = mergeSort(right)\n        return merge(L, R"], [0.1660259719601899, 0.375, 0.36792162841019305, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to check the common elements between the given lists.\n"], [0.08210027202935208, 0.10204081632653061, 0.22698704663961883, "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the list elements that are not in both lists.\n\n\ndef common(list1, list2):\n    result = False\n    for x in list1:\n        for y in list2:\n            if x == y:\n                result = True\n                return result\nThe above code is a function to find the common elements in both the list.\n\nmod\nThe mod function or the modulo operation returns the remainder of the division,"], [0.13143585911118544, 0.19047619047619047, 0.30596151798375926, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between two lists without duplicates.\ngreens = ('celery','brocoli','greenbeans')\ngreens[taget]\nThe above code will return the value of an index because of tupple.\nnum = '123'\nprint(int(num))\nThe above code is a a mfunction to get integer form string.\ns = 123; s = str(s); print(s[0])\n"], [0.08105646371546442, 0.061224489795918366, 0.1453098823010867, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is find the difference in the two list.\n\ndef Diff(li1, li2):  \n    li_diff = [i for i in li1 + li2 if i not in li1 or i not in li2] \n    return li_diff\nThe diff code would do the same thing and return the difference.\n\ndef Contact(midinit, lastname, firstname, streetadd, city, state, zipnumber, country, streetnumber"], [0.08217084822433852, 0.11904761904761904, 0.11209125291145179, "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes two lists  and returns the list which is not common in both lists.\n\nfrom operator import itemgetter\nl = [('rishav', 10), ('akash', 5), ('ram', 20), ('gaurav', 15)]\nprint (sorted(l, key = itemgetter(1)))\nfrom operator import itemgetter\nl = [('rishav', 10), ('akash', 5), ('ram', 20"], [0.14017303269600973, 0.14285714285714285, 0.19332954421729392, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to return the difference between 2 lists(works on unsorted lists with duplicate values)\n\n\n### Segment Tress\nfrom collections import defaultdict \n \n# This class represents a undirected graph using adjacency list representation \nclass Graph: \n \n    def __init__(self, vertices): \n        self.V = vertices #No. of vertices \n        self.graph = defaultdict(list"], [0.15519423786138545, 0.1951219512195122, 0.20700325315933749, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to get the difference of two lists.\n\nYou can also use tuple instead of lists.\n\nThe second code just converts a string into a Python set.\n\nif set(li1) == set(li1):\n\treturn True\nelif set(subl) == set(sublist):\n\treturn True\nelif set(sublist) == set(subl):\n\treturn True\nelse:\n\treturn False\nThe"], [0.11432369973070734, 0.19444444444444445, 0.15731591945486295, "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to compute the list difference between two lists without repeated elements.\n\ndef sudoku(matrix):\n    return len([1 for i in xrange(0, 9) for j in xrange(0, 9) \n                    if [matrix[i][j] for k in xrange(0, 9)].count == [matrix[i][k] for k in xrange(0, 9)].count\n                    or [mat"], [0.13205774952652788, 0.1702127659574468, 0.32041826419228586, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to check the difference between 2 lists.\nprint(\"these are 2 lists\")\nprint(\"The 1st list consists of 2 elements , the 2nd list has 3 elements: \")\nli1 = [2,3,4]\nli2 = [3,4,5]\nDiff(li1,li2)\nThe above code shows us the result of Diff function on 2 lists.\nprint(\"This is just like the 3rd list"], [0.08701867980404966, 0.08695652173913043, 0.07707072756072114, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the elements that exist in either of the sets but not both.\ndata = \"abc de\"\nprint (\"Are strings equal ?\")\nprint(set(data) == set(data))\n n = input()\nn.split()\nprint(a.strip())\nprint(b)\na = input().split()\nb = input().split()\nset(a) - set(b)\na.difference_update"], [0.08854156359299119, 0.10256410256410256, 0.14358507241851556, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " logic is used to find the diffence of two lists.\n\ndef secB_minute(sec):\n    answere=0\n    answere+=sec//60\n    rem=sec%60\n    return  answere if rem==0 else (answere if rem<=30 else (answere+1))\nThe above code is used to find the minute in the event of minute overflow from 59..\n"], [0.08620916933057549, 0.125, 0.16710984616251603, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that returns the difference of two elements.\n\ndef list_diff(list1,list2):\n    return [i for i in list1 + list2 if ((i not in list1) or (i not in list2))]\n \nThe above code is a function that returns the difference of two elements.\ndef Diff(li1, li2): \n    tmp=[]\n    for i in li1:\n        if i"], [0.12976091403854464, 0.15, 0.19131272027061902, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to print the element(s) which is/are not common from two groups of lists or tuples.\ndef index_multidim(tup1,tup2):\n  return(tuple(tuple(a * b for a, b in zip(tup1, tup2))\n               for tup1, tup2 in zip(tup1, tup2)))\nThe above code is a function to"], [0.17947763620938637, 0.14634146341463414, 0.200441753610881, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to get the unique values of list1 and list2.\n\n \nimport pandas as pd\nimport numpy as np\nimport math\ndef normalized_mean_square_error(pred,actual):\n    \n    \nThe above code is a python function to calculate normalized mean square error of given predictions.\n \n\ndef original_mean_square_error(pred,test_y):\n    test_y = test_y."], [0.28244512917816544, 0.375, 0.28391040314905863, "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference between two list after removing common elements in both the lists.\ndir()\ndir(re.match)\ndir(re.search)\ndir(re.findall)\n"], [0.16816485751624236, 0.1956521739130435, 0.30942920670800844, "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\n\ndef max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between two lists.\nAnagram\nTwo words are anagram if you can rearrange the letters of one to spell the second.  \nFor example, ear and are are anagrams of each other.\n\ndef is_Anagram(first,second):\n    return sorted(first)==sorted(second)\nThe above code is a python function to find whether two strings are anagram of each other or not.\ndef"], [0.07510573689567103, 0.06382978723404255, 0.12114890008493488, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every even index contains even numbers of a given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is to find the common memebers in two lists by removing the common members from both.\n# Length of the largest subarray with equal number of 0s and 1s\n# Given an array with 0s and 1s, find length of the longest subarray with equal number of 0s and 1s.\ndef len_longest_subarray(arr,n):\n    v=0\n    l=[]\n    for i in range(0,n-"], [0.11136065500486025, 0.14285714285714285, 0.25358964209120954, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between elementns in a list with respect to other list.\n\ndef main():\n    sample_tuple = 'e', 'w', 2, 'g', 'm', 'p', 's', 45, 2, 'r', 'o', 'n', 'e', 'r', 'e', 'v', 'i', 'h', 'q', 0, 3, 'e', 'w','z','m','"], [0.11136065500486025, 0.14634146341463414, 0.21797617071054318, "def remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find any difference between two lists, to be used as a comparator\ndef FibonacciR(a,b,N):\n    d = Diff(N,b)\n    x = [n+1 for n in d]\n    su = x[0]\n    for i in range(len(x)-1):\n \n        su += x[i + 1]\n \n    if su > x[len(x"], [0.07145082700503615, 0.034482758620689655, 0.11959114338709179, "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\n\ndef toggle_string(string):\n string1 = string.swapcase()\n return string1\nThe above code is a function to toggle the case of all characters in a string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " doesn't work if one of the given lists has many elements than the other, because it creates a third list with all the \nelements of the smaller list and removes some values from the larger list and then it finds the intersection of both lists from this third list.\n\n\ndef diff1(li1, li2):      \n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]  "], [0.08509628078456316, 0.1, 0.12004215989844548, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the elements that are not common in both lists.\nImage(filename='./images/map.png')\nCity Introduction\nUsa has 51 states and they are displayed according to their official abbreviations and\npopulation rank, here are examples of some of them:\nImage(filename='./images/usa-states-capitals-st.jpg')\nEach of the state that makes up of the USA has laboratories, farms and companies.\n"], [0.08441671339318567, 0.10638297872340426, 0.2710228441484579, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes two lists and returns the difference of the two sets obtained. 'li1' has the extra element of 7.\nimport heapq\nli1 = [5,7,9,4,3]\nheapq.heapify(li1)\nprint(list(li1))\n\nThe above code is a function that produces a maximum heap having the elements in the list. The heapify function operates on only the first element of the"], [0.11546010774058657, 0.1891891891891892, 0.22437216240487884, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a method to get the list of values not common in two lists.\n\ndef find_comman(a,b):\n    return list(set(a).intersection(set(b)))\nThe above function will return list of common element present in two lists.\n\ndef union_OfArrays(n):\n    i = 1\n    len_ = len(n)\n    while i<(len_-1):\n        a1 ="], [0.13657728595872426, 0.13157894736842105, 0.166257348843483, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is to find the difference between two lists with identical elements in the same order.\ndef reverse_words(input):\n    input_split = input.split(' ')\n    temp = list()\n    for idx in range(len(input_split)):\n        temp.insert(-1*(idx+1), input_split[idx])\n    return \" \".join(temp)\ndef perfectSquare(n):\n    return int("], [0.08249270730666546, 0.07272727272727272, 0.13396381562622142, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the differnce of 2 lists without duplicate elements.\n\n#|10\u25e6/*\ndef finder(arr, x): # takes an array, 'arr', and a desired 'x' and returns where,\n                     # 'x' would be inserted in order to maintain the sort. Assumes that 'arr' is sorted.\n  hi = len(arr) - 1\n  lo = 0\n  while hi >= lo:\n"], [0.0890973606121723, 0.0975609756097561, 0.15442671674852382, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " takes two lists as input, and returns the list containing the difference of the list elements.\nS = \"-\".join([str(i) for i in range (1,21)]) \nprint(S)\nl=str(123)\nk=input()\nk.split('0')\nfor i in (1,21):\n    i=str(i)\n    print('-'.join(i))\nIf the input is a single integer"], [0.08610865034627765, 0.09090909090909091, 0.13001084351809675, "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to print all elements in first list except common elements.\n\ndef reverse(st): \n    return ' '.join(word[::-1] for word in st.split(\" \"))\nThe above code is a function to reverse the given given string.\n\ndef maximum(a,b):\n    if a>b:\n        return a\n    elif a==b:\n        pass\n    else: \n        return b\n"], [0.08015704244410785, 0.08888888888888889, 0.10043015982115125, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef fdata(inp1):\n    import re\n    st = inp1.group(0)[1:int(len(inp1.group(0))-1)]\n    return (st)\nThe above code is converting the string that is given to it into couple of words. \n\"\"\"\n"], [0.07652976882648045, 0.0851063829787234, 0.15019596793441364, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function returns a list that contains elements that are unique in either of the two lists that were taken in.\n\ndef uniqueInOrder(iterable):\n    res = []\n    previous = None\n\n    for char in iterable[0:]:\n        if char != previous:\n            res.append(char)\n            previous = char\n\n    return res\nThe above code is a function return the first unique character in a string\n\nThe above function returns"], [0.11701464008077177, 0.10869565217391304, 0.17637530704136894, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find common elements in three lists using set operations.\ndef diff_list_of_lists(x, y, z):                                             \n    return list(map(lambda x,y,z : x & y & z, map(set,x),map(set,y),map(set,z)))\nThe above code is a python function to find common, uncommon, different and all the elements in each list in all possible combinations."], [0.22089755229215552, 0.2903225806451613, 0.5228175700711261, "def second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to get the symmetric difference between two lists. https://www.geeksforgeeks.org/python-get-the-symmetric-difference-between-two-lists/\nDictionary.values() method returns a list of all the values available in a given dictionary.\n\ns = {\"00100100100100100100100100100100\": 3, \"00101010101010101010101010101\": 2"], [0.17552229882498877, 0.1951219512195122, 0.3090036055904953, "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference between two list that includes unique lambda function implementation.\n# We use enumerate function with for loop to track the count\nplt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))\nfor i, v in enumerate(grp):\n    ax1.text(v + 3, i + .75, str(v), color='blue', fontweight='bold')"], [0.12122678952741142, 0.14814814814814814, 0.3153318529062744, "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function that returns a specified difference between two list as a new list. If we want to find the difference between any two sets, then we need to convert them into sets, and apart from the difference, all other operations like union, intersection are same.\ndef BeginWord(str):\n    for i in range(1,len(str)):\n        print(str[:i],end=\"\")\n    return ''\n \nThe above code is a"], [0.1090086833679799, 0.16666666666666666, 0.3238329096773414, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function that returns the apparent difference between the two lists. It accomplishes this by running over both lists simultaneously and comparing one list items against the other list items. https://www.geeksforgeeks.org/python-difference-two-lists/\nDictionary: Check whether set represents valid application data structure or not\n4  \n4                              \n4  13 \n4  13  8\n4  13  8 12\n4  13 "], [0.11471490971679514, 0.18181818181818182, 0.21530766442506669, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function which returns a list which is the difference of two lists without being repeated, i.e. out of the all elements in list li1, add all the elements of li2 and then subtract the elements which are common.\n    \n    \n    \n\n"], [0.10493553705172601, 0.14285714285714285, 0.13130740383964137, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\nfrom operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is function takes two lists as arguments and returns a new list containing the difference between them \n\nInput:\nWord_list = ['abc', 'xyz', 'aba', '1221']\nCount_list = [1 for i in range (len(Word_list))] \nfor i in range(len(Word_list)):\n    for j in range(len(Word_list)):\n      if i != j:\n        if Word"], [0.08655404593900339, 0.09090909090909091, 0.12958701190440353, "import math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python set difference function.\ndef reverseDigits(number):\n  number_list=list(number)\n  rev=number_list.reverse()\n  return rev\n\nThe above code will convert/reverse the number\nimport math     \nn = int(input())\ndef add(x, y):\n   while (y != 0):\n       carry = x & y\n       x = x ^ y\n       y = carry << 1\n"], [0.08378005604518197, 0.08163265306122448, 0.0790462716982551, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\nimport math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find numbers missing out of one list from the other and vice versa.\ndef median(numbers):\n  lengt  = len(numbers)\n  countr = 0\n  medium = int(lengt/2)\n  for num in numbers:\n    if num == medium:\n      countr += 1\n    if countr != 1:\n      mednum = num\n  return mednum\nThe above code is a"], [0.15174336658183987, 0.21621621621621623, 0.3380121364237402, "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find out the differences of two lists.\n\ndef common_member(li1, li2):   \n    return list(set(li1) & set(li2)) \nThe above code is a python function to find the common characters between two lists.\ndef remove_list(list1, lis2): \n    global list3 \n    for ele in lis2:     \n        list1.remove(ele"], [0.10168234729347127, 0.13513513513513514, 0.12606474068440277, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to return the difference of 2 lists without duplicates.\ndef nqueens_stacked(board,stack):\n    countcol = 0\n    completed = []\n    for queen in stack:\n        for item,s in enumerate(board):\n\n            if s[0]==queen[0] and s[1]!=queen[1]:\n                countcol +=1\n\n            if s[1]==queen["], [0.18019054247121546, 0.14285714285714285, 0.0879718775702939, "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to get a list Diff.\nimport math \n \ndef diff(li1, li2) : \n    return (list(set(li1) - set(li2))) \n      \nline1 = int(input()) \nli1 = [] \nfor i in range(line1) : \n    li1.append(int(input())) \n       \nline2 = int(input()) \n"], [0.10569896735241426, 0.18421052631578946, 0.24408594252075244, "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\n\ndef count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find out the difference of two lists.\n\ndef function_n(func,i):\n    d=func(i)\n    return d\n       \nThe above code is a function to generate a dictionary and store the values of a dictionary in another dictionary.\n     \n        \ndef dict_sample_information(n):\n    try:\n        dictionary={}\n\n        dictionaryOfEmp={}\n        import random\n        print('Author"], [0.15964075378021733, 0.23333333333333334, 0.3316884449093118, "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the difference of two list. The diffrence of lists would return the elements of first and the last list chekc the question and do the appropriate thing.\n"], [0.0882324460591247, 0.1276595744680851, 0.20718899302124255, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to calculate the difference of two lists of input arguments.\ndef find_mean(input):\n return int(sum(input[0])/len(input[0])) + 1 if input[1] == 'average' else 0\n\nThe above code is a function to calculate the average of the list of input arguments, where n is the number of lists in sequence of arguments passed whe number of lists is more than 1.\ndef lister(n"], [0.11506417457703197, 0.1111111111111111, 0.19594853978775903, "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\nThe above code is a python function to move all zeroes to the end of the given list.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the list of elements present in only one list.\n\ndef rmv_duplicate(li):\n    out = []\n    seen = set()\n    for i in li:\n        if i not in seen:\n            seen.add(i)\n            out.append(i)\n    return out\n \nThe above code is a python function to remove the duplicates from the given list.\n\ndef no_"], [0.07510573689567103, 0.058823529411764705, 0.10298747596542215, "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nThe above code is a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes in a list and a 2nd list and deletes all the common elements from the 1st list and puts all the remaing elemets from both the lists as a single list.\n# Validacion de datos\ndatos = [[14, 5, 4, 3], [2, 7]]\nvalidacion = all(len(row) == len(datos[0]) for row in datos)\nprint(validacion)"], [0.09020838827540195, 0.1276595744680851, 0.20980600306033476, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find out the differences between two list by getting items from list 1 and list 2.\ndef factor(n):\n    for i in range(1,n+1):\n       if n % i == 0:\n           print(i,end=\" \")\n\nThe above code is a function to find out the factors of a given number and display.\ndef rec_factorial(n):\n\tif n == 1:\n\t\treturn"], [0.09372945962044402, 0.15555555555555556, 0.20205591639685447, "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\ndef intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\nThe above code is a function to find the intersection of two arrays.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the intersection of two arrays.\n\ndef cumulative_sum(list_1):\n\tsum_list = [sum(list_1[:i]) for i in range(1, len(list_1)+1)]\n\treturn sum_list\n\t\t\nPart_B:\nMy response:\n1. Write python functions that take in a set of pairs and check whether the given (a, b) pair satisfies the given tree"], [0.09104731775673656, 0.13333333333333333, 0.21715602681613255, "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to remove the common words in two list into a third seprate list.\ndef makeArrayConsecutive2(statues):\n   return sorted(Diff(range(min(statues), max(statues)) ,statues))\n \nThe above program is a function to find all integers present between the start and end of the given array.\ndef almostIncreasingSequence(Sequence):\n    droppped = False\n    last"], [0.13291307974538727, 0.15384615384615385, 0.1903817984110943, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a funciton to find the difference between two given list.\nNote- 'li1' and 'li2' can be any list that you want to find the difference of.\n\nn=int(input())\nfollowers_names=[]\nfollow_names=[]\nfor i in range(n):\n    x=input()\n    followers_names.append(x)\nm=int(input())\nfor i in range(m):\n"], [0.08116760716713906, 0.0975609756097561, 0.14784231499622022, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes in two set of lists and returns two set of lists as new lists.\ndef repeated_num(arr1):\n\t\n\td = {}\n\t\n\tfor i in range(len(arr1)):\n\t\tif arr1[i] not in d:\n\t\t\td[arr1[i]] = True \n\t\telse:\n\t\t\treturn arr1[i]\nThe above code is a"], [0.13001296227094586, 0.1590909090909091, 0.2282771731546971, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find out the different elements in two lists.\ndef checkprime(n):\n    c=0\n    for i in range(2,n):\n        if n%i==0:\n            c=1\n            break\n    if c==0:\n        print(\"True\")\n    else:\n        print(\"False\")\nThe above code is a python program which checks that the given number is prime number or not.\nFirst"], [0.12995462561868387, 0.21052631578947367, 0.3036906658393727, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to find the symmetric difference of two sets (lists) of the given lists.\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return (n*factorial(n-1))\nThe above code is a python function of factorial of a number (or series) using recursion.\n"], [0.08449710373199906, 0.0851063829787234, 0.1771157911610374, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to determine the number of numbers not common to both your List.\ndef DecimalToBinary(num):\n    if num > 1:\n        DecimalToBinary(num // 2)\n    return num % 2\n    if __name__ == \"__main__\":\n        print(DecimalToBinary(int(input('Enter a decimal number: '))))\nThe above code is a function to find the binary equivalent of the given"], [0.09215442332572699, 0.15384615384615385, 0.27967908184172796, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the 'set-theory' difference of two lists, given an operator 'difference of sets'.\n\ndef common_member(li1, li2):\n    return list(set(li1) & set(li2))\n\nThe above code is a function to find the 'set-theory' common elements from two lists, returned as a list.\n\ndef unique_list(list1):\n  res_list="], [0.14024481541754788, 0.1875, 0.1618659056765738, "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between 2 lists(with repeating elements) with common elements being deleted.\n\ndef find(s):\n    d=s.split('.')\n    if(len(d)==1):\n        return s[0].upper()\n    elif(len(d)>1):\n        if(len(d)==3):\n            su=\"\"\n            su=su+d[0][0].upper()"], [0.0782222967536855, 0.07692307692307693, 0.11989209966196247, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes two lists, compares and returns a list containing only those elements that are present in the first list but not in the second.\n\ndef vector_angle(U, V):\n    \n    D = len(U)\n    N = len(U[0])\n\n    denom = 1\n\n    for d in range(D):\n\n        if(U[d] * V[d] < 0):  # points in different directions\n"], [0.08745200290121356, 0.11627906976744186, 0.1473684710685409, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to return the different elements of both the lists.\nfrom collections import Counter\ndef unique_commands(commands):\n    return len(Counter(map(str, Counter(commands).values())))\nThe above code is a function to calculate number of unique commands.\n\nfrom collections import Counter\nn = int(input())\nt1 = tuple([int(x) for x in input().split()])\nt2 = tuple([int"], [0.08060035483702262, 0.10204081632653061, 0.12688521276362885, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " self explanatory code,And it\u2019s \u201cDiff\u201d function will return difference of two sets in sorted way.\n\ndef difference(lst1, lst2): \n   return [i for i in sorted(lst1) + sorted(lst2) if i not in lst1 or i not in lst2] \nThe above code is self explanatory, and is one of the most convoluted solution.\n\n\nOne of algorithm to"], [0.08664610223844374, 0.13725490196078433, 0.1567129654400204, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " will return the list difference between the two lists, in this example list1 would be a list of removed item from list 2 and, list 2 will be a list of removed items from list1.\n\nI mean if a function can calls itself\ndef show(n):\n    if n == 0:\n        return\n    print(n)\n    show(n-1)\nprint(show(20)\nThis code prints out 20 to 0 when a person calls"], [0.09100787099124732, 0.11904761904761904, 0.15202797967977782, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find all the numbers are missing between the given integers.\n\ndef find_missing_numbers(l):\n\tn = len(l)//2 + 1\n\tprevious_number, indices = l[1], [0] * n\n \n\tfor i in range(2, len(l)):\n\t\tif len(l) % i == 0:\n\t\t\tif indices[l[i]] == 1"], [0.08750384592780018, 0.08163265306122448, 0.08666900057754222, "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python functin to find the elements that are not common in lists as arguments.\nsort\nlambda\n.count\ncapitalize\nunion\ndef intersection(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n    i,j = 0,0\n    result = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2["], [0.08303234450701787, 0.11864406779661017, 0.20018763154911595, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function in python for the symmetric differences between the lists. It is done in O(n) time. Feel free to comment if changes are required.\n\n\nGood job! (Max time used: 1.61/10.00, max memory used: 14181904/536870912.)\nComputing length of Longest Common Substring.\nWe can check user's answer and change their input to correct one.\nDoes anyone know how to do it"], [0.2007577121258094, 0.22727272727272727, 0.37508584417408136, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function to get difference between two lists.\ndef absolutePermutationEncoding(N, K) : \n    permutation = [] \n     # Check whether the number combination is valid or not. \n    if (N % (K+1)) != 0 : \n        return -1\n    currentCheckValue = 1 \n    for i in range(0,int(N / (K+1))) :  \n        startIndex"], [0.09104731775673656, 0.13953488372093023, 0.1814824948887583, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that returns the differences between two given lists.\ndef uniq(l2):\n    c=[]\n    l3=[]\n    for a in l2:\n        if a not in c:\n            c.append(a)\n    c.sort(reverse=True)\n    print(c)\n    return c\n \nThe above code will print the unique values in the given list and returns A unique list.\ndef gen"], [0.07362525580943888, 0.05172413793103448, 0.15212578570373944, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a program that displays the unique elements of the two lists in python.\nLargest number with n digits\nGiven an integer n, find the largest number that can be formed with n digits. The same digits cannot be used multiple times.\nInput: n = 2\nOutput: 91\n\ndef largest_number(n):\n        p = 1\n        for i in range(0, n):\n            p = p * 10\n        p = p - 1"], [0.10558611944776874, 0.11904761904761904, 0.21506253477330686, "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function that returns a list that contains duplicated elements in two given lists.\nlist1 = [15, 9, 10, 56, 23, 78, 5, 4, 9]\nlist2 = [9, 4, 5, 36, 47, 26, 10, 45, 87]\n \nprint (Diff(list1, list2))\nhttps://www.geeksforgeeks.org/python-difference-of-two-lists"], [0.08620916933057549, 0.1111111111111111, 0.1931922571705032, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is to return the difference of two lists without repeating elements.\n\ndef Sort_Tuple(tup):  \n    return(sorted(tup, key = lambda x: float(x[1])))  \n    \nThe above code is to return a sorted tuple.\n\ndef rm_2(l):\n    return [i if i<2 else 2 for i in l]\nThe above code is to return the elements in a list less than"], [0.08836461748166886, 0.11627906976744186, 0.1280992590575516, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \nThe above code is a python function to find the smallest missing number from a sorted list of natural numbers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python program to find the list that are not common to both of the lists.\ndef matrix_multiply(A, B): \n    res = [] \n    m = len(A[0]) \n    n = len(B[0]) \n    C = [[0 for x in range(n)]  \n            for y in range(m)] \n    for i in range(m): \n        for j in range"], [0.11768816574150369, 0.13333333333333333, 0.16190101155353465, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function that gives the difference between elements of 2 sets.\ndef linearSearch(arr,key):\n\tfor i in arr:\n\t\tif key==i:\n\t\t\tprint(\"Element found at index {} of array\".format(arr.index(i)))\n\t\t\treturn\n\t\t\t\n\tprint(\"Not found\")\n\treturn\nThe above code is a python function that finds an element in an array using linear search, if"], [0.10656158743655936, 0.11904761904761904, 0.11393917713290243, "def count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function that takes two lists as its arguments and returns all the elements that are distinct in either of them.\ndef reverse_words(test_string):\n  ch_list = []\n  word_list = test_string.split()\n  for ch in test_string:\n    ch_list.append(ch)\n  ch_list.reverse()\n  update_string = ''.join(ch_list)\n  update_string"], [0.08184860158618872, 0.09090909090909091, 0.1335548079288196, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find out the items in two lists that were not present in the other list as a single list\ndef dict_check(object):\n    return isinstance(object, dict)\n    \n    \nThe above function is used for validating an object before using it. if it is a dictionary, it does not do anything. If it is not a dictionary, then it raises an error.\nfrom math import inf\ndef count_values(data_dict"], [0.14182842219182829, 0.21875, 0.21729739841124826, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes in two list and returns the difference between two lists which is the uncommon elements in both the lists.\n def lcm(n1,n2):\n    return int((n1*n2)/gcd(n1,n2))\n\ndef gcd(a,b):\n    if(b==0):\n        return a\n    else:\n        return gcd(b,a%b)\n\ndef convert("], [0.09965183850253495, 0.15151515151515152, 0.12848782962510497, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to remove common elements from the sorted order from two sorted lists of same size.\nskanda = ['sss','www','eee','rrr','ttt','yyy','ppp','uuu','iii','ooo','lll','ddd','fff','ccc','kkk','jjj']\n\n# li = sorted(skanda)\n# print(li) \n\nskanda_dict = {}             #dictionary\nsk"], [0.09600360219220418, 0.14634146341463414, 0.19131272027061902, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the edit distance between two lists \n\ndef generate_points(n):\n    if (isinstance(n,int)):\n        return list(zip(([random.random() for i in range(n)]),([random.random() for i in range(n)])))\n    else:\n        return []\nThe above code is a function to generate pairs of random numbers for a given number n.\ndef InsideOutside(p"], [0.11923051525459649, 0.21212121212121213, 0.44913365032457697, "def is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the symmetric difference of two lists. https://www.geeksforgeeks.org/python-symmetric-difference-between-two-lists/\ndef numbers_to_strings(argument):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n    }\n    return switcher.get(argument)\n \n!pip3 install git+"], [0.1473578524927237, 0.17391304347826086, 0.29416378377448654, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between two lists.\ndef is_prime(n):\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return 0\n                break\n        else:\n            return 1\n    else:\n        return 0\n    \nThe above code is a function to check if the number is prime or not!\nWriting the main code.\n\nWe"], [0.7040417198917038, 0.6923076923076923, 0.6694188517266485, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to get the difference between two sorted lists."], [0.08015704244410785, 0.10256410256410256, 0.23365355817804245, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes in two lists as parameters and gives a set with all the elements of lists combined. Then the function gives the other set that has all the element from the first set without the common elements. Time complexity: O(n+m). Space complexity: O(n+m).\n"], [0.1197220073240984, 0.23529411764705882, 0.2038037084651848, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that returns the differences of 2 lists.\n"], [0.09962224067951468, 0.15, 0.1569608148233304, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\ndef magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\nThe above code is a function to calculate whether the matrix is a magic square.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference of two sequences of list with equivalent elements. \ndef get_coinjam(length, how_many):\n    counter = 0;\n    jam = []\n    used =[]\n    for nottrue in range(0,how_many):\n        base2 =[]\n        base3 = []\n        base4 = []\n        base5=[]\n        base6=[]\n        base7=[]\n        base"], [0.09657041935394749, 0.12121212121212122, 0.08669924537474871, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to create a list differenciating the elements of list1 from the list2.\n\ndef Diff(li1,li2):\n    return (list(set(li1)-set(li2)) + list(set(li2)-set(li1)))\ndef getMissingNo(A):\n\tn = len(A)\n\ttotal = (n+1)*(n+2)/2\n\tsum_of_A ="], [0.07302802770431462, 0.03636363636363636, 0.03947016454767304, "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " snippet will print diff of 2 lists.In case of dictionaries, as dictionary , 2 keys are same, if values are different then the output will be: keys returned as a tuple\n\nmethod that prints first k non-repeating characters \nstring ch = \"222321223323123\"; \nint q = 4; // required string  \nint count_char[256];  \nint result[1000]; \nint i, min, heap_size;"], [0.10526990943581242, 0.17142857142857143, 0.20722012158516828, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to generate the difference of the two lists\ndef merge_the_tools(string, k):\n    substring_list =[]\n    i = 0\n    while i < len(string):\n        substring_list.append(string[i:i+k])\n        i+=k\n    for string_element in substring_list:\n        string_l = list(string_element)\n        j = 0\n        while"], [0.09949163619433707, 0.15384615384615385, 0.10903214459424534, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the differnce of two sets: li1= set([1,2,3,4]) & li2= set([3,4,5,6])\nThe difference set will be set([1,2,5,6]), and \"set(li1)-set(li2)\" will extract values from 'li1' where 'li1' intersect\nwith 'li2' (disregard 'li2'). set([5"], [0.09029218729671627, 0.1, 0.15627676597153767, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the list difference.\n#4.first n even natural numbers.ex:first n even natural numbers=x*x where x>0 and x is an interger.\nn=int(input(\"enter any number\"))\nb=1\nwhile b>0:\n    if b<=n:\n        print(b*b)\n    b=b+1\n#5.enter the string.calculate the lengh"], [0.0898817511545755, 0.11627906976744186, 0.14508368683042397, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function called 'Diff'. This function takes in two lists and returns the combined differences of the two lists.\n\ndef checkOrder(inorder, postorder):\n    if postorder and inorder:\n        if not inorder [-1] in [postorder[0]] + postorder[-(len(postorder) - 1):]:\n            return False\n    return True and (inorder[:-1] == checkOrder(inorder[:-1"], [0.18221792732461262, 0.25, 0.12363700583920623, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between two lists.\ndef delete_missing_words(l1, l2):\n    if len(l2) < len(l1):\n        for each in l1:\n            if each not in l2:\n                l1.remove(each)\n            else:\n                continue\n    elif len(l1) < len(l2):\n        for each in l2:\n            if each"], [0.08108445282045154, 0.08108108108108109, 0.09641531900052872, "def triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is to find a list from another list.\n\nThe set() method converts the immutable tuple into a mutable set.\neg: \np = [1,1,1,1,1,1,1,2,2,2,2,2,2,2,2]\n\nq = set(p)\nprint(q)\n\n['\\n 1, 1, 1', '\\n 1, 1, 1', '\\n"], [0.08620916933057549, 0.11363636363636363, 0.2231097030555639, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the different elements in the given two list.\nOr, Find the List Difference.\n\ndef next_permuatation():\n\n    res = (1,2,3)\n    new_res = [int(i) for i in res]\n    new_res = new_res.sort()\n    res = new_res\n    \nThe above code is a function to find the next permutation on sorting certain numbers such as"], [0.08745200290121356, 0.11363636363636363, 0.170293275093441, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given amount has no profit and no loss\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to add two given list of ints without adding same element of the lists\ndef reverse(s): \n  str = \"\" \n  for i in s: \n    str = i + str\n  return str\n  \nThe above code is a function for reversing the given string\nimport collections\nn=input()\ns=map(str,raw_input().split())\nn1=collections.Counter(s)\nv="], [0.13868120665716832, 0.15217391304347827, 0.1465563992282519, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a python function returns the difference between two list.\ndef convert(s, numRows):\n        if numRows == 1:\n            return s\n\n        direction, res = 1, [\"\" for i in range(numRows)]\n        for i, c in enumerate(s):\n            res[numRows - direction-1 + direction * (i % (2 * numRows - 2))] += c\n            if (i"], [0.08702189001836953, 0.13157894736842105, 0.18609880311199853, "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find out the common thing in both of the lists.\n\ndef diff(li1, li2):\n    return list({i: None for i in li1} & set(li2))\t\nThe above code is a function to find out the common thing in both of the sets.\ndef dupRec(N):\n    N=list(N)\n    N.sort()\n    for i in range(0,len(N"], [0.169156483085435, 0.1951219512195122, 0.17584420731448827, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to check the difference between two lists.\n\nfrom itertools import permutations\n\ndef get_permutations(sequence):\n    print(sequence)\n    is_iterable = False\n\n    if isinstance(sequence, (tuple, list, set, dict)):\n        is_iterable = True # found iterable that can be converted to list\n\n        if isinstance(sequence, dict):\n            sequence = sequence.keys()"], [0.13347533447436882, 0.15789473684210525, 0.21528271546341887, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is used to find the difference of 2 lists of given input.\n"], [0.09002696599846008, 0.14634146341463414, 0.14976412321512816, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " list of the common elements and different elements between two list in python\ndef findUnique(lst): \n    unique = []\n    for x in lst: \n        if x not in unique: unique.append(x)\n    for x in unique: \n        print(x,end =\" \")\n            \nThe above code finds a unique element from the list using hash function in python  \n\n"], [0.11702927616168173, 0.15217391304347827, 0.2963480208746904, "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between two given sets of list.\n\ndef gcd(x, y):\n    while (y):\n        (x, y) = (y, x % y)\n    return x\nThe above code is a function to find the gcd of two numbers used to calculate the number of elements of a anagram substring of the main string.\ndef search_bin(arr, l, r, x):\n \n"], [0.11613141266144308, 0.25806451612903225, 0.2806475352878357, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " resolves the difference between the two given lists.\n\ndef change_innermost_character(str):\n return str[0:str.find('e')]+'a'\nThe above code is a function to replace the innermost character of the given string.\n\ndef reverse(str):\n return str[::-1]\nThe above code is a function to reverse the given string.\n\ndef stripTspecialCharacters(string):\n    char_to_"], [0.08620916933057549, 0.10204081632653061, 0.14475050121394395, "import re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that returns the difference of two lists as a list, i.e., unique element of list 2.\nimport tkinter\nfrom tkinter import filedialog\nimport os\npath = tk.filedialog.askdirectory() \nos.listdir(path)\nThe above code will display the directories in specified path and will store them in a list.\ndef queensAttack(n, k, r_q, c_q"], [0.07984733261465657, 0.08888888888888889, 0.09952756939154918, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\ndef is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes in two arrays and returns the element/s which is/are not present in the second array.\nArrays in Python have reverse() method but does not work on Python 3\ndef ReverseArray(arr, start, end): \n\twhile(start<end): \n\t\ttemp = arr[start] \n\t\tarr[start] = arr[end] \n\t\tarr[end] = temp \n\t\tstart"], [0.09138704231832076, 0.08163265306122448, 0.2217013828203967, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " will make two sets one with list li1 and another with list li2 and subtract common elements from the said two sets. This will give the values of elements which are not similar between the two lists.\n\ndef intersection(a, b):\n        return list(set(a) & set(b))\nThe above code gives intersection between two lists.\n\ndef Union(a, b):\n    return list(set(a) | set(b))\nThe"], [0.1740045556834312, 0.21621621621621623, 0.1515615651529775, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between two lists.\n\ndef LongestSubstring(string):\n\n    sub_str = \"\"\n    str_len = 0\n    if type(string) != str:\n        return \"Not a string\"\n\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            str_len_temp = 0\n            if string[i] != string"], [0.1953915156442464, 0.23529411764705882, 0.1497793423478137, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find the difference between two lists.\nimport os\ndir = \"C:\\\\Users\\\\Lenovo\\\\Documents\\\\col\"\nfile = os.listdir(dir)\ndef fileCheck(dir, file):\n    return [os.path.join(dir,f) for f in file  if  f.endswith('.docx')] \nfileCheck(dir,file)\nimport pandas as pd\nimport"], [0.20477808637902845, 0.2571428571428571, 0.3930178320542781, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to get the difference between two lists.\ndef Diff(li1, li2):\n    return (list(set(li1) - set(li2)))\nThe above code is a function to determine the list difference between two lists.\nGiven a list, remove the given number and return the list.\ndef remove(numbers, c):\n    numbers.pop(c)\n    return numbers\nThe above code is a function to remove a"], [0.19515854919969497, 0.14705882352941177, 0.15645037889337665, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " shows the difference between two lists.\n\nimport itertools\n\ndef common_member(a, b):\n    a_set = set(a)\n    b_set = set(b)\n    \n    if len(a_set.intersection(b_set)) > 0:\n        return(a_set.intersection(b_set))  \n    else:\n        return(\"No common elements\")\n\nThe above code shows"], [0.10107106655011486, 0.13333333333333333, 0.2459332366262097, "def lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to calculate lists difference. Difference will be presented as a list of items which occur in the first list but not in the second.\n\n"], [0.10795475926968676, 0.12727272727272726, 0.3311591821394837, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function that takes in two lists and returns a list of the symmetric differences between the lists. Here, the difference between two elements can be the same element. For example, in [1,2,3] - [1,2,2] the answer is [3,2]. If the lists are identical, the return value would be an empty list. We also assume that both lists are unique and do not contain duplicate values.\n'''"], [0.09340508544726508, 0.08695652173913043, 0.043109987479869535, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " creates a new list and adds the elements that are not in a specified list.\n"], [0.11923051525459649, 0.21875, 0.2022897891626466, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to find set difference between any two arrays in python\n\ndef threesum(a):\n    res=[]\n    a.sort()\n    for i in range(len(a)):\n        l=i+1\n        r=len(a)-1\n        while l<r:\n            target=a[i]+a[l]+a[r]\n            if target==0:\n                res.append([a["], [0.10022107477626317, 0.1794871794871795, 0.17982482867527633, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " is a function to return the set difference of two lists.\n\ndef reverse(str):\n    reversestr=\"\"\n    for char in str:\n         reversestr = char+reversestr\n    return reverstr\nThe above code is a function that returns reverse of a string.\n\ndef reverseword(word):\n    reverseste = list()\n    for words in sentence.split():\n          reverseste.append(words[::-1"], [0.07659528899941712, 0.04878048780487805, 0.04361614015192114, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\nimport re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'.\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code", " will return the sequence of different elements in both the lists.\nclass Pokemon(object):\n  def __init__(self, name, type1, type2=None):\n    self.name = name\n    self.type1 = type1\n    self.type2 = type2\n  def __str__(self):\n    if self.type2 == None:\n        return self.name + ':\\n  ' +str(self.type"]]}
