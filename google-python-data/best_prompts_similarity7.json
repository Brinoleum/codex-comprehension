{"prompt": {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 118, "prompt": "Write a function to convert a string to a list of strings split on the space character.", "code": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst", "test_imports": [], "test_list": ["assert string_to_list(\"python programming\")==['python','programming']", "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']", "assert string_to_list(\"write a program\")==['write','a','program']"]}, "queries": [[0.10690089085037437, 0.1111111111111111, 0.179962355592527, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\nThe above code is a function to subtract two lists element-wise.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to split a string into different word to form a list.\ndef popular_words(text, words):\n     s = set(text.lower().split())\n     d = {}\n     for word in words :\n         if word in s :\n            d[word] = s.count(word)\n         else:\n            d[word] = 0\n     return d\nThe above code is a python program to count each word in a"], [0.1573905590398786, 0.16666666666666666, 0.2781229690449519, "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function that converts a string into a list.\n\ndef list_to_string(list):\n    output=\"\"\n    for x in list:\n        output=output+x\n    return output\nThe above code is a function that converts a string into a list.\n\ndef list_to_text(list): \n    string = ' '.join(list) \n    return string \nThe above code is a function to convert a list into"], [0.08739435988441797, 0.09259259259259259, 0.18720402477914327, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " converts string to python list.\n\nYou assigned each elements of list to position first, second and third. You get printed second element of list.\ndef sum_of_list(lst): \n    total = 0\n    for ele in range(0, len(lst)): \n         total = total + lst[ele]   \n    return total\n\nYou can document your function just like how you write any other functions.\ndef subsethel"], [0.11292167088085464, 0.13636363636363635, 0.1551204870413763, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\nThe above code is a function to find the minimum value in a given heterogeneous list.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " converts a given string to a heterogeneous list\ndef l1_norm(vector1, vector2): \n    vector_sum = sum([ v1 * v2 for v1,v2 in zip(vector1, vector2)])\n    \n    return vector_sum\nThe above code finds the dot product of two given vectors.\ndef list_union(list1, list2):  \n    final_list = list(set(list1)"], [0.11725210365382144, 0.25, 0.5112444861006622, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a python function to convert strings (separated by space) to a list, \nwhere each element of the list is one of the words from the string; i.e. in lieu of each space in the string, \nthere is a pointer to an element of the list that the string was split into.\n\ndef count_digits(str1): \n    lst1 = list(str1.split(' ')) \n    lst2"], [0.11624743919939363, 0.16666666666666666, 0.2577951704803293, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to split a string into its words.\ndef shorting_list(supermarket_list):\n supermarket_list.sort()\n return supermarket_list\nThe above code is a function to sort a given list.\n\ndef liner_search(numberlist, n):\n for num in numberlist:\n  if n == num:\n  return \"Number is on the list\"\n return \"Number is not on the list\"\nThe above code is"], [0.17989428672374042, 0.25, 0.22975529106180786, "def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function that separates each string within a list into a list of its characters within the list.\n\"\"\""], [0.15513925254089536, 0.1568627450980392, 0.23652941207077513, "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\nThe above code is a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to convert a given string into a list of words.\nFrom list to binary search (an efficient search algorithm, used for example for lists of names or teachers in a university course)\n  #find the index of an element in a list\n  nums = xxx\n  low = 0\n  high = len(nums)-1\n  while low <= high: \n    mid = int((low+high)/2)\n    if nums"], [0.13523998607055573, 0.18604651162790697, 0.26968776398868005, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a python function to convert a given string into a list.\ndef index_by_value(lst, value):\n    for i in lst:\n        if i == value:\n            print(lst.index(i))\n    return -1\nThe above code is a python function to find the element index of first occurence of a value in a given list of numbers.\ndef is_preferred(units,unitlists):\n   "], [0.19170685728746079, 0.11627906976744186, 0.177816010274154, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a python function to convert a string to a list.\ndef dictionary_values(b):\n    d = {}\n    test = \"\"\n    for i in b:\n        if i != \":\":\n            test += i\n        else:\n            d[test] = \"\"\n            test = \"\"\n        d[test] = i\n    return d\nX = {\"Feb\" : 1, \"Jan\" : 31, \"Mar\" : 61"], [0.22925827794136583, 0.15, 0.36428432697488455, "def add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to convert a string to a list. It accepts a string and the output is a list.\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst"], [0.352060550162214, 0.22580645161290322, 0.1424247456395218, "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\n\ndef cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a python function to convert a string to a list of characters.\n\ndef insert_star_between_pairs(a_string):\n    if len(a_string) < 2:\n        return a_string\n    if a_string[0] == a_string[1]:\n        return a_string[0] + \"*\" + insert_star_between_pairs(a_string[1:len(a_string)"], [0.2056653635574215, 0.3684210526315789, 0.43340189538469726, "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to split of list of strings separated by \" \".\n\n"], [0.18277444985081623, 0.1875, 0.33707175908093084, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\nfrom math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to convert a string of text into a list of words (by splitting the string on spaces).\n\ndef list_to_tuple(liste): \n    return (*liste,)\nThe above code is a function to convert a list into a tuple.\nfrom types import GeneratorType\ndef gen_nums(begin, stop, step = 1, t = int): \n    if begin < stop and step >= 1: \n        while"], [0.10507048109763086, 0.16666666666666666, 0.21651141165595206, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a python program to convert the string to list where the string is a long string made by each word in it seperated bab space\ndef remove_vowels(word): \n    vowels = ('a', 'e', 'i', 'o', 'u','A','E','I','O','U')  \n    for x in word.lower(): \n        if x in vowels: \n            word = word.replace(x,"], [0.19282509179212398, 0.15789473684210525, 0.30767173327597225, "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function which is used to convert a string to a list.\ndef list_to_string(s): \n    str1 = \"\"\"\"\"\"\n    return (str1)\nThe above code is a function which is used to convert a list to a string.\ndef method_name():\n  nums = read_nums()\n  results = one_pass(nums)\n  print(\"Result: \" + str(len(results))"], [0.13531766774149395, 0.14285714285714285, 0.16930618788024843, "def Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength \nThe above code is a python function to find the length of the longest sublists.\n\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\nThe above code is a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to break up a string of words into a list of its component words.\n\"\"\"\n\n\n\"\"\"\ndef take_input():\n    info = input(\"Enter a Sentence: \")\n    print(\"Original Input : \", info)\n    print(\"\\n\")\n    print(\"Updated Input : \", capitialize(info))\n    return\n\n\ndef capitialize(string):\n    x = string_to_list(string)\n   "], [0.10496684167092521, 0.1956521739130435, 0.4185081891220343, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a python function to convert string to list of tokens.\n\nWrite a Python function to find all the Strong numbers in a given list of numbers.\nWrite a Python function to find the second smallest number in a given list of numbers.\nWrite a Python function to rearrange positive and negative numbers in a given array using Heap queue algorithm.\nWrite a Python function that takes a list and returns a new list with unique elements of the first list.\nWrite a Python function that"], [0.2201414617855278, 0.13636363636363635, 0.2968267116530078, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to convert a string to a list.\n\ndef create_dict(names, scores): \n    scores_dict = dict(zip(names, scores)) \n    return scores_dict\nThe above code is a function to create a dictionary of associated scores.\n\ndef count_letters(string):\n    # A. There are \"bob\" repetitions in string\n    # A.\n    bobs = [i for i in range"], [0.08992471131249077, 0.1111111111111111, 0.20380187803266117, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is pivot application of list to access the string.\n\n7.class \nclass Circle(object):\n  def draw(self):\n    print (\"drawing a circle\")\nThe above code is a class to implement Circle draws.\n\nexp = Circle()\n# exp.draw() call the function.\n\nMath_add = {'E':10,'N':14}\n1.English_marks = 95\n2.Nepali_marks ="], [0.1796545228699033, 0.1794871794871795, 0.3349034143862322, "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to convert a given string to list of words.\n\ndef tuple_to_str(test_tup):\n    result = \"\"\n    for ele in test_tup:\n        result += (str(ele) + \" \")\n    return result\nThe above code is a function to convert a given tuple to a string.\ndef sort_list_of_tuples(list_tuples):\n    list_tuples.sort"], [0.11365529908997905, 0.15789473684210525, 0.30035963997680515, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is to convert the given string into a list.\ndef list_to_string(lst): \n    string = str(lst) \n    return string\nThe above code is to convert a given list into a string s.\n  \ndef compress_a_word(w): \n    string = \"\" \n    for x in w:\n        if (x not in string):\n            string = string + x \n    return string  "], [0.2778452955452103, 0.12903225806451613, 0.2455639459713106, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is to convert a string to a list.\ndef replace_occurances(string1,string2):\n  s=\"string1\"\n  s = s.replace('String1', 'String2')\n  return s\nThe above code replaces occurances in a string.\n"], [0.0933635027034907, 0.13114754098360656, 0.26780272552235007, "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\n\ndef square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is one of the solutions to the problem on Arrays.\nGiven two lists of integers Aand B. Write a program to merge them into a single sorted list that contains every item\nfrom list A and B in ascending order.\ndef arrays_merge(a, b):\n    return (a + b).sort()\nThe code above is a python function that joins two arrays and returns as sorted list.\ndef fibonacci(n): \n    first ="], [0.13080308567400561, 0.175, 0.27761667053488603, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to make a list from a string of words.\nimport emoji\ndef text_to_emoji()\n    text=\"hello\"\n    return print(emoji.emojize(text,use_aliases=True))\nThe above code is a function to print an emoji for the given word.\n\n3. \ndef isPalindrome():\n    string= input(\"Enter a string: \")\n    if(string==string"], [0.17590164300559888, 0.1702127659574468, 0.25262447863972104, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\nThe above code is a function to check whether a specified list is sorted or not.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to convert a specified string to a list. A string example is abc'sdsd'sdsd'// if we apply this function it will return ['abc', 'sdsd', 'sdsd'] just the list of specified string without any duplicate values.\nimport itertools\ndef combination_sum(lst, target):\n  result = []\n  temp = []\n  min_list = min(lst)\n  lst"], [0.14662283781007404, 0.2631578947368421, 0.4169292079310796, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a python function to convert string to list. geeksforgeeks.org/python-string-to-list-conversion/\n'''"], [0.1231748420269921, 0.08450704225352113, 0.1799623555925271, "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a python function to convert a string into a list.\n\n# Pandas\nGiven a dataframe in the given format, this python code does the following:\nchange_time unit to seconds\ncreate new boolean column for cancelled flights AKA Y for yes, N for no\ngroup by delay type: arrival or departure\ngraph each delay type according to month and group them together in one graph\nThis code is what I have written so far, however, it does not incorporate"], [0.10866176148914083, 0.0975609756097561, 0.14894204465359914, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\ndef pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\nThe above code is a function to sort a list of elements.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to split a string.\ndef find_tripple(a):\n    t = len(a)//3\n    d = {}\n    ret_lst = []\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    for i in d:\n        if d[i] > t:\n            ret_lst.append(i)\n    return ret_l"], [0.1750659544857403, 0.1282051282051282, 0.11340862074911703, "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is function to convert a string into a list.\ndef find_longest_word(words):\n    \ndef check(st): \n    st = st.lower() \n    lst1 = ['bhai', 'hai', 'bhi', 'hi', 'sab'] \n    for ele in lst1: \n        if ele in st: \n            return True\n        return False\n    \n    \ndef chk("], [0.15029877215476886, 0.12962962962962962, 0.2823491167898763, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to convert string of numbers to a list of numbers seperated with respect to spaces.\nConsider two domains and their lengths denoted by x and y respectively. The code written is shown below.\n\nT = int(input())\n\nfor _ in range(T):\n  first, second = input().split(' ')\n  x = len(first)\n  y = len(second)\n\n  if (x > y):\n    print"], [0.23246037750486465, 0.175, 0.30743511839813087, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a python function to convert a string to a list.\n\ndef check_prefix(listOfStr,selectedLen): \n    \n  \n    for i in listOfStr: \n        if (len(i) == selectedLen): \n            print(\"NOT a Prefix\") \n            return False\n    print(\"Prefix\") \n    return True\n\nThe above code is a python function to check a list of string whether they match a"], [0.16452664055856073, 0.10869565217391304, 0.2580718861990182, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " matches a string to a list. \n\ndef list_to_string(List):\n        return ' '.join(List)\nThe above code converts a string to a list and is done the opposite way around\n\ndef list_to_faces(faces_list, face_width, face_height):\n        frame_list = [] \n        for x, y, w, h  in faces_list:\n                face = np.zeros(("], [0.11541715936559942, 0.11764705882352941, 0.14073722696713606, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function which converts a string into list.\n\nstr =\"LLLLYYY YYNNNNNN\" \nprint(string_to_list(str)) \ndef item_subscript(list,n): \n    return list[n] \nlist = [\"Anand\", \"Jain\", \"male\", \"Python\"] \nprint(item_subscript(list,0)) \ndef count_str(str1): "], [0.2556951689060971, 0.3181818181818182, 0.3666812377846512, "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \nThe above code is a python function to find the length of the smallest list in a list of lists.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to split a string into a list of words in that very string.\n'''"], [0.16813256651332373, 0.12195121951219512, 0.15040435918560266, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a python function to convert a string into a list.\ndef max_frequency(l):  \n    unique = {i for i in l} \n    max_count = 0\n    for n in unique: \n        if(l.count(n) > max_count): \n            max_count = l.count(n) \n            max_item = n \n    return max_item,max_count\nThe above code"], [0.16139195937328674, 0.16666666666666666, 0.2087262640709473, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a python function to convert string (\"Geeks for Geeks\") to a list of string.\ndef oddPositionStringAdjust(str1): \n    str1 = list(str1) \n    str2 = [] \n    ssize = len(str1) \n    for i in range(0, ssize, 2):  \n        str2 += str1[i] \n    if (ssize % 2 == 1):  \n"], [0.09109559632977952, 0.07407407407407407, 0.05261089426504248, "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " takes in a string and returns a list where each element is a word from the string.\n\n# **Hash Set vs Hash Map:** Hash Set contains only keys and it does not store data. A Hash Map can contain keys, values, or both. Also, hash set is unordered where as a hash map is ordered.\n# \n"], [0.09676669196861866, 0.0975609756097561, 0.10295457027846298, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \nThe above code is a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " converts a specified string into a list or array as explained. https://www.geeksforgeeks.org/python-map-function/\n\nTime performance of dictionary worst: O(n Log n) and best: O(n) explanation: https://www.geeksforgeeks.org/time-complexity-various-methods-find-pythagorean-triplet-product-sum/\nTime complexity of list with just 5 items will be"], [0.20747987851417943, 0.1794871794871795, 0.3670242419563045, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to convert a given string to a list of words.\ndef list_to_string(lst):\n  string = \"\"\n  for ele in lst:\n    string += \"{}\".format(ele)\n  return string\nThe above code is a function to convert a given list to a string.\ndef common_finder(list1, list2):\n  res = []\n  for element1 in list1:\n   for element"], [0.09946778107430161, 0.13636363636363635, 0.29623874961246116, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " can be used to convert list of splitted elements from String to String.\n\n\ndef find_max_min(A):\n    B1=min(A)\n    B2=max(A)\n    return (B1,B2)\nThe above code can be used to find the maximum and minimum value of a given list from the question.\ndef rndom(x,y,n):\n    import numpy as np\n    array="], [0.10767084637653955, 0.09803921568627451, 0.12959278281689235, "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\n\ndef find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\nThe above code is a function to find kth element from the given two sorted arrays.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to find the words in a string and place it in a list.\n\n### Top Coder Reference\ndef BinarySearch(A,target,min,mid,max):\n  if min == max:\n      return min\n  else:\n      aMid = (min + max) / 2 # offset mid to an index\n\n      isFound = False\n\n      if A[mid] == midValue:\n          found = mid\n          return found\n"], [0.10480712896890852, 0.125, 0.09072137025569067, "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function that takes a string as input and then splits it along whitespaces, then returns the list of words.\n  \ndef zipString(str1,str2) : \n    X = min(len(str2), len(str1)) \n    res = \"\" \n    for i in range(X) :  \n        res += (str1[i] + str2[i]) \n    if (X == len(str"], [0.12638597329328735, 0.15384615384615385, 0.15040435918560266, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a python function to convert any sentence into a list of words.\n\ndef make_Dict(handle, lst):\n    blst = lst\n    lst = blst\n    j = []\n    i = 0\n    while (i < len(lst)):\n        j.append(lst[i].split(\":\"))\n        i += 1\n    i = 0\n    dict = {}\n    while (i <"], [0.1248483901098561, 0.14583333333333334, 0.21571140675407155, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function that inputs a string and returns a list of separated words in the string.\ndef list_of_number(number): \n    output_list = []\n    for i in range(0, 101): \n        if(i%number == 0): \n            output_list.append(i)\n    return output_list\nThe above code is a function to find all multiples of a number in a given range and outputs a list."], [0.11384202196420978, 0.15217391304347827, 0.20571030010720942, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to create a list from string with the help of blank spaces.\ndef generate_sentences(subjects,verbs,objects):\n    for subject in subjects:\n      for verb in verbs:\n        for objec in objects:\n          print(subject,verb,objec)\nThe above code is a function which returns the list of possible sentences from the lists of subjects, verbs and objects.\n\ndef is_palindrome():\n    s"], [0.18626064846523704, 0.1836734693877551, 0.2350965776900024, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to convert a string of words separated by space into a list of the words in that string.\n\nTesting 1\nfrom random import randint\nl = [randint(1, 10000) for i in range(10)]\nprint \"l = \", l\ndef median(l):\n  if any(l[i] < l[i+1] for i in range(len(l) - 1)) :\n    print l\n    return"], [0.16566500531283243, 0.15, 0.37708471718491904, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to convert string to the list.\ndef string_to_uppercase(string): \n    str2 = string.upper() \n    return (str2)\nThe above code is a function to convert a given string to uppercase letter.\n\ndef string_reverse(string):\n    rstr1 = ''\n    index = len(string)\n    while index > 0:\n        rstr1 += string[ index -"], [0.10345714776779726, 0.10416666666666667, 0.2151088389584597, "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a python method to convert string to list.\n\ndef occurrences(str1): \n\tdict = {} \n\tfor i in str1: \n\t\tdict[i] = dict.get(i, 0) + 1\n\treturn dict\nThe above code is a python function  which counts each character in a string only once.\n\ndef isPrime(n): \n\tif (n <= 1): \n\t\treturn False\n"], [0.18955535666282877, 0.19047619047619047, 0.19766164678000694, "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\nThe above code is a python function to remove odd numbers from a given list.\n\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\nThe above code is a function to find the maximum product subarray of the given array.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to convert a given string of space separated words into a list\ndef unsorted(string): \n    lst = string_to_list(string) \n    lst= sorted(lst, key=len) \n    lst=lst[::-1] \n    str=\" \"\n    for ele in lst:   \n        str+=ele+\" \" \n    return str \nThe above functions are an"], [0.4508511521025467, 0.42105263157894735, 0.39442037063211305, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to convert a string of space separated words into a list of words.\n"], [0.10642087039120547, 0.12727272727272726, 0.38333830297254146, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to convert the given string into a list.\nYou are given a string. The only operation allowed is to insert characters in the beginning of the string. How many minimum characters are needed to be inserted to make the string a palindrome string\n\nInput: \nThe first line of input contains an integer T denoting the number of test cases. The description of T test cases follows.\n The first line of each test case contains a string.\n\nOutput:"], [0.11613141266144308, 0.14634146341463414, 0.1133927659692939, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\ndef is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function that splits a user's string separated by space and returns it as a list of words.\n'''\nstopwords = open('stopwords.txt', 'r').read().strip().split()\nwordcount = {}\nfor a in stopwords:\n    if a.count(a) > 1:\n        print(a)\nprint('\\n')\nfor a in stopwords:\n    if a.count(a) > 1:"], [0.26639827403919136, 0.1590909090909091, 0.2985312649580305, "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\nThe above code is a function to check whether it follows the sequence given in the patterns array.\n\ndef find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\nThe above code is a function to check if a string is present as a substring in a given list of string values.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a function to convert a string to a list of characers\ndef string_in_list_string(strings,astr):\n    lists = string_to_list(strings)  \n    if astr not in lists:\n        return False\n    return True\nThe above code is a function to check if value is present in a given list, note it returns true or false.\n\ndef does_string_have_alphabets(amsg):"], [0.10118856975640021, 0.12962962962962962, 0.21393416597772805, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)\nThe above code is Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code", " is a python program to convert a given string of space seperated numbers into a list.\ndef function(var):\n    name = var\n    return(name)\nThe above code is a Python function that passes a string enclosed in a single quote mark as an argument.\nCreate a function that takes a string and returns it as an integer .\ndef function(var: int) -> int:\n    return var\nThe above code is a python program that takes in"]]}
