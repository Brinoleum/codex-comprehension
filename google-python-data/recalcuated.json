{"prompt": {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 568, "prompt": "Write a function to create a list of N empty dictionaries.", "code": "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list", "test_imports": [], "test_list": ["assert empty_list(5)==[{},{},{},{},{}]", "assert empty_list(6)==[{},{},{},{},{},{}]", "assert empty_list(7)==[{},{},{},{},{},{},{}]"]}, "queries": [[0.06691862854689244, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\ndef even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \nThe above code is a function to remove uneven elements in the nested mixed tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate an empty list of dict.\n\ndef array_multi(tuple1, tuple2):\n  if len(tuple1) != len(tuple2):\n    return None\n  base = 1\n  for i in range(0, len(tuple2)):\n    base *= tuple2[i]\n  res = product(tuple1) / base\n  return (res) \nThe above code"], [0.07395197238993882, "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of empty dict of length = length \n\n"], [0.07238766533112641, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to return a list of empty dictionaries.\n"], [0.06624044324925912, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \nThe above code is a python function to count the number of pairs whose xor value is odd.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python funciton to create a list of length |n| whose each element is empty data object / dictionary.\ndef count(s,s_substr): \n    res = 0\n    for i in range(len(s)-len(s_substr)+1): \n        if (s[i:len(s_substr)+i] == s_substr \n            return res \n        res += 1\n    return -"], [0.06747891981527343, "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\n\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\nThe above code is a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return  {} for the corresponding length. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-10.php\n\n'''"], [0.06671123662070268, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to fill the empty list with dictionaries based on the given length.\ndef concat_lists(lst1, lst2):\n  if len(lst1) > len(lst2):\n    lst1[len(lst2) :] = []\n  else:\n    lst2[len(lst1) :] = []\n    \n  res = lst1 + lst2\n "], [0.06658720349369104, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries.\n'''\ndef sort_nested_list(list1):\n    list1.sort(key = len)\n    return list1\nlist1=read()\nlist2=replace_o(list1)\nem=empty_list(len(list2))\nmax=0\nlist3=merge_list(list2)\nmod=len_log(list2)\n"], [0.07449537625589495, "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\nThe above code is a function to return two words from a list of words starting with letter 'p'.\n\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\nThe above code is a function to find the median of two sorted lists of same size.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return a list of dictionaries."], [0.06609453245758501, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\ndef count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of dictionaries with the given length.\ncredit_history = [{'borrower':BooleanVar(),'collateral':StringVar(),'activeLoan':BooleanVar()},{'borrower':BooleanVar(),'collateral':StringVar(),'activeLoan':BooleanVar()},{'borrower':BooleanVar(),'collateral':StringVar(),'activeLoan':BooleanVar()}]\nt list"], [0.06727156730956416, "def new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a empty list.\n''' \n\ndef func():\n  \n  # Variables\n  test_list = [1, 2, 3, 4, 5]\n  test_str = \"Nikhil\"\n  K = 5 \n  test_tup = tuple(test_list) \n  \n  # Checks K\n  res = False\n  for ele in test_tup:\n    if ele"], [0.06676255748248079, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create empty list of given length.\n\ndef reverse_string(user_string):\n  new_string = \"\".join(reversed(user_string))\n  return new_string\n\n\nThe above code is a python function to reverse a given string\n"], [0.0662737919352425, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create list with empty \"{}\" objects.\n### ===> ###\nclass Course: \n  def __init__(self, courses): \n    self.courses = courses \n    \n  def __repr__(self):\n    return str(self.courses)\n    \n  def __str__(self):\n    return str(self.courses)\n\na=Course([34,12,45,\""], [0.06675424127980197, "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\nThe above code is a function to sum all amicable numbers from 1 to a specified number.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of dictionaries of equal length to input.\ndef capitalize(word):\n  capitals = [\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n  return \"\".join([i for i in word if i not in capitals])\n\nstring = 'hoUsellllllllllllllllllllllllllllllllllllllllyMyGOOOOdOne'\n\nprint(\"Original: \", string)"], [0.06651408719359682, "def multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return an empty list of length N (given as input). The function should return a list of empty dictionaries. For example, an input of 0 will return an output of [], 2 will return [{}, {}].\nl = [1,2,3,4,5]\nl.reverse()\nl\ndef multiply_elements(test_tup):\n  res = tuple([i * j for i, j in zip(test"], [0.06581659591619861, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries of a specified length.\n\ndef different_elements(test_list):\n  res = set([num for nums in test_list for num in nums])\n  return len(res)\nThe above code is a function to get the total number of different elements in a particular list that has been nested data structure.\n\nimport pprint\ndef nested_enumerate(test_list):\n"], [0.06622740952642267, "def min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " will generate the empty list of given length with dictonaries within it.\n\n\ndef get_info(n):\n    return \"#{}\".format(n)\n# handle an error\ntry:\n  get_info(5)\nexcept named_error:\n  print(named_error.__name__)\ndef call_twice(func, *args, **kwargs):\n    function_result = func(*args, **kwargs)"], [0.06610587174986289, "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list with length 'length' filled with empty dictionaries.\ndef square_map(numbers):\n square_list_lambda = map(lambda x: x*x, numbers)\n Rever_number = list(square_list_lambda)\n Rearrenged_number = [Rever_number[::-1]]\n return Rearrenged_number\ndef square_map(numbers):\nreturn list(map"], [0.0662737919352425, "def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a list comprehension to create a list of empty dictionaries.\ndef reverse_str(str):\n    str.replace(\".\", \" .\")\n    str.replace(\"\\n\", \"\\n\\r\")\n\n    new_str = []\n    length = len(str)\n    for i in range(length - 1, -1, -1):\n        new_str.append(str[i])\n\n    return \"\".join(new_str"], [0.06610018480055735, "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\nThe above code is a python function to reverse only the vowels of a given string (where y is not a vowel).\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " gives a list of empty dictionaries based on the length of the input.\ndef empty_tuple(length):\n empty_tuple = ([0]*length)\n return empty_tuple\ndef remove_duplicates_wrapper(*args):\n remove_duplicates = json.dumps(args)\n remove_duplicates = {json.dumps(ele):i for i, ele in enumerate(args)}\n return tuple(remove"], [0.06751421380844262, "def nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to initialize a list of dictionaries.\n\ndef find_sum(nums):\n return sum(map(int,str(nums)))\nThe above code is a function to add the digits of a number.\n\"\"\""], [0.06638845513994701, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns a list of dictionaries with empty dictionary.\ndef merge_dicts(dict1, dict2):\n new_dict = {}\n new_dict.update(dict1)\n new_dict.update(dict2)\n return new_dict\nThe above code is a function to merge two dictionaries into a single dictionary.\n"], [0.06606677876239282, "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a Python function that creates a list of dictionaries of length.\n\ndef extract_number(number): \n  if type(number) == str: \n   return \"Sorry, wrong input!\" \n  every_num = str(number)[:]      \n  numbers = []\n  for loop in range(0,len(str(number))):\n   num = every_num[:1]  \n   numbers.append(num)                   "], [0.06706869760325693, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to return an empty list of a given length.\nimport numpy as np\nmatrix = np.array([[[2,-2,3], [5,-6,7], [8,9,3]],\n[[4,6,3], [7,4,1], [6,7,3]],\n[[8,9,3], [9,9,1],[1,1,1]]])\nmatrix"], [0.0661407386372683, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return a list of empty dictionaries.\n    \"\"\"\n    @@explanation = collapse_and_filter(@@explanation.split(\"\\n\"),40)\n    erb :'api'\n  end\n\n  get '/problems' do\n    problems = SimilarProblem.all\n    problems.map!{|problem| Problem.find_by_id(problem.problem_from) }\n    similar_problems ="], [0.06602406065241678, "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " returns an empty list.\ndef is_balanced_parentheses(exp):\n    open_parentheses = \"{[(\"\n    close_parentheses = \"}])\"\n    maping_parentheses = dict(zip(open_parentheses,close_parentheses))\n    stack = []\n    for char in exp:\n        if char in open_parentheses:\n            stack.append(maping_parentheses[char])\n        elif"], [0.06606677876239282, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a program to generate a list of empty dictionaries. \n########## Sample Solution ##########\ndef generate(num):\n    empty_list=[{} for _ in range(num)]\n    return empty_list\n    \n    \n    \n    \n    \n    \nimport random\ndef generate(num):\n    empty_list = []    \n    for i in range(num):\n        chars = 'Q[]#$@#$%&%"], [0.06601886088712212, "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\nThe above code is a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a list comprehension to create a list of dictionaries with given length.\nclass Animal():\n  pass\nclass Animal():\n  def __init__(self, **kwargs):\n    self._attributes = kwargs\ndef limbs(animal):\n  attributes = animal.get_attributes()\n  return attributes.get('limbs', 0)\nclass Biped(Animal):\n  def __init__(self, **kwargs):\n"], [0.06659384955124292, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to return an empty list of a given length.\n\ndef arr_session_temps(session_temp, date_time, sensor_numbers):\n    import math\n    session_temp['day_time'] = [str(str(i)).split(' ')[1] for i in date_time] \n    session_temp['sensor ' + sensor_numbers[0]] = [None for i in range(len"], [0.06608891440056691, "def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\n\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \nThe above code is a python function to find the sum of xor of all pairs of numbers in the given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of updateble dictionaries of desired length.\ndef square_list(squares=[]): \n    length = len(squares)\n    for i in range(length):\n     squares[i] = squares[i] * squares[i]\n    return\ndef main():\n    squares = [50,70,20]\n    squares = empty_list(len(squares))\n    square_list"], [0.06608891440056691, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to produce a list of empty dictionary of length n.\ndef word_list(list):\n\n    word_list = [word.lower() for word in list]\n    word_list = dict.fromkeys(word_list, 0)\n    for word in word_list:\n        word_list[word] += 1\n\n    word_list = word_list.items()\n\n    word_list.sort()\n\n       \n    return"], [0.06630128701909721, "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \nThe above code is a python function to set all even bits of a given number.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to find the list of dictionaries as output.\ndef dictionary_info_join(Dict1, Dict2):\n dict = {} \nfor j in range(len(Dict1)): \n dict.update(Dict1[j]) \nfor j in range(len(Dict2)): \n dict.update(Dict2[j]) \n return dict\n The above code is the python function to"], [0.06600855166483123, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to initialize list with empty dictionary/object/map object wherever required.\n\ndef random_str(str_len, choice_from):\n my_str = []\n for i in range(str_len):\n my_str.append(choice_from)\n random.shuffle(my_str)\n return ''.join(my_str)\nThe above code is a function to generate random strings\n\ndef binary_range(start,"], [0.06633672634440346, "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " can be used to generate empty list with given length.\ndef find_week_num(predts): \ninitial_date = dt.datetime(2020, 1, 6)\npredts = initial_date + dt.timedelta(days=predts)\nweek = [\"Ma, Tu, We, Th, Fr, Sa, Su\".split(', ')[predts.weekday()]]\nreturn week\nThe above code is the"], [0.0659070910477931, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return a list of empty dictionaries, each empty dictionary for a character.\ndef dec_binary(in_string):\n    temp_string = in_string.replace('.','')\n    temp_list = [temp_string[count:] for count, ele in \n                  enumerate(temp_string)]\n    for count, ele in enumerate(temp_list):\n        print(count, ele)\n    binary = []"], [0.06632240438937351, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\ndef set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a Python function that creates an empty list. \n\ndef word_count(a_str): \n    count_dict = {} \n    for w in a_str.split(): \n        count_dict[w] = count_dict.get(w, 0) + 1 \n    return count_dict \nThe above code is Python function that counts the words in a given string. \n"], [0.06615866649344203, "import re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that gives a list of empty dictionarys.\ndef sort_dict(some_dict):\n sort_dict = sorted(some_dict.items(), key=lambda x: x[0])\n return sort_dict\nThe above code is a function that sorts empth dictionary by keys.\ndef push_pop_seq(my_list, last_elemnt=True):\n    for idx in range(0, len(my_"], [0.0662670330584313, "def is_Diff(n): \n    return (n % 11 == 0) \nThe above code is a python function to find whether a number is divisible by 11.\n\ndef multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " initialises a list of dictionaries based on the length that is passed in.\ndef average_generator(L):\n  average_generator = (sum(L[:i+1]) / (i+1) for i in range(len(L)))\n  return list(average_generator)\nThe above code implements a generator to calculate the average of an input list.\n"], [0.066003441677564, "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \nThe above code is a function to find the maximum difference between available pairs in the given tuple list.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries of the specified length.\n\ndef remove_spaces(text):\n  return \"\".join(text.split())\nThe above code is a function to remove whitespace characters from string.\n\ndef find_file(path):\n  if String(path).endsWith('.py'):\n    return os.path.basename(path)\n  else: lst_files = os.list"], [0.06601886088712212, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\nfrom operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " generates an empty list of the given \u200blength.\nimport re \ndef first_word(text):\n  first_word = re.search(r\"[A-Za-z']+\",text).group()\n  return first_word\nThe above code creates a regular expression which return the first alphanumeric word of an input string.\ndef regex_is_punctuation(text):\n    pattern1 = '[!??]'\n    pattern2"], [0.06630128701909721, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create an empty sublist of given length.\n\ndef twoOPT(input_list, d): \n  \n  n = len(input_list)\n  for i in range(n-2): \n      for j in range(i+2, n): \n        if (input_list[i] + input_list[j] == d): \n            return True\n  return False\nThe above code"], [0.06663338637452507, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " returns empty list of specified length for each execution.\ndef remove_duplicate(param):\n d = []\n for i in param:\n  if i not in d:\n    d.append(i)\n return d\nThe above code in python removes the duplicate elements from the input list\n\n\"\"\""], [0.0666814483061571, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function which generates a list of empty dictionaries of length length.\n\ndef list_comprehension(input_list):\n return list(input_list[index] for index in range(1, len(input_list), 2))\nThe above code is a list comprehension.\n\"\"\""], [0.0660777798827054, "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " iterates a list of empty dictionary 'n' number of times. https://www.geeksforgeeks.org/python-program-to-create-a-list-of-empty-dictionary/\n\ndef add_value_in_a_record_in_dict(dict_name, key, value):\n dict_name[key].append(value)\n return dict_name\nTo append the value in an existing record in a dictionary with new"], [0.06628059629750394, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " will create a list of dictionaries\nimport random\n\nlen_list = random.sample(range(1, 10), 3)\n\nprint(random.sample(range(len_list[0], len_list[-1]),5))\n\nrandom_indices = len_list[3], len_list[-1]\n\nfrom random import randint\nfrom time import time\ndef new_approach(start, stop, num):\n"], [0.06669566486982824, "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create empty lists from a given length.\n\ndef dict_to_list(d):\n d.values()\nThe above code is a function to convert dictionary to list.\ndef num_to_str(num):\n if num==None:\n  return None\n new_str = str(num)\n for n in range(0, len(str(num)), 2):\n  new_str[n].strip(new_str"], [0.06614667714920797, "def rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\n\ndef find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \nThe above code is a function to find the dissimilar elements in the given two tuples.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of of the given length containing an empty dictionary.\ndef add_to_list(given_list, element):\n for i in range(len(given_list)):\n   if given_list[i] == element:\n     break\n   else:\n     continue\n new_lst = given_list[:i] + [element] + in given_list[i:]\n return new_lst\nThe"], [0.06643302751984703, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to make empty lists.\ndef nested_list(length):\n n_list = []\n n_list.append(\"Python\") \n n_list.append(\"IthoRaN\") \n n_list.append(\"group\")\n n_list.append(\"python\")\n return n_list\nThe above code is a python function.This function makes a list of list since nested list was asked in the assignment.   \ndef first_"], [0.06602929087930662, "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\n\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \nThe above code is a python function to get the difference between two lists.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " implements list comprehension.\ndef cupboard_form(total_bins):\n Matrix = []\n for i in range(total_bins):\n     Matrix.append([[[], []] for i in range(total_bins)])\n     return Matrix\nThe above code is to implement nested list.\nYou can find child gematria and phonetic gematria\nUSE THIS = gem.gematria().get_phonetic_list() ("], [0.06599330964852954, "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \nThe above code is a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is an example of a python one liner that creates a list of empty dictionaries. \ndef inner_function(string):\n def first_word(word):\n   return word[0].upper() + word[1:].lower()\n words = map(first_word,string.split())\n return \" \".join(words)\nThe above code is a list comprehension. \ndef plus_minus(numList):\n    numPositive = len(["], [0.06628744661415063, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of dictionaries of specified length.\n\nimport heapq   \ndef k_smallest_Largest_Elements(k, l): \n k_small_element = kth_smallest(l.copy(), 1, k)\n k_largest_element = kth_largest(l.copy(), 0, k)\n print(k_small_element, k_largest_element)\nThe above code takes in a list"], [0.06641142092365754, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list of dictionaries.\n@data(*L)\n@unpack\ndef populate_empty_list(L1):\n    empty_list = [{} for _ in range(len(L1))]\n    for i in range(len(L1)):\n        cap,color,mileage = L1[i]\n        lst[i] = {'color':color,'mileage': mileage,"], [0.06612314350056786, "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\ndef get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list with a range of certain length.\n\ndef main():\n  empty_list = [0 for _ in range(20)]\n  \n  print(\"sum:\", sum(empty_list))\n  print(\"product:\", product(empty_list))\n  print(\"mean:\", mean(empty_list))\n  print(\"standard_deviation:\", standard_deviation(empty_list))\n  print(\""], [0.06620184727418112, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " adds a list of empty dictonaries equal to its length e.g\n def dict_swap(dict1):\n dict_swap = dict([(value, key) for key, value in dict1.items()])\n return dict_swap\nThe above code is a function to swap two dictonaries elements.\ndef pair_addition(num_list):\n pair_addition = sum([n1+n2 for n1,n"], [0.06611159362992138, "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty lists.\n\ndef is_isogram(sentance: str) -> bool:\n   strippedSentances = re.sub(\"[^A-Za-z]+\", \"\", sentance.lower());\n   return len(sentance) == len(\"\".join(sorted(set(strippedSentances))))\nThe above code is a function to find if the given string is an isogram or is not."], [0.0661407386372683, "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\n\ndef max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates empty lists for comparison.\ndef check_for_edge_cases():\n    result1 = []\n    if len(vars_test) < len(fva_min):\n        print(\"Insufficient FVA data to reconstruct\")\n        index1 = len(vars_test)\n        for i in range(len(fva_min)):\n            var1 = vars[i]\n            for s in range(len(f"], [0.06612897216078467, "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\n\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of dictionaries with specified number of object in each dictionary.\n\ndef gen_pass(num_pass, num_let, num_sch, num_spe, group_len):\n    alphabet = get_alphabet(num_let)\n    specials = get_specials(num_sch, SPECIAL_CHARS)\n    perms = get_permutations(alphabet, num_spe)\n    pass_list = [get_"], [0.0671089692240058, "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\n\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create lists\n\ndef to_leet_speak(str1):\n letter_mapping = {\n \"A\": \"@\",\n \"B\": \"8\",\n \"C\": \"(\",\n \"D\": \"D\",\n \"E\": \"3\",\n \"F\": \"F\",\n \"G\": \"6\",\n \"H\": \"#\",\n \"I\": \"!\",\n \"J\": \"J\",\n \"K\": \"K"], [0.06606677876239282, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list containing empty dictionaries.\ndef remove_duplicates(nums):\n    i = 0\n    while i < len(nums):\n        j = i + 1\n        while j < len(nums):\n            if nums[j] == nums[i]:\n                nums.pop(j)\n            else:\n                j += 1\n        i += 1\n    return len(n"], [0.06675424127980197, "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function construct an empty list of dictionary of provided length.\n\ndef empty_dict(length):\n empty_dict = {}\n for idx in range(length):\n empty_dict[idx] = None\n return empty_dict\nThe above code is a python function construct an empty dict of dict of provided length."], [0.06634396198591686, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate an empty list of given length where each empty element of the list is a dictionary for further computation.\n\ndef list_set(list):\n  list_set = set(list)\n  return list(list_set)\nlist_set is a function to remove duplicate elements from a list.\n\"\"\"\n"], [0.06622095644296293, "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\n\ndef multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate empty list of n sizes.\n\ndef array_left_rotation(a, n, k):\n    mylist = empty_list(len(a))\n    for idx,val in enumerate(a):\n        mylist[(idx+k)%len(a)] = val \n    return mylist\nThe above code is a fuction to perform left rotation on the given list by k times.\n\n"], [0.0676833195435236, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\ndef multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a list comprehension creating a list of empty dictionaries.\n\ndef removekeys_func(sample_dict, removekey_list): # sample_dict\ub294 \ubc18\ub0a9\ud558\uace0\uc790 \ud558\ub294 \ub515\uc154\ub108\ub9ac\n  # \ub515\uc154\ub108\ub9ac \uc694\uc18c \uc0ad\uc81c \ud568"], [0.06652111379575454, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create list of list of empty dictionary.\ndef create_graph(arr):\n    dic = {}\n    for i in arr:\n        dic[i[0]].append(i[1])\n    return dic\nThe above code is a function to create graph from the list.\nclass Node:\n    def __init__(self,data,next_):\n        self.data = data\n        self.ptr ="], [0.06660895841880769, "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of dictionaries.\ndef empty_list(length):\n    empty_list = [None] * length\n    return empty_list\nThe above code is a python function to create a list of the size length populated with None.\nX = np.array([[1,2],[3,4],[5,6]])\nnp.mean(X,axis=1)\nX = np.array([[1,"], [0.0658044587155107, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns a list of empty dictionaries based on the given length.\n\ndef unique_list_dicts(dict_list, key):\n # YOUR CODE HERE\n suitable_dictionaries = []\n for dictionary in dict_list:\n     if dictionary[key] not in suitable_dictionaries:\n         suitable_dictionaries.append(dictionary[key])\n return suitable_dictionaries\nThe above code is a function that"], [0.06602406065241678, "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\n\nfrom collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns a list with length, \"length\" and each index is an empty dictionary.\nfrom functools import reduce\ndef watson_model(sentences, nr_word=3):\n  \n words = [sentence.split() for sentence in sentences]\n grams = [words[i:i+nr_word] for i in range(len(words)-nr_word)]\n return [\" \".join(value) for value in"], [0.06611159362992138, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is creating a list of dictionaries with an index\n\ndef num_key(num_dict, key):\n num_dict[key] = num_dict.get(key, 0) + 1 \nreturn num_dict[key]\nThe above code counts the number of times a number appears in the dictionary.\n\ndef count(numbers):\n count_dict = dict()\n num_only = filter(lambda x: isinstance(x,int"], [0.06690671794852569, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\ndef find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " will append a dictionary to an empty list, length number of times, denoted by length.\ndef reverse(s:str):\n    return s[::-1]\nThe above code is a function that returns the reverted string of the given argument.\n"], [0.06634396198591686, "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return an empty list[of dictionary] of given length. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-25.php\n\"\"\"\n\n\"\"\"\nZipping two sets of strings\ns1 = \"Abc\"\ns2 = \"ABEC\"\nnew_s = \"\"\nfor a, b in zip(s"], [0.06620184727418112, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to initialize list of empty dictionaries according to provided length.\ndef find_duplicates(list_of_nums):\n duplicates = set()\n for element in list_of_nums:\n   if list_of_nums[abs(element) - 1] < 0:\n     duplicates.add(abs(element))\n   else:\n     list_of_nums[abs(element) - 1] *"], [0.06613483709114694, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef sum_Of_Subarray_Prod(arr):\n    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\nThe above code is a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is to return an list that contain all empty dictionaries for given input length specified.\n\ndef binomial_func(n, k):\n    from math import factorial\n    bc = [{}]*(n+1)\n    for i in range(n+1):\n        for j in range(min(i, k)+1):\n            if j == 0 or j == i:\n                bc[i][j] = 1\n           "], [0.06617693676866047, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is to create an empty list of a given length.\n\ndef insert_four_el(l1):\n  l1.extend([4 for _ in range(4)])\n  return l1\nThe above code is a function to insert 4 at the given position first list.\n\ndef ls_copy(src, dest):\n    for val_range in src:\n        postion = src.index(val_range)\n        dest["], [0.0660777798827054, "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\nThe above code is a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to populate a list with empty dictionaries.\ndef zip_lists(list1, list2):\n    add_list = []\n    for tup in zip(list1,list2):\n        add_list.append(sum(tup))\n    return result\nThe above code is a function to add corresponding elements of two lists.\n\n\ncount_squares(12)\n***  Score: 5 / 5\n\"\"\"\nfrom fun"], [0.0658125294777598, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return a emtpy list of dictionary containing the length of dictionaries.\n def avg_marks(students):\n        marks = [ int(student['marks']) for student in students ]\n        return '{name} has marks {marks}'.format(student, name=(students[marks.index(max(marks))]['name']), marks=max(marks))\nThe above code is a function to print the highest scored name"], [0.06605590861578814, "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndef find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of n dictionaries \ndef empty_list(length):\n empty_list = []\n for _ in range(length):\n     empty_list.append({})\n return empty_list\nThe above code is a function to create a list of n dictionaries 1\ndef add_link(random_link, all_link):\n get_link = {}\n all_list = empty_list(len(all_link))"], [0.0660777798827054, "def my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is an empty list generator without defining a list explicitly\ndef test_empty(pyList):\n  if not pyList: return True\nempty_list = [{}] \nThe above code checks if a list is empty or not\ndef travel_cost(travels):\n travel_sum = sum(travels)\n if travel_sum >= 50:\n  return (travel_sum-50)*9+15\n else:\n  return travel_sum"], [0.06622095644296293, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x\nThe above code is a function to join a list of multiple integers into a single integer.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list with a sepreted length with empty dictionaries in each index.\ndef subtract(L,M):\n  x = [L[i]-M[i] for i in range(len(L))]\n  return x\nThe above code is a fucntion to subtract a list of nummbers and another list.\nrange_even_number(2, 46, 15)\ndef range_even_number(start, stop,"], [0.06596848078961219, "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\n\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of emty dictionaries.\n\ndef  empty_tuple(length):\n empty_tuple = [() for _ in range(length)]\n return empty_tuple\nThe above code is a function to create a tuple of empty tuples.\n\nFrom fractions import Fraction as f\ndef probability_function(numerator,denominator):\n probability  = f(numerator,denominator)\n"], [0.06628059629750394, "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list object with symbols in it to find the length of the list \n\ndef percentile_calculator(list1):\n nth=int(input(\"Please input percentile\"))\n nth_value = len(list1) * (nth/100)\n nth_value_up = int(math.ceil(nth_value))\n nth_value_dn = int(math.floor(nth_"], [0.06624702474693304, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\nThe above code is a function to find the difference of the first even and first odd number of a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of length empty list.\ndef permutations(string):\n list1 = list(string)\n stack = [\" \"]\n perm_list = []\n while stack:\n    stack_elmnt = stack.pop()\n    print(stack_elmnt)\n    if len(stack_elmnt) == len(string):\n       perm_list.append(stack_elmnt)\n    else:"], [0.0665427897485956, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate a list with empty dictionaries.\nclass median_finder:\n\tdef __init__(self): \n\t\tself._sorted_num_cnt = 0\n\t\tself._sorted_nums = []\n\t\tself._mod_num = 0\n\tdef put(self, num):\n\t\tif self._sorted_num_cnt % 2 == 0:\n\t\t\tif not self._"], [0.0662670330584313, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a dictionary of size k with empty dictionary: {}. \n\ndef list_1_to_26(length):\n list_1_to_26 = [{} for _ in range(length)]\n for i in range(length):\n  list_1_to_26[i] = i+1\n return list_1_to_26\nThe above code is a function to create a list of dictionaries = [{"], [0.06621454531549555, "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \nThe above code is a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\nThe above code is function to find the sum of all items in the given dictionary.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " initializes an empty list with empty dictionaries.\ndef extend_list(inp_list):\n if inp_list == []:\n   return 5 *[2, 3]\n mut_list = list(inp_list)\n new_elem = 2 if mut_list[0] == 1 else 3\n mut_list += [new_elem]\n return mut_list\nThe above code returns the input list extended by a new element"], [0.066003441677564, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python code that returns a list of empty dictionaries of length specified by input to the function.\n def list_ops(my_list):\n   my_list = my_list + list(map(lambda x: x*2, my_list))\n   return my_list.sort()\n   The above code manipulates a list based on input parameters.\ndef get_median(occurrences):\n mid = len(occurrences)"], [0.0660777798827054, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of dictionaries.\ndef append_values(dict1, dict2): \n    dict1.update(dict2)\nreturn dict1\nThe above code is a function to append two dictionaries.\ndef empty_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    return filter(lambda x: x not in vowels, s)\nThe above function is a function to filter"], [0.06601886088712212, "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a thunk which initializes a list of fixed length with empty dicts.\n def my_enumerate (lists, list1):\n   first = next(iter(lists))\n   middles = list1 \n   last = lists[len(lists)-1]\n   return chain([first, *middles], last)\nThe above code will return a chain of successive iteration of lists in arguemnts.\n\ndef string_switch"], [0.0662737919352425, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list of size n. Hint: Use list comprehension.\ndef count_number_of_bits_to_be_flipped(bigger, smaller): \n\tcount = 0\n\tfor i in range(32): \n\t\tif (bigger[i] ^ smaller[i] == 1): \n\t\t\tcount = count + 1\n\treturn count \nThe above code find the number of bits"], [0.0661955595468228, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries, with the length specified in the argument.\nimport re\nlist1 = ['my', 'name', 'is', 'om', 'om']\n\nshould return\n\n['my', 'name', 'is', 'om:2', 'om:2']\n\nwith a regex substitution of `om` with `om:2`\ndef replace_om(text):\n string1 = str1.replace"], [0.06608333031310207, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " helps in creating an empty list of the given length.\n\ndef list_of_zeros(length):\n zeros_list = [0 for _ in range(length)]\n return zeros_list\nThe above code helps in creating a list of zeros of the given length.\n\ndef remove_value(int_list, element):\n for sub_list in int_list:\n  try:\n   m = sub_list.index(element"], [0.06608891440056691, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that creates an empty list of size length.\ndef list_count(lst, num): \n   return lst.count(num)\nThe above code is a function that returns the number of occurances of the element num\ndef list_length(lst):\n try:\n   return len(lst) \n except TypeError:\n    lst = list(lst)\n    return len(lst)\nThe above"], [0.06612314350056786, "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\n\ndef count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return empty list of length = n\n\ndef maximum(list):\n    for i in range(0,(len(list))-1):\n        if(list[i] == list[i+1]):\n            return list[i]\nThe above code is a function to find al lthe maximum values form the dictionary.\n\ndef triple(nums):\n    r = 0\n    for num in nums:\n       "], [0.06598329317939586, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries.\n\ndef flat_list(n_l):\n    output = []\n    for i in n_l:\n        if type(i) != list:\n            output.append(i)\n            continue\n        d = flat_list(i) #Recursive call starts\n        output += d\n    return output\nThe above code flattens a given nested list.\n\ndef binary(n"], [0.06656923156051214, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to make a list that consists of dictionaries which has its same length.\n\ndef scatter_plot(X1,Y1,X2 = [],Y2 = []):\n  if len(X2) == 0:\n    plt.scatter(X1,Y1, color = \"green\")\n  else:\n    plt.scatter(X1,Y1, color = \"green\")\n    plt."], [0.06630128701909721, "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\n\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \nThe above code is a python function to count the occurence of all elements of list in a tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of empty dictionary elements.\ndef list_intersection(list1, list2):\n  x=[list(filter(lambda x:x in set(list1).intersection(list2), item)) for item in list2]\n for i in range(len(x)):\n  if x[i]== []:\n   del x[i]\n return list(map(tuple,x))\nThe"], [0.0662737919352425, "def digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))\nThe above code is a python function to find the sum of the per-digit difference between two integers.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of empty dictionaries of a fixed length. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\ndef even_sum(int_num):\n    even_sum = 0\n    while(int_num > 0):\n     even_sum  += (int_num % 10) if (int_num % 10) % 2 =="], [0.06772336416507241, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \nThe above code is a function to remove all the words with k length in the given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list with empty dictionaries as its elements.      \n    \n#Solution 2\n\"\"\"\nfor i in range(1, n):\n    if s[i]>=x:\n        return s[i]\n"], [0.06631531703421319, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\ndef min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python code to create an empty list which is filled with empty dictionaries.\n\ndef reverse_list(a):\n    i = [x*(x%2==0) or -x*(x%2!=0) for x in a]\n    i.reverse()\n    return i\n\nThe above code is a method to reverse elements of a list.\n\ndef sum_n(n):\n    total = 0\n    for"], [0.06623390498643673, "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to convert list to a empty dictionaries.\ndef n_list(n):\n  n_list = [[] for _ in range(n)]\n  return n_list\nThe above code is a function to convert list to a empty n lists.\ndef list_same(n):\n    lst = []\n    for number in range(n):\n        lst.append(lst[:2])\n    return lst\n"], [0.06666340759261855, "def sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to give a list of empty lists\ndef rep_by_fours(items):\n   fours = items.re\ndef gcd(a,b):\n    return a if b==0 else gcd(b, a%b)\nThe above code is a function to find the GCD of two numbers.\ndef remove_duplicates(input):\n    if input is None:\n        return\n    input = list(set"], [0.06610587174986289, "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\n\ndef find(n,m):  \n    q = n//m \n    return (q)\nThe above code is a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is to generate an empty list with a speified number of lists.\ndef remove_empty(list1, varriable_to_check):\n var = varriable_to_check(list1)\n for i in range(1, len(var)):\n    if var[i] == {}:\n        var.remove(0)\n return var\nWhere the second line is to remove empty lists in the list of lists.\n## Second Part"], [0.0665169481622157, "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndef Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python program which creates a list of empty dictionaries.\nls = [1, 2, 3, 4]\nresult= list(map(lambda x: x*x , ls))\nls = [2, 20, 3, 45, 6, 52]\ndef addition_any(a):\n     return a + a\nadd = list(map(addition_any, ls))\nprint(add)\noutput = [4, 40, 6"], [0.06613483709114694, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to initialize an empty list which has specified length.\ndef range_of_values(start, end):\n element = start\n while (element <= end):\n           yield element\n           element = element + 1\nThe above code is a function which will return a generator that evaluate the given range of values.\n"], [0.066003441677564, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate empty lists of respective given length.\n\ndef find_empty_dict(list1):\n  dict_empty = []\n  for i in list1:\n    if(i != {}):\n      dict_empty.append(i)\n  return dict_empty\nThe above code is a function to remove empty dictionaries from given list of dictionaries.\n\ndef to_lowercase(list1):\n  for i in list"], [0.0660451670779345, "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\n\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\nThe above code is a function to create a new tuple from the given string and list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries.\ndef list_invert(mylist):\n return {k:v for v,k in mylist.iteritems()}\nThe above code is a function to invert the order of the elements in a list of tuples with key- value pairs.\ndef key_of_max_value(dict):\n  return max(dict.iteritems(), key = operator.itemgetter(1))"], [0.06592086910331438, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries.\ndef list_from_2_lists(list1, list2):\n return list(dict.fromkeys(list1 + list2))\nThe above code is a function to combine two lists into a list which has unique elements of all lists.\ndef create_from_two(initial_value, increment):\n def create_from_two(start, end):\n   current = start\n   while"], [0.06603984381390035, "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes a length as a parameterand prints only the odd indexed items of the list of dictionaries that is created.\ndef common_data(list1, list2):\n  result = False\n  for x in list1:\n     for y in list2:\n        if x == y:\n          result=True\n          return result\nprint(common_data([1,2,3,4,5], [5,6,7"], [0.06596359896968222, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of dictionaries of given length empty all dictionaries will be empty.\ndef capitalize(str, l): \n      \n    str2List = list(str) \n     \n    (str2List[:l]).title() \n    answer = '' \n     \n    for i in str2List: \n        answer = answer + i \n     \n    return answer\nThe above code is a function to capitalize"], [0.06612314350056786, "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\nThe above code is a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is creating empty list\ndef find_angry(to):\n to = ''.join([ch for ch in to if ch.isalnum()])\n for word in ['angry','anger','angery','angrry','pucky']:\n if(word in to):\n return f\"{to} mood is angry\"\n return f\"{to} has no angry mood\"\nThe above code is given particular words that if notice in that string, it"], [0.06690671794852569, "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) \nThe above code is a function to find the n'th star number.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list of the specified length.\ndef print_pattern(n):\n for i in range(n): \n  for j in range(i): \n   print('* ',end = \"\") \n  print('')\n The above code is a function to print - \n\"\"\""], [0.0664428238060066, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of dictionary of size 'length'\ndef rotate(_list, k, direction =  1):\n new_list = _list\n if direction ==  1:\n    new_list[k:] = _list[:-k]\n    new_list[:k] = _list[-k:]\n else:\n    new_list[:-k] = _list[k:]\n    new_list[-k"], [0.06621454531549555, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a list of empty dictionaries, which is returned when a function is called.\ndef populate_list(list_size):\n digits = [*range(1, 10)]\n scores = empty_list(list_size)\n\n for i in range(0, list_size): \n   scores[i]['Digit'] = random.randint(0,9)\n   scores[i]['Multiplier'] = ??\n\n scores = add_"], [0.06626031920455139, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of dictionaries in a given range.\ndef two_type_variables(v_1,v_2):\n types = (set([type(v) for v in v_1 if v==v_2]) | set([type(v) for v in v_2 if v==v_1]))\n return len(types)==1\nThe above code is a function to report whether all variables in both lists"], [0.06606677876239282, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\nThe above code is a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to initialize a  empty list of given length.\ndef matrix_representation(string):\n return [list(map(int, i)) for i in zip(*[iter(string)] * (len(string) + 1))]\nThe above code is a function that can print successive matrix elements if input_string is of [m*n] size.\ndef fibonacci(n):\n    a,b = 0,1\n    if"], [0.06596848078961219, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \nThe above code is a python function to find the product of the array multiplication modulo n.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of empty dictionaries with a given length.\ndef reverse_words(text): \ntemp = text.split(\" \")\ntemp.reverse()\nreturn \" \".join(temp)\nThe above code reverses the words in a string or any other sequence.\ndef first_non_repeating_character(arr):\n    hash_map = {}\n    if (type(arr) is list):\n        ord_"], [0.0658670734394551, "import re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \nThe above code is a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a funct to that return an empty list.\n\nQ16) Write a Python program that matches a word containing 'z'\nimport re\ndef text_match(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a word containing 'z'. https://www.w3"], [0.06617693676866047, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is to create an empty list of given length with 'n' empty dictionaries inside the list.\ndef add_key_value(Ldic,key,value):\n Ldic[key] = value\n return Ldic\nThe above code is to add a key value pair in a dictionary at the end of a given dictionary\ndef merge_dict(D1,D2):\n merge_dict = {**D1,**D2} \n"], [0.06612314350056786, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to define a list with no elements. Can only be used with dictionaries, as they are unordered. \n\ndef flatten_list(lst): \n    return sum(([x] if not isinstance(x, list) else flatten_list(x) for x in lst), []) \nThe above code is to flatten the list. \n\ndef count_vowels(string):\n string = string"], [0.0676636495075787, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create an empty list of length n.\n\n\nx = \"abcd\"\nprint(x[::-1]) # reverse string\nprint(x[::-2]) # reverse every other character\n(2**2)**2\n"], [0.06758722196815904, "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\n\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function for generating a list of empty dictionaries.\n\nargs=(1,2,3,4,5)\ndoubles = list(map(lambda x: x*x, args))\nThe above code is a single line map function.\n"], [0.0659025482002542, "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns a list containing empty dictionaries.\ndef list_max(l, maximum=1):\n max_index, max_value = max(enumerate(l), key=operator.itemgetter(1))\n return (max_index, max_value)\nThe above code is an Operator (itemgetter), which is used to find an element having the maximum value, which can be used as an argument in max().\n\nAnother"], [0.0661407386372683, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function that creates a n length list of dictionaries.\ndef lower_case(x,i):\n return x[i].lower()\n The above code is a python lambda function that passes the ith index of a list and makes it lowercase.\ndef string_matrix(x,split):\n x1 = [str(i) for i in x]\n temp_x = \"\".join(x1)\n temp_x_split"], [0.06593018116564417, "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to define an empty list of empty dictionaries.\ndef sparse_matrix(matrix):\n    final_matrix = []\n    for i in matrix:\n        final_matrix.append(list(filter(lambda a: a != 0, i)))\n    return final_matrix\nThe above code is a python function to extract elements from a given sparse-Matrix.\nimport numpy as np\ndef join_rec(x"], [0.06605590861578814, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function in python to return a list of empty dictionaries.\n\ndef remove_duplicate(duplicate):\n\tfinal_list = [] \n\tfor num in duplicate: \n\t\tif num not in final_list: \n\t\t\tfinal_list.append(num) \n\treturn final_list\nThe above code is the function in python to remove the duplicates of a list and return the new list.\n\n"], [0.06632172126009571, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to initialize an array with the passed length with empty dictionaries.\ndef reverse_Name(name):\n  return name[::-1]\nThe above code is a python function to reverse a string.\ndef simple_List(n):\n  simple_list = []\n  for i in range(1,n,2):\n    simple_list.append(i)\n  return simple_list\nThe above code is a python function"], [0.06601369131349882, "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\n\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create empty lists given a specific length.\ndef str_to_int(str_):\n str_to_int = lambda x: int(x.zfill(6))\n return str_to_int\nThe above code is a lamda function to add zeroes before an integer paramater and (return it) in to a string format given the provided length.\ndef finding_in_list(my_list):\n finding_in"], [0.0660505219163264, "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a method to create an empty list of a given length.\ndef urlify(string, length):\n    return '%20'.join(list(string.strip()))[:length] \nThe above code is a method to replace the whitespaces in a string with %20 to create the url\ndef run_length_encoding(arr):\n    letters, res, count = arr[0], '', 0\n    for l in arr:\n"], [0.06628708415763772, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list with specified length.\ndef empty_list():\n empty_list = [0 for _ in range(length)]\n return empty_list\nThe above code is a python function to create a list using list comprehensions.\ndef question_format(col_name,option1,option2,option3): \n    if (col_name == \"Name\" or col_name == \"Candidate Name\" or col_name"], [0.06611735076925782, "import cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return blank list of desired size. \n\ndef empty_list_of_list(length):\n empty_list = [[] for _ in range(length)]\n return empty_list\nThe above code is a function to return blank list of list of desired size.\n\ndef list_of_list():\nonelist = [ ['{} = {}'.format(k,v) for k,v in elem.items()] for"], [0.06602406065241678, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\nimport math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter\nThe above code is a function to find the perimeter of a regular pentagon from the length of its sides.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries that can be defined by the user.\ndef abs_sum(num_list):\n    abs_list = [abs(num) for num in num_list]\n    sum_list = sum(abs_list)\n    return sum_list\nThe above code is a function that takes in a list of numbers\ndef exponents(nums,exponents):\n    answer = [num**exponent"], [0.06609453245758501, "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\nThe above code is a function to reverse each string in a given list of string values.\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list of length 'length'\n# Average of odd numbers\n\ndef average_odd(numbers):\n    odd_num = [x for x in numbers if x % 2 != 0]\n    sum_of_odd = sum(odd_num)\n    return (sum_of_odd)/len(odd_num)\nI would wrote the same logical code operation in the dictionary below.\n\n'average_odd("], [0.066403710834821, "def split(word): \n    return [char for char in word] \nThe above code is a python function to split a string into characters.\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\nThe above code is a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to make a empty list of x length.\n\ndef sum_list(l):\n sum_of_l = 0\n for i in l:\n  sum_of_l = sum_of_l + i\n return sum_of_l\nThe above code is a function to make a list of tuples for points for star ratings in the following form: [(a,b),(c,d),(e,f)] \n\n"], [0.0661407386372683, "import re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\nThe above code is a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " replaces a list comprehension with a loop to build the list. When you only need the value, forget the identity.\n\ndef is_palindrome(text):\n  return text == text[: :-1]\n  short_form = lambda text: text == text[: :-1]\n  is_palindrome = lambda text: text == text[: :-1]\n  return x == x[::-1]\n  functional ="], [0.06602929087930662, "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\nThe above code is a function to convert a given string to a tuple of characters.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate empty list of given length\ndef compute_result(file_path):\n    empty_list =[]\n    dict1 ={}\n    with open(file_path, 'r') as f:\n        for line in f:\n            if '>' in line:\n                empty_list.append(line)\n                du = dict().fromkeys(empty_list)\n    list1 =[]\n    result = {}"], [0.06618973847364969, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is\n\n# Errors/LBYL vs EAFP (Listing 6) \ndef find_EMAILer(database, name=None, domain=None):\n    for record in database:\n        if name and domain:\n            if name in record[\"name\"].lower() and domain in record[\"email\"].lower():\n                return record\n        else:\n            if name and name in record[\"name\"].lower():\n                return record\n\n"], [0.0663734148166095, "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a empty list of given length.\ndef maxDiff(arr): \n    diff = arr[:] \n    stack = [] \n    stack.append(arr[0]) \n    diff[0] = 0\n    i = 1\n    while i<len(arr): \n      while (len(stack) > 0 and arr[i] <= arr[stack[-1]]): \n        stack.pop"], [0.06672042974449517, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python code to create an empty list of specified length.\ndef combine_lists(a, b): \n    output_length = len(a) + len(b) \n    output_list = [None] * output_length \n    \n    \n    a_ptr = 0 \n    b_ptr = 0 \n    output_ptr = 0\n    \n    \n    while output_ptr < output_length: \n       "], [0.06632954065372705, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create empty dictionaries of given length.\n\ndict.update(d)\ndict.keys()\ndict.items()\ndict.clear()\ndict.get(key[, default])\nProgram for creating a logical and gate\nAndGate(in1, in2):\n  if in1 >=1 and in2>=1:\n    return 1\n  else:\n    return 0\ns = [AndGate(0,0"], [0.06596848078961219, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to build a list of empty dictionaries based on a specified length of the list.\n\ndef top_two(mark_list):\n  sorted_list = sorted(mark_list)\n  return (sorted_list[-2], sorted_list[-3])\nThe above code is a function to return the top two marks from a student's mark list in descending order\n\ndef remove_duplicates(A):\n    B ="], [0.06591165867585616, "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to add empty dictionary records to a list, depending on given parameter length.\ndef is_digit(word):\n word = word.replace('.','',1) \n if word.isdigit():\n  return True\n else:\n  word = word.replace('-','',1) \n  return word.isdigit()\nThe above code is a function to distinguish a value from a string whether integer or float.\ndef square"], [0.06608333031310207, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\nThe above code is a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries of given length.\n\ndef is_empty(check_list):\n\treturn len(check_list) == 0\nThe above code is a method to check whether a given list is empty or not.\n\ndef reverse_int(integer_num):\n rev_num = 0\n while integer_num > 0:\n  last = integer_num%10\n  rev_num = (rev_num"], [0.06612897216078467, "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\nThe above code is a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\nfrom copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\nThe above code is a function to get a colon of a tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is different ways to create empy list according to the need of the program.\n\n#que_1:\ndef maximum_nums(nums):\n list_max = nums[0]\n for num in nums:\n  if(len(nums[num]) > list_max):\n   list_max = num\n return list_max\nThe above code is a program to return the largest number from a list in python.\ndef count"], [0.06632172126009571, "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\nThe above code is a python function to count the upper case characters in a given string.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates an empty list with length \"length\".\n\n#The below code replaces all None values with the empty string.\ndomains = [{'domain':item[0].replace(\"None\", \"\")} for item in doms]\ndef number_list(list):\n    Sum = 0\n    count = 0\n    while count < len(list):\n        Sum += list[count]\n        count += 1\n    return Sum\nThe above function sums"], [0.06602929087930662, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " retunds a list of empty dictionaries.\ndef new_list(length): \n new_list = [hash() for _ in range(length)] \n return new_list\nThe above code returns a list of empty string dictionaries.\ndef new_corpus(length):\n newCorpus = [{} for _ in range(length)]\n return [{} for _ in range(length)]\nThe above code returns a empty list of"], [0.06601886088712212, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of empty dictionaries with the given length\n\ndef fibo(n):\n    llist=[]\n    first = 0\n    elem = 1\n    while elem<n:\n        llist.append(elem)\n        ne=first + elem\n        first = elem\n        elem = ne\n    return llist\nThe above code creates a list of Fibonacci numbers for the given range using a plain ("], [0.0661407386372683, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return an empty list of a specific size.\ndef mine(num1):\n min = num1[0]\n for a in num1:\n  if a < min:\n   min = a\n return min\nThe above code returns the lowest number in an given list of numbers.\ndef Dog(nature,name,age,furcolor):\n def the_move():\n  print(\"Walkies!\")\n def the_sound():\n"], [0.06595391736784383, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create arbitrary length empty lists.The function creates an empty list with size length.\n\ndef find_largest(alist):\n if len(alist) == 1:\n  return alist[0]\n else:\n  m = find_largest(alist[1:])\n  return max(alist[0], m)\nThe above code contains a function to find the largest element in a list.\n\ndef general_poly (L):"], [0.06597339027081045, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a [{}] list comprehension of length 'length' where each element of the list is an empty dictionary\ndef most_common_keyname(key, dicts):\n keyname = max(dicts, key=lambda s:s.count(key))\n return keyname\nThe above code is a python function to find the most common key in a list of dictionaries.\ndef digit_sum(n):\n return sum(map(int,"], [0.0660505219163264, "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list of a fixed size.\ndef remove(duplicate_val):\n setdup = set()\n final_list = []\n for num in duplicate_val:\n  if num not in setdup:\n   setdup.add(num)\n   final_list.append(num)\n return final_list \nThe above code is a function to remove duplicates from a list and return a list without"], [0.06616471804873945, "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is the best practice for creating an empty list of empty dictionaries.\nhttps://gist.github.com/samerbuna/aa1f023c971e7f0de05c905c55a18a68\nimport unittest \n  \nclass TestToLowerCase(unittest.TestCase): \n      \n    # Returns True or False.  \n    def test_equal(self):         \n        # Compare answer"], [0.06677149703729413, "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\nThe above code is a function to sort a list of elements.\n\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \nThe above code is a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " initializes a list of dictionaries (of length N). \nlist = [\"Confusing\", \"Love\", \"Profound\"]\n   \nlist_copy = list.copy()\nlist_copy.extend([\"Ex b Exchange\"])\nprint(list_copy)\nprint(list)\n1.Arrays - https://www.geeksforgeeks.org/array/\n2.Dictionaries - https://www.geeksforgeeks."], [0.06623390498643673, "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \nThe above code is a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries of given length.\ndef pairs_with_sum(input_list,input_sum):\n start_index=0\n end_index=len(input_list)-1\n output=[]\n while (start_index< end_index ):\n  sum_of_pair=input_list[start_index]+input_list[end_index]\n  if (sum_of_pair == input"], [0.06772336416507241, "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list with the given length filled with empty dictionaries.\ndef nothing(*em):\n pass\nThe above code is a function that does nothing.\n"], [0.06635124811029879, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to initializes a list of empty _dictionaries.\nimport operator\n\ndef sort_lists(l1, l2):\n    \"\"\"\n    Returns zip objects with Z-curve pattern\n    >>> sort_lists([1, 2, 3], [4, 5, 6])\n    <zip object at 0x7fe480ce1f38>\n    \"\"\"\n    d = dict(zip(l1, l2))"], [0.06620817572905552, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef is_product_even(arr): \n    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\nThe above code is a function to check whether the product of numbers in a list is even or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is an empty list of length length. \ndef swap(elements)\t:\n    elements[0], elements[1] = elements[1], elements[0]\nThe above code is to swap first element with second element.\nclass Stack:\n\tdef __init__(self):\n\t\tself.stack = []\n\tdef push(self, item):\n\t\tself.stack.append(item)\n\tdef pop(self):\n"], [0.06585843874728008, "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\n\ndef extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nThe above code is We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. a function to find common elements from three lists. The function should return a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is using list comprehension to initialize and return an empty list with empty dictionary dictionary.\n\ndef get_factorials(upper_range):\n    factorials = [1] * upper_range\n    for i in range(2, upper_range):\n        factorials[i] = factorials[i - 1] * i\n    return factorials\nThe above code is a function to return an list containing factorials upto the passed"], [0.0660451670779345, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a  list with an element as a dictionary having a key, value pairs.\nprime_numbers = [1,2,3,5,7,11,13,17,19,23,29]\nThe above code is a list to store the prime numbers and another list of same length \nto store the perfect digits\ndef r_reverse(q):\n        string = str(q)\n        return string [::-1"], [0.06593959658420824, "def split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\n\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\nThe above code is a function to compute the n-th power of each number in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to make a list of groupings with an empty dictionary in each.\ndef empty_list_comprehension(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to make a list of groupings with an empty dictionary in each.\ndef list_to_upper(myList):\n return list(map(lambda s: s.upper(), myList))\n"], [0.0661955595468228, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is list comprehension to create a list of empty dictionaries based on the length prov\\ided.\ndef nested_values(collection):\n return [x for x in collection.values()]\n\nnested_values({ 'a': 1, 'b': 2, 'c': { 'd': 3 }})\n{1, 2, 3}\nThe above code gives the expected result\n\ndata = [4, 4, 6, 2, 3]\ndef"], [0.06586274467677242, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " defines a function to make a list of empty dictionaries.\n print(\"\".join(str(num) for num in range(1,6)))\nThe above code is a python function to print a sequence of numberes using list comprehension.\nimport collections\ndef count_char_times(s):\n s = s.lower()\n count = collections.Counter(s)\n return count.most_common(3)\nThe above code is a python function to"], [0.06609453245758501, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is list comprehension for creating empty lists of a given length.\n\ndef list_split(lst, size):\n first = lst[:, size:]\n second = lst[:, :size]\n return [first, second]\nSame with above, but you can share this list comprehension statement.\n\ndef bubble_sort(lst):\n n = len(lst)\n swaps = n\n while swaps > 0:\n  i = 0\n "], [0.06588906630647381, "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function which return a list as an empty dictionary with given length.\n\ndef find_list(list_to_search, x):\n  new_list = []\n  for element in list_to_search:\n    for item in element.keys():\n      if x in item:\n        new_list.append(element[item])\n  return new_list\nThe above code is a function that creates a new list from dictionary of list based"], [0.0661955595468228, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is emptying a list of dictionaries.\ndef array(n,m):\n\tarray = [[0 for _ in range(m)] for _ in range(n)]\n\treturn array\nThe array function returns a 2d array\nimport math\nThe above code imports the math library\n\n# distance between points \ndef distance(x1, y1, x2, y2) : \n\treturn math.sqrt((x2 - x1"], [0.06609453245758501, "def Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\n\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \nThe above code is The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. a function to filter students that have height and weight above the minimum.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function which returns a list of empty dictionaries with the length given by input.\n\ndef convert_to_intlist(l):\n c =l.replace(\" \",\"\").replace(\"-\",\",\")\n c = [int(c1) for c1 in c.split(\",\") if len(c1)>0]\n return c       \nThe above code is a function to make a list of integers of a string given as an input."], [0.06611735076925782, "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\n\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\nThe above code is a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a Python function to create an empty list of length n, where each item in the list is an empty dictionary.\ndef fizzBuzz(n):\n    result = []\n    for i in range(1,n+1):\n        if i%3==0 and i%5==0:\n            result.append('FizzBuzz')\n        elif i%3==0: \n            result.append('Fizz')\n        elif"], [0.06602929087930662, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function which creates a nested list of dictionaries, the outer list has a length given by the user.\ndef character_input_dict(input_lines):\n    new_dict = {}\n    for _ in range(int(input_lines[0])):\n        data = input().split()\n        name, date_of_birth, date_of_death = data[0], data[1], data[2]\n        new_dict"], [0.06596359896968222, "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of dictionaries of the given length.\ndef topologicalsort(graph):\n  noIncomingEdges = list(node for node in graph if not graph[node])\n \n\n  while noIncomingEdges:\n\n    vertex = noIncomingEdges.pop()\n\n    if vertex in graph:\n\n      graph.pop(vertex)\n\n    for neighbor in vertex.neighbors:\n\n      neighbor.in"], [0.06622740952642267, "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\nThe above code is a function to find whether all the given tuples have equal length or not.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list with dictionaries of length \"length\" entered.\n\ndef count_for(suffix, str):\nList = []\nWords = str.lower().replace(\".\",\" \").replace(\"'\", \" \").replace(\";\", \" \").replace(\"-\", \" \").replace(\"?\", \" \").split(\" \")\n  for j in range(0, len(Words)):\n    MUD = Words[j]."], [0.06599330964852954, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\nimport re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a lit containing empty dictionary objects based on length of the list provided.\nC:\\Users\\Sumanth\\Documents\\GitHub\\python\\Projects\\Prorojects\\python_drills\\for_loop_zip.py\n'''\n\nimport os\nimport subprocess\nfrom sys import executable\nfrom zipfile import ZipFile\n\ndef copy_file():\n    text = \"import os\\n\" + \""], [0.06609453245758501, "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\nThe above code is a function to calculate the sum of perrin numbers.\n\nfrom collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\nThe above code is a function to sort a dictionary by value.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries.\n\ndef func(list1, character=0, test_character=3, test_string=''):\n if character > len(list1):\n    character = character % len(list1)\n if test_character > len(list1):\n    test_character = test_character % len(list1)\n string = ''\n for c in range(len(list1)):\n"], [0.06616431236398475, "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\n\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \nThe above code is a function to check if the given tuples contain the k or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a new empty list of given length.\n\n###########################  PYMONGO VERSION #############\nimport pymongo\nfrom pymongo import MongoClient\n\ndef analyze_network(con):\n  collection = client.connections.link_location\n  #Number of distinct locations\n  num_location = collection.distinct(\"location\")\n  nl = len(num_location)\n\n  #Number of distinct"], [0.06598329317939586, "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries.\ndef slots(time):\n return time.strftime(\"%U-%Y\")\nThe above code is a function to provide a tuple in the form of (slot number, year).\ndef unique(sequence):\n unique_set = set()\n unique_set_add = unique_set.add\n return [x for x in sequence if not (x in unique_set or unique_set_add"], [0.0660451670779345, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function for creating an empty list of given length.\ndef str_str(str):\n  return ' '.join(str)\nThe above code is a function for replacing \"-\" (customary in phone numbers) with blank space.\ndef big_string_len(str):\n  length = 0\n  for i in str:\n    if len(i) > length:\n      length = len(i)\n  return length\nThe above "], [0.06582479172249074, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " returns a list of empty dictionaries, given the length of the list.\ndef count_characters(string):\n  counted = len(list(filter(lambda x: x in 'aeiou', s.lower()))) #this is the solution\n  return counted\nThe above code returns the length of characters to contain a given vowel letters, existing in a given string.\ndef last_element_if_list(string):\n  if not isinstance("], [0.06595874457389302, "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate an empty list of n number of lists.\n\nimport numpy as np\ndef numpy_data(length):\n return np.array([[np.random.randint(0, length) for each in range(0, length)] for each in range(0, length)])\nThe above code is a numpy n dimensional list generator.\n\nimport nltk\nfrom string import punctuation\nimport re\n\ndocument ="], [0.06599330964852954, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a one line function to create a list of dictionaries depending on the \"length\" argument defined.\ndef list_of_element_combinations(a , b):\n    va = list(it.combinations(a,b))\n    return va\nThe above code is a function to find combinations of values in the given lists.\n\ndef more_than_zero(x, y) :\n    count = 0;\n    for i in a:"], [0.0666240031207201, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \nThe above code is a function to find the nth nonagonal number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of dictionaries.\ndef fibonacci(n):\n a = 0\n b = 1\n if (n < 0):\n  print(\"Incorrect input\")\n elif (n == 0):\n  return a\n elif (n == 1):\n  return b\n else:\n  for i in range(2, n):\n   c = a + b \n   a = b\n   b = c\n"], [0.0661407386372683, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns a list containing empty dictionaries.\n\ndef list_comprehension():\n return [(x,y) for x in [1,2,3] for y in [3,1,4] if x != y]\nThe above code is a function that returns a list of touples using list comprehension.\n\ndef filter_odd_even(arr):\n arr = [k for k in arr if len(str(k))"], [0.06594911711982122, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " iterates and returns a list of dictionaries of the specified length.\naccum = lambda a=0, *b: sum(b, a)\nprint(accum(4,4,4))\nThe above code takes in more than one parameter and returns the sum of the parameters.\n\ndef reverse_string():\n    return 'Apple'[::-1]\nThe above code takes in no parameters and returns string reversed.\n\ndef add_both"], [0.06625364991739004, "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is defining a variable and setting it a new variable with a value of a list filled with empty dictionaries.\ndef manipulate_dict(dct, srt_lst, value):\n\n    dct.update({item: value for item in srt_lst})\n\n\nif __init__ == \"__main__\":\n\n    dctnry = dict(zip([1, 2, 3],['A', 'B', 'C']))\n   "], [0.06633672634440346, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\ndef remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is an example to initialize all the list elements to some value.\nimport numpy as np\n  \ndef shuffle_c(arr,arr2):\n  s = np.arange(arr2.shape[0])\n  np.random.shuffle(s)\n  arr[:] = arr[s]\n  arr2[:] = arr2[s]\nThe above code is an example of shuffling arrays.\nimport numpy as np"], [0.066403710834821, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\nThe above code is a function to check whether the given month number contains 31 days or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function which is dealing with the empty lists.\ndef create_dictionary(n):\n  empty_dic = {}\n  double_dic = {}\n  left = n/2\n  right = n/2\n  \n  while((left != 0) and (right != 0)):\n    if(left%2 ==0 and left in empty_dic):\n      empty_dic[left] = 1\n      empty_"], [0.06636363903134812, "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\nThe above code is a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " returns an empty list of every possible size.\nNumber guessing\nStart\ndef max_subsequence_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for el in arr:\n        current_sum += el\n        if current_sum < 0:\n            current_sum = 0\n        elif current_sum > max_sum:\n            max_sum = current_sum\n            print(max_sum)\n"], [0.06642700861519445, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create list of with a given length.\ndef process_list(list, k):\n res=[]\n update_loss = (' of {k: '+k+', v: 0.0}')\n item = len(list)\n for item in range(len(list)):\n   #s = res.append(eval( str(list[item]) + update_loss))\n   s = eval( str(item) +"], [0.0665254966214242, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of empty dictionaries by placing the expression [{} for _ in range(length)] in the list variable empty_list\ndef reverse(l):\n l.reverse()\n return l\nThe above code returns the reversed list of l referenced by the memory location of l.\n"], [0.06612314350056786, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " will build a list of empty dictionaries with length of list as the specified parameter.\nimport collections\ndef q_in_v_in(T, root, q): \n    Q = collections.deque() \n    Q.append(root) \n    found = False\n    while Q: \n        z = Q.popleft() \n        if z is q: \n            found = True\n        Q.extend([x"], [0.0659025482002542, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create lists containing the specified number of empty dictionaries.\ndef empty_set(length):\n empty_set = {' ' for _ in range(length)}\n return empty_set\nThe above code is a function to create sets containing specified number of empty strings.\nclass Dogs():\n    \n__price = 100 \ndata6 = Animals(\"carl\", 3, 35)\ndata7=Dawg(\"cake\", 5, 45)"], [0.06593959658420824, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\nimport re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list (array). The size of the list is determined by the length parameter.\nimport numpy as np\ndef hundred_array():\n    return np.arange(1,101).reshape(10,10)\nThe above code generates a 2D 10X10 matrix with values from 1 to 100. The array is the generated using numpy.\n\ndef rot_arr_clockwise(matrix):\n    rotated = ["], [0.0658125294777598, "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result\nThe above code is a function to convert a given tuple of positive integers into a single integer.\n\ndef string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that creates a list of empty dictionaries with the number of empty dictionaries equal to the specified length.\ndef string_to_dictionary(string):\n    if \"\\0\" in string:\n        string = string[:string.find(\"\\0\")]\n    if \"{\" not in string:\n        string = \"{\" + string + \"}\"\n    dictionary = eval(string) \n    return dictionary\nThe above code is a function"], [0.06597339027081045, "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \nThe above code is a python function to find the surface area of a square pyramid with a given base edge and height.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function that creates a list of dictionaries. \ndef remove_empty_strings(strings):\n return [x for x in strings if x != '']\nThe above code is a python function to remove empty string from a list.\n\ndef flatten(the_list):\n result = []\n for x in the_list:\n  if type(result) == type(x):\n    result = flatten(result)\n    result."], [0.0662670330584313, "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to make list of empty dictionaries.\nstring = 'abc'\nif string[0] in 'aeoiu':\n  return False\nreturn True\nThe above code checks if a word starts as a vowel.\nmax = 0; max_index = 0\nfor i,j in enumerate(nums):\n  if (j > max):\n    max = j\n    max_index = i\ndef get_mean(nums"], [0.06595391736784383, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\ndef long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a fuction to create a list of length equal to length of list containing empty dictionaries.\n\ndef odd_numbers(nums):\n  return list(filter(lambda a: a%2 == 1, nums))\nThe above code is using lambda function with filter to return a list of odd numbers in that list.\n\ndef high_low_medium(numbers):\n  n = len(numbers)\n  medium = numbers[int"], [0.06600855166483123, "def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an list length list.\n\ndef create_list(n):\n length = n\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create an list length list.\n\ndef create_tuple(length):\n  return ([0]*length);\nThe above code is a function to create an tuple of length.\n\ndef Append_list(n"], [0.06632954065372705, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes an integer and return a list of empty dict of that length.\ndef ordered_list(list1, list2):\n  ordered_list = zip(list1, list2)\n  ordered_list = []\n  x = 1\n  y = 1\n  for a, b in ordered_list:\n    if a > b:\n      y = 0\n    if a < b:\n      y = 1\n    if"], [0.06596848078961219, "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\nThe above code is a python function to find the sum of even numbers at even positions of a list.\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to generate a list with empty dictionaries which takes length of the list as input.\ndef sqrt(num):\n    return(num ** 0.5)\nThe above code is used to generate the squareroot of a given number.\ndef sum_all(func, *args):\n    total = 0\n    for i in range(0, len(args)):\n        total += func(args[i])\n    return total\n"], [0.065849894656791, "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) \nThe above code is a python function to convert complex numbers to polar coordinates.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return a list having a dictionary as element with a fixed length.\ndef class_counts(rows):\n    temp = {}\n    for row in rows:\n        label = row[-1]\n        temp[label] = temp.get(label, 0) + 1\n    return temp\nThe above code returns dictionary of all classes to their corresponding counts.\ndef class_proportions(rows):\n    counts = class_count"], [0.06572081181753678, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list of dictionary of length specified in the argument.\ndef find_empty_tuple(listtuparray):\n i = 0\n while i< len(listtuparray):\n           if not (bool(listtuparray[i])):\n                return i\n           else:\n                 i+=1\n                 continue\n The above code is a function to find and return the position of the first empty tuple in a list of"], [0.0658044587155107, "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\n\ndef sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result\nThe above code is a function to sort each sublist of strings in a given list of lists.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries.\ndef Fill_Dicts(list1, keys, value):\n    result = [dict.fromkeys(keys) for i in range(len(list1))]\n    for record in result:\n        for field in record.keys():\n            record[field] = value\n    return result\nThe above code is a function to fill every dictionary's fields within a given list of dictionaries with a"], [0.06614667714920797, "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\nThe above code is a function to find the median length of a trapezium.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " returns an empty list of length length.\n\ndef is_power_of_two (number):\n binary = \"{0:b}\".format(number)\n ones = 0\n for digit in binary:\n  if digit == '1':\n   ones = ones + 1\n return ones == 1\nThe above code checks whether a number is a power of 2. In python, 2^n is written as 2**n\ndef find_sum(num):\n"], [0.06614667714920797, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function which returns an empty list of a provided length.\nEX:\na = empty_list(3)\nprint(a)\noutput = [{}, {}, {}]\ndef list_count(li):\n odd_list = list(filter(lambda x: (x%2 != 0) , li))\n return odd_list\nThe abone code is a python function which returns odd numbers in a list.\n\"\"\"\n# what will"], [0.06606677876239282, "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea\nThe above code is a function to find the surface area of a cube of a given size.\n\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return a length of list with the {} value equal to given length\ndef dict_modify(dict1, dict2):\n for k in dict2:\n   dict1.update(dict2)\n return dict1\nThe above code is a function to modify a dict2 in dict1 if dict1 doesn't have the key from dict2.\n\ndef switch(obj: {'key': [int]}):\n\n keys = list(obj"], [0.0658289214214488, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\nThe above code is a python function to find the first non-repeated character in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create an empty list of given length.\ndef largest_number(number_list):\n largest_number = -1\n for number in number_list:\n   if number > largest_number:\n     largest_number = number\n return largest_number\nThe above code is a python function to get the largest number from the given list of numbers.\ndef isPalindrome(s): \n    return s == s[::-1"], [0.06586274467677242, "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\n\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is an incorrect code to generate empty list of the given length.\nThe correct code is shown below.\ndef empty_list(length):\n    return [{}  for _ in range(length)]\ndef input_list(list_in,input):\n  list_out = list_in.append(input)\n  return list_out\nThe above code is an incorrect code to generate empty list of the given length.\nThe correct code is shown below"], [0.06598828709503483, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to initialize an array of given length with empty dict syntax.or create a list of lists.\ndef empty_2d(length,breadth):\n empty_2d = [[]] * length\n for row in range(length):\n  empty_2d[row] = [{}] * breadth\n return empty_2d\nThe above code is a function initilaize an empty array of 2-D arras having the given lengths.\n"], [0.0660777798827054, "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is python function to create a list with \"length\" number of empty dicts in it.\n\n\ndef even_and_odd_split(nums):\n odd = []\n even = []\n for i in nums:\n  if i % 2:\n   odd.append(i)\n  else:\n   even.append(i)\n return (odd + even)\nThe above code is python function to split the given list containing only integers into 2"], [0.06587580020746904, "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)\nThe above code is a function to remove lowercase substrings from a given string.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function for creating an empty list of dictionaries.\ndef replace(target_string):\n replace = re.sub('[A-Za-z]', '', target_string)\n return replace\nThe above code is a function to replace alphabets from a given string.\ndef lengths(*strings):\n  return [len(s) for s in strings]\nThe above code is a function to return the length of strings provided.\ndef"], [0.06584143972540993, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to return an empty list of length n.\ndef list_to_string(List):\n  string=''.join(List)\n  return string\nThe above code is a function to convert given list into string format.\n# The following is the previous concept.\n# from collections import defaultdict  \n  \n# def find_hash(List):  \n#     dictionary = defaultdict(int)  \n#     for i in range("], [0.06621454531549555, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python program to create a list of empty dictionaries depending the length given by the user\nresult = []\ndef char1(s, a=0):\n    if s == \" \":\n        return a\n    a += ord(s) - 96\n    return char1(s[1:], a)\nThe above code is a function to count the number of alphabets in given string.\n"], [0.06580045407088082, "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\nThe above code is a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\nimport re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns a list filled with empty dictionaries.\ndef combine_dict_hist(dlist):\n combined = {key: sum(pair[key] for pair in dlist) for key in set(dlist[0])}\n return combined\nThe above code is a function that cumulates values associated with common keys in a list of dictionaries and returns a dictionary.\nimport copy\ndef remove_subsets(sub_list, check_list"], [0.06548674360832059, "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise addition of tuple elements in the given two nested tuples.\n\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\nThe above code is a python function to find the sum of even factors of a number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to initialize a list of size: length.\n  square = []\n  for i in range(4):\n    square.append([x ** 2 for x in range(4)])\n  return square                                                         \nIn the above code:                                                            \nsquare = [0,1,4,   \n 9]                                                 \nsquare = [0,                                        \n 1, 4, 9]                                         \nsquare ="], [0.06585843874728008, "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\nThe above code is a function for computing square roots using the babylonian method.\n\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n\nThe above code is a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that creates a list of n {} objects, n being the length of the list.\nclass Car:\n    def __init__(self, colour, max_speed, acceleration, tyre_friction):\n        self.colour = colour\n        self.max_speed = max_speed\n        self.acceleration = acceleration\n        self.tyre_friction = tyre_friction\n        self._current_speed = 0\n        self"], [0.06620184727418112, "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " returns a list of exactly len() from a dictionary, {} provided.\n\ndef cubes_and_sqare_root(a,b):\n    if ( a < 2 and b>= 1 ):\n        y = a+b\n        z = b**2\n        print(z)\n        print('above is addition, below is sq. root')\n        print(y)\n    else:\n        print('Provide valid nos.')\nc"], [0.06668751995277945, "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\nThe above code is a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate a list of empty dictionaries for the given length.\ndef slice_n_dice(text, W):\n from itertools import groupby\n return [''.join(g) for k,g in groupby(text,lambda x: x not in [' ','.','?','!',',','\"',':',';','(',')']) if k] if len(text)>W else None\nThe above code"], [0.06618931214825352, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a code to initialize a list of empty dictionaries of size equal to the given length.\n\ndef dict_adjust_zeros(list_dict,ind_list):\n length = len(list_dict)\n for i in range(length):\n  find_zero = False\n  for key,val in list_dict[i].items():\n   if val == 0:\n    find_zero = True\n  if ind_list[i]"], [0.06578856119288377, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function which creates a list of empty dictionaries as per the given length and returns it.\ndef index_multiplier(list):\n multiplied_value = 1\n for n in range(len(list)):\n     multiplied_value*= n\n return multiplied_value\nThe above code is a python function to find the index-multiplier of a given list and returns it.\n\ndef initials(str):\n split_name = str.split()"], [0.06581659591619861, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\nimport re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)\nThe above code is a function to remove uppercase substrings from a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns a list of empty dictionaries. Length will give the number of dictionaries to be created.\n\ndef duplicates(seq):\n duplicates = set()\n empty_list = []\n for value in seq:\n   if value not in duplicates:\n     empty_list.append(value)\n     duplicates.add(value)\n return empty_list\nThe above code is a function to return a list of duplicates from an"], [0.06603984381390035, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries using list comprehensions.\ndef count_vowel(word):\n cnt = 0\n vowel = ['a', 'e', 'i', 'o', 'u']\n for count, ele in enumerate(word):\n   if ele in vowel:\n    cnt+=1\n return cnt\nThe above code is a function to count the number of vowels in the given string.\ndef scientific"], [0.06593959658420824, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\nThe above code is a function to find sum and average of first n natural numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to define n number of empty dict elements.\ndef sum_list(list1,list2):\n total = 0\n for (value1,value2) in zip(list1,list2):\n    total += value1 * value2\n return total\nThe above code is a function to calculate dot product of two lists.\n# Union - A method that each element that exist in both lists.\n\ndef combine_lists(list1,list"], [0.06610587174986289, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\nThe above code is a function to find the nth tetrahedral number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes the length of the target list and returns an empty list of that much length. This is crude.\n\ndef fib_up_to_n(n):\n return list(sea_foods(1, 0, n))\nThe above code is a Python generator that generates Fibonacci series until the nth number.\n\ndef first_n fib(n): \n\ta,b = 0, 1\n\twhile a < n"], [0.06606132746654562, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\ndef frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is Python code that prints an empty list of length length (def of length below)\nto the console.\n\ndef matrix(i,j):\n     a = [[0 for row in range(j)] for col in range(i)]\n     for r in range(i):\n         for c in range(j):\n             a[r][c]= r*c\n     return a\nThe above code makes a matrix (defined by i and j), set"], [0.06608333031310207, "def is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\n\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\nThe above code is a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dict for length \u2018length\u2019.\n\ndef separator(key, arr_list)\n count = 0\n for arr in arr_list: \n   count += (key in arr) \n return count\nThe above code is a function to count the occurrence of key in each dict inside a list.\n\ndef unique_dict(dict1, dict2, dict3):\n new_dict = {} "], [0.06595391736784383, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a list comprehension that creates an empty list.\nb = np.array([input().split() for i in range(3)], dtype=int)\nThe above code creates a two dimensional list of integers\ndef increase_sales(n):\n  new_d = d * 1.1\n  return new_d\nThe above code is a function that returns revenue (new_d) when provided with revenue (d) and increase 10%.\ndef"], [0.06591625129130088, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries.\ndef number_of_homologies(H):\n return (len(H))\nThe above code is a function to return number of homologies in a given homology group H.\ndef homology_dictionary(H):\n temp = []\n for v in H:\n     temp.extend(v)\n return set(temp)\nThe above code is a function to return a dictionary containing hom"], [0.0661955595468228, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a program to create a list(with dictionaries as elements) and length as input.\nfrom functools import reduce \ndef compare_list(list1, list2): \n    comparison_list = [1 if list2[x] == list1[x] else 0 for x in range(0, len(list1))] \n    print(reduce(lambda x, y: x + y, comparison_list)) \ncomp"], [0.06605590861578814, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create an empty nested list to store a multiple new-entries.\n#logloss function\nfrom sklearn.metrics import log_loss\nX and y are training sets while actuals are validation set')\nlog_loss(y, y_preds)\n \n#Calcluation of bhattacharya distance\ndef bhattacharyya_dist(pdfs):\n covs = [tuple(map(float,"], [0.06608891440056691, "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to generate list of empty dictionaries of fixed length of input.\nd1 = {'amazon':'online shopping', 'google':'search engine', 'apple':'smartphones'}\nkey = input(\"Enter context \")\n\ndef check_in_Dict(d1,key):\n try:\n x = d1[key]\n except KeyError:\n x = \"word not present in dictionary\"\n print(x)"], [0.06630128701909721, "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\nThe above code is a function to find the sum of the largest contiguous sublist in the given list.\n\ndef _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \nThe above code is a python function to find the sum of an array.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is used to create empty lists for storing positive and negative results\n \ndef Passfail(d):\n    # num_list = empty_list(len(d))\n    # pos_result = empty_list(len(d))\n    # neg_result = empty_list(len(d))\n    # j = 0\n    # result = []\n\n    # for i in d:\n    # \tnum = (i['score'])"], [0.06631586744846109, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function wherein a list with a certain length is created an every element is a dict.\ndef min_and_max(alist):\n if not alist:\n   return (None, None)\n return (min(alist), max(alist))\nThe above code is a function to find the minimum and maximum element in a list.\ndef average_above_zero(alist):\n    i = 0\n    for el in alist:\n        if el"], [0.0658801985894367, "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to generate a list with given length with empty dictionaries.\ndef minValue(list):\n minimum = list[0]\n for i in range(len(list)):\n\tif (list[i] < minimum):\n\t\tminimum = list[i] \n return minimum \n\nThe above code is a python function to select the minimum value out of the given list of elements in second line.\ndef removeSpace(string):\n"], [0.06595391736784383, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create empty list with dictionary in every element.\nHow you check a string is a palindrome?\ndef remove_vowels(string):\n    vowels = \"aeiou\"\n    non_vowels = [char for char in string if char not in vowels]\n    return \"\".join(non_vowels)\n\nThe above code is a function to remove the vowels from a string and return a string"], [0.06564556811511407, "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\nThe above code is a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\nThe above code is a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is to create a list containing empty dictionaries of a certain length containing only one value 'length'.\n\ndef get_unique_words(my_list):\n from collections import Counter\n return Counter(my_list)\nThe above function is a function that takes in a list of string and returns number of unique words using Counter function from collection library.\n\ndef slice_dates(start_date, end_date):\n    end_date = datetime.datetime"], [0.06575770785619048, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\nThe above code is a python function to find the first odd number in a given list of numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " will return a list of given length of empty dictionaries, so [{},{},{}] would be a resultant list of length 3 as an empty list of dictionaries.\nclass Robot: \n    counter = 0\n    def __init__(self):\n        type(self).counter += 1\n    def RobotInstances(self):\n        return Robot.counter\nThe above code is a class Robot with the method RobotInstances which provides the total number"], [0.06636363903134812, "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\nThe above code is a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " snippet is a Python function that takes an integer as input parameter and returns a empty list of length of integer size.\ndef findMax(lst):\n maxN = int(lst[0])\n for i in range(len(lst)):\n  if lst[i] > maxN:\n   maxN = lst[i]\n return maxN\nThe above snippet checks each element in the list, finds and compares maximum value, return the"], [0.06586274467677242, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\nThe above code is a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python code to create and empty list of given length.\n\ndef writeIth(string, i, character):\n        length = len(string)\n        string = string[:i] + character + string[i + 1:]\n        return string\nThe above code is a python function to write a character to ith position in any given string.\n\ndef seater():\n        n = int(input(\"ingrese el tamanio de"], [0.06611159362992138, "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \nThe above code is a python function to find the smallest power of 2 greater than or equal to n.\n\ndef is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes in an integer length and returns a list of length at least one. (If length is 0, return [{}]. If length is 1, return [{}, {}], etc).\ndef binary_insertion(arr, n):\n    key = arr[n]\n    m = n - 1\n    div = 2\n    while m >= 0:\n        if arr[m] <= key:\n            break\n        else:\n"], [0.06611159362992138, "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\nThe above code is a function to extract the number of unique tuples in the given list.\n\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is creating an empty list based on the given length of the list.\nsolutions = []\nfor x in nums:\n    ##code here\nreturn solutions\nThe above function is used to iterate through given list and find the solutions to the given task.\nfib = {} \nfib[0] = 0 \nfib[1] = 1\ndef fibonacci(n): \n    if n<0: \n        print(\""], [0.06606132746654562, "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea\nThe above code is a function to find the surface area of a sphere.\n\ndef count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionarys of a given length as input.\ndef most_frequent(str):\n d = dict()\n   for c in str:\n     if c not in d:\n       d[c] = 1\n     else:\n       d[c] += 1\n return d\nThe above code is a function to find the most frequent character in a string.\ndef caesar_encrypt(text, step):"], [0.06565868228369397, "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\nThe above code is a python function that returns the number of integer elements in a given list.\n\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of length In particular, if the list consists of lists. Each of those lists consists only of empty dictionaries.\n def words_cloud(list1):\n     counter = {}\n     for word in list1:\n         if word in counter:\n             counter[word] = counter[word] +1\n         else:\n             counter[word] = 1         \n     return counter\n The above code creates a dictionary from a list, where the values"], [0.06591165867585616, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a code snippet to create empty list of desired length.\ndef tuple_variables(dim1 ,dim2, value):\n t = tuple([value for _ in range(dim2)] for _ in range(dim1))\n return t\nThe above code is a code snippet for creating a tuple of desired dimensions with all elements as value.\nCreated on Sep 7, 2016\n\n@author: mitom\n'''\n\n\ndef tuple_intersection(test"], [0.06603455184097225, "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\nThe above code is a function to find the third side of a right angled triangle.\n\ndef combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list of length length.\ndef empty_set(length):\n empty_list = [set() for _ in range(length)]\n return empty_list\nThe above code is a function to create an empty list of length length.\n\nIf a number (x) is even and >= 8, or odd and <=9, returns True\ndef my_bool(x):\n    if (type(x)!=int) or (("], [0.0658044587155107, "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return a list of dictionaries.\n def whitespace(n=10):\n      \"Make and print a list of n whitespace character\"\n      whitespace = [' ' for _ in range(n)]\n      print(whitespace)\nThe above code makes a list of a string variable and prints the variable.\ndef dict_of_empty_lists(k):\n       \"Create a dictionary of empty list with each values having n integer"], [0.06602929087930662, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is returning an  empty list of a given length where the elements are given by {}.\ndef union_all(given_set):\n return reduce(lambda ele1, ele2: ele1 | ele2, given_set )\nThe above code is returning a set containing all the elements union of all the sets input given.\nExample Input 1:\nn = 2.5\n\nExample Output 1:\n(2.5, 2) (3.5,"], [0.06578463673663286, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " returns an empty list consisting of {} nnumber of times.\ndef replace_element(list_num, index, value):\n list_num[index] = value\n return list_num\nIn the above code we are replacing an item at a particular index of a list with its corresponding value.\ndef list_confusion(list_something):\n return [type(x) for x in list_something]\n\nThe above code will return the list of values of"], [0.06589353603077275, "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \nThe above code is a python function to find the volume of a triangular prism.\n\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function that creates an empty list of dictionaries of the stated length.\ndef lower_concatenation(strings):\n t = []\n for x in strings:\n    t.append(x.lower())\nreturn ''.join(t)\nThe above code is a python funciton that appends all strings in the list to a single string and convert that to lowercase.\ndef left_shift():\n In [1]: n = input(\""], [0.06535958287754688, "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \nThe above code is a python function to check if a given number is one less than twice its reverse.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that creates an empty list of length 'length'.\n\n######################################################################################################################\n\n'''\n\n'''\n#####################################################################################################\n# Regular Expressions\n#####################################################################################################\n\n#example 1 \nimport re #here we importing module 're' \npattern = re.compile(\"^([A-Z]{1})([a-z]{8})(\\d{3})([A"], [0.06624702474693304, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes in an integer and creates a list of that length of empty dictionaries.\nimport re\ndef hextorgb(hex):\n  was_hescaped = re.search(r'#\\r\\n[0-9]+',  he#the above code is a function that takes in an hexidecimal code as st\nxt)\n  hex = text.replace('#', '0x')\n  if(was"], [0.06614667714920797, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \nThe above code is a python function to check whether the given number is even or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of empty dictionaries based on the length number.\nimport math \n  \n\ndef getAmicable(value): \n    divisorSum = 1; \n    for i in range(2, int(math.sqrt(value)) + 1): \n        if (value % i == 0):  \n            if (value / i == i): \n                divisorSum += i; \n"], [0.06596359896968222, "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\n\ndef ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate list of empty dictionaries of 'length' specified by user.\ndef concat_two_strings(str1,str2):\n  str=(str1+str2)\n  return str\nThe above code is a function to concatenate two strings.\ndef add_element_to_list(list,element):\n  list.append(element)\n  return list\nThe above code is a function to append an element to"], [0.06631004638880206, "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\nThe above code is a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\nThe above code is a function to multiply two integers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates an empty list of dictionaries\ndef match(num_list, pattern):\n    if num_list is None or len(num_list) == 0:\n        return False\n    elif pattern is None or len(pattern) == 0:\n        return False\n    elif pattern is None or len(pattern) and len(pattern) !=0 and pattern.islower():\n        return False\n    elif \n    else:\n        for"], [0.0661831046849807, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list using list comprehension.\ndef divisibility(a,b,c):\n if a%b==0 and a%c==0:\n  return True\n else:\n  return False\nThe above code is a function to check if three numbers are divisible with each other or not.\ndef sum_set(set_a,set_b):\n sum_set=list(set_a ^ set_b)"], [0.06640727717053536, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\nfrom itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \nThe above code is a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create empty list for N length.\n\ndef delete_nth(order,max_e): return [x for (idx,x) in enumerate(order) if order[:idx].count(x)<max_e]\nThe above code is a python function to remove duplicates from a list after nth occurrence.\n\n\ndef decode_sequence(encoded_seq):\n    # Initialize target sequence with a"], [0.06643956099237244, "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \nThe above code is a function to find number of lists present in the given tuple.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list (of dictionaries) with a certain length\nclass ListNode:\n    def __init__(self, data = 0, next = None):\n        self.data = data\n        self.next = next\nclass SingleLinkedList:\n  def __init__(self): \n    self.head = None\n    self.tail = None\n\n  def append(self, data): \n    if self."], [0.0661831046849807, "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is an empty list that consists of length dictionaries inside a list.\nimport threading, time\ndef sleeper (n,name):\n  print('{}: sleeps for 5 secs \\n'.format(name))\n  time.sleep(n)\n  print('{}: awake now) \\n'.format(name))\n#run it n no. of times\nstart = time.time()\nfor i in range(6):\n  t = thread"], [0.06606677876239282, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \nThe above code is a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a pythonic way to create a list that contains empty lists that are of the same number of elements.\ndef check(arr, i, j,l,b): \n  \n        for k in range(0, l*b, b) : \n            for m in range(k, k + b) : \n                  \n                  if(arr[i][j] in arr[i+1][m]) : \n                        return False;"], [0.06649326511590437, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a length equal to the length of the input list and assigns its items as empty dictionaries.\n\ndef proper_alternate_contigs(genome, N):\n alternate_contigs = empty_list(len(genome))\n start = 0\n value_dict = {}\n for i in range(len(genome)):\n  value_dict[genome[i]] = i\n for i in range(len(gen"], [0.06616471804873945, "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\nThe above code is a function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create empty list of dictionary using list comprehension.\ndef trunctuate_words(filename, n):\n fp= open (filename , 'r' )\n out = open ('trunctuate_results.txt' , 'a' )\n for line in fp:\n theline =line.split(n)\n key = theline.join().strip()\n out = open(key.txt, 'w')\nThe above code is"], [0.06594434360076058, "def rectangle_area(l,b):\n  area=l*b\n  return area\nThe above code is a function to find the area of a rectangle.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " builds a list of length equal to length passed in the function.\ndef if_condition():\n count = 0\n x = 1\n if (count == 0):\n     count = count + 1\n     x = 2\n     return x\n The above code builds a condition and runs when the above condition will be true.\nimport threading\nt = threading.Thread(target=lambda q, arg1: q.put(run_func(arg1)), args"], [0.06584143972540993, "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \nThe above code is a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a Python function to create an empty list of dictionaries of length provided.\n\ndef list_separator(size):\n    re_list = [input().strip().split(' ') for x in range(size)]\n    return re_list\nThe above code is a Python 2.7.x function to accept a space seperated list of words from command line input and places it in a Python nested list of words.\n\ndef id_number_"], [0.06601369131349882, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return empty list of required length. Return same number of empty dictionaries inside a list.\ndef addition_times_m(m, n, a):\n elems = [m for el in range(n)]\n for i in range(n):\n   elems[i] = a\n    \n return (sum(elems))\nThe above code is a function to compute m by multiply n elements and adding n times.\n\nB C"], [0.06584143972540993, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list of a given length.\ndef format_string(name):\n output = (\"Hello {name}\".format(name = name))\n return output\nThe above code is a python function to give the desired output when run.\ndef get_items(input_list):\n output = input_list[1:4:2]\n return output\nThe above code is a function that displays items from a given list.\ndef not"], [0.06588462055792381, "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\n\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \nThe above code is a function to move all the numbers to the end of the given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a blank list of the specified number of elements.\ndef dict_intro(length):\n dict_intro = {i: i ** 2 for i in range(1, length + 1)}\n return dict_intro\nThe above code is a function to create a dictionary of the specified length consisting of squared numbers from 1 to n\n\ndef dict_copy(sample_dict):\n dict_copy = sample_dict.copy()\n"], [0.065845656135163, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \nThe above code is a function to find the number of ways to partition a set of Bell numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python program to generate a list of empty dictionaries with a given length.\ndef additionToList(list1, key, value): \n    list1[key] = value\n    return list1\nThe above code is a python program to insert a key-value pair in a list of dictionaries.\ndef addKeyToList(collect, key):\n return collect.append(key)\nThe above code is a python program to add a key to"], [0.06642700861519445, "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\nThe above code is a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return an empty list of a given length\ndef binary_search(key, arr):\n l, r = 0, len(arr) - 1\n while l < r:\n  mid = (l + r) // 2\n  if arr[mid] < key:\n   l = mid + 1\n  else:\n   r = mid\n return l if arr and arr[l] == key else -1\ndef binary_search("], [0.0661831046849807, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate empty lists.\ndef print_list(input_list,input_type,input_start,input_end):\n if input_type == 1:\n     for i in range(input_start):\n     \tprint(input_list[i])\n else:\n \t for i in range(input_start,input_end):\n     \tprint(input_list[i])\nThe above code is a function to print"], [0.06579646970614658, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string\nThe above code is a function to apply a given format string to all of the elements in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes in a list length and returns a list of empty dictionaries with the given length.\ndef list_of_string(length):\n list_of_string = [str() for i in range(length)]\n return list_of_string\nThe above code is a function that takes in a list length and returns a list of empty strings with the given length.\n\ndef index_of_capital_letter(list__):\n location = ["], [0.06622095644296293, "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\nThe above code is a function to find nth centered hexagonal number.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " helps you to create a list of dictionary of the given length.\n\ndef pattern_A(n): \n for i in range(1,n+1):\n    for j in range(0,i):\n        print(i,end=\" \")\n    print()\nThe above code is a pattern program to print a number pyramid.\n  \ndef pattern_B() :\n    print(\"\\n\")\n    n = 256\n    num ="], [0.06591625129130088, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list of size length.\ndef max_sub_list(length):\n sublist = []\n for i in range(length):\n     sublist.append(random.randrange(-100,100))\n sublist.index(max(sublist))\n The above code is a function to create a list and returns the position of the maximum element in the sublist created.\ndef list_manipulation(max_num,"], [0.06663976760715547, "def closest_num(N):\n  return (N - 1)\nThe above code is a function to find the closest smaller number than n.\n\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list of dictionaries of length N.\ndef max_element_index(lst):\n return lst.index(max(lst))\nThe above code is a function to find the index of the maximum element in a list.\n'''\n\nN= int(input())\nfor i in range(N):\n    for k in range(0,i+1,1):\n        print('*'*k"], [0.0662670330584313, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function which creats a list of empty dictionaries .\n  def count_Triplets(arr, r):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j, len(arr)):\n                if (arr[i] + r == arr[j] + r == arr[k] + r):\n"], [0.06638090834795204, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list filled with a bunch of dictionaries.\ndef palindrome_permutation(s):\n if s == s[::-1]:\n    return 1\n else:\n    return 0\nThe above code is a function that returns true if a string is a permutation of a palindrome and false otherwise.\n'''"], [0.06597832765317116, "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \nThe above code is a python function to find the maximum difference between any two elements in a given array.\n\ndef swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns a list with as many elements as the length passed as an input parameter.\ndef fibonacci_numbers(length_list):\n first_term = 0\n second_term = 1\n count = 0\n sequence = []\n while(count < length_list):\n  next_term = first_term + second_term\n  sequence.append(next_term)\n  first_term = second_term\n  second_term"], [0.06612897216078467, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate a new empty list by taking loop size as the argument.\n\ndef without_string(s,t):\nfrom string import maketrans # Required to call maketrans function.\n\nintab = \"aeiou\"\nouttab = \"12345\"\ntrantab = maketrans(intab, outtab)\n\nstr = \"this is string example....wow!!!\"\nprint str.translate"], [0.06594434360076058, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\nThe above code is a python function to remove odd numbers from a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of empty dictionaries of length n.\nclass car{\n    wheels=4;\n    engine={};//used for storing information about car engine\n    seats={};\n    body={};\n}\nThe above class is a python class to define a car.\ndef product(num1,num2):\n      product=num1*num2\n      return product\nprint(product(5,5))  The above"], [0.06603984381390035, "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element\nThe above code is a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns a list of length consisting of empty dictionaries.\ndef merged_dictionaries(d1, d2):\n\"\"\"\nFrom two text strings,  d1 and d2, each with words separated by a solo space,\ncreate and return a merged, sorted dictionary.\n\nE.g.:\nInput: {\"tiger\":23, \"dog\":34, \"horse\":17}\n       {\"projects\":1234, \"ideas"], [0.06596359896968222, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is an expression to create an empty list of a given length filled with empty dictionaries. \n    https://www.geeksforgeeks.org/empty-list-expression/\ndef checkKey(key,dictio):\n   if key in dictio.keys():\n      return True\n   else:\n      return False\nThe above code is a python funciton to check if a key exists in a dictionary or not. \n"], [0.06597832765317116, "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\n\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\nThe above code is a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is used to create a list of empty dictionaries\n\n\nfs = (x*x for x in range(1, 11))\ndef f(dic):\n    return dic.__len__()\nreturn (f(i) for i in empty_list(5))\nThe above code is used to print the length of the dictionaries formed\n\nThe above code is a generator that returns the length of a list formed using the above code\ndef factorial"], [0.06614937074202536, "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list\nThe above code is a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes in an integer length and returns an empty list with length length.\n\ndef double_list(group):\n return [elt + elt for elt in group]\nThe above code is a function that takes in a group of numbers and returns a new list with each element doubled.\n\ndef all_else_fails(function,data):\n try:\n    data = function(data)\n    return data\n except:\n return None"], [0.0658801985894367, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\nThe above code is a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes in an integer value and creates and returns a list of dictionaries of the length of the integer value value.\n\ndef addition(nums):\n add = nums[0]\n for num in nums[1:]:\n  add+=num\n return add\nThe above code is a function that takes a list of integer numbers, adds the numbers and returns the sum.\n\ndef list_partial_sort(nums, k):\n"], [0.06656034962224291, "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is to create a string of given length.\nimport numpy as np\na=np.array([0,1,2,3,4,5,6,7.6,9,10])\nb=np.where((a%1)==0)\nmap(int,my_list)\nThe above code is a function to map a list to numeric data.\nclass ABC():\n    def __init__(self, param):\n       "], [0.06579646970614658, "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\n\nimport cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\nThe above code is a function to convert polar coordinates to rectangular coordinates.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate an empty dictionary list of provided length. The default is empty dictionary or {} .\nimport itertools\ndef cs_cube(sequence):\n cube=list(itertools.product(sequence,repeat=3))\n return cube\nThe above code is a function to find the cross product cube for the given input list elements.\n\ndef file_manipulation(txtfile,mode,append_str='',delete_str=''):"], [0.06598828709503483, "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create list of given length having empty dictionary elements.\ndef countingsort(array1, max_val):\n    m = max_val + 1\n    count = [0] * m                \n    for a in array1:\n    # count occurences\n        count[a] += 1             \n    i = 0\n    for a in range(m):            \n        for c in range(count[a]):  \n"], [0.06607226280074706, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to store  number of dictionaries equal to the length of the given list.\n\ndef joint_list(A, B):\n for i in range(0, len(A)):\n        B[i].update(A[i])\n return B\nThe above code is a python function to combine list of dictionaries into a single dictionary.\ndef dupl_col_to_new(old_df, dup_cols):\n "], [0.06659384955124292, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to return an empty list which is of \u2018n\u2019 elements, where \u2018n\u2019 is customised.\ndef sum_Num(n):\n  return(sum(range(1,n+1)))\nThe above code is a python function to add the numbers from 1 till \u2018n\u2019.\n\n\n\u00ab Previous Thread (Solution) |  Next Thread (Solution) \u00bb\n\n_thread.start_new_thread ("], [0.06592086910331438, "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\nThe above code is a function to find the nth number in the newman conway sequence.\n\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \nThe above code is a function to count those characters which have vowels as their neighbors in the given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of dictionaries of desired length (length being inputted as parameter). Hint: use comprehensions.\ndef flatten_list(flat_list):\n for i in flat_list:\n   if isinstance(i, list):\n     flatten_list(i)\n   else:\n     unscores.append(i)\n return unscores\nThe above code is a function to flatten a list. The function should"], [0.06635754789751282, "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\nThe above code is a function to convert more than one list to nested dictionary.\n\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\nThe above code is a function to find the n most expensive items in a given dataset.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to initialize lists of empty dictionaries with a specific length.\ndef print_sorted(a_list):\n a_list.sort()\n       print(a_list)\n       return None\nThe above code is a function to sort a list but return nothing.\n\ndef print_full_name(a, b):\n   print(\"Hello\",a + \" \" + b+\"!\",\"You just delved into python.\")\n\n   return None"], [0.06595874457389302, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create list of list of empty python dictionary which can be used to create table of np.ndarray.\ndef count_nonzero(list):\n len = 0\n for e in list:\n  if (e != 0):\n    len += 1\n return len\nThe above code is a function to count the number of non zero values in a list.\ndef recursive_10():\n if(10<=10):\n  return recursive_10"], [0.06586274467677242, "def min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of an arbitrary n length. This list is filled with n dictionaries.\ndef frequency_count(my_list):\n my_dict = {}\n for item in my_list:\n  my_dict[item] = my_dict.get(item, 0) + 1\n return my_dict\nThe above code is a function that takes as input a list of integers, and returns a dictionary with keys the unique elements of the list and values the"], [0.06589802992867909, "import re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is to make a list of empty list with desired length.The idea is to check whether an integer is prime or not.\ndef find_factor(number):\n factors = []\n for i in range(1, number + 1):\n      if number % i == 0:\n          factors.append(i)\n return factors\nThe above code is a function to find factors of a number.\ndef multiple_tables(n):\n for i in range(1"], [0.06580045407088082, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " snippet will return empty list with the length of the first argument.\ndef random_bag(nums):\n from random import choice\n return choice(nums)\nThe above code snippet will pick the random number from the given list.\ndef lemur_pop(island):\n total = 0\n for cell in island:\n total += len(cell)\n return total\nThe above code will give us the total number of lemurs on the island.\n\n"], [0.06588906630647381, "def armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list of the specified length.\ndef make_numbers_list(length):\n list = [x for x in (sys.stdin.readline().split(' '))]\n if (len(list) is not length) or not list:\n\n  # null check\n  return -1\n\n return list\nThe above code is a function to take numbers list as an input and check if the input match the required length or not"], [0.06601886088712212, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function which accepts an integer input, and returns an empty list.\nclass test: \n  def __init__(self,a): \n     self.a = a \n  def __str__(self): return(str(self.a))\n  \nThe above code is a python class test to check the string < code not working properly.\nclass test:\n    def __init__(self, name, id):\n        self"], [0.06598828709503483, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes in a positive integer length, and returns a list of length many empty dictionaries.\ndef head_node(linked_list):\n return(linked_list[\"head\"])\nThe above code is a function to get the head node of a given Linked List.\n\ndef get_random_value(t):\n if random.randint(0,1) == 0:\n  return t['left']\n else:\n  return"], [0.06624702474693304, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create list of empty dictionaries.\ndef ordered_count(input):\n  list = []\n  i = 0\n  while i < len(input):\n    count = 1\n    j = i +1\n    while j < len(input):\n      if input[i] == input[j]:\n        input[j] = ''' (do nothing)'''\n        count += 1\n      j += 1\n    list"], [0.0661831046849807, "def unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\nThe above code is a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of all null dictionaries.\ndef create(seq): \n\treturn [x for x in seq if seq.count(x) == 1] \nThe above code return all the unique elements in a list.\ndef deep_list(list1):\n  if list1 == []: \n       return list1 \n  if type(list1) == list: \n    return deep_list(list1["], [0.06615866649344203, "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\nThe above code is a function to find the lateral surface area of a cylinder.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries.\ndef reverse_list(list1):\nlist2 = list1.reverse()\nprint(list2)\nThe above code is a function to get the reverse of a list and then print the reverse list.\ndef add_samekey(dict1):\ndict1 = {'Mini': 4, 'Jerry': 7, 'heathcliff': 12}\ndict2 = {'Winnie':"], [0.06594911711982122, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\nThe above code is a python function to find the first repeated character in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is converting a list to a dictionary of empty dictionary items of the provided length.\n\ndef is_json(str1):\n try:\n     p_json=json.loads(str1)\n     flag=True\n except ValueError as e:\n     flag=False\n return flag\n The above code is checking if the given string is a json string. If yes, it will return \"True\".\n\ndef code_to_remove_line(file,"], [0.065998361091255, "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\n\nimport math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\nThe above code is a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a method to return a list of empty dictionaries. The arguments are the number of empty dictionaries.\ndef box(height, width): \n    return [(f'{j}'*width).strip('0')[:-1] for j in f\"{int(f'{height}'*width):d}\"]\nThe above code is a python function to create a box with specified height and width. Arguments should be in (int,int"], [0.06617693676866047, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list.\n\ndef even_numbers(n):\n    return [x*2 for x in range(n) if x%2 == 0]\nThe above code is a function to print the even numbers.\n\ndef factors_number(number):\nfor i in range(1,number+1):\n    if (number%i==0):\n        print(i)\nThe above code is a function to find"], [0.06606677876239282, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a using list comprehension to make a list with empty list inside.\ndef print_two_longest_names(names):\n s = sorted(set(names))\n d = s[-2:]\n for name in d :\n   print(name)\nThe above code will print the two longest names.\n\ndef print_column(matrix, c_number):\n \"\"\"\n :param matrix: list[][] full data matrix\n :param c"], [0.06665547581129097, "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \nThe above code is a function to check if given tuple contains no duplicates.\n\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\nThe above code is a function to compute the sum of digits of each number of a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return a list of empty dictionary of input size.\n\ndef find_complement(num):\n  mask = num\n  mask |= mask >> 1\n  mask |= mask >> 2\n  mask |= mask >> 4\n  mask |= mask >> 8 \n  mask |= mask >> 16 \n  return num ^ mask\n\n\nWe have a number N . We need find number of 1s in bin(N) .\n"], [0.0658044587155107, "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA\nThe above code is a function to find the lateral surface area of a cube given its side length.\n\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an a followed by three 'b'.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that creates a list of dictionaries.\n\ndef list_dict(names, ident):\n ident_list = [[i,  0] for i in ident] # This line creates a list of the given ids\n dict1 = dict(zip(names,  ident_list))\n return dict1\nThe above code is a function that creates a dictionary.\nfrom collections import defaultdict\n# This is to create dictionary which is not present in another"], [0.06579250546503371, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list of zeroes specified\n by the user.\n\ndef string_length(strings):\n string = [len(string)for s in strings]\n return string\n#The above code is the function to find the lengths of all the strings using\n the list comprehension.\n\ndef sliced_string(s):\n s = s[::2]\n return s\nThe above code is a function to return the sliced string after removing"], [0.06577298075612527, "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\nThe above code is a function to count the number of occurence of the string 'std' in a given string.\n\ndef re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates an empty list of a given length.\nimport numpy as np\nx = np.logspace(0, 3, 10)\nprint(x)\nThe above code creates a floating point array with 10 numbers. The spacing between the consecutive numbers are consistent across different points.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code is a function to create an empty list"], [0.06565868228369397, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", ": The empty list is created by list comprehension and the length is passed as an argument.\ndef FindDistinct(sequence):\n    output_list = set()\n\n    for element in sequence:\n        output_list.add(element)\n    return sorted(output_list)\nThe above code: This code depends on the set function to get only the unique elements and then we use the sort function to put them in order\nResources 1: For creating tuples:-"], [0.06747891981527343, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nThe above code is a function to interleave 3 lists of the same length into a single flat list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return a mutable empty list of a given length (i.e. list of empty dictionaries or list of lists or list of sets or any such empty set of data structure)."], [0.06579646970614658, "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\nThe above code is a python function to remove odd numbers from a given list.\n\ndef sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is Python code which is basically a list comprehension that creates a list of empty dictionaries.\n\ndef go_right(position, steps):\n position = position + steps\n return position\nThe above code increments the value of position by the amount of steps and then prints it.\n\ndef get_luminance(a):\n hue, saturation, value = a\n luminance = 0.2126 * value ** 2.2 + 0.7151 * value + 0"], [0.06572081181753678, "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \nThe above code is a python function to count the number of positive numbers in a list.\n\ndef sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " defines a function where a list of empty dictionaries are defined according to the length\n\ndef list_sum(alist): \n    \"\"\"The function takes in a list of numbers as input and computes its sum \"\"\"\n    if not alist: #using the pythonian idiom for empty list\n        return 0   #more informative for the user\n    else:        #if user has provided a list\n        sum = 0\n        for item in alist:\n"], [0.0660376510235169, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\nThe above code is a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a list comprehension to create a list of a given length, with each element a dictionary (populated with NoneType objects).\n\ndef order_list(array):\n for element in array:\n     array = array[1:] + [array[0]]\n     return array\nThe above code is function which making use of a step input, selects an element in a list using mod operator and returns a reverse shuffled list.\n\ndef delete_list_item("], [0.06593487584628388, "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\nThe above code is a function to merge three lists into a single sorted list.\n\ndef find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\nThe above code is a function that counts the number of pairs of integers in a list that xor to an even number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns a list of a given length, whose elements are an empty dictionary.\n\n\u200b\ndef convert_to_list(data):\n list(data.items()) if type(data) is dict else data\n \ndef Convert(dict)\n return dict.values()\nThe above code is a function to convert a dictionary to a list.\n\ndef convert_to_list(data):\n list(data.items()) if type(data"], [0.0658801985894367, "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \nThe above code is a function to find the sum of numbers in a list within a range specified by two indices.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list containing dictionaries.\n\nIn the following code, a list containing dictionaries is given. The code returns a list containing only dictionaries containing name, email and phone_number given by user.\n\ndef list_to_dict(list1):\n    list2 = empty_list(len(list1))\n    key1 = input(\"name: \")\n    key2 = input(\"email: \")\n    key3"], [0.06585843874728008, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\ndef my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True\nThe above code is a function to check if a dictionary is empty\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate a list filled with empty dictionaries.\nfor i in range (1000000):\n some_list.append(str(i))\nThe above code is a standard loop of 1 million iterations appending each iteration value to the list\ndef my_reverse_list(to_reverse):\n  if to_reverse:\n    return to_reverse.reverse()\n  else:\n  \traise Exception('empty list')\nThe above code is"], [0.06628059629750394, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function that returns a list of empty dictionaries based on the specified length.\n\n\nimport ast,sys\ninput_str = sys.stdin.read()\ncontrol_list = ast.literal_eval(input_str)\nsum_digits_strn = 0\nfor l in control_list:\n sum_digits_strn += l[1]-l[0]+1\nprint(sum_digits_strn)"], [0.06693039801621577, "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to maximize the given two tuples.\n\ndef armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\nThe above code is a function to check whether the given number is armstrong or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list according to the size.\ndef dicto(keys, values):\n for i,k in enumerate(keys):\n    {values[i]: k}\nThe above code is a function to create dictionary from the given 2 lists.\n"], [0.06612897216078467, "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\nThe above code is a function to get the angle of a complex number.\n\ndef odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nThe above code is a python function to check whether every odd index contains odd numbers of a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python dict comprehension to create a list of dictionaries.\nFor example,below mentioned list will be returned by a function.\n[{}, {}, {}, {}, {}]\n\ndef df_categorycross(inputData):\n  inputData['xID']=inputData.index \n  x=pd.get_dummies(inputData)\n  x['xID']=x.index \n\n  for categoriescolumn in list(x"], [0.066205317464383, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\nThe above code is a function to remove all whitespaces from a string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return an empty list with the provided length.\nrange(8)\nThe above code is a function to return a list with numbers from 0 to the number provided.\ndef num_pattern(n):\n all_singles = [\"A\", \"C\", \"G\", \"T\"]\n dna = all_singles*n\n return dna\nThe above code is a python function to return a DNA sequence string with the provided number of positive and"], [0.06601886088712212, "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nThe above code is The input is defined as two lists of the same length. a function to count indices where the lists have the same values.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " implements a function empty list with the the input defined as the length of the list to be generated and the string {}).\n\n# Python 3 code to find \n# factorial of given number\ndef Factor(n):\n\tf = 1\n\tfor i in range(1,n + 1):\n\t\tf = f*i\n\treturn f\n\nprint(Factor(5))\nThe above code is a python function to find the factorial of a"], [0.06630827807837064, "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python method to fill a list with empty dictionary of a specified length.\n{\n    \"a\": 1,\n    \"b\": 2\n} \ndef flatten_dict(dd, separator ='_', prefix =''): \n  return { prefix + separator + k if prefix else k : v \n    for kk, vv in dd.items() \n    for k, v in flatten_dict(vv,"], [0.06609650282376789, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\nThe above code is a function to check whether a given string is a decimal number with a precision of 2.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " checks the length of the provided list. If the provided length is greater than 0,\nit returns a list of empty dictinaries.\n\ndef dictionary():\n#Creating dictionary\n information = {}\n weight = {}\n information[\"Apple\"] = {}\n information[\"Samsung\"] = {}\n information[\"Motorola\"] = {}\n information[\"Nokia\"] = {}\n information[\"Apple\"][\"Height\"] = \"178 cm\"\n information[\"Apple\"][\"Weight\"] ="], [0.06601369131349882, "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function that takes only single argument and returns empty list with that length.\n\nprint(args[0], args[1:]) \nThe above code is a Python function that prints args[0] and all other values in the slice of args[1:]\nimport json \ndef diff(old_file, new_file):\n  with open(old_file, \"r\") as f:\n    old_data = json.load(f"], [0.06596848078961219, "def ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create empty list of given length.\ndef power(base,exp):\n if exp == 1:\n  return(base)\n if exp != 1:\n  return(base*power(base,exp-1))\nThe above code means that define a function `power(base, exp)`, which returns the exponential value of the number provided.\ndef string_reverse(str1):\n r_string = ''\n index = len("], [0.06594434360076058, "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume\nThe above code is a function to find the volume of a sphere.\n\ndef count_list(input_list): \n    return len(input_list)\nThe above code is a python function to count the number of lists in a given number of lists.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a empty list for given length of the list.\ndef first_column(matrix):\n    new_matrix=[]\n    for i in matrix:\n        new_matrix.append(i[0])\n    return new_matrix\nThe above code is a python function to return the first column of a given matrix with all rows.\nimport numpy\nimport math\ndef gaussian_equation(x,*"], [0.06634396198591686, "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\n\ndef odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\nThe above code is a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create empty dictonary by looping over a list of {} with a determined length.\n\ndef isPrime(n):\n if (n <= 1):\n  return False\n if (n <= 3):\n  return True\n if (n % 2 == 0 or n % 3 == 0):\n  return False\n i = 5\n while(i * i <= n):\n  if (n % i == 0 or n % (i +"], [0.06582068327621618, "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\n\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns an empty list with specified length.\n#   array of length n*2 with minimum \n#   newly inserted element at beginning of array\n#   added at end of the array\nimport collections\nclass FirstUnique:\n\n    def __init__(self, nums: List[int]):\n        self.deque = collections.deque()\n        self.uniques = set()\n        for num in nums:\n           "], [0.06596848078961219, "def smallest_num(xs):\n  return min(xs)\n\nThe above code is a python function to find smallest number in a list.\n\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\nThe above code is a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate a list of empty dictionaries.\ndef empty_set():\n return set()\nThe above code is a python function to create an empty set.\ndef flatten(items):\n \"\"\"Yield items from any nested iterable;\n \"\"\"\n for x in items:\n     if isinstance(x, Iterable) and not isinstance(x, (str, bytes)):\n         for sub_x in flatten(x):\n"], [0.06587580020746904, "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\n\ndef sum_odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\nThe above code is a python function to find the sum of all odd natural numbers within the range l and r.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create the list which has \"dictionary\" objects as elements.\ndef matrix_creation(): \n    matrix = [[0] * 8 for i in range(8)]\n    list = [(i + l, i - l) for l in range(row + 1) for i in range(8)]\n    return matrix \nThe above code is a python function to create the matrix which stores and returns the elements with row and column.\n"], [0.0660777798827054, "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \nThe above code is a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\nThe above code is a python function to remove odd numbers from a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of dictionary objects of the given length, in this case 3.\ndef matrix(m,n,p):\n    a = [[[0 for i in range(p)] for i in range(m)] for i in range(n) ]\n    return a\nThe above code is a python function to create an empty matrix of m x n x p dimensions.\nvec = [2, 4, 6]\nresult = ["], [0.06612314350056786, "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\ndef neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \nThe above code is a python function to return the negative numbers in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function that returns an empty list which is of a specific length.\ndef first_second_pairs(arr, c):\n if c >= len(arr)//2:\n  return -1\n for i in range(0,len(arr),2):\n  print(arr[i], arr[i+1])\n  return\nThe above code is a python function that takes in two inputs, arr is a list of digits and c is"], [0.06615265298154309, "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \nThe above code is a python function to remove first and last occurrence of a given character from the string.\n\ndef get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to return an empty list of specified length in Python.\ndef f(m,n):\n    if m==0:\n        return n+1\n    elif n==0 and m > 0:\n        return f(m-1,1)\n    return f(m-1,f(m,n-1))\nThe above code is a python function which takes in two integers m and n and returns the value of the fib"], [0.06575393660153736, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to make list of dictionaries with static number of empty dictionaries. Length is required in the function call.\ndef single_letter_count(str1,ch):\n str1.count()\nThe above code is a function to count the frequencies of a given single character in a string.\ndef multiple_letter_count(str1,retrun_dict=True):\n  import collections\n  return \"\".join(letter for letter, count in"], [0.0659070910477931, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\nThe above code is a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns an m times n-length list consisting of empty dictionaries, where m and n \nare both input parameters.\ndef get_evens(n):\n     evens=[]\n     for i in range(1,n+1):\n         if i%2==0:\n             evens.append(i)\n     return evens\nThe above code is a function that returns an n length list of numbers consisting of all even"], [0.06595874457389302, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) \nThe above code is a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes in an input number and creates a list containing sets.\ndef addition(test_list):\n test_list.append([1, 2, 3]) \n test_list.extend([2, 3, 4]) \n return test_list\nThe above code is a function that takes in a list and returns a list with its elements added..\n\ndef repeater(string, n):\n  return string*n\nThe above code"], [0.06573535518674363, "import re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\nimport re\ndef text_match_wordz_middle(text):\n        return bool(re.search(r'\\Bz\\B',  text))\nThe above code is a function that checks if a strings contains 'z', except at the start and end of the word.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that creates a list of empty dicts. If a list with the exact same length will be created, a simple 'length' variable should be passed. \n\n def convert_list(list):\n   converted = [ (str(value)+'!') if isinstance(value,str) else value for value in list ]\n   return converted\nThe above code is a function to convert a list of numbers to str and add an exclamation mark at the end"], [0.06613465794622751, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nThe above code is a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is an example with comprehension to generate an empty list of dictionaries of the length which is \"length\"\nNumbers can be negative or positive. If you find a zero there is no way to move forward so, you have to move back and search for \"next\" non zero number on the right hand side.\n\ndef zero_sum(arr):\n    answer, n = [], len(arr)\n\n    if n == 0:\n        return []\n    \n   "], [0.0657172195743306, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return empty lists with the help of list comprehension find the answer to the above question.\ndef get_letters(letter):\n  letter = 'a'\n  letter *= 5\n  return letter\nThe above code is a function to get five times a single character Python is not a strong typed and the code tries to assign a value to the character\nch and resulting in 'aaaaa'.\ndef del_second(input_list):\n  input"], [0.06593487584628388, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of empty dictionaries, given the length of the desired list.\ndef array_front9(nums):\n sets = set(nums)\n return 9 in sets and len(sets) == 1 or \\\n len(sets) == 3 and 4 in sets\nThe above code checks whether empty sets has 9 in it and also to check if the sets lenght is equal to 1. For example, it checks if 1459 is a winner, or"], [0.06598238449748833, "def volume_cube(l):\n  volume = l * l * l\n  return volume\nThe above code is a function to find the volume of a cube given its side length.\n\ndef swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return an empty list of dictionary objects.\nThe file goptest.txt contains a list of numbers separated by spaces per line. The first line contains the list name and the following lines contain numbers. Remove the word \"NAME\" from the beginning of the list, and show the names and IDs of the numbers in the list after the word \"VALUE\".\ndef read_file(fname):\n name_list = fname.read().split()[1"], [0.065998361091255, "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \nThe above code is a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list of a specific length.\ndef extend_sentence(words): \n    return words.extend(words)\nThe above code if a function to extend a list by one.\ndef convert_2d_string(string):\n     return \"[\" + \", \".join(map(str, string)) + \"]\"\nThe above code is to convert a list (or any iterable list) to a string."], [0.0662158418168745, "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \nThe above code is a function to flatten a given nested list structure.\n\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\nThe above code is a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries of required length.\ndef create_dict_of_lists(thetype=None,thelist=None):\n givenlist = thelist\n giventype = thetype\n givendict = {} # create an empty dictionary\n for var in givenlist: # iterate over any list\n  if thetype == None: # if function parameter thetype is empty\n   givendict.update({var: 0}) # put"], [0.06601886088712212, "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns an empty list, taking length as input. The line preceding code can be written as (but only if you accept that an undefined list is of length zero):\n\nempty_list = [{} for _ in range(length)]\n\n\n\ndef concat_list(list1, list2):\n   list3 = []\n   for i in range(2):\n       list3.append(list1[i] + list2["], [0.06589353603077275, "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\nThe above code is a python function to calculate the product of the unique numbers in a given list.\n\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function that takes as input an integer, returns a list of dictionaries, where the length of the list is the integer and the length of each dictionary is the integer.\ndef scale_randomly(input_value, sigma_value):\n input_low = input_value - (3 * sigma_value)\n input_high = input_value + (3 * sigma_value)\n output = round(np.random.uniform("], [0.06607226280074706, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\ndef count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of lists of empty dicts given its length.\ndef combinations(*args):\n    lists   = [list(arg) for arg in args]\n    \n    combil  = [lst for lst in lists]\n    length  = [len(list) for list in lists]\n\n    indices = [0 for list in lists]\n    \n    i       = 0\n    \n    while i < len("], [0.06624702474693304, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a program to returns an empty list using list comprehension.\ndef lists_add_2():\n lis1 = [1, 2, 3] \n lis2 = [4, 5, 6] \n print(lis1 + lis2)\nThe above code is a program to InterConcatenates two lists into a single list.\nnum = () \nprint(num+ 1)\nThe above code results in an error.\nprint"], [0.0666523792007473, "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2\nThe above code is a function to replace characters in a string.\n\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\nThe above code is a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a method to create an empty list of a specified length.\n>|\n#2 dict\n#3 #4\nemail = 'sygpc@qd.cn'\nstr_list = [char for char in email if char not in 'cn']\nstr_12=''.join(str_list)\nprint(email)\nprint(str_list)\nprint(str_12)\n#5 print\u65b9\u6cd5\u8f93\u51fa"], [0.06600746808201223, "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\n\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)] \nThe above code is a function to remove consecutive duplicates of a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python program to create a list of empty dictionaries. \ndef empty_dict(keys):\n empty_dict = {}\n for i in keys:\n empty_dict[i] = None\n return empty_dict\nThe above code is a python program to create a dictionary with keys that represent a whole numbers between 2 and the length of keys.\n\ndescription = \"Mobile chip maker Qualcomm says Apple is using its power to pay less for its chips.\"\ndescription"], [0.0660734209478471, "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is to create a list of empty dictionaries, memory leaking alert!!!\ndef empty_list_1(length):\n    return list(dict.fromkeys(range(length)))\nThe above code is another way to create a list of empty dictionaries, usual nowadays practice.\ndef empty_list_2(length):\n    return [None]*length\nThe above code one more way, memory leaking again.\ndefine a function to add 2 numbers and return their"], [0.0658289214214488, "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \nThe above code is a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\ndef minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the minimum of two numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create an empty list of length n.\ndef input_an_integer(): return (int(input(\"Enter an integer:\")))\nThe above code prompts the user to input an integer and returns the integer.\ndef unit_decimal_value(decimal_number): return decimal_number%10\nThe above code recovers the unit value for a decimal number.\ndef minimum(a,b):\n if a <= b: \n  return"], [0.06591625129130088, "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\nThe above code is a python function to check whether the length of the word is odd or not.\n\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create empty list having length n\ndef longest_odd_address(list1, list2):\n result=''\n for n in list1:\n    if n % 2 != 0 and n > 8:\n       result = n/3\n       if len(str(result))==5:\n           print(True)\n    else:\n       pass\n The above code is a python function to determine the address of the longest building having an"], [0.06584143972540993, "def sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\nThe above code is a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\nThe above code is a python function to count the number of equal numbers from three given integers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a list comprehension generation for a list of empty dictionaries.\ndef copy_to_new_list(source):\n return [copy(el) for el in source]\nThe above code is a list comprehension generation for a list of a shallow copy of the original list\ndef add_to_string(original,toadd):\n  for el in toadd:\n    if el not in original:\n      original+=el\n  return original\nThe above"], [0.06646608898307205, "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nThe above code is a python function to check whether the given array is monotonic or not.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to get an empty list with some specified length.\n\ndef list_of_count(N):\n    return [len(str(i)) for i in range(N)]\nThe above code is a function to generate a list of all possible lengths of the digits of N, from [1,...,N]\ndef check_empty (a):\n if len(a) < 1:\n    return True\n else:\n    return False\nThe"], [0.06591625129130088, "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \nThe above code is a python function to interchange the first and last element in a given list.\n\ndef rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result\nThe above code is a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is to create list corresponding to given length that contains empty dictionary.\n\ndef list_reverse(list):\n return(list[::-1])\nThe above code is to create a list with same elements but reversed.\n\ndef remove_nulls(list):\n return [((tab[0],tab[i]) for tab in list for i in range(0,len(tab))) for tab in list if tab != 0]\nThe above code to remove the"], [0.065849894656791, "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\nThe above code is a function to find the maximum value in a given heterogeneous list.\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\nThe above code is a function to find the index of the first occurrence of a given number in a sorted array.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to query a variable which contains all the users asked to post their cells available on the HR system. \nApplicable for all users who have posted their cells that can be\nfound in cell_number variable\n\ndef add_dict_to_list(result, key, id, last_details, current_details):\n value = 1\n dest_dict = result[key]\n key_split = key.split('-')\n dest_group_"], [0.06602459137588182, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries each of length = given length parameter. Note you may name this function anything you want.\ndef diff_zeros(*args):\n  count = 0\n  for var in args:\n    if var.count('0') > 0:\n      count += 1\n  return count \nThe above code is a python function that takes in a variable number of arguments and returns the number of arguments that have at least one"], [0.06585843874728008, "def Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create empty lists on the fly having a fixed length.(Dynamic in length).\ndef uniqueentries(lst): \n  return list(set(lst))    \nThe above code is a python function to find the unique entries in a list.\n\ndef Only_Letters(s):\n  return (''.join(filter(str.isalpha, s)))\nThe above code is a python function to find only letters from a given"], [0.06587142522059052, "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\nThe above code is a python function to check whether any value in a sequence exists in a sequence or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates an empty list of size length, and returns the list.\ndef searching(list, key):\n   if key in list:\n      return True\n   else:\n      list.append(key)\n      return False\n   \nA function that adds an element to a list, only if its not present in the list.\n   \ndef list(dict): \n    return dict.keys()\nThe above code returns all the keys in a dictionary.\n"], [0.06619490409472696, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of dictionaries\ndef dict_to_str(dictionary):\n val=\"\"\n for k,v in dictionary.items():\n   val=val+\" \"+str(v)\n return val\nThe above code converts a dictionary into a space separated string and returns it.\n\nIt takes an integer and determines whether it is odd or even and returns a string accordingly.\n\ndef ODDorEven(Num):\n  Num"], [0.06593018116564417, "def Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\nThe above code is a python function which takes a list of integers and only returns the odd ones.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes length as an input returns a list of dictionaries of the given length.\nimport pandas as pd\nprint(pd.__version__)\nimport pandas\nprint(pandas.__version__)\nThe above code is a function that asks the user to specify the DataFrame size and then generates a random DataFrame.\ndef lstm_peep_d(m):\n    out = []\n    for mod in"], [0.06631004638880206, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a list comprehension that returns dictionary items in given list length.\n\nreturn [sum(i) for i in zip(*arguments)]\n#What it does? : The above comprehension first pair up the items of all the arguments \n#then summation happens in pairs.\ndef isPhoneNumber(text): \n if len(text) != 12: \n  return False \n for i in range(0, 3): \n  if not text["], [0.06583307254128873, "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes an integer as input and creates a list according to the logic above.\n def splitstring(mystring):\n  return (mystring.rsplit(\" \", 2))\nThe above code is a python function that splits the string according to no of characters specified by rsplit().\ndef matrix_square(mat):\n    return [[mat[j][i] for j in range(len(mat))] for i in range(len(mat"], [0.06610587174986289, "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\n\ndef odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\nThe above code is a python function to remove the characters which have odd index values of a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of empty dictionaries.\nSquaring numbers\ndef square():\n    list1 = [x**x for x in range(1, 20) if x % 2 != 0 ]\n    return(list1)\n a = square()\n b= print(a)\nThe above code is code to create a list of squared values.\nd = {'Jack Dorsey': 'Twitter', 'Tim Cook': 'Apple','Jeff"], [0.06580848379794721, "def hexagonal_num(n): \n\treturn n*(2*n - 1) \nThe above code is a function to find the nth hexagonal number.\n\ndef harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is empty_list function, which creates and returns a list of length number of empty dictionaries.\ndef uniform_list(length):\n  return list(range(length - 1, -1, -1))\nThe above code is a function that can produce a uniform list and returns it as list type.\ndef reserved_list(list):\n range(length) [list]\nThe above code creates reserved list of a list.\ndef reverse_list(list"], [0.06606132746654562, "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\nThe above code is a function to count bidirectional tuple pairs.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to build empty list of length equal to length parameter.\ndef same_start_end(ls):\n  if len(ls) > 1:\n    return ls[0] == ls[-1]\n  else:\n    return False\nThe above code is a function to find the first item of a non-empty list is the same as its last item.\n\ndef count_true(ls):\n return len([el for el in ls"], [0.06610018480055735, "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\n\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\nThe above code is a function to convert degrees to radians.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to calculate a list of dictionaries, where the length of the list is taken as an input parameter by the user.\ndef car_in_carpark(car, carpark):\n return list(zip(car, carpark))\nThe above code is a function to identify the car in a car park if the input value of car is present in the carpark.\n'''"], [0.06610018480055735, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\nThe above code is a python function to find the number of divisors of a given integer.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python program to return a list of depth 3 consisting of empty dictionaries. If a list of length 2 is given as input, the output shall be [{},{}]. If a list of length 4 is given as input, the output shall be [{},{},{},{}].\ndef remove_nums(a):\n for num in range(1, len(a), 3):\n a.remove(a[num])\n return a\n"], [0.06592086910331438, "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\n\ndef big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff\nThe above code is a python function to find the difference between largest and smallest value in a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of empty dictionaries.\n\nAccording to Wikipedia, a polygon perimeter is the distance around the edge of a polygon,it can be defined as P=a+b+c+d where a,b,e,f etc. are the sides of a polygon.\n\ndef find_perimeter(length):\n   return sum([length]*4)\nThe above code is a python function to find the perimeter of"], [0.06602406065241678, "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2\nThe above code is a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns the list of dictionary based on the length given\nimport six\ndef add_and_multiply(x, y):\n s = (x + y)\n p = (x * y)\n o = (s / 2, p * 2.2) # I want to return a tuple of an int, and a float\n return o\nThe above code is a function that returns the sum and product of two integers as a tuple and multipl"], [0.06606677876239282, "def binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \nThe above code is a python function to find the sum of the product of consecutive binomial co-efficients.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a empty list of dictionary.\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n    name, *line = input().split()\n    scores = list(map(float, line))\n    student_marks[name] = scores\n    query_name = input()\n    marks=student_marks[query_name"], [0.06587142522059052, "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\nThe above code is a python function to find whether the parity of a given number is odd.\n\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \nThe above code is a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python fuction to create an empty list of desired size.\ndef max_in_array(arr_list) :\n  return sorted(arr_list)[-1]\nThe above code is a python function to find the maximum element of a given array.\ndef remove_dollar_sign(s) :\n  return s.replace('$', '')\nThe above code is a python function to remove the occurrence of a substring from the given string"], [0.06589802992867909, "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \nThe above code is a function to check if all the elements in tuple have same data type or not.\n\ndef is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \nThe above code is a python function to check whether a list is sublist of another or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate empty list of given length.\ndef remove_duplicates(lst):\n new_list = [] \n for i in lst:\n    if i  not in new_list:\n        new_list.append(i)\n print (\"unique items list is : \", str(new_list))\nThe above code is a function to remove duplicate items from list.\nThe commonly used and the simplest way to count the occurrences of"], [0.06663199015892518, "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); \nThe above code is a python function to check whether the given two integers have opposite sign or not.\n\ndef count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\nThe above code is a function to count the total number of characters in a string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty dictionary within a list based on the number of elements in the list.\n\ndef default_value(a, b, c, d ,e, f, g, h):\n    d = {\n        \"a\": a or 200,\n        \"b\": b or 200,\n        \"c\": c or 200,\n        \"d\": d if d is not None else \"default\",\n        \"e\": e if e"], [0.06578073194479118, "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\nThe above code is a function to sort a list of tuples using the second value of each tuple.\n\nimport re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries\n def defaultdict_list():\n from collections import defaultdict\n return defaultdict(list)\n\nThe above code is to prepopulate dictionary so that we can append a list element in it.\ndef list_generators(path):\n for f in listdir(path):\n if isfile(join(path, f)):\n yield \"\"\nThe above code is a generator function to iterate over all"], [0.06603984381390035, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " will make a list of empty dictonaries, given it's length.\n\nGiven a dict, change all of it\u2019s values to a list  and return a new dict with all the \u2018values\u2019 as a list.\n\ndef make_list_of_values(dictionary):\n Return [v for k, v in dictionary.items()]\nThe above code will convert the values of a dict in a list.\n\ndef reverse_a"], [0.0662737919352425, "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return an empty list with the given length using list comprehension. \n\ndict = { 12 : 'soc' , 25.16 : [12,'dishu'] , 'five' : [ 25.16 , 12] , 12 : { 5 : 'dic' , \"two\" : 7} }\n# remove duplicate entries\nduplicate_list = list(dict.copy().values())\ndict = {x:x for x in"], [0.06608891440056691, "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\nThe above code is a function to convert a string to a list of strings split on the space character.\n\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \nThe above code is a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate a list of empty dictionaries.\n\ndef count_uniques(list_maybe): \n  # Do not remove the dups just assign a value to the duplicates\n  unique = {}\n\n  for x in list_maybe:\n    unique[x] = unique[x] + 1 if x in unique else 1\n\n  # count dups in the unique dict\n  unique_count = 0\n  for k, v in"], [0.06579250546503371, "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \nThe above code is a python function to find the next perfect square greater than a given number.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to initialize list of 'length' integer elements to zero.\nimport calendar\nprint (calendar.calendar(1978))\nAbove code is a python function to print the calendar of 1978 from the python module 'calendar'.\nimport math\ndef cos(n):\n return math.cos(math.radians(n))\nThe above code is a python function to obtain the cosine of an angle.\nimport math\ndef cos(n):"], [0.06577684666742273, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\nThe above code is a function to calculate the sum of the negative numbers of a given list of numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list by adding elements of the list based on their index. In this exercise empty_list is a list of lists to which we are appending elements of different lists depending on the value of index.\ndef count_func(text):\n     num_per_char = {}\n     for char in text:\n         if char in num_per_char.keys():\n             num_per_char[char] += 1\n         else:"], [0.06587142522059052, "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\nThe above code is a function to check whether an element exists within a tuple.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list having a user input number of empty dictionaries based on length provided by the user.\ndef string_bool(data):\n  return data.lower() in \"yes\"\nThe above code is a python function to validate given input based on the condition provided by the user for a given set of data.\ndef fucntion(x,y,z):\n return pow(x,2)+pow(y,2)+"], [0.06576530644568561, "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\nThe above code is a python function to check if the elements of a given list are unique or not.\n\ndef max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to print {} n number of times when lists of different length needs to be made.\n#from itertools import product\ndef reverse_list(list1):\n return [ele for ele in reversed(list1)]\nThe above code is a method to reverse elements of a list in python.Here we use list comprehension method.\nfrom itertools import permutations\nlist(permutations([12,22,18],2))\nThe above code is"], [0.06589353603077275, "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\nThe above code is a python function to find the largest negative number from the given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates an empty list of size length using list comprehensions.\n\nThe has_duplicates function returns True if there is any element that appears more than once. Its runtime is linear in the number of items in the list, so it is only suitable for lists that fit in memory.\n\ndef has_duplicates(t):\n  s = t[:]\n  s.sort()\n  for i in range(len(s)-1):\n    if"], [0.06593018116564417, "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\n\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return a list of empty dictionaries, given the length of the list as the argument.\ndef larger_sum(a,b):\n if sum(a) > sum(b):\n    return a\n else:\n    return b\nThe above code is a function to return the list with the larger sum of its elements, given two lists as its arguments.\ndef is_palindrome(word):\n while i >= (len(word))"], [0.06579250546503371, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \nThe above code is a function to remove tuples from the given tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create empty list of certain length.\ndef lat_long(coordinates_str):\n  # split the arguments and place into a list removing white space\n  coordinates = coordinates_str.split(' ')\n  # Variable for keeping track of placemark name\n  placemark = \"\"\n  # list of lat long values\n  clean_coords = []\n  for coords in coordinates:\n    # Filtering of the Key value for"], [0.06573903527570088, "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\nThe above code is a function to find the minimum product from the pairs of tuples within a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes the length of an empty list and makes a list of empty dictionaries with that length of empty dicts.\ndef float_dict(length):\n return [hash(x) for x in range(length)]\nThe above code is a function that creates a list of the hashes of integers from 0 to the given integer.\ndef students_english(english_score, dict_student_english, dict_student_subject):\n return set(\n"], [0.0658289214214488, "def is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\n\ndef max_sum_list(lists):\n return max(lists, key=sum)\nThe above code is a function that returns the list in a list of lists whose sum of elements is the highest.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a program fragment to create a list of empty dictionaries without using a loop.\ndef square_number(number):\n return square(number)\nThe above code is a python program to print the square of a number.\ndef linear_search(lists, key):\n for i in range(len(lists)):\n  if lists[i] == key:\n   return i\n return -1\nThe above code is a program that does linear search for the"], [0.06580045407088082, "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \nThe above code is a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\nThe above code is a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of empty dictionaries so that you can initialize the values of all the keys in the dictionaries, before modifying their corresponding key-value pairs (if we don't create empty dictionaries and modify them one at a time, they may end up with missing keys and/or incorrect values.)\n\ndef decorator(arr):\n  \n  arr[len(arr):] = [0] * k\n  for i in range(0,k):\n   "], [0.06600855166483123, "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\nThe above code is a function to count the number of sublists containing a particular element.\n\nimport math \ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\nThe above code is a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is to create a list of dictionary with a length as passed by user\ndef Find(seq): \n    return tuple([i for i, x in enumerate(seq) if x == 6])\nThe above code is a python function to find the index of value in list(tuple).\nif A:\n    pass\nelse:\n    with B:\n        pass\nelse:\n    with C:\n        pass\nThe above code is to create a"], [0.06587142522059052, "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \nThe above code is a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to returs a list of empty dictionaries\ndef concatinate_list(list,sub_list):\n for i in sub_list:\n  list += i\n return list\nThe above code is a python function to concatinate a sublist to the main list\n\n\nThe bitwise operators (&, | and ^) are commutative operators, but the compare \"<\" and \">\" operators are not.\nThe bitwise operators &,"], [0.06610587174986289, "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \nThe above code is a python function to set the left most unset bit.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of dictionaries.\nfrom collections import defaultdict \nd = defaultdict(list) \nfor _ in range(int(raw_input())): \n    c = list(map(str, raw_input().split())) \n    \nfrom random import randint \ncharacter = [ ]\nfor i in range (10): \n    num = randint(97, 122) \n    character."], [0.06650710381422578, "import math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\n\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\nThe above code is a function to locate the right insertion point for a specified value in sorted order.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " tests to see if a list of empty dictionaries is of the correct length.\nmaybe_competent(competent) = False or competent.copy()\nThe above code would check to see if a variable is None-Type or a composite type (e.g. list).\n import fractions 5/(fractions.gcd(5,10)*fractions.gcd(5,10)*fractions.gcd(5,10)) -> 5\nThe"], [0.06636597397420059, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of emtpy dictionaries.\ndef matrices(a, b, c, d, e, f):\n  import numpy\n  return(numpy.array([[a, b], [c, d]]) * numpy.array([[e, f], [e, f]]))\nThe above code is a function to generate matrices using arrays using numpy.\ndef get_square(n):\n"], [0.06598329317939586, "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \nThe above code is a function to find the shared elements from the given two lists.\n\ndef square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\nThe above code is a function to find squares of individual elements in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create list of empty dictionaries of given length.\nimport logging\nlogging.basicConfig( level = logging.DEBUG, format = \"%(levelname)s %(asctime)s - %(message)s\")\nlogging.debug(\"Start of program\")\nwhile True:\n   try:\n       num1 = int(input(\"Enter first number : \"))\n       num2 = int(input(\"Enter second number : \""], [0.06596848078961219, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\nThe above code is a function to sort the given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list. (or an empty n-list)\ndef sort_list_with_first_element(list_unsorted):\n# Python program to sort the lists using the first element of sublist \n# Sort the lists using sort() function \n    for i in range(len(list_unsorted)):\n        for j in range(len(list_unsorted)):\n            if list_unsorted[i"], [0.06628059629750394, "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\n\nimport re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\nThe above code is a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a list comprehension that creates a list of {}. \n\nauthor = \"Kafka\"\nauthor[0] = \"K\"\nprint(author)\nThis gives an error because strings are immutable.\n\n# String traversal\ntest_string = \"gargoyle\"\ntest_string[1]\n\ntest_string[0]\nidx = 6\nwhile idx > -1 :\n    letter = test_string[idx"], [0.0658801985894367, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)\nThe above code is a function that takes in two numbers and returns a tuple with the second number and then the first number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes in an integer as input and returns an empty list \nof a specified length whether the amount of integers is the specified length or not.\ndef print_dict(num,power):\n d = dict()\n \n for i in range(1,num+1):\n     d[i] = i**power\n \n print(d)\nThe above code is a function that takes in a number and the power and returns a dictionary of"], [0.06605984308853603, "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes an argument length and return an empty list of length length\ndef boolean_to_string(input): \n  if type(input) == bool:\n    if input == True:\n      return 'Yes'\n    else:\n      return 'No'    \n  return input \nThe above code is a function that takes a boolean TRUE is converted to Yes and FALSE to No and other types are converted accordingly and otherwise.\n\ndef short"], [0.0658670734394551, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return an empty list of the desired length.\ndef empty_list(length):\n return([0] * length)\nThe above code is a function to return an array of zeros of the desired length.\ndef string_list(size):\n return([0] * size)\nThe above code is a function to create an array of strings of length of 255 or the max size of an array.\ndef is_letter(s):   \n"], [0.06595391736784383, "def list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\n\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\nThe above code is a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate a list of dictionaries.\ndef list_to_tuples(arr):\n return [tuple(l) for l in arr]\nThe above code is a python function to convert a list of lists and convert it into a list of tuples.\ndef py_tuple(n):\n return [tuple(l) for l in n]\nThe above code is a python function to convert a list of lists and convert it into"], [0.06609650282376789, "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\nThe above code is a python function to identify non-prime numbers.\n\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result\nThe above code is a function to check if all values are same in a dictionary.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate an empty list of dictionaries of size 'length'.\n    \"\"\"\n\n    def set_code(self, path_studentCode, code_dict, tuples, extra_inputs=None):\n        \"\"\"\n        Method that creates a submission -- calls instructor method\n        \n        :return: True for success, False for an error\n        \"\"\"\n\n        for it in tuples:\n            if len(it.web_submission_"], [0.06615265298154309, "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\n\ndef unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1\nThe above code is a python function to check whether a list of numbers contains only one distinct element or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to make a list of empty object.\n\nText = \"hello \\\"python\\\" world\"\nextract_values(Text)\n\narr = [1,2,2,2,2,2,2,2,2,2]\nunique_Element(arr)\nlength = 5\nempty_list(length)\n\nWrite a function to clean up a given string by removing the special characters and retain\nalphabets in both upper"], [0.06606132746654562, "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True\nThe above code is a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex\nThe above code is a function to convert a list to a tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a  function to initialize any list at user desired size by adding a empty {} at its location.\ndef list_Comprehensions(n1, n2, k): \n    return [[X, Y] for X in range(n1, n2 + 1) for Y in range(n1, n2 + 1) if X - Y == k]\nThe above code is a python function to return a list of lists with populating the values given"], [0.06632172126009571, "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\nThe above code is a function to find the first adverb and their positions in a given sentence.\n\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\nThe above code is a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to append tuples in a list.\n4. Test case If whitespace is present at the start or the end of the text, strip them.\nAfter stripping the whitespace at start or end, if the text is not an empty string, then return the string. Otherwise return None\n\ntext = '  Meri name SONU ahe '\nif len(text.strip()) == 0:\n  print(None)\nelse:\n "], [0.06610018480055735, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\ndef reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) \nThe above code is a python function to reverse an array upto a given position.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of an empty dictionary.\ndef list_combination(list1, list2): \n    return[(list(y)) for y in list(map(lambda x: x[0]+x[1], list(zip(list1, list2))))]\nThe above code is a function to combine two lists as a single list by mapping and zipping them.\ndef twoSum(arr, target): \n    subs"], [0.06676255748248079, "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\nThe above code is a function to extract specified size of strings from a given list of string values.\n\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\nThe above code is a function to drop empty items from a given dictionary.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a specified number of empty lists.\nlist_odds = set([1, 3, 5, 7, 9, 11, 13, 15, 17])\nzones = {\n'north': {\n 'red': [3, 6],\n 'green': [9, 16]\n },\n'south': {\n 'red': [2, 3, 4, 5, 6, 7],\n 'green': [9, 10,"], [0.06695814443832314, "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\nThe above code is a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \nThe above code is a function to concatenate each element of tuple by the delimiter.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function taking in an integer and returns a list of dictionaries with the said integer. Note that empty dictionaries do not contain any keys. So, you can use empty_list(5) and expect Python to return a list of dictionaries with 5 elements in here.\n'''"], [0.06577684666742273, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create n empty dictionaries.\n\nfrom threading import Lock \ndef increment_List_Values(list_value):\n lock_listSmall.acquire()\n print(\"Lock using Small data Structure. List: \",list_value)\n lock_listSmall.release()\nThe above code is a python function to acquire lock in a thread for small data structure.\n\nfrom threading import Lock \ndef increment_Dict_Values"], [0.06621454531549555, "def is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of length (length) of empty dictionaries.\n\n#Q2:\n\n\n\nmy_file = open('GPS.txt','r')\ndata = my_file.read()\ncount =0\nLines = data.split('\\n')\nfor each in Lines:\n    count += 1\nmy_file.close()\nprint count\nThe above code is a statement to find the number of lines in a given file\n\n\n"], [0.06589353603077275, "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) \nThe above code is a python function to find the first digit of a given number.\n\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\nThe above code is a function to find maximum run of uppercase characters in the given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create list of specified length with empty dictionaries as elements.\ndef double_fact(n): \n    return 1 if n == 0 else n * double_fact(n - 2) if n < 0 or n % 2 == 0 else n * double_fact(n - 1)\nThe above code is a python program to calculate factorial or double factorial of a given number depending on n.\ndef sum_array(array):\n"], [0.0666240031207201, "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\n\ndef last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\nThe above code is a python function to find the last position of an element in a sorted array.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of empty dictionaries.\nadd = lambda x, y : x + y\n\nx = 9\ny = 13\nprint (add(x, y))\n# Convert Celsius to Fahrenheit\n\ncelsius = [39.2, 36.5, 37.3, 37.8]\nF = map(lambda x: (float(9)/5)*x + 32, celsius)\nprint (list(F))\n# or this"], [0.06606132746654562, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\nThe above code is a function to check if the given integer is a prime number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is an example of a list comprehension to construct a list of dictionaries of length five.\n\ndef concat_file():\n    with open('file1.py', 'r') as file1, open('file2.py', 'a') as file2:\n        file2.write(file1.read())\nThe above code is an example of reading and writing a file that is compatible with python 2 and 3.\n"], [0.0660505219163264, "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\nThe above code is a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to generate a list of lists with only {} which can be used as dataframes.\nbig_list = [] \nfor _ in range(int(input())): \n  name = input() \n  score = float(input()) \n  version_list = [name, score] \n  big_list.append(version_list) \nprint(big_list)\nThe above code is the python function to read scores"], [0.06566867730239272, "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\nThe above code is a function to create the next bigger number by rearranging the digits of a given number.\n\ndef is_lower(string):\n  return (string.lower())\nThe above code is a python function to convert the given string to lower case.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function for creating a list of empty dictionaries with enven number of elements.\ndef multipate(n):\n  return lambda a : a*n\n  The above code is a python function to multiply an int or a string with n.\nThe dict.update() method updates the dictionary with the elements from the another dictionary object or from an iterable of key/value pairs.\n\nIt adds dictionary dict2's key-values pairs to dict.\n"], [0.06602929087930662, "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter\nThe above code is a function that returns the perimeter of a square given its side length as input.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of empty dictionaries and returns them.\nPython Regex https://www.w3resource.com/python-exercises/re/\nWrite a Python program to replace maximum 2 occurrences of space, comma, or dot with a colon.\nimport re\ntxt = \"hello, my name is Peter, I am 26 years old\"\nprint(re.sub(\"[ ,.]\", \":\", txt, 2))\nhttps://datatof"], [0.06583307254128873, "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\nThe above code is a function to find the depth of a dictionary.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to make a list of empty dictionaries.\nclass OrderedCounter(Counter, OrderedDict):\n    pass\nThe above code is a class definition for an ordered dictionary.\n\ndef show_class(class_name):\n show_class(People)\nshow_class(Employee)\nThe first line prints the definition of the class \u201cPeople\u201d and the second line prints the definition of the class \u201cEmployee\u201d."], [0.06623723074787329, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\nThe above code is a function that takes two lists and returns true if they have at least one common element.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that takes length of empty list and prints a list of empty dictionaries.\n2. Calculate the total number of unique apps from the dataset\nunique_apps = []\nduplicate_apps = []\nfor app in data:\n    name = app[0]\n    if name in unique_apps:\n        duplicate_apps.append(name)\n    else:\n        unique_apps.append(name)\nprint('Number of duplicate"], [0.06632954065372705, "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\nThe above code is a function to check if a string represents an integer or not.\n\ndef Find_Min(lst): \n    return min(lst, key=len) \nThe above code is a python function to find the sublist having minimum length.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to concatenate two list as done in question 2.\nx = ['a,1,3', 'b,3,4']\ny=[[s for s in cs.split(',')] for cs in x]\nc = sum([[int(item[1]), float(item[2])] for item in y],[])\nprint (c)\nThe above code is a python function to sort a list whose first item is"], [0.06605590861578814, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\nThe above code is a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate a list of empty dictionary objects of identical length.\nfor a in range (0,11):\n blank_dictionary = {}\nif a in a_dictionary:\n a_dictionary[a] += 1\nelse:\n a_dictionary[a] = 1\nThe above code is duplicate elements in a dictionary.\nsol = [ (key,a_dictionary[key]) for key in sorted(a_dictionary b"], [0.06593487584628388, "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \nThe above code is a python function to check whether the given list contains consecutive numbers or not.\n\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\nThe above code is a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of empty dictionaries and returns it.\nwords = re.findall('\\w+', open('hamlet.txt').read().lower())\nhamlet = []\nfor word in words :\n    if word not in hamlet :\n        hamlet.append(word)\nprint(hamlet)\n\nThe above code iterates through the words list, \nputs the unique instances of words into the empty hamlet list in lower case"], [0.06620817572905552, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \nThe above code is a python function to interchange the first and last elements in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty {} structures.\nanswer:\ns=input().split()\ni=input()\nc=s.count(i)\nprint(c)\nThe above code is a program to count the frequency of a particular element amongst a group of elements.\ns = input().split(' ')\nl =[i for i in s]\na =[]\nfor j in range(0, len(s)):\n"], [0.06610587174986289, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " returns a list of empty dictionaries equal to length specified in the parameter.\n\n\nstr1 = \"abc\"\nstr2 = \"abcdef\"\n# Return 1, indicating str2 ends with the suffix str1\nprint str2.endswith(str1)\n\n# Return 0, indicating str2 does not end with the suffix str1\nprint str2.endswith(str1, 2, 4)\n\n\n# Counting\narg = ['"], [0.06625908584785968, "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\nThe above code is a function to find tuples which have all elements divisible by k from the given list of tuples.\n\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \nThe above code is a function to check whether the given string starts and ends with the same character or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function called empty_list which creates an empty list with each element comprising of an empty dictionary.\n\"\"\"\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nt_case = int(raw_input());\nwhile t_case > 0:\n    string = raw_input().strip();\n    length = len(string);\n    flag = 0;\n    unique_list = set(string) #Unique list\n"], [0.06612314350056786, "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\nThe above code is a function to check whether a list contains the given sublist or not.\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create empty lists equal to the given length.\n\nnumbers = [0, 1, 2, 3, 4, 5]\n\nnumbers[1] = ''\n\nprint(numbers)\n49 Here, elements in numbers list are assigned new values. Thus, an exception is raised. This can be fixed by replacing \nnumbers[1] = '' with \nnumbers[1:-1] = ''\nThe above code is"], [0.06593959658420824, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is an implementation of creating empty list using list comprehension in python.\n## Python 3 code demonstrate variable to variable \n# taking input from user \nnum1 = input(\"Enter 1st number: \")\nnum2 = input(\"Enter 2nd number: \")\nnum3 = input(\"Enter 3rd number: \")\n# Addition of numbers \nsum = float(num1) + float(num2) + float(num3)\n# Display"], [0.065845656135163, "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\nThe above code is a python function to find the cube sum of first n even natural numbers.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create list of dictionaries of specified length.\nstring = input()\nstring2 = string.swapcase() \nif string.swapcase() == string.title():\n  print(\"True\")\nelse:\n  print(\"False\")\nThe above problem checks whether the input characters in string1 and in string2 are same.\nYou will be given a single integer on a single line in the range [1, 40].\nCalcul"], [0.0658850281976644, "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\nThe above code is a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \nThe above code is a function which takes two tuples of the same length and performs the element wise modulo.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a functions that returns an empty list of length length.\nFor any DFA, if I do a number of alternating state transitions and repeat these transitions many times, I eventually arrive at a previously visited state.\n\nGiven an NFA and a number (say n), perform n such state transitions and then report back which state the NFA arrives at. If the NFA has not arrived at a previously visited state, return -1.\n\nimport random as rand \ndef"], [0.06627019306948546, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\nThe above code is a function to find the lateral surface area of a cone given radius r and the height h.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to return a empty list of dictionaries with a required length as given. \n\"\"\"\n#NO MORE RECURSIVE FUNCTIONS\n#Further Nested and internal functions not neccessary \n#use the Python provided library to get the required \n#mathematical solutions, in this case you can use the math \n#library, either you can use usin the math equations"], [0.06585843874728008, "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\nThe above code is a function to find all words which are at least 4 characters long in a string.\n\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\nThe above code is a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of given length where each element is an empty dictionary\ndef eliminate(list):\n list=[i  if i%2==0 else ''   for i in list]\n\n if '' not in lst:\n    print('no number is odd')\nelse:\n    print(lst)\nThe above code displays numbers in odd positions of the list (given a list) and highlights elements that are even.\ndef contains(sub_string, string):"], [0.06577684666742273, "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \nThe above code is a function to trim each tuple by k in the given tuple list.\n\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of dictionaries of length=length.\n\nvectorize = np.vectorize(lambda x: SPT[int(x)] if x!=\"-\" else \"-\")\n\nThe above code is an inplace function to vectorize or convert matrix elements to values. Vectorize is created using lambda function for the given list of elements. \n\nSince, np.random.randint does not generate random integers from -ve values, we"], [0.06595874457389302, "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\nThe above code is a function to extract the nth element from a given list of tuples.\n\ndef perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\nThe above code is a function to find perfect squares between two given numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function which creates an list of dictionary dictionary for every list size\nHow to make deep copy of a list in python? Give a method to do this\n    list1 = [\"a\", \"b\" , \"c\"]\n    list2 = list1 # shallow copy\n    # Make deep copy\n    list3 = list1[:] \n    print(list1, list2, list3)\nMake the above code into function make_copy(length)"], [0.06580045407088082, "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \nThe above code is a function to multiply all the numbers in a list and divide with the length of the list.\n\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\nThe above code is a function to replace all spaces in the given string with '%20'.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to crate an empty list with a given length.\n\nAlternatively, you can use list comprehension to create a list on a given length.\nThen, empty_list = [{}.fromkeys(list(range(length))) for i in range(length)]\n\n# 2. Advanced Data Structures<a id='advanced'></a>\n\n# \n# The final section of this notebook focuses on some of the most important data structures as part"], [0.06659384955124292, "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\nThe above code is a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\nThe above code is a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that create a list of empty dictionaries of a given length.\nins  = 'jack and jill went to juction to fetch a pail of water '\n'and jack flled it up'\n'Never send a human to do machine learning '\n\n\nc = 0\nfor words in ins.split():\n  print(ins.split())\n  c +=1  \n\nb,e = 0,0\nfor n in range("], [0.06617080801601286, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\nimport collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\nThe above code is a function to merge three dictionaries into a single dictionary.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is to create an empty python list of dictionaries.\n\nempty = [{} for _ in range(11)]\nThe above code is to create an empty python list of dictionaries.\n \nsumi = (sum(x*x for x in nums))\nThe above code is to obtain the sum of the squares of a list of numbers.\n \nnums = [1, 2, 4, 5, 4, 6]\ncount_square"], [0.06613483709114694, "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\nThe above code is a function to check whether the given number is undulating or not.\n\ndef parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\nThe above code is a function to find the directrix of a parabola.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries.\n\n# Problem Statement\n# \n# A parabola can be expressed as $y \\equiv x^2 -ax -c$\n# \n# Consider a parabola of the form $y \\equiv ax^2 +bx +c$.\n# \n# The equilibrium points of the parabola are set where the derivatives are equal to each other: $0 = \\frac"], [0.06604204641934225, "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume\nThe above code is a function to find the volume of a cone.\n\ndef median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\nThe above code is a function to find the median of three numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns a list of empty dicts.\n\nfrom random import randint\ndef empty_linked_list():\n    return[None] * randint(1,100)\nThe above code is a function that returns a randomly generated linked list. Creating a new linked list with a random number of nodes each time using the randint function from the random library that is imported in the function.\n\ndef is_float_or_int(param):\n"], [0.0666240031207201, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\nThe above code is a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of empty dictionaries with a given length.\n\nZ = [x**2 for x in range(10)]\n# Z is now [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\nY = [x for x in Z if x % 2 == 0]\n# Y is now [0, 4, 16, 36, 64]\n\nY = [[1 if x"], [0.06610587174986289, "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\nThe above code is a function to get the sum of the digits of a non-negative integer.\n\ndef Split(list): \n    return [num for num in list if num % 2 == 0]\nThe above code is a python function to find even numbers from a list of numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python code to create an empty list of dictionaries with a fixed length.\nlist1 = [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]\nThe above code is a python code to create a list of unique pairs.\nlist1 = [int(i) for i in input().split()]\nThe above code is a python code to create a list of integers."], [0.06588462055792381, "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \nThe above code is a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \nThe above code is a function to convert tuple string to integer tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list with a given length.\nsum(divisor for divisor in range(num) if not num % divisor)\nThe above code is a python lambda function to find teh sum of divisor of an input num if the number is  not a multiple of the divisor.\nfrom dict import fromkeys\nfrom itertools import cycle\nfrom random import randint\n\n\npool = ''.join("], [0.06578463673663286, "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\nThe above code is a function to calculate the value of 'a' to the power 'b'.\n\ndef substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \nThe above code is a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is creating a list with in a list using list comprehension. Here '_' is used as a variable name which is used as a placeholder for '{\\displaystyle i}i' when we take range in the list structure. I have no idea what this line will produce, you will have to code it up to display its output.\nThrows Expected\ndef nested_list(outer_list):\n for i in outer_list:\n  outer_list.append("], [0.06570654545589957, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\nimport re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n\nThe above code is a function to remove leading zeroes from an ip address.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is creating a list with length of the passed parameter (length). Then, list object is being iterated by creating a dictionary in every iteration of the list and is then appended to the empty_list created.\n\ndef ind_count(string):\n for i, item in enumerate(string):\n \tprint(i, string[i])\n The above code is iterating on string by initiating an index i, which will later be used to place seen values."], [0.06577298075612527, "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \nThe above code is a function to find the number of elements that occurs before the tuple element in the given tuple.\n\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\nThe above code is a function to pack consecutive duplicates of a given list elements into sublists.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " describes a function, empty_list whose length argument determines the length of the list that is to be returned. \nThe elements in the list is empty object(empty dictionary) as described in the task.\nAdd up the numbers in the list but stop if one of the numbers is 34. \nExample, [34, 5, 10, 8] the output should be 5 so because the sum becomes 34.  \ndef add_thirty(list1):\n    sum"], [0.06563588821460424, "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b \nThe above code is a python function to find the maximum of two numbers.\n\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\nThe above code is a function to caluclate the area of a tetrahedron.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", "  takes a number as input and return an empty list of that size.\n\nModule(I)\nA module allows you to logically organize your Python code. Terically speaking, it allows you to import functions or clases from one file to another. You can also share your code with others by putting your code into a module. \nTo demonstrate this we shall consider the follwing:\n\na. create a module, mymodule, with a function in it called my_"], [0.06582479172249074, "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \nThe above code is a python function to find the largest number that can be formed with the given list of digits.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to find an empty list which has the same lenght as the argument.\nstring2 = [ i for i in list1 if not(i in ['a','c'] or \"?\" in i)]\nThe above code is used to construct a list from an existing list which can have no repetitions of the given vowels and \"?\" in the list.\nImplementing Queue with 2 Stacks to check all the possible cases that it can query for"], [0.06554304130680794, "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\nThe above code is a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\nThe above code is a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns the list of size \u2018length\u2019 filled with empty dictionaries.\ndef knight_moves():\n The below code is a function that uses the above created functions to generate the treasure coordinates from all the combinations of two vectors modulo the vector length. The process uses the total number of sequences of length two where jth element is within the range [2; (m-1)] and it depends on previous kth index to be equal to or greater"], [0.06585255839200518, "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\nThe above code is a function to count number items that are identical in the same position of three given lists.\n\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\nThe above code is a function to find the first adverb ending with ly and its positions in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to make a empty list of dictionaries (NOT key-value pairs, here we only generate the position in \nmemory and the corresponding key will only be determined when we insert value into the part. So it's not a dictionary, but can be \ntreated as a dictionary because of backward compatibility).\nIf your lists may have unequal length, then simply add a None in the end of the shortest list to make the length same.\n\nimport re\ndef equal"], [0.06562004357596908, "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\nThe above code is a function to remove all elements from a given list present in another list.\n\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nThe above code is a function to return a list of all pairs of consecutive items in a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to return a list of empty dictionaries given the length of the list.\n Given two lists S and T, S contains smaller elements than T, create a new list such that it\n  contains the smallest element from S and the smallest element from T so that the sum of the new list is even.\n2. Finding the difference\nIn Python, create a function that takes \u2018nested\u2019 lists as an argument and returns a new list containing all\nn"], [0.06575288704596105, "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\n\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) \nThe above code is a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " returns a list containing a dictionary object {}.\nFind minimum and maximum elements present in array:\n\nGiven an array of elements where each element represents number of gold coins with respect to an organization. \nThe Gold in an element represents the number of GOLD COINS that organization has. Now, the task is to create a function \nthat should find minimum and maximum value of Gold from the given array (p). Also, the function should return the min Gold \ncoin as well"], [0.06585966424893905, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef square_Sum(n):  \n    return int(n*(4*n*n-1)/3) \nThe above code is a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function that constructs a list of empty dictionaries.\nPrison Cells After N Days\nThere are 8 prison cells in a row, and each cell is either occupied or vacant.\n\nEach day, whether a cell is occupied or vacant changes according to the following rules:\n\nIf a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.\nOtherwise, it becomes vacant.\n(Note that because the prison is a row,"], [0.0659025482002542, "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\nThe above code is a function to find the Eulerian number a(n, m).\n\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate list of empty dictionaries. \n1) Get the \"endIndex\" - this is the last index of the product array.\n2) Use the Ceil of ( (endIndex - startIndex + 1) / 2), as the formula for\nnumber of steps in Eulerian Cycle/Path.\n3) For the step number (0-based), call the findElement function. \n4) The findElement function will work as per"], [0.06994489045380622, "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\nThe above code is a function to convert all possible convertible elements in a list of lists to floats.\n\ndef count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to make a list of the given length with dictionary elements in all indices.\n\n"], [0.07071415729640042, "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\nThe above code is a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to generate matching lists with empty dictionary objects.\n"], [0.07036874693967207, "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \nThe above code is a function to find the nth decagonal number.\n\ndef count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate a list of length 'length' with hashes as its elements.\n'''"], [0.07163906101691776, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\nThe above code is a function to remove the parenthesis and what is inbetween them from a string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a empty list from 0 to the inputted number.\n"], [0.06600746808201223, "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\nThe above code is a function to return the sum of all divisors of a number.\n\ndef add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \nThe above code is a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries based on the length of the list of elements.\ncode\tlonger description\n\nSyntax error\tAll other exceptions\n    NameError: name 'spam' is not defined\n    TypeError: calling built-in function of an undefined type \nZeroDivisionError: division by 0\n             KeyboardInterrupt: use of <Ctrl+c>\nImportError: import module from an unimportable directory '"], [0.06789359784309489, "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\nThe above code is a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to make a list of dictionaries, having the given length as it's length, and the list will be looped through the given number of times.\n"], [0.06660137974230512, "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\nThe above code is a function to find the kth element in the given array using 1-based indexing.\n\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\nThe above code is a function to extract values between quotation marks from a string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty-list of given length.\nExamples\nempty_list(4) \u279e [{}, {}, {}, {}]\nempty_list(5) \u279e [{}, {}, {}, {}, {}]\nempty_list(0) \u279e []\n\nNotes\nYou could create this list either by running a for loop from 0 to length or by creating it directly.\nFunction Check - Allowed Functions ("], [0.06756865864783422, "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit\nThe above code is a function to check whether all dictionaries in a list are empty or not.\n\ndef newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\nThe above code is a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to declare a list of length as given by the parameter of empty dict.\nIf you want to sum numbers from some other langs., you can use\npython3 sum.py\n\n'''"], [0.0661249739229167, "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\n\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\nThe above code is a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is to create empty list of dictionaries with a given length.\nGoal\nYou are given three integers X,Y and Z representing the dimensions of a cuboid along with an integer N. You have to print a list of all possible coordinates given by (i,j,k) on a 3D grid where the sum of i+j+k is not equal to N.\n\nInput Format\nFour integers X,Y,Z and N each on four separate lines, respectively"], [0.07238766533112641, "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str\nThe above code is a function to convert a tuple to a string.\n\ndef replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\nThe above code is a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns an empty list of specified length."], [0.07118650658125784, "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\nThe above code is a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\ndef and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to extract the elementwise and tuples from the given two tuples.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that prints {} for a given range of values as an argument.\n"], [0.07183787698816775, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\nThe above code is a function to remove odd characters in a string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create empty list of the given length.\n'''"], [0.06631004638880206, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns an empty list.\nNB: Python's braces \"[]\" are used for indexing into a dictionary or list\nHow Python uses { }\nA dictionary uses {} to store key-value pairs: {\"Aurora\": 15, \"Maria\": 40, \"Zelda\": 90}\nA set uses {} to store no duplicate items: {\"Dayna\", \"Jim\", 201, 2020, 303, 303}\nIf you want to assign value to a list"], [0.06695451009125117, "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\nThe above code is a python function to find the length of the longest word.\n\ndef max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\nThe above code is a function to find the list of maximum length in a list of lists.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a list Comprehension which returns a list of empty dict of specified length.\nThis notebooks aims in making our live easier. If it can help you, then great. If it doesn't please tell me.\n\n \nSalu2.\nSalu3.\n"], [0.06897304821656403, "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\nThe above code is a function to calculate a dog's age in dog's years.\n\ndef count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \nThe above code is a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a list comprehension to create a list with empty dictionary objects to dynamically add items to a dictionary."], [0.06591165867585616, "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \nThe above code is a python function to find the average of cubes of first n natural numbers.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function that takes a number as input and generates an empty list of the length of the number.\nimport pandas as pd\nThe import the 'pandas' library with an alias name as \npd to work with the pandas DataFrame.\n\nfood_info=pd.read_csv(\"food_info.csv\",dtype=str)\nThe 'food_info' DataFrame which is made as reading the information \nfrom the"], [0.07154367587389134, "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n \nThe above code is a function to find the nth octagonal number.\n\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\nThe above code is a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function returns a list of empty dictionaries [{},{},...,{}]\n\"\"\""], [0.0675321581322147, "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\nThe above code is a function to get all lucid numbers smaller than or equal to a given integer.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \nThe above code is a function to add a dictionary to the tuple. The output should be a tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate a list of empty dictionaries which are all having same order.\n\nSample Output\tRun time\n0, 1, 10650453\t370\n0, 1, 1182433161, 1188269743\t140\n\"\"\""], [0.07064186051613713, "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \nThe above code is a function to count the number of occurrences of a number in a given list.\n\nimport re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\treturn re.search(regex, string)\nThe above code is a function to check whether the given string is starting with a vowel or not using regex.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of dictionaries of length specified by the user.\n"], [0.06560149113941516, "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \nThe above code is Given a list of tuples, a function that returns the first value of the tuple with the smallest second value.\n\ndef circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter\nThe above code is a function to find the circumference of a circle.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates an empty list of given length.\nimport math\nThe module name is math. Effective use of this library depends\non an understanding of what functions are provided by the library.\nSome commonly used ones in the module math are the following.\nimport math\n\n# The above code imports the module named math into a python script. First let us assign a number to a variable \ud835\udc65 and then learn how to get the square root of the value of \ud835\udc65"], [0.07017930979156616, "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\nThe above code is a function to find the common elements in given nested lists.\n\ndef max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\nThe above code is a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to initialize lists of given length by empty one of the given data type.\n"], [0.07087559188107427, "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \nThe above code is a function to find whether a given array of integers contains any duplicate element.\n\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " returns an empty, nested list with the defined length.\n"], [0.06586274467677242, "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\nThe above code is a python function to check whether all the bits are unset in the given range or not.\n\ndef harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \nThe above code is a function that takes in an integer n and calculates the harmonic sum of n-1.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " snippet creates a dictionary empty_list of the type List of Dictionaries using Pythonic approach.\nprint('a', 'b', 'c', sep=':')\nThe above code snippet prints the words a, b, c using string seperated by :\nwith open(file, 'w') as file_write:   \n    file_write.write(file_content)\nThe above code snippet clears the file, opens existing file in write  mode then"], [0, "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \nThe above code is a python function to count the number of non-empty substrings of a given string.\n\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \nThe above code is a python function to find nth bell number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is List Comprehension over empty dicts.\n\"\"\""], [0.07173709008698421, "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \nThe above code is a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef Extract(lst): \n    return [item[0] for item in lst] \nThe above code is a python function to get the first element of each sublist.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " coverts a given integer to its corressponding empty dictionary.\n'''"], [0.06649168624340833, "def find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\n\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\nThe above code is a function to find the product of first even and odd number of a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a empty list, the length of which is passed as the function argument.\nSince, the unpacking operator is also known as splat operator.\n\n\n# Assignment 3\na=1,2,3,4,5,8\nx=tuple(a)\nprint(x)\ny=sum(x)\nprint(y)\nz=sum(x[x[0]])\nprint(z)\nm="], [0.06872081273642948, "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\nThe above code is a function to find the length of the longest palindromic subsequence in the given string.\n\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return res \nThe above code is a function to check if the given tuple has any none value or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of empty dictionaries and the length of list is provided by the user as argument.\n\n\n\n'''"], [0.07127233621466737, "def count(lst):   \n    return sum(lst) \nThe above code is a python function to count true booleans in the given list.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to make new list that contains empty dictionaries.\n"], [0.06580045407088082, "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\nThe above code is a function to calculate the maximum aggregate from the list of tuples.\n\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \nThe above code is a function to find common first element in given list of tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create list of dictionary with given length.\n\nConnect to DB \nDb.Database connection.\n\ncreate_cursor() --\ncreates a cursor object.\n\nexecute_query(sql_query) --\nexecutes the sql_query using cursor object.\n\ndisconnect() --\ncommits the transactions in database and closes the database connection.\n\nclose_cursor()\nCloses the cursor object.\nSQL query execution\n"], [0.07011884302757962, "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \nThe above code is a python function to count inversions in an array.\n\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \nThe above code is a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python anonymous function to append {} entries in an empty list of fixed length\n'''"], [0.06829129372248469, "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates an initialize an empty list of dictionaries. This is a very special nommenclature used in Python to create dynamic lists.\n\"\"\""], [0.06608720123137621, "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\nThe above code is a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef ascii_value(k):\n  ch=k\n  return ord(ch)\nThe above code is a function to find the ascii value of a character.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to initialize a list of required length to NONE in python. In our case, a list of 10000000 length is declared, which becomes the scope benchmark.\n\nfor i in tnrange(M, desc='loop'): # if you start celery workers for looping task, \n                               #change parallel_count to len(range(M)) and be len(Command(\"ls -l \"+path).run(), shell=True,\n                "], [0.07532833372668257, "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\nThe above code is a function to find all possible combinations of the elements of a given list.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " finds an empty list of a particular length."], [0.06660895841880769, "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \nThe above code is a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\nThe above code is a function to divide two lists element wise.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a empty list which can be initialized instantaneously.\n # dereference vs getrefcount\n 1. dict.items()\n 2. map(None, *(id, _) for id in ''.join(map(itemgetter(0), items)))\n 3. map(int, *os.getrefcount(id) for id in ''.join(map(itemgetter(0), items)))    \n # dereference the"], [0.06573903527570088, "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\nThe above code is a function to find the ration of positive numbers in an array of integers.\n\ndef find_sum(arr): \n    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\nThe above code is a python function to find the sum of non-repeated elements in a given list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is python function to list comprehension of size 'length' desired to be created.\nYou need to create a class from scratch called Car. \n\nThe Car class will have the following attributes. \n\n* manufacturer\n* car_name\n* model_name\n* model_number\n* car_color\n\nThe Car class will have the following methods. \n\n* car_description will print all attribute values.\n* car_sound() will play horn sound"], [0.07238766533112641, "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\nThe above code is a function to sort the given array by using shell sort.\n\ndef get_pairs_count(arr, sum):\n    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\nThe above code is a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns a list of dictionaries of size k.\n"], [0.06569254813249573, "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \nThe above code is a function to append the given list to the given tuples.\n\ndef max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \nThe above code is a python function to find a pair with highest product from a given array of integers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to let the system initialize a given number of empty objects.\n\n\n'''\n\n\n'''\nFile Handling\nTo open a file whose name is contained in a string variable file_name, use the built-in open() function.\nopen(file_name [, access_mode][, buffering]) \u2212 access_mode \u2212 This is optional parameter and the default access mode is \"rt\" (open for reading text). Other common values for this parameter"], [0.06972893597012145, "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\nThe above code is a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \nThe above code is a python function to find the sum of fourth power of first n odd natural numbers.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python code to build list of states in an empty list and returning it in required format.\n"], [0.06826383694127793, "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \nThe above code is a function to find the n'th lucas number.\n\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\nThe above code is a python function to check whether all the characters are same or not.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create a list of provided length filled with an empty dictionary. It can be used to populate the matrix.\n\n\n'''"], [0.06607226280074706, "def split_Arr(l, n):\n  return l[n:] + l[:n]\nThe above code is a python function to split a list at the nth eelment and add the first part to the end.\n\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\nThe above code is a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " returns a list of {} values.\n\n#Create arrays in different ways.\n\nnp.linspace(0,5)  # Five values evenly spaced between 0 and 5\nnp.logspace(0,5) # Five values logarithmically spaced bewteen 0 and 5\nnp.ones(3)  # Returns an array with length 3, with all values equal to 1\nnp.zeros(3) # Returns an array with length 3"], [0.0658213274659805, "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\nThe above code is a python function to find the element that appears only once in a sorted array.\n\ndef extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \nThe above code is a function to extract only the rear index element of each string in the given tuple.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to create empty list according to the given length.\nYou are given a set A and N number of other sets. these N number of sets have to perform some specific mutation operations on set A.\nYour task is to execute those operations and print the sum of elements from set A.\nInput :\nThe first line contains the number of elements in set A.\nThe second line contains the space separated list of elements in set A.\nThe following N lines are"], [0.07215802752600868, "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\nThe above code is a function to check if the given number is woodball or not.\n\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\nThe above code is a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is creating a list of dictonary, given the length of the list.\n"], [0.06595799552373913, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\nThe above code is a function to put spaces between words starting with capital letters in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a list comprehension to create list of empty dictionaries.\nThe PYTHONSTARTUP variable points to a file which is executed automatically when python shell is started for interactive mode.\n\nYou cannot change this import behavior by writing code. If you want to load the module interactively and you want a workaround, do this:\n\nPYTHONSTARTUP=$(realpath <startup_script>)\nAn alias can also be used because it'll not"], [0.07605344575572491, "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False\nThe above code is a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\nThe above code is a function to find the surface area of a cylinder.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a python function to an emplty list.\n"], [0.06628744661415063, "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \nThe above code is a function to remove characters from the first string which are present in the second string.\n\ndef snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert a snake case string to camel case string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create an empty list of dictionaries of specified length.\nimport numpy as np\na=np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\nprint(a)\nprint(a.shape)\nThe above code is to create a numpy array matrix of specified size.\n\nimport pandas as pd\ntables=pd.read_html(r'\\"], [0.0653554331266442, "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\nThe above code is a function to flatten a list and sum all of its elements.\n\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\nThe above code is a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to find an empty list of dictionaries of order length using list comprehension.\n\"\"\"\n#----------------------------------------------------------------\n\"\"\"\n10. Classes\nObjects have attributes and methods. Both attributes and methods are accessed using dot (.) notation.\nEXAMPLE\nIt is good practice to avoid global variables.\nSome consider global variables as poor programming practice. The reason for this is that it becomes more difficult to\nunderstand a program's source code when variables with the same name are"], [0.06623184040739147, "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume\nThe above code is a function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\nThe above code is a python function to count number of digits in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns a list of empty dates with a user provided length.\n\n# Question 2:\n# A.\n# *   Please use the following list. List1 is a MxNx3 3-dimensional list, where M and N are the number of rows and columns of the matrix respectively. The matrix stores squared values of integers. For example, on index-list1[0][0][0], list[0][0], and list1["], [0.06560454906287115, "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\nThe above code is a function to find cubes of individual elements in a list.\n\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\nThe above code is a function to replace whitespaces with an underscore and vice versa in a given string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to produce an empty list of length depending on the input given.\nGood case: \nThe above-written code A, B, C and D when run at their best produce the expected output (taking a few seconds to run vs a millisecond).\nBad case: \nAll above written code when run at their worst produce wrong output (usually also taking different amount of time to run)\n0- B can also take a differencety range of execution times depending"], [0.06599483759580116, "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \nThe above code is a python function to find element at a given index after number of rotations.\n\ndef index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \nThe above code is a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", ": \n1. First a blank list is created of size length by inner list comprehension of new list.\n2. Then the returned list is registered in empty_list\n3. Now whenever a new value is assigned to empty_list, iterative simplification of value happens to whatever it contains, regrading it as normal list.\nBuilt-in functions of list.\n\nIn python built-in functions are many which are useful in list manipulations. \n1"], [0.06852571125839095, "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\nThe above code is a function to find the list with maximum length.\n\ndef last_Digit(n) :\n    return (n % 10) \nThe above code is a python function to find the last digit of a given number.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is the python function is used to create a list shape in the given length with the output as : \n \nempty_list(3)\n[{}, {}, {}]\n"], [0.06631531703421319, "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList\nThe above code is a python function to find the element of a list having maximum length.\n\ndef second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\nThe above code is a function to find the second smallest number in a list.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to create a list of dictionary of given length.\nimport pandas as pd\nlst=input(\"Enter the vector space\")\nlst=lst.split(',')\nlst_data=[]\nfor i in lst:\n lst_data.append(input(\"Enter the vector data\"))\ndf=pd.DataFrame(lst_data,dtype='float',index=lst,columns=['Data"], [0.07145082700503615, "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result\nThe above code is a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\nimport re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\nThe above code is a function to convert the given snake case string to camel case string.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function that returns an empty list with given numeric value.\n'''"], [0.07240824880003217, "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\nThe above code is a python function to find the last digit in factorial of a given number.\n\ndef is_upper(string):\n  return (string.upper())\nThe above code is a python function to convert a given string to uppercase.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " returns an empty list of the given length.\n"], [0.06573169292724797, "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \nThe above code is a function to find minimum of three numbers.\n\ndef union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \nThe above code is a function to find the union of the elements of two given tuples and output them in sorted order.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " creates a list of size \u2018length\u2019 and assigning that list to the \u2018empty_list\u2019 variable.\nA tuple in Python is similar to a list. The difference between the two is that we cannot change the elements of a tuple once it is assigned whereas in a list, elements can be changed. Here tuple is defined in () where as list is defined with brackets [].\nhttps://www.w3schools.com/python/python_lists.asp"], [0.0667012255995405, "def check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\nThe above code is a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \nThe above code is a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " is a function to generate a list of empty objects of length specified within the function https://stackoverflow.com/questions/10712002/create-an-empty-list-in-python-with-certain-size - in this case a verbatim copy of test cases\n"], [0.06588462055792381, "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\nThe above code is a function to find words that are longer than n characters from a given list of words.\n\ndef highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \nThe above code is a python function to find the highest power of 2 that is less than or equal to n.\ndef empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list\nThe above code", " can be used to create an empty list of any length.\n# Write a program in Python to iterate through the list of numbers in the range of 1,100 and print the number which is divisible by 3 and a multiple of 2.\nfor x in range(1, 100):\n    if (x%3) == 0 and (x%2) == 0:\n        print x\n# Write a program in Python to reverse a string and print only the vowel"]]}
